/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class UTRAN_GANSSReferenceTime extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "UTRAN-GANSSReferenceTime";
   }

   protected Asn1Integer ganssTOD;
   protected Asn1Integer utran_GANSSTimingOfCell;  // optional
   protected UTRAN_GANSSReferenceTime_modeSpecificInfo modeSpecificInfo;  // optional
   protected Asn1Integer sfn;
   protected Asn1Integer ganss_TODUncertainty;  // optional
   protected Asn1OpenExt extElem1;

   public UTRAN_GANSSReferenceTime () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UTRAN_GANSSReferenceTime (
      Asn1Integer ganssTOD_,
      Asn1Integer utran_GANSSTimingOfCell_,
      UTRAN_GANSSReferenceTime_modeSpecificInfo modeSpecificInfo_,
      Asn1Integer sfn_,
      Asn1Integer ganss_TODUncertainty_
   ) throws Asn1Exception {
      super();
      setGanssTOD (ganssTOD_);
      setUtran_GANSSTimingOfCell (utran_GANSSTimingOfCell_);
      setModeSpecificInfo (modeSpecificInfo_);
      setSfn (sfn_);
      setGanss_TODUncertainty (ganss_TODUncertainty_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public UTRAN_GANSSReferenceTime (
      Asn1Integer ganssTOD_,
      Asn1Integer sfn_
   ) throws Asn1Exception {
      super();
      setGanssTOD (ganssTOD_);
      setSfn (sfn_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UTRAN_GANSSReferenceTime (long ganssTOD_,
      long utran_GANSSTimingOfCell_,
      UTRAN_GANSSReferenceTime_modeSpecificInfo modeSpecificInfo_,
      long sfn_,
      long ganss_TODUncertainty_
   ) throws Asn1Exception {
      super();
      setGanssTOD (ganssTOD_);
      setUtran_GANSSTimingOfCell (utran_GANSSTimingOfCell_);
      setModeSpecificInfo (modeSpecificInfo_);
      setSfn (sfn_);
      setGanss_TODUncertainty (ganss_TODUncertainty_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public UTRAN_GANSSReferenceTime (
      long ganssTOD_,
      long sfn_
   ) throws Asn1Exception {
      super();
      setGanssTOD (ganssTOD_);
      setSfn (sfn_);
   }

   public void init () {
      ganssTOD = null;
      utran_GANSSTimingOfCell = null;
      modeSpecificInfo = null;
      sfn = null;
      ganss_TODUncertainty = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof UTRAN_GANSSReferenceTime) ) return false;

      UTRAN_GANSSReferenceTime rhs = (UTRAN_GANSSReferenceTime) obj;

      if (ganssTOD == null) {
         if (rhs.ganssTOD != null) return false;
      }
      else {
         if (!ganssTOD.equals(rhs.ganssTOD)) {
            return false;
         }
      }

      if (utran_GANSSTimingOfCell == null) {
         if (rhs.utran_GANSSTimingOfCell != null) return false;
      }
      else {
         if (!utran_GANSSTimingOfCell.equals(rhs.utran_GANSSTimingOfCell)) {
            return false;
         }
      }

      if (modeSpecificInfo == null) {
         if (rhs.modeSpecificInfo != null) return false;
      }
      else {
         if (!modeSpecificInfo.equals(rhs.modeSpecificInfo)) {
            return false;
         }
      }

      if (sfn == null) {
         if (rhs.sfn != null) return false;
      }
      else {
         if (!sfn.equals(rhs.sfn)) {
            return false;
         }
      }

      if (ganss_TODUncertainty == null) {
         if (rhs.ganss_TODUncertainty != null) return false;
      }
      else {
         if (!ganss_TODUncertainty.equals(rhs.ganss_TODUncertainty)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (ganssTOD != null) __code = 31*__code + ganssTOD.hashCode();
      if (utran_GANSSTimingOfCell != null) __code = 31*__code + utran_GANSSTimingOfCell.hashCode();
      if (modeSpecificInfo != null) __code = 31*__code + modeSpecificInfo.hashCode();
      if (sfn != null) __code = 31*__code + sfn.hashCode();
      if (ganss_TODUncertainty != null) __code = 31*__code + ganss_TODUncertainty.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for GanssTOD
    */
   public Asn1Integer getGanssTOD () {
      return ganssTOD;
   }

   public void setGanssTOD (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 86399))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.ganssTOD = value;
   }

   public void setGanssTOD (long value) 
      throws Asn1Exception
   {
      setGanssTOD (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Utran_GANSSTimingOfCell
    */
   public Asn1Integer getUtran_GANSSTimingOfCell () {
      return utran_GANSSTimingOfCell;
   }

   public void setUtran_GANSSTimingOfCell (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 3999999))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.utran_GANSSTimingOfCell = value;
   }

   public void setUtran_GANSSTimingOfCell (long value) 
      throws Asn1Exception
   {
      setUtran_GANSSTimingOfCell (new Asn1Integer(value));
   }
   public boolean hasUtran_GANSSTimingOfCell () {
      return (utran_GANSSTimingOfCell != null);
   }

   /**
    * Accessor/mutator methods for ModeSpecificInfo
    */
   public UTRAN_GANSSReferenceTime_modeSpecificInfo getModeSpecificInfo () {
      return modeSpecificInfo;
   }

   public void setModeSpecificInfo (UTRAN_GANSSReferenceTime_modeSpecificInfo value) {
      this.modeSpecificInfo = value;
   }

   public boolean hasModeSpecificInfo () {
      return (modeSpecificInfo != null);
   }

   /**
    * Accessor/mutator methods for Sfn
    */
   public Asn1Integer getSfn () {
      return sfn;
   }

   public void setSfn (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sfn = value;
   }

   public void setSfn (long value) 
      throws Asn1Exception
   {
      setSfn (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Ganss_TODUncertainty
    */
   public Asn1Integer getGanss_TODUncertainty () {
      return ganss_TODUncertainty;
   }

   public void setGanss_TODUncertainty (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.ganss_TODUncertainty = value;
   }

   public void setGanss_TODUncertainty (long value) 
      throws Asn1Exception
   {
      setGanss_TODUncertainty (new Asn1Integer(value));
   }
   public boolean hasGanss_TODUncertainty () {
      return (ganss_TODUncertainty != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ganssTOD;
         case 1: return utran_GANSSTimingOfCell;
         case 2: return modeSpecificInfo;
         case 3: return sfn;
         case 4: return ganss_TODUncertainty;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ganssTOD";
         case 1: return "utran-GANSSTimingOfCell";
         case 2: return "modeSpecificInfo";
         case 3: return "sfn";
         case 4: return "ganss-TODUncertainty";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean utran_GANSSTimingOfCellPresent = buffer.decodeBit ("utran_GANSSTimingOfCellPresent");
      boolean modeSpecificInfoPresent = buffer.decodeBit ("modeSpecificInfoPresent");
      boolean ganss_TODUncertaintyPresent = buffer.decodeBit ("ganss_TODUncertaintyPresent");

      // decode ganssTOD

      buffer.getContext().eventDispatcher.startElement("ganssTOD", -1);

      ganssTOD = new Asn1Integer();
      ganssTOD.decode (buffer, 0, 86399);
      buffer.getContext().eventDispatcher.endElement("ganssTOD", -1);

      // decode utran_GANSSTimingOfCell

      if (utran_GANSSTimingOfCellPresent) {
         buffer.getContext().eventDispatcher.startElement("utran_GANSSTimingOfCell", -1);

         utran_GANSSTimingOfCell = new Asn1Integer();
         utran_GANSSTimingOfCell.decode (buffer, 0, 3999999);
         buffer.getContext().eventDispatcher.endElement("utran_GANSSTimingOfCell", -1);
      }
      else {
         utran_GANSSTimingOfCell = null;
      }

      // decode modeSpecificInfo

      if (modeSpecificInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("modeSpecificInfo", -1);

         modeSpecificInfo = new UTRAN_GANSSReferenceTime_modeSpecificInfo();
         modeSpecificInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("modeSpecificInfo", -1);
      }
      else {
         modeSpecificInfo = null;
      }

      // decode sfn

      buffer.getContext().eventDispatcher.startElement("sfn", -1);

      sfn = new Asn1Integer();
      sfn.decode (buffer, 0, 4095);
      buffer.getContext().eventDispatcher.endElement("sfn", -1);

      // decode ganss_TODUncertainty

      if (ganss_TODUncertaintyPresent) {
         buffer.getContext().eventDispatcher.startElement("ganss_TODUncertainty", -1);

         ganss_TODUncertainty = new Asn1Integer();
         ganss_TODUncertainty.decode (buffer, 0, 127);
         buffer.getContext().eventDispatcher.endElement("ganss_TODUncertainty", -1);
      }
      else {
         ganss_TODUncertainty = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((utran_GANSSTimingOfCell != null), null);
      buffer.encodeBit ((modeSpecificInfo != null), null);
      buffer.encodeBit ((ganss_TODUncertainty != null), null);

      // encode ganssTOD

      if (ganssTOD != null) {
         buffer.getContext().eventDispatcher.startElement("ganssTOD", -1);

         ganssTOD.encode (buffer, 0, 86399);

         buffer.getContext().eventDispatcher.endElement("ganssTOD", -1);
      }
      else throw new Asn1MissingRequiredException ("ganssTOD");

      // encode utran_GANSSTimingOfCell

      if (utran_GANSSTimingOfCell != null) {
         buffer.getContext().eventDispatcher.startElement("utran_GANSSTimingOfCell", -1);

         utran_GANSSTimingOfCell.encode (buffer, 0, 3999999);

         buffer.getContext().eventDispatcher.endElement("utran_GANSSTimingOfCell", -1);
      }

      // encode modeSpecificInfo

      if (modeSpecificInfo != null) {
         buffer.getContext().eventDispatcher.startElement("modeSpecificInfo", -1);

         modeSpecificInfo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("modeSpecificInfo", -1);
      }

      // encode sfn

      if (sfn != null) {
         buffer.getContext().eventDispatcher.startElement("sfn", -1);

         sfn.encode (buffer, 0, 4095);

         buffer.getContext().eventDispatcher.endElement("sfn", -1);
      }
      else throw new Asn1MissingRequiredException ("sfn");

      // encode ganss_TODUncertainty

      if (ganss_TODUncertainty != null) {
         buffer.getContext().eventDispatcher.startElement("ganss_TODUncertainty", -1);

         ganss_TODUncertainty.encode (buffer, 0, 127);

         buffer.getContext().eventDispatcher.endElement("ganss_TODUncertainty", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
