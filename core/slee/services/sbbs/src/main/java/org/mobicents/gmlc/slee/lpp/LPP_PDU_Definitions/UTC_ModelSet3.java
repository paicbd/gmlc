/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class UTC_ModelSet3 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "UTC-ModelSet3";
   }

   protected Asn1Integer nA;
   protected Asn1Integer tauC;
   protected Asn1Integer b1;  // optional
   protected Asn1Integer b2;  // optional
   protected Asn1BitString kp;  // optional
   protected Asn1OpenExt extElem1;

   public UTC_ModelSet3 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UTC_ModelSet3 (
      Asn1Integer nA_,
      Asn1Integer tauC_,
      Asn1Integer b1_,
      Asn1Integer b2_,
      Asn1BitString kp_
   ) throws Asn1Exception {
      super();
      setNA (nA_);
      setTauC (tauC_);
      setB1 (b1_);
      setB2 (b2_);
      setKp (kp_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public UTC_ModelSet3 (
      Asn1Integer nA_,
      Asn1Integer tauC_
   ) throws Asn1Exception {
      super();
      setNA (nA_);
      setTauC (tauC_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UTC_ModelSet3 (long nA_,
      long tauC_,
      long b1_,
      long b2_,
      Asn1BitString kp_
   ) throws Asn1Exception {
      super();
      setNA (nA_);
      setTauC (tauC_);
      setB1 (b1_);
      setB2 (b2_);
      setKp (kp_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public UTC_ModelSet3 (
      long nA_,
      long tauC_
   ) throws Asn1Exception {
      super();
      setNA (nA_);
      setTauC (tauC_);
   }

   public void init () {
      nA = null;
      tauC = null;
      b1 = null;
      b2 = null;
      kp = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof UTC_ModelSet3) ) return false;

      UTC_ModelSet3 rhs = (UTC_ModelSet3) obj;

      if (nA == null) {
         if (rhs.nA != null) return false;
      }
      else {
         if (!nA.equals(rhs.nA)) {
            return false;
         }
      }

      if (tauC == null) {
         if (rhs.tauC != null) return false;
      }
      else {
         if (!tauC.equals(rhs.tauC)) {
            return false;
         }
      }

      if (b1 == null) {
         if (rhs.b1 != null) return false;
      }
      else {
         if (!b1.equals(rhs.b1)) {
            return false;
         }
      }

      if (b2 == null) {
         if (rhs.b2 != null) return false;
      }
      else {
         if (!b2.equals(rhs.b2)) {
            return false;
         }
      }

      if (kp == null) {
         if (rhs.kp != null) return false;
      }
      else {
         if (!kp.equals(rhs.kp)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (nA != null) __code = 31*__code + nA.hashCode();
      if (tauC != null) __code = 31*__code + tauC.hashCode();
      if (b1 != null) __code = 31*__code + b1.hashCode();
      if (b2 != null) __code = 31*__code + b2.hashCode();
      if (kp != null) __code = 31*__code + kp.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for NA
    */
   public Asn1Integer getNA () {
      return nA;
   }

   public void setNA (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 1461))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nA = value;
   }

   public void setNA (long value) 
      throws Asn1Exception
   {
      setNA (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for TauC
    */
   public Asn1Integer getTauC () {
      return tauC;
   }

   public void setTauC (Asn1Integer value) 
      throws Asn1Exception
   {
      this.tauC = value;
   }

   public void setTauC (long value) 
      throws Asn1Exception
   {
      setTauC (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for B1
    */
   public Asn1Integer getB1 () {
      return b1;
   }

   public void setB1 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1024 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.b1 = value;
   }

   public void setB1 (long value) 
      throws Asn1Exception
   {
      setB1 (new Asn1Integer(value));
   }
   public boolean hasB1 () {
      return (b1 != null);
   }

   /**
    * Accessor/mutator methods for B2
    */
   public Asn1Integer getB2 () {
      return b2;
   }

   public void setB2 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -512 && value.value <= 511))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.b2 = value;
   }

   public void setB2 (long value) 
      throws Asn1Exception
   {
      setB2 (new Asn1Integer(value));
   }
   public boolean hasB2 () {
      return (b2 != null);
   }

   /**
    * Accessor/mutator methods for Kp
    */
   public Asn1BitString getKp () {
      return kp;
   }

   public void setKp (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 2)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.kp = value;
   }

   public boolean hasKp () {
      return (kp != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return nA;
         case 1: return tauC;
         case 2: return b1;
         case 3: return b2;
         case 4: return kp;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "nA";
         case 1: return "tauC";
         case 2: return "b1";
         case 3: return "b2";
         case 4: return "kp";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean b1Present = buffer.decodeBit ("b1Present");
      boolean b2Present = buffer.decodeBit ("b2Present");
      boolean kpPresent = buffer.decodeBit ("kpPresent");

      // decode nA

      buffer.getContext().eventDispatcher.startElement("nA", -1);

      nA = new Asn1Integer();
      nA.decode (buffer, 1, 1461);
      buffer.getContext().eventDispatcher.endElement("nA", -1);

      // decode tauC

      buffer.getContext().eventDispatcher.startElement("tauC", -1);

      tauC = new Asn1Integer();
      tauC.decode (buffer, -2147483648, 2147483647);
      buffer.getContext().eventDispatcher.endElement("tauC", -1);

      // decode b1

      if (b1Present) {
         buffer.getContext().eventDispatcher.startElement("b1", -1);

         b1 = new Asn1Integer();
         b1.decode (buffer, -1024, 1023);
         buffer.getContext().eventDispatcher.endElement("b1", -1);
      }
      else {
         b1 = null;
      }

      // decode b2

      if (b2Present) {
         buffer.getContext().eventDispatcher.startElement("b2", -1);

         b2 = new Asn1Integer();
         b2.decode (buffer, -512, 511);
         buffer.getContext().eventDispatcher.endElement("b2", -1);
      }
      else {
         b2 = null;
      }

      // decode kp

      if (kpPresent) {
         buffer.getContext().eventDispatcher.startElement("kp", -1);

         kp = new Asn1BitString();
         kp.decode (buffer, 2, 2);
         buffer.getContext().eventDispatcher.endElement("kp", -1);
      }
      else {
         kp = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((b1 != null), null);
      buffer.encodeBit ((b2 != null), null);
      buffer.encodeBit ((kp != null), null);

      // encode nA

      if (nA != null) {
         buffer.getContext().eventDispatcher.startElement("nA", -1);

         nA.encode (buffer, 1, 1461);

         buffer.getContext().eventDispatcher.endElement("nA", -1);
      }
      else throw new Asn1MissingRequiredException ("nA");

      // encode tauC

      if (tauC != null) {
         buffer.getContext().eventDispatcher.startElement("tauC", -1);

         tauC.encode (buffer, -2147483648, 2147483647);

         buffer.getContext().eventDispatcher.endElement("tauC", -1);
      }
      else throw new Asn1MissingRequiredException ("tauC");

      // encode b1

      if (b1 != null) {
         buffer.getContext().eventDispatcher.startElement("b1", -1);

         b1.encode (buffer, -1024, 1023);

         buffer.getContext().eventDispatcher.endElement("b1", -1);
      }

      // encode b2

      if (b2 != null) {
         buffer.getContext().eventDispatcher.startElement("b2", -1);

         b2.encode (buffer, -512, 511);

         buffer.getContext().eventDispatcher.endElement("b2", -1);
      }

      // encode kp

      if (kp != null) {
         buffer.getContext().eventDispatcher.startElement("kp", -1);

         kp.encode (buffer, 2, 2);

         buffer.getContext().eventDispatcher.endElement("kp", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
