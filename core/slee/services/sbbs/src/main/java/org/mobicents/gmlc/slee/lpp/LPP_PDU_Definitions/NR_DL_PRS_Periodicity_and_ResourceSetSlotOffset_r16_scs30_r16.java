/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NR_DL_PRS_Periodicity_and_ResourceSetSlotOffset_r16_scs30_r16 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _N8_R16 = 1;
   public final static byte _N10_R16 = 2;
   public final static byte _N16_R16 = 3;
   public final static byte _N20_R16 = 4;
   public final static byte _N32_R16 = 5;
   public final static byte _N40_R16 = 6;
   public final static byte _N64_R16 = 7;
   public final static byte _N80_R16 = 8;
   public final static byte _N128_R16 = 9;
   public final static byte _N160_R16 = 10;
   public final static byte _N320_R16 = 11;
   public final static byte _N640_R16 = 12;
   public final static byte _N1280_R16 = 13;
   public final static byte _N2560_R16 = 14;
   public final static byte _N5120_R16 = 15;
   public final static byte _N10240_R16 = 16;
   public final static byte _N20480_R16 = 17;
   public final static byte _EXTELEM1 = 18;

   public NR_DL_PRS_Periodicity_and_ResourceSetSlotOffset_r16_scs30_r16 () {
      super();
   }

   public NR_DL_PRS_Periodicity_and_ResourceSetSlotOffset_r16_scs30_r16 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _N8_R16: return "n8_r16";
      case _N10_R16: return "n10_r16";
      case _N16_R16: return "n16_r16";
      case _N20_R16: return "n20_r16";
      case _N32_R16: return "n32_r16";
      case _N40_R16: return "n40_r16";
      case _N64_R16: return "n64_r16";
      case _N80_R16: return "n80_r16";
      case _N128_R16: return "n128_r16";
      case _N160_R16: return "n160_r16";
      case _N320_R16: return "n320_r16";
      case _N640_R16: return "n640_r16";
      case _N1280_R16: return "n1280_r16";
      case _N2560_R16: return "n2560_r16";
      case _N5120_R16: return "n5120_r16";
      case _N10240_R16: return "n10240_r16";
      case _N20480_R16: return "n20480_r16";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for n8_r16
    */
   public Asn1Integer getN8_r16 () {
      return (choiceID == _N8_R16) ? (Asn1Integer)element : null;
   }
   public void setN8_r16 (Asn1Integer value) {
      setElement (_N8_R16, value);
   }
   public boolean isN8_r16 () {
      return (choiceID == _N8_R16);
   }

   /**
    * Accessor/mutator methods for n10_r16
    */
   public Asn1Integer getN10_r16 () {
      return (choiceID == _N10_R16) ? (Asn1Integer)element : null;
   }
   public void setN10_r16 (Asn1Integer value) {
      setElement (_N10_R16, value);
   }
   public boolean isN10_r16 () {
      return (choiceID == _N10_R16);
   }

   /**
    * Accessor/mutator methods for n16_r16
    */
   public Asn1Integer getN16_r16 () {
      return (choiceID == _N16_R16) ? (Asn1Integer)element : null;
   }
   public void setN16_r16 (Asn1Integer value) {
      setElement (_N16_R16, value);
   }
   public boolean isN16_r16 () {
      return (choiceID == _N16_R16);
   }

   /**
    * Accessor/mutator methods for n20_r16
    */
   public Asn1Integer getN20_r16 () {
      return (choiceID == _N20_R16) ? (Asn1Integer)element : null;
   }
   public void setN20_r16 (Asn1Integer value) {
      setElement (_N20_R16, value);
   }
   public boolean isN20_r16 () {
      return (choiceID == _N20_R16);
   }

   /**
    * Accessor/mutator methods for n32_r16
    */
   public Asn1Integer getN32_r16 () {
      return (choiceID == _N32_R16) ? (Asn1Integer)element : null;
   }
   public void setN32_r16 (Asn1Integer value) {
      setElement (_N32_R16, value);
   }
   public boolean isN32_r16 () {
      return (choiceID == _N32_R16);
   }

   /**
    * Accessor/mutator methods for n40_r16
    */
   public Asn1Integer getN40_r16 () {
      return (choiceID == _N40_R16) ? (Asn1Integer)element : null;
   }
   public void setN40_r16 (Asn1Integer value) {
      setElement (_N40_R16, value);
   }
   public boolean isN40_r16 () {
      return (choiceID == _N40_R16);
   }

   /**
    * Accessor/mutator methods for n64_r16
    */
   public Asn1Integer getN64_r16 () {
      return (choiceID == _N64_R16) ? (Asn1Integer)element : null;
   }
   public void setN64_r16 (Asn1Integer value) {
      setElement (_N64_R16, value);
   }
   public boolean isN64_r16 () {
      return (choiceID == _N64_R16);
   }

   /**
    * Accessor/mutator methods for n80_r16
    */
   public Asn1Integer getN80_r16 () {
      return (choiceID == _N80_R16) ? (Asn1Integer)element : null;
   }
   public void setN80_r16 (Asn1Integer value) {
      setElement (_N80_R16, value);
   }
   public boolean isN80_r16 () {
      return (choiceID == _N80_R16);
   }

   /**
    * Accessor/mutator methods for n128_r16
    */
   public Asn1Integer getN128_r16 () {
      return (choiceID == _N128_R16) ? (Asn1Integer)element : null;
   }
   public void setN128_r16 (Asn1Integer value) {
      setElement (_N128_R16, value);
   }
   public boolean isN128_r16 () {
      return (choiceID == _N128_R16);
   }

   /**
    * Accessor/mutator methods for n160_r16
    */
   public Asn1Integer getN160_r16 () {
      return (choiceID == _N160_R16) ? (Asn1Integer)element : null;
   }
   public void setN160_r16 (Asn1Integer value) {
      setElement (_N160_R16, value);
   }
   public boolean isN160_r16 () {
      return (choiceID == _N160_R16);
   }

   /**
    * Accessor/mutator methods for n320_r16
    */
   public Asn1Integer getN320_r16 () {
      return (choiceID == _N320_R16) ? (Asn1Integer)element : null;
   }
   public void setN320_r16 (Asn1Integer value) {
      setElement (_N320_R16, value);
   }
   public boolean isN320_r16 () {
      return (choiceID == _N320_R16);
   }

   /**
    * Accessor/mutator methods for n640_r16
    */
   public Asn1Integer getN640_r16 () {
      return (choiceID == _N640_R16) ? (Asn1Integer)element : null;
   }
   public void setN640_r16 (Asn1Integer value) {
      setElement (_N640_R16, value);
   }
   public boolean isN640_r16 () {
      return (choiceID == _N640_R16);
   }

   /**
    * Accessor/mutator methods for n1280_r16
    */
   public Asn1Integer getN1280_r16 () {
      return (choiceID == _N1280_R16) ? (Asn1Integer)element : null;
   }
   public void setN1280_r16 (Asn1Integer value) {
      setElement (_N1280_R16, value);
   }
   public boolean isN1280_r16 () {
      return (choiceID == _N1280_R16);
   }

   /**
    * Accessor/mutator methods for n2560_r16
    */
   public Asn1Integer getN2560_r16 () {
      return (choiceID == _N2560_R16) ? (Asn1Integer)element : null;
   }
   public void setN2560_r16 (Asn1Integer value) {
      setElement (_N2560_R16, value);
   }
   public boolean isN2560_r16 () {
      return (choiceID == _N2560_R16);
   }

   /**
    * Accessor/mutator methods for n5120_r16
    */
   public Asn1Integer getN5120_r16 () {
      return (choiceID == _N5120_R16) ? (Asn1Integer)element : null;
   }
   public void setN5120_r16 (Asn1Integer value) {
      setElement (_N5120_R16, value);
   }
   public boolean isN5120_r16 () {
      return (choiceID == _N5120_R16);
   }

   /**
    * Accessor/mutator methods for n10240_r16
    */
   public Asn1Integer getN10240_r16 () {
      return (choiceID == _N10240_R16) ? (Asn1Integer)element : null;
   }
   public void setN10240_r16 (Asn1Integer value) {
      setElement (_N10240_R16, value);
   }
   public boolean isN10240_r16 () {
      return (choiceID == _N10240_R16);
   }

   /**
    * Accessor/mutator methods for n20480_r16
    */
   public Asn1Integer getN20480_r16 () {
      return (choiceID == _N20480_R16) ? (Asn1Integer)element : null;
   }
   public void setN20480_r16 (Asn1Integer value) {
      setElement (_N20480_R16, value);
   }
   public boolean isN20480_r16 () {
      return (choiceID == _N20480_R16);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (17, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // n8_r16
            case 0: { 
               Asn1Integer n8_r16;
               element = n8_r16 = new Asn1Integer();
               n8_r16.decode (buffer, 0, 7);
               break;
            }

            // n10_r16
            case 1: { 
               Asn1Integer n10_r16;
               element = n10_r16 = new Asn1Integer();
               n10_r16.decode (buffer, 0, 9);
               break;
            }

            // n16_r16
            case 2: { 
               Asn1Integer n16_r16;
               element = n16_r16 = new Asn1Integer();
               n16_r16.decode (buffer, 0, 15);
               break;
            }

            // n20_r16
            case 3: { 
               Asn1Integer n20_r16;
               element = n20_r16 = new Asn1Integer();
               n20_r16.decode (buffer, 0, 19);
               break;
            }

            // n32_r16
            case 4: { 
               Asn1Integer n32_r16;
               element = n32_r16 = new Asn1Integer();
               n32_r16.decode (buffer, 0, 31);
               break;
            }

            // n40_r16
            case 5: { 
               Asn1Integer n40_r16;
               element = n40_r16 = new Asn1Integer();
               n40_r16.decode (buffer, 0, 39);
               break;
            }

            // n64_r16
            case 6: { 
               Asn1Integer n64_r16;
               element = n64_r16 = new Asn1Integer();
               n64_r16.decode (buffer, 0, 63);
               break;
            }

            // n80_r16
            case 7: { 
               Asn1Integer n80_r16;
               element = n80_r16 = new Asn1Integer();
               n80_r16.decode (buffer, 0, 79);
               break;
            }

            // n128_r16
            case 8: { 
               Asn1Integer n128_r16;
               element = n128_r16 = new Asn1Integer();
               n128_r16.decode (buffer, 0, 127);
               break;
            }

            // n160_r16
            case 9: { 
               Asn1Integer n160_r16;
               element = n160_r16 = new Asn1Integer();
               n160_r16.decode (buffer, 0, 159);
               break;
            }

            // n320_r16
            case 10: { 
               Asn1Integer n320_r16;
               element = n320_r16 = new Asn1Integer();
               n320_r16.decode (buffer, 0, 319);
               break;
            }

            // n640_r16
            case 11: { 
               Asn1Integer n640_r16;
               element = n640_r16 = new Asn1Integer();
               n640_r16.decode (buffer, 0, 639);
               break;
            }

            // n1280_r16
            case 12: { 
               Asn1Integer n1280_r16;
               element = n1280_r16 = new Asn1Integer();
               n1280_r16.decode (buffer, 0, 1279);
               break;
            }

            // n2560_r16
            case 13: { 
               Asn1Integer n2560_r16;
               element = n2560_r16 = new Asn1Integer();
               n2560_r16.decode (buffer, 0, 2559);
               break;
            }

            // n5120_r16
            case 14: { 
               Asn1Integer n5120_r16;
               element = n5120_r16 = new Asn1Integer();
               n5120_r16.decode (buffer, 0, 5119);
               break;
            }

            // n10240_r16
            case 15: { 
               Asn1Integer n10240_r16;
               element = n10240_r16 = new Asn1Integer();
               n10240_r16.decode (buffer, 0, 10239);
               break;
            }

            // n20480_r16
            case 16: { 
               Asn1Integer n20480_r16;
               element = n20480_r16 = new Asn1Integer();
               n20480_r16.decode (buffer, 0, 20479);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 18;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         setElement (_EXTELEM1, openType);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 17);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 17, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // n8_r16
            case _N8_R16:
               Asn1Integer n8_r16 = (Asn1Integer) element;
               n8_r16.encode (buffer, 0, 7);
               break;

            // n10_r16
            case _N10_R16:
               Asn1Integer n10_r16 = (Asn1Integer) element;
               n10_r16.encode (buffer, 0, 9);
               break;

            // n16_r16
            case _N16_R16:
               Asn1Integer n16_r16 = (Asn1Integer) element;
               n16_r16.encode (buffer, 0, 15);
               break;

            // n20_r16
            case _N20_R16:
               Asn1Integer n20_r16 = (Asn1Integer) element;
               n20_r16.encode (buffer, 0, 19);
               break;

            // n32_r16
            case _N32_R16:
               Asn1Integer n32_r16 = (Asn1Integer) element;
               n32_r16.encode (buffer, 0, 31);
               break;

            // n40_r16
            case _N40_R16:
               Asn1Integer n40_r16 = (Asn1Integer) element;
               n40_r16.encode (buffer, 0, 39);
               break;

            // n64_r16
            case _N64_R16:
               Asn1Integer n64_r16 = (Asn1Integer) element;
               n64_r16.encode (buffer, 0, 63);
               break;

            // n80_r16
            case _N80_R16:
               Asn1Integer n80_r16 = (Asn1Integer) element;
               n80_r16.encode (buffer, 0, 79);
               break;

            // n128_r16
            case _N128_R16:
               Asn1Integer n128_r16 = (Asn1Integer) element;
               n128_r16.encode (buffer, 0, 127);
               break;

            // n160_r16
            case _N160_R16:
               Asn1Integer n160_r16 = (Asn1Integer) element;
               n160_r16.encode (buffer, 0, 159);
               break;

            // n320_r16
            case _N320_R16:
               Asn1Integer n320_r16 = (Asn1Integer) element;
               n320_r16.encode (buffer, 0, 319);
               break;

            // n640_r16
            case _N640_R16:
               Asn1Integer n640_r16 = (Asn1Integer) element;
               n640_r16.encode (buffer, 0, 639);
               break;

            // n1280_r16
            case _N1280_R16:
               Asn1Integer n1280_r16 = (Asn1Integer) element;
               n1280_r16.encode (buffer, 0, 1279);
               break;

            // n2560_r16
            case _N2560_R16:
               Asn1Integer n2560_r16 = (Asn1Integer) element;
               n2560_r16.encode (buffer, 0, 2559);
               break;

            // n5120_r16
            case _N5120_R16:
               Asn1Integer n5120_r16 = (Asn1Integer) element;
               n5120_r16.encode (buffer, 0, 5119);
               break;

            // n10240_r16
            case _N10240_R16:
               Asn1Integer n10240_r16 = (Asn1Integer) element;
               n10240_r16.encode (buffer, 0, 10239);
               break;

            // n20480_r16
            case _N20480_R16:
               Asn1Integer n20480_r16 = (Asn1Integer) element;
               n20480_r16.encode (buffer, 0, 20479);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 18);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1OpenType openType = (Asn1OpenType) element;
         buffer.byteAlign();
         openType.encode (buffer);
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
