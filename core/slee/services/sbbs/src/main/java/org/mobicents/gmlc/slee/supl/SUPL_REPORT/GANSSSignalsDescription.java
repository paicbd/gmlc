/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_REPORT;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.GANSSSignals;

public class GANSSSignalsDescription extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_REPORTRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_REPORTRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GANSSSignalsDescription";
   }

   protected Asn1Integer ganssId;
   protected GANSSSignals gANSSSignals;
   protected Asn1OpenExt extElem1;

   public GANSSSignalsDescription () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GANSSSignalsDescription (
      Asn1Integer ganssId_,
      GANSSSignals gANSSSignals_
   ) throws Asn1Exception {
      super();
      setGanssId (ganssId_);
      setGANSSSignals (gANSSSignals_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GANSSSignalsDescription (long ganssId_,
      GANSSSignals gANSSSignals_
   ) throws Asn1Exception {
      super();
      setGanssId (ganssId_);
      setGANSSSignals (gANSSSignals_);
   }

   public void init () {
      ganssId = null;
      gANSSSignals = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GANSSSignalsDescription) ) return false;

      GANSSSignalsDescription rhs = (GANSSSignalsDescription) obj;

      if (ganssId == null) {
         if (rhs.ganssId != null) return false;
      }
      else {
         if (!ganssId.equals(rhs.ganssId)) {
            return false;
         }
      }

      if (gANSSSignals == null) {
         if (rhs.gANSSSignals != null) return false;
      }
      else {
         if (!gANSSSignals.equals(rhs.gANSSSignals)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (ganssId != null) __code = 31*__code + ganssId.hashCode();
      if (gANSSSignals != null) __code = 31*__code + gANSSSignals.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for GanssId
    */
   public Asn1Integer getGanssId () {
      return ganssId;
   }

   public void setGanssId (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.ganssId = value;
   }

   public void setGanssId (long value) 
      throws Asn1Exception
   {
      setGanssId (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GANSSSignals
    */
   public GANSSSignals getGANSSSignals () {
      return gANSSSignals;
   }

   public void setGANSSSignals (GANSSSignals value) 
      throws Asn1Exception
   {
      if (!((value.getLength() >= 1 && value.getLength() <= 8))) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.gANSSSignals = value;
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ganssId;
         case 1: return gANSSSignals;
         case 2: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ganssId";
         case 1: return "gANSSSignals";
         case 2: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode ganssId

      buffer.getContext().eventDispatcher.startElement("ganssId", -1);

      ganssId = new Asn1Integer();
      ganssId.decode (buffer, 0, 15);
      buffer.getContext().eventDispatcher.endElement("ganssId", -1);

      // decode gANSSSignals

      buffer.getContext().eventDispatcher.startElement("gANSSSignals", -1);

      gANSSSignals = new GANSSSignals();
      gANSSSignals.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("gANSSSignals", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode ganssId

      if (ganssId != null) {
         buffer.getContext().eventDispatcher.startElement("ganssId", -1);

         ganssId.encode (buffer, 0, 15);

         buffer.getContext().eventDispatcher.endElement("ganssId", -1);
      }
      else throw new Asn1MissingRequiredException ("ganssId");

      // encode gANSSSignals

      if (gANSSSignals != null) {
         buffer.getContext().eventDispatcher.startElement("gANSSSignals", -1);

         gANSSSignals.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gANSSSignals", -1);
      }
      else throw new Asn1MissingRequiredException ("gANSSSignals");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
