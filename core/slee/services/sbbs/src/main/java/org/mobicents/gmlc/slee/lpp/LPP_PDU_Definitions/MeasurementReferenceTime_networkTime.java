/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasurementReferenceTime_networkTime extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _EUTRA = 1;
   public final static byte _UTRA = 2;
   public final static byte _GSM = 3;
   public final static byte _NBIOT_R14 = 4;
   public final static byte _NR_R15 = 5;
   public final static byte _EXTELEM1 = 6;

   public MeasurementReferenceTime_networkTime () {
      super();
   }

   public MeasurementReferenceTime_networkTime (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _EUTRA: return "eUTRA";
      case _UTRA: return "uTRA";
      case _GSM: return "gSM";
      case _NBIOT_R14: return "nbIoT_r14";
      case _NR_R15: return "nr_r15";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for eUTRA
    */
   public MeasurementReferenceTime_networkTime_eUTRA getEUTRA () {
      return (choiceID == _EUTRA) ? (MeasurementReferenceTime_networkTime_eUTRA)element : null;
   }
   public void setEUTRA (MeasurementReferenceTime_networkTime_eUTRA value) {
      setElement (_EUTRA, value);
   }
   public boolean isEUTRA () {
      return (choiceID == _EUTRA);
   }

   /**
    * Accessor/mutator methods for uTRA
    */
   public MeasurementReferenceTime_networkTime_uTRA getUTRA () {
      return (choiceID == _UTRA) ? (MeasurementReferenceTime_networkTime_uTRA)element : null;
   }
   public void setUTRA (MeasurementReferenceTime_networkTime_uTRA value) {
      setElement (_UTRA, value);
   }
   public boolean isUTRA () {
      return (choiceID == _UTRA);
   }

   /**
    * Accessor/mutator methods for gSM
    */
   public MeasurementReferenceTime_networkTime_gSM getGSM () {
      return (choiceID == _GSM) ? (MeasurementReferenceTime_networkTime_gSM)element : null;
   }
   public void setGSM (MeasurementReferenceTime_networkTime_gSM value) {
      setElement (_GSM, value);
   }
   public boolean isGSM () {
      return (choiceID == _GSM);
   }

   /**
    * Accessor/mutator methods for nbIoT_r14
    */
   public MeasurementReferenceTime_networkTime_nbIoT_r14 getNbIoT_r14 () {
      return (choiceID == _NBIOT_R14) ? (MeasurementReferenceTime_networkTime_nbIoT_r14)element : null;
   }
   public void setNbIoT_r14 (MeasurementReferenceTime_networkTime_nbIoT_r14 value) {
      setElement (_NBIOT_R14, value);
   }
   public boolean isNbIoT_r14 () {
      return (choiceID == _NBIOT_R14);
   }

   /**
    * Accessor/mutator methods for nr_r15
    */
   public MeasurementReferenceTime_networkTime_nr_r15 getNr_r15 () {
      return (choiceID == _NR_R15) ? (MeasurementReferenceTime_networkTime_nr_r15)element : null;
   }
   public void setNr_r15 (MeasurementReferenceTime_networkTime_nr_r15 value) {
      setElement (_NR_R15, value);
   }
   public boolean isNr_r15 () {
      return (choiceID == _NR_R15);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (3, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // eUTRA
            case 0: { 
               MeasurementReferenceTime_networkTime_eUTRA eUTRA;
               element = eUTRA = new MeasurementReferenceTime_networkTime_eUTRA();
               eUTRA.decode (buffer);
               break;
            }

            // uTRA
            case 1: { 
               MeasurementReferenceTime_networkTime_uTRA uTRA;
               element = uTRA = new MeasurementReferenceTime_networkTime_uTRA();
               uTRA.decode (buffer);
               break;
            }

            // gSM
            case 2: { 
               MeasurementReferenceTime_networkTime_gSM gSM;
               element = gSM = new MeasurementReferenceTime_networkTime_gSM();
               gSM.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 4;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // nbIoT_r14
            case 0: { 
               MeasurementReferenceTime_networkTime_nbIoT_r14 nbIoT_r14;
               element = nbIoT_r14 = new MeasurementReferenceTime_networkTime_nbIoT_r14();
               nbIoT_r14.decode (buffer);
               break;
            }

            // nr_r15
            case 1: { 
               MeasurementReferenceTime_networkTime_nr_r15 nr_r15;
               element = nr_r15 = new MeasurementReferenceTime_networkTime_nr_r15();
               nr_r15.decode (buffer);
               break;
            }

            // extElem1
            case 2: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 3);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 3, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // eUTRA
            case _EUTRA:
               MeasurementReferenceTime_networkTime_eUTRA eUTRA = (MeasurementReferenceTime_networkTime_eUTRA) element;
               eUTRA.encode (buffer);
               break;

            // uTRA
            case _UTRA:
               MeasurementReferenceTime_networkTime_uTRA uTRA = (MeasurementReferenceTime_networkTime_uTRA) element;
               uTRA.encode (buffer);
               break;

            // gSM
            case _GSM:
               MeasurementReferenceTime_networkTime_gSM gSM = (MeasurementReferenceTime_networkTime_gSM) element;
               gSM.encode (buffer);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 4);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1PerEncodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());
         Asn1OpenType openType;

         switch (choiceID) {
            // nbIoT_r14
            case _NBIOT_R14:
               MeasurementReferenceTime_networkTime_nbIoT_r14 nbIoT_r14 = (MeasurementReferenceTime_networkTime_nbIoT_r14) element;
               nbIoT_r14.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            // nr_r15
            case _NR_R15:
               MeasurementReferenceTime_networkTime_nr_r15 nr_r15 = (MeasurementReferenceTime_networkTime_nr_r15) element;
               nr_r15.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            default:
               openType = (Asn1OpenType)getElement();
         }

         buffer = savedBuffer;
         if (openType != null) {
            buffer.byteAlign();
            openType.encode (buffer);
         }
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
