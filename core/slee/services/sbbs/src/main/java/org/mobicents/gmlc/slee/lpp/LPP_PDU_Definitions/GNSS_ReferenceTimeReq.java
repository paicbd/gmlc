/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_ReferenceTimeReq extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-ReferenceTimeReq";
   }

   protected GNSS_ReferenceTimeReq_gnss_TimeReqPrefList gnss_TimeReqPrefList;
   protected Asn1Boolean gps_TOW_assistReq;  // optional
   protected Asn1Boolean notOfLeapSecReq;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_ReferenceTimeReq () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_ReferenceTimeReq (
      GNSS_ReferenceTimeReq_gnss_TimeReqPrefList gnss_TimeReqPrefList_,
      Asn1Boolean gps_TOW_assistReq_,
      Asn1Boolean notOfLeapSecReq_
   ) throws Asn1Exception {
      super();
      setGnss_TimeReqPrefList (gnss_TimeReqPrefList_);
      setGps_TOW_assistReq (gps_TOW_assistReq_);
      setNotOfLeapSecReq (notOfLeapSecReq_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GNSS_ReferenceTimeReq (
      GNSS_ReferenceTimeReq_gnss_TimeReqPrefList gnss_TimeReqPrefList_
   ) throws Asn1Exception {
      super();
      setGnss_TimeReqPrefList (gnss_TimeReqPrefList_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GNSS_ReferenceTimeReq (GNSS_ReferenceTimeReq_gnss_TimeReqPrefList gnss_TimeReqPrefList_,
      boolean gps_TOW_assistReq_,
      boolean notOfLeapSecReq_
   ) throws Asn1Exception {
      super();
      setGnss_TimeReqPrefList (gnss_TimeReqPrefList_);
      setGps_TOW_assistReq (gps_TOW_assistReq_);
      setNotOfLeapSecReq (notOfLeapSecReq_);
   }

   public void init () {
      gnss_TimeReqPrefList = null;
      gps_TOW_assistReq = null;
      notOfLeapSecReq = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_ReferenceTimeReq) ) return false;

      GNSS_ReferenceTimeReq rhs = (GNSS_ReferenceTimeReq) obj;

      if (gnss_TimeReqPrefList == null) {
         if (rhs.gnss_TimeReqPrefList != null) return false;
      }
      else {
         if (!gnss_TimeReqPrefList.equals(rhs.gnss_TimeReqPrefList)) {
            return false;
         }
      }

      if (gps_TOW_assistReq == null) {
         if (rhs.gps_TOW_assistReq != null) return false;
      }
      else {
         if (!gps_TOW_assistReq.equals(rhs.gps_TOW_assistReq)) {
            return false;
         }
      }

      if (notOfLeapSecReq == null) {
         if (rhs.notOfLeapSecReq != null) return false;
      }
      else {
         if (!notOfLeapSecReq.equals(rhs.notOfLeapSecReq)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gnss_TimeReqPrefList != null) __code = 31*__code + gnss_TimeReqPrefList.hashCode();
      if (gps_TOW_assistReq != null) __code = 31*__code + gps_TOW_assistReq.hashCode();
      if (notOfLeapSecReq != null) __code = 31*__code + notOfLeapSecReq.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Gnss_TimeReqPrefList
    */
   public GNSS_ReferenceTimeReq_gnss_TimeReqPrefList getGnss_TimeReqPrefList () {
      return gnss_TimeReqPrefList;
   }

   public void setGnss_TimeReqPrefList (GNSS_ReferenceTimeReq_gnss_TimeReqPrefList value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 8))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.gnss_TimeReqPrefList = value;
   }

   /**
    * Accessor/mutator methods for Gps_TOW_assistReq
    */
   public Asn1Boolean getGps_TOW_assistReq () {
      return gps_TOW_assistReq;
   }

   public void setGps_TOW_assistReq (Asn1Boolean value) {
      this.gps_TOW_assistReq = value;
   }

   public void setGps_TOW_assistReq (boolean value) {
      setGps_TOW_assistReq (new Asn1Boolean(value));
   }
   public boolean hasGps_TOW_assistReq () {
      return (gps_TOW_assistReq != null);
   }

   /**
    * Accessor/mutator methods for NotOfLeapSecReq
    */
   public Asn1Boolean getNotOfLeapSecReq () {
      return notOfLeapSecReq;
   }

   public void setNotOfLeapSecReq (Asn1Boolean value) {
      this.notOfLeapSecReq = value;
   }

   public void setNotOfLeapSecReq (boolean value) {
      setNotOfLeapSecReq (new Asn1Boolean(value));
   }
   public boolean hasNotOfLeapSecReq () {
      return (notOfLeapSecReq != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gnss_TimeReqPrefList;
         case 1: return gps_TOW_assistReq;
         case 2: return notOfLeapSecReq;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gnss-TimeReqPrefList";
         case 1: return "gps-TOW-assistReq";
         case 2: return "notOfLeapSecReq";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean gps_TOW_assistReqPresent = buffer.decodeBit ("gps_TOW_assistReqPresent");
      boolean notOfLeapSecReqPresent = buffer.decodeBit ("notOfLeapSecReqPresent");

      // decode gnss_TimeReqPrefList

      buffer.getContext().eventDispatcher.startElement("gnss_TimeReqPrefList", -1);

      gnss_TimeReqPrefList = new GNSS_ReferenceTimeReq_gnss_TimeReqPrefList();
      gnss_TimeReqPrefList.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("gnss_TimeReqPrefList", -1);

      // decode gps_TOW_assistReq

      if (gps_TOW_assistReqPresent) {
         buffer.getContext().eventDispatcher.startElement("gps_TOW_assistReq", -1);

         gps_TOW_assistReq = new Asn1Boolean();
         gps_TOW_assistReq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gps_TOW_assistReq", -1);
      }
      else {
         gps_TOW_assistReq = null;
      }

      // decode notOfLeapSecReq

      if (notOfLeapSecReqPresent) {
         buffer.getContext().eventDispatcher.startElement("notOfLeapSecReq", -1);

         notOfLeapSecReq = new Asn1Boolean();
         notOfLeapSecReq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("notOfLeapSecReq", -1);
      }
      else {
         notOfLeapSecReq = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((gps_TOW_assistReq != null), null);
      buffer.encodeBit ((notOfLeapSecReq != null), null);

      // encode gnss_TimeReqPrefList

      if (gnss_TimeReqPrefList != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_TimeReqPrefList", -1);

         gnss_TimeReqPrefList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_TimeReqPrefList", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_TimeReqPrefList");

      // encode gps_TOW_assistReq

      if (gps_TOW_assistReq != null) {
         buffer.getContext().eventDispatcher.startElement("gps_TOW_assistReq", -1);

         gps_TOW_assistReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gps_TOW_assistReq", -1);
      }

      // encode notOfLeapSecReq

      if (notOfLeapSecReq != null) {
         buffer.getContext().eventDispatcher.startElement("notOfLeapSecReq", -1);

         notOfLeapSecReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("notOfLeapSecReq", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
