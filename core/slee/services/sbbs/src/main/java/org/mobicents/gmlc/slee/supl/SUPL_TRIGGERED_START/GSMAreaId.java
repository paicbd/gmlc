/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_TRIGGERED_START;

import com.objsys.asn1j.runtime.*;

public class GSMAreaId extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_TRIGGERED_STARTRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_TRIGGERED_STARTRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GSMAreaId";
   }

   protected Asn1Integer refMCC;  // optional
   protected Asn1Integer refMNC;  // optional
   protected Asn1Integer refLAC;  // optional
   protected Asn1Integer refCI;  // optional
   protected Asn1OpenExt extElem1;

   public GSMAreaId () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GSMAreaId (
      Asn1Integer refMCC_,
      Asn1Integer refMNC_,
      Asn1Integer refLAC_,
      Asn1Integer refCI_
   ) throws Asn1Exception {
      super();
      setRefMCC (refMCC_);
      setRefMNC (refMNC_);
      setRefLAC (refLAC_);
      setRefCI (refCI_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GSMAreaId (long refMCC_,
      long refMNC_,
      long refLAC_,
      long refCI_
   ) throws Asn1Exception {
      super();
      setRefMCC (refMCC_);
      setRefMNC (refMNC_);
      setRefLAC (refLAC_);
      setRefCI (refCI_);
   }

   public void init () {
      refMCC = null;
      refMNC = null;
      refLAC = null;
      refCI = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GSMAreaId) ) return false;

      GSMAreaId rhs = (GSMAreaId) obj;

      if (refMCC == null) {
         if (rhs.refMCC != null) return false;
      }
      else {
         if (!refMCC.equals(rhs.refMCC)) {
            return false;
         }
      }

      if (refMNC == null) {
         if (rhs.refMNC != null) return false;
      }
      else {
         if (!refMNC.equals(rhs.refMNC)) {
            return false;
         }
      }

      if (refLAC == null) {
         if (rhs.refLAC != null) return false;
      }
      else {
         if (!refLAC.equals(rhs.refLAC)) {
            return false;
         }
      }

      if (refCI == null) {
         if (rhs.refCI != null) return false;
      }
      else {
         if (!refCI.equals(rhs.refCI)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (refMCC != null) __code = 31*__code + refMCC.hashCode();
      if (refMNC != null) __code = 31*__code + refMNC.hashCode();
      if (refLAC != null) __code = 31*__code + refLAC.hashCode();
      if (refCI != null) __code = 31*__code + refCI.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for RefMCC
    */
   public Asn1Integer getRefMCC () {
      return refMCC;
   }

   public void setRefMCC (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 999))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.refMCC = value;
   }

   public void setRefMCC (long value) 
      throws Asn1Exception
   {
      setRefMCC (new Asn1Integer(value));
   }
   public boolean hasRefMCC () {
      return (refMCC != null);
   }

   /**
    * Accessor/mutator methods for RefMNC
    */
   public Asn1Integer getRefMNC () {
      return refMNC;
   }

   public void setRefMNC (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 999))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.refMNC = value;
   }

   public void setRefMNC (long value) 
      throws Asn1Exception
   {
      setRefMNC (new Asn1Integer(value));
   }
   public boolean hasRefMNC () {
      return (refMNC != null);
   }

   /**
    * Accessor/mutator methods for RefLAC
    */
   public Asn1Integer getRefLAC () {
      return refLAC;
   }

   public void setRefLAC (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.refLAC = value;
   }

   public void setRefLAC (long value) 
      throws Asn1Exception
   {
      setRefLAC (new Asn1Integer(value));
   }
   public boolean hasRefLAC () {
      return (refLAC != null);
   }

   /**
    * Accessor/mutator methods for RefCI
    */
   public Asn1Integer getRefCI () {
      return refCI;
   }

   public void setRefCI (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.refCI = value;
   }

   public void setRefCI (long value) 
      throws Asn1Exception
   {
      setRefCI (new Asn1Integer(value));
   }
   public boolean hasRefCI () {
      return (refCI != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return refMCC;
         case 1: return refMNC;
         case 2: return refLAC;
         case 3: return refCI;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "refMCC";
         case 1: return "refMNC";
         case 2: return "refLAC";
         case 3: return "refCI";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean refMCCPresent = buffer.decodeBit ("refMCCPresent");
      boolean refMNCPresent = buffer.decodeBit ("refMNCPresent");
      boolean refLACPresent = buffer.decodeBit ("refLACPresent");
      boolean refCIPresent = buffer.decodeBit ("refCIPresent");

      // decode refMCC

      if (refMCCPresent) {
         buffer.getContext().eventDispatcher.startElement("refMCC", -1);

         refMCC = new Asn1Integer();
         refMCC.decode (buffer, 0, 999);
         buffer.getContext().eventDispatcher.endElement("refMCC", -1);
      }
      else {
         refMCC = null;
      }

      // decode refMNC

      if (refMNCPresent) {
         buffer.getContext().eventDispatcher.startElement("refMNC", -1);

         refMNC = new Asn1Integer();
         refMNC.decode (buffer, 0, 999);
         buffer.getContext().eventDispatcher.endElement("refMNC", -1);
      }
      else {
         refMNC = null;
      }

      // decode refLAC

      if (refLACPresent) {
         buffer.getContext().eventDispatcher.startElement("refLAC", -1);

         refLAC = new Asn1Integer();
         refLAC.decode (buffer, 0, 65535);
         buffer.getContext().eventDispatcher.endElement("refLAC", -1);
      }
      else {
         refLAC = null;
      }

      // decode refCI

      if (refCIPresent) {
         buffer.getContext().eventDispatcher.startElement("refCI", -1);

         refCI = new Asn1Integer();
         refCI.decode (buffer, 0, 65535);
         buffer.getContext().eventDispatcher.endElement("refCI", -1);
      }
      else {
         refCI = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((refMCC != null), null);
      buffer.encodeBit ((refMNC != null), null);
      buffer.encodeBit ((refLAC != null), null);
      buffer.encodeBit ((refCI != null), null);

      // encode refMCC

      if (refMCC != null) {
         buffer.getContext().eventDispatcher.startElement("refMCC", -1);

         refMCC.encode (buffer, 0, 999);

         buffer.getContext().eventDispatcher.endElement("refMCC", -1);
      }

      // encode refMNC

      if (refMNC != null) {
         buffer.getContext().eventDispatcher.startElement("refMNC", -1);

         refMNC.encode (buffer, 0, 999);

         buffer.getContext().eventDispatcher.endElement("refMNC", -1);
      }

      // encode refLAC

      if (refLAC != null) {
         buffer.getContext().eventDispatcher.startElement("refLAC", -1);

         refLAC.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("refLAC", -1);
      }

      // encode refCI

      if (refCI != null) {
         buffer.getContext().eventDispatcher.startElement("refCI", -1);

         refCI.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("refCI", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
