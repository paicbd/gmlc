/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class UTC_ModelSet2 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "UTC-ModelSet2";
   }

   protected Asn1Integer utcA0;
   protected Asn1Integer utcA1;
   protected Asn1Integer utcA2;
   protected Asn1Integer utcDeltaTls;
   protected Asn1Integer utcTot;
   protected Asn1Integer utcWNot;
   protected Asn1Integer utcWNlsf;
   protected Asn1BitString utcDN;
   protected Asn1Integer utcDeltaTlsf;
   protected Asn1Integer utcWNlsf_ext_r16;  // optional
   protected Asn1OpenExt extElem1;

   public UTC_ModelSet2 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UTC_ModelSet2 (
      Asn1Integer utcA0_,
      Asn1Integer utcA1_,
      Asn1Integer utcA2_,
      Asn1Integer utcDeltaTls_,
      Asn1Integer utcTot_,
      Asn1Integer utcWNot_,
      Asn1Integer utcWNlsf_,
      Asn1BitString utcDN_,
      Asn1Integer utcDeltaTlsf_,
      Asn1Integer utcWNlsf_ext_r16_
   ) throws Asn1Exception {
      super();
      setUtcA0 (utcA0_);
      setUtcA1 (utcA1_);
      setUtcA2 (utcA2_);
      setUtcDeltaTls (utcDeltaTls_);
      setUtcTot (utcTot_);
      setUtcWNot (utcWNot_);
      setUtcWNlsf (utcWNlsf_);
      setUtcDN (utcDN_);
      setUtcDeltaTlsf (utcDeltaTlsf_);
      setUtcWNlsf_ext_r16 (utcWNlsf_ext_r16_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public UTC_ModelSet2 (
      Asn1Integer utcA0_,
      Asn1Integer utcA1_,
      Asn1Integer utcA2_,
      Asn1Integer utcDeltaTls_,
      Asn1Integer utcTot_,
      Asn1Integer utcWNot_,
      Asn1Integer utcWNlsf_,
      Asn1BitString utcDN_,
      Asn1Integer utcDeltaTlsf_
   ) throws Asn1Exception {
      super();
      setUtcA0 (utcA0_);
      setUtcA1 (utcA1_);
      setUtcA2 (utcA2_);
      setUtcDeltaTls (utcDeltaTls_);
      setUtcTot (utcTot_);
      setUtcWNot (utcWNot_);
      setUtcWNlsf (utcWNlsf_);
      setUtcDN (utcDN_);
      setUtcDeltaTlsf (utcDeltaTlsf_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UTC_ModelSet2 (long utcA0_,
      long utcA1_,
      long utcA2_,
      long utcDeltaTls_,
      long utcTot_,
      long utcWNot_,
      long utcWNlsf_,
      Asn1BitString utcDN_,
      long utcDeltaTlsf_,
      long utcWNlsf_ext_r16_
   ) throws Asn1Exception {
      super();
      setUtcA0 (utcA0_);
      setUtcA1 (utcA1_);
      setUtcA2 (utcA2_);
      setUtcDeltaTls (utcDeltaTls_);
      setUtcTot (utcTot_);
      setUtcWNot (utcWNot_);
      setUtcWNlsf (utcWNlsf_);
      setUtcDN (utcDN_);
      setUtcDeltaTlsf (utcDeltaTlsf_);
      setUtcWNlsf_ext_r16 (utcWNlsf_ext_r16_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public UTC_ModelSet2 (
      long utcA0_,
      long utcA1_,
      long utcA2_,
      long utcDeltaTls_,
      long utcTot_,
      long utcWNot_,
      long utcWNlsf_,
      Asn1BitString utcDN_,
      long utcDeltaTlsf_
   ) throws Asn1Exception {
      super();
      setUtcA0 (utcA0_);
      setUtcA1 (utcA1_);
      setUtcA2 (utcA2_);
      setUtcDeltaTls (utcDeltaTls_);
      setUtcTot (utcTot_);
      setUtcWNot (utcWNot_);
      setUtcWNlsf (utcWNlsf_);
      setUtcDN (utcDN_);
      setUtcDeltaTlsf (utcDeltaTlsf_);
   }

   public void init () {
      utcA0 = null;
      utcA1 = null;
      utcA2 = null;
      utcDeltaTls = null;
      utcTot = null;
      utcWNot = null;
      utcWNlsf = null;
      utcDN = null;
      utcDeltaTlsf = null;
      utcWNlsf_ext_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof UTC_ModelSet2) ) return false;

      UTC_ModelSet2 rhs = (UTC_ModelSet2) obj;

      if (utcA0 == null) {
         if (rhs.utcA0 != null) return false;
      }
      else {
         if (!utcA0.equals(rhs.utcA0)) {
            return false;
         }
      }

      if (utcA1 == null) {
         if (rhs.utcA1 != null) return false;
      }
      else {
         if (!utcA1.equals(rhs.utcA1)) {
            return false;
         }
      }

      if (utcA2 == null) {
         if (rhs.utcA2 != null) return false;
      }
      else {
         if (!utcA2.equals(rhs.utcA2)) {
            return false;
         }
      }

      if (utcDeltaTls == null) {
         if (rhs.utcDeltaTls != null) return false;
      }
      else {
         if (!utcDeltaTls.equals(rhs.utcDeltaTls)) {
            return false;
         }
      }

      if (utcTot == null) {
         if (rhs.utcTot != null) return false;
      }
      else {
         if (!utcTot.equals(rhs.utcTot)) {
            return false;
         }
      }

      if (utcWNot == null) {
         if (rhs.utcWNot != null) return false;
      }
      else {
         if (!utcWNot.equals(rhs.utcWNot)) {
            return false;
         }
      }

      if (utcWNlsf == null) {
         if (rhs.utcWNlsf != null) return false;
      }
      else {
         if (!utcWNlsf.equals(rhs.utcWNlsf)) {
            return false;
         }
      }

      if (utcDN == null) {
         if (rhs.utcDN != null) return false;
      }
      else {
         if (!utcDN.equals(rhs.utcDN)) {
            return false;
         }
      }

      if (utcDeltaTlsf == null) {
         if (rhs.utcDeltaTlsf != null) return false;
      }
      else {
         if (!utcDeltaTlsf.equals(rhs.utcDeltaTlsf)) {
            return false;
         }
      }

      if (utcWNlsf_ext_r16 == null) {
         if (rhs.utcWNlsf_ext_r16 != null) return false;
      }
      else {
         if (!utcWNlsf_ext_r16.equals(rhs.utcWNlsf_ext_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (utcA0 != null) __code = 31*__code + utcA0.hashCode();
      if (utcA1 != null) __code = 31*__code + utcA1.hashCode();
      if (utcA2 != null) __code = 31*__code + utcA2.hashCode();
      if (utcDeltaTls != null) __code = 31*__code + utcDeltaTls.hashCode();
      if (utcTot != null) __code = 31*__code + utcTot.hashCode();
      if (utcWNot != null) __code = 31*__code + utcWNot.hashCode();
      if (utcWNlsf != null) __code = 31*__code + utcWNlsf.hashCode();
      if (utcDN != null) __code = 31*__code + utcDN.hashCode();
      if (utcDeltaTlsf != null) __code = 31*__code + utcDeltaTlsf.hashCode();
      if (utcWNlsf_ext_r16 != null) __code = 31*__code + utcWNlsf_ext_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for UtcA0
    */
   public Asn1Integer getUtcA0 () {
      return utcA0;
   }

   public void setUtcA0 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.utcA0 = value;
   }

   public void setUtcA0 (long value) 
      throws Asn1Exception
   {
      setUtcA0 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for UtcA1
    */
   public Asn1Integer getUtcA1 () {
      return utcA1;
   }

   public void setUtcA1 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -4096 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.utcA1 = value;
   }

   public void setUtcA1 (long value) 
      throws Asn1Exception
   {
      setUtcA1 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for UtcA2
    */
   public Asn1Integer getUtcA2 () {
      return utcA2;
   }

   public void setUtcA2 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -64 && value.value <= 63))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.utcA2 = value;
   }

   public void setUtcA2 (long value) 
      throws Asn1Exception
   {
      setUtcA2 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for UtcDeltaTls
    */
   public Asn1Integer getUtcDeltaTls () {
      return utcDeltaTls;
   }

   public void setUtcDeltaTls (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.utcDeltaTls = value;
   }

   public void setUtcDeltaTls (long value) 
      throws Asn1Exception
   {
      setUtcDeltaTls (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for UtcTot
    */
   public Asn1Integer getUtcTot () {
      return utcTot;
   }

   public void setUtcTot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.utcTot = value;
   }

   public void setUtcTot (long value) 
      throws Asn1Exception
   {
      setUtcTot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for UtcWNot
    */
   public Asn1Integer getUtcWNot () {
      return utcWNot;
   }

   public void setUtcWNot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 8191))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.utcWNot = value;
   }

   public void setUtcWNot (long value) 
      throws Asn1Exception
   {
      setUtcWNot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for UtcWNlsf
    */
   public Asn1Integer getUtcWNlsf () {
      return utcWNlsf;
   }

   public void setUtcWNlsf (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.utcWNlsf = value;
   }

   public void setUtcWNlsf (long value) 
      throws Asn1Exception
   {
      setUtcWNlsf (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for UtcDN
    */
   public Asn1BitString getUtcDN () {
      return utcDN;
   }

   public void setUtcDN (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 4)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.utcDN = value;
   }

   /**
    * Accessor/mutator methods for UtcDeltaTlsf
    */
   public Asn1Integer getUtcDeltaTlsf () {
      return utcDeltaTlsf;
   }

   public void setUtcDeltaTlsf (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.utcDeltaTlsf = value;
   }

   public void setUtcDeltaTlsf (long value) 
      throws Asn1Exception
   {
      setUtcDeltaTlsf (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for UtcWNlsf_ext_r16
    */
   public Asn1Integer getUtcWNlsf_ext_r16 () {
      return utcWNlsf_ext_r16;
   }

   public void setUtcWNlsf_ext_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 256 && value.value <= 8191))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.utcWNlsf_ext_r16 = value;
   }

   public void setUtcWNlsf_ext_r16 (long value) 
      throws Asn1Exception
   {
      setUtcWNlsf_ext_r16 (new Asn1Integer(value));
   }
   public boolean hasUtcWNlsf_ext_r16 () {
      return (utcWNlsf_ext_r16 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 11; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return utcA0;
         case 1: return utcA1;
         case 2: return utcA2;
         case 3: return utcDeltaTls;
         case 4: return utcTot;
         case 5: return utcWNot;
         case 6: return utcWNlsf;
         case 7: return utcDN;
         case 8: return utcDeltaTlsf;
         case 9: return utcWNlsf_ext_r16;
         case 10: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "utcA0";
         case 1: return "utcA1";
         case 2: return "utcA2";
         case 3: return "utcDeltaTls";
         case 4: return "utcTot";
         case 5: return "utcWNot";
         case 6: return "utcWNlsf";
         case 7: return "utcDN";
         case 8: return "utcDeltaTlsf";
         case 9: return "utcWNlsf-ext-r16";
         case 10: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode utcA0

      buffer.getContext().eventDispatcher.startElement("utcA0", -1);

      utcA0 = new Asn1Integer();
      utcA0.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("utcA0", -1);

      // decode utcA1

      buffer.getContext().eventDispatcher.startElement("utcA1", -1);

      utcA1 = new Asn1Integer();
      utcA1.decode (buffer, -4096, 4095);
      buffer.getContext().eventDispatcher.endElement("utcA1", -1);

      // decode utcA2

      buffer.getContext().eventDispatcher.startElement("utcA2", -1);

      utcA2 = new Asn1Integer();
      utcA2.decode (buffer, -64, 63);
      buffer.getContext().eventDispatcher.endElement("utcA2", -1);

      // decode utcDeltaTls

      buffer.getContext().eventDispatcher.startElement("utcDeltaTls", -1);

      utcDeltaTls = new Asn1Integer();
      utcDeltaTls.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("utcDeltaTls", -1);

      // decode utcTot

      buffer.getContext().eventDispatcher.startElement("utcTot", -1);

      utcTot = new Asn1Integer();
      utcTot.decode (buffer, 0, 65535);
      buffer.getContext().eventDispatcher.endElement("utcTot", -1);

      // decode utcWNot

      buffer.getContext().eventDispatcher.startElement("utcWNot", -1);

      utcWNot = new Asn1Integer();
      utcWNot.decode (buffer, 0, 8191);
      buffer.getContext().eventDispatcher.endElement("utcWNot", -1);

      // decode utcWNlsf

      buffer.getContext().eventDispatcher.startElement("utcWNlsf", -1);

      utcWNlsf = new Asn1Integer();
      utcWNlsf.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("utcWNlsf", -1);

      // decode utcDN

      buffer.getContext().eventDispatcher.startElement("utcDN", -1);

      utcDN = new Asn1BitString();
      utcDN.decode (buffer, 4, 4);
      buffer.getContext().eventDispatcher.endElement("utcDN", -1);

      // decode utcDeltaTlsf

      buffer.getContext().eventDispatcher.startElement("utcDeltaTlsf", -1);

      utcDeltaTlsf = new Asn1Integer();
      utcDeltaTlsf.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("utcDeltaTlsf", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("utcWNlsf_ext_r16Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode utcWNlsf_ext_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("utcWNlsf_ext_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            utcWNlsf_ext_r16 = new Asn1Integer();
            utcWNlsf_ext_r16.decode (buffer, 256, 8191);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("utcWNlsf_ext_r16", -1);

         }
         else {
            utcWNlsf_ext_r16 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((utcWNlsf_ext_r16 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode utcA0

      if (utcA0 != null) {
         buffer.getContext().eventDispatcher.startElement("utcA0", -1);

         utcA0.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("utcA0", -1);
      }
      else throw new Asn1MissingRequiredException ("utcA0");

      // encode utcA1

      if (utcA1 != null) {
         buffer.getContext().eventDispatcher.startElement("utcA1", -1);

         utcA1.encode (buffer, -4096, 4095);

         buffer.getContext().eventDispatcher.endElement("utcA1", -1);
      }
      else throw new Asn1MissingRequiredException ("utcA1");

      // encode utcA2

      if (utcA2 != null) {
         buffer.getContext().eventDispatcher.startElement("utcA2", -1);

         utcA2.encode (buffer, -64, 63);

         buffer.getContext().eventDispatcher.endElement("utcA2", -1);
      }
      else throw new Asn1MissingRequiredException ("utcA2");

      // encode utcDeltaTls

      if (utcDeltaTls != null) {
         buffer.getContext().eventDispatcher.startElement("utcDeltaTls", -1);

         utcDeltaTls.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("utcDeltaTls", -1);
      }
      else throw new Asn1MissingRequiredException ("utcDeltaTls");

      // encode utcTot

      if (utcTot != null) {
         buffer.getContext().eventDispatcher.startElement("utcTot", -1);

         utcTot.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("utcTot", -1);
      }
      else throw new Asn1MissingRequiredException ("utcTot");

      // encode utcWNot

      if (utcWNot != null) {
         buffer.getContext().eventDispatcher.startElement("utcWNot", -1);

         utcWNot.encode (buffer, 0, 8191);

         buffer.getContext().eventDispatcher.endElement("utcWNot", -1);
      }
      else throw new Asn1MissingRequiredException ("utcWNot");

      // encode utcWNlsf

      if (utcWNlsf != null) {
         buffer.getContext().eventDispatcher.startElement("utcWNlsf", -1);

         utcWNlsf.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("utcWNlsf", -1);
      }
      else throw new Asn1MissingRequiredException ("utcWNlsf");

      // encode utcDN

      if (utcDN != null) {
         buffer.getContext().eventDispatcher.startElement("utcDN", -1);

         utcDN.encode (buffer, 4, 4);

         buffer.getContext().eventDispatcher.endElement("utcDN", -1);
      }
      else throw new Asn1MissingRequiredException ("utcDN");

      // encode utcDeltaTlsf

      if (utcDeltaTlsf != null) {
         buffer.getContext().eventDispatcher.startElement("utcDeltaTlsf", -1);

         utcDeltaTlsf.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("utcDeltaTlsf", -1);
      }
      else throw new Asn1MissingRequiredException ("utcDeltaTlsf");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((utcWNlsf_ext_r16 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // utcWNlsf_ext_r16

         if (utcWNlsf_ext_r16 != null) {
            buffer.reset();
            utcWNlsf_ext_r16.encode (buffer, 256, 8191);
            buffer.getContext().eventDispatcher.startElement("utcWNlsf_ext_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("utcWNlsf_ext_r16", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
