/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_TRIGGERED_RESPONSE;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.ULP_Components.PosMethod;
import org.mobicents.gmlc.slee.supl.SUPL_TRIGGERED_START.TriggerParams;
import org.mobicents.gmlc.slee.supl.ULP_Components.SLPAddress;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.SupportedNetworkInformation;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.SPCSETKey;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.SPCTID;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.SPCSETKeylifetime;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.GNSSPosTechnology;

public class Ver2_SUPLTRIGGEREDRESPONSE extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_TRIGGERED_RESPONSERtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_TRIGGERED_RESPONSERtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Ver2-SUPLTRIGGEREDRESPONSE";
   }

   protected PosMethod posMethod = null;
   protected TriggerParams triggerParams;  // optional
   protected SLPAddress sLPAddress;  // optional
   protected SupportedNetworkInformation supportedNetworkInformation;  // optional
   protected ReportingMode reportingMode;  // optional
   protected SPCSETKey sPCSETKey;  // optional
   protected SPCTID spctid;  // optional
   protected SPCSETKeylifetime sPCSETKeylifetime;  // optional
   protected GNSSPosTechnology gnssPosTechnology;  // optional
   protected Asn1OpenExt extElem1;

   public Ver2_SUPLTRIGGEREDRESPONSE () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Ver2_SUPLTRIGGEREDRESPONSE (
      PosMethod posMethod_,
      TriggerParams triggerParams_,
      SLPAddress sLPAddress_,
      SupportedNetworkInformation supportedNetworkInformation_,
      ReportingMode reportingMode_,
      SPCSETKey sPCSETKey_,
      SPCTID spctid_,
      SPCSETKeylifetime sPCSETKeylifetime_,
      GNSSPosTechnology gnssPosTechnology_
   ) throws Asn1Exception {
      super();
      setPosMethod (posMethod_);
      setTriggerParams (triggerParams_);
      setSLPAddress (sLPAddress_);
      setSupportedNetworkInformation (supportedNetworkInformation_);
      setReportingMode (reportingMode_);
      setSPCSETKey (sPCSETKey_);
      setSpctid (spctid_);
      setSPCSETKeylifetime (sPCSETKeylifetime_);
      setGnssPosTechnology (gnssPosTechnology_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public Ver2_SUPLTRIGGEREDRESPONSE (
      PosMethod posMethod_
   ) throws Asn1Exception {
      super();
      setPosMethod (posMethod_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Ver2_SUPLTRIGGEREDRESPONSE (PosMethod posMethod_,
      TriggerParams triggerParams_,
      SLPAddress sLPAddress_,
      SupportedNetworkInformation supportedNetworkInformation_,
      ReportingMode reportingMode_,
      SPCSETKey sPCSETKey_,
      SPCTID spctid_,
      long sPCSETKeylifetime_,
      GNSSPosTechnology gnssPosTechnology_
   ) throws Asn1Exception {
      super();
      setPosMethod (posMethod_);
      setTriggerParams (triggerParams_);
      setSLPAddress (sLPAddress_);
      setSupportedNetworkInformation (supportedNetworkInformation_);
      setReportingMode (reportingMode_);
      setSPCSETKey (sPCSETKey_);
      setSpctid (spctid_);
      setSPCSETKeylifetime (sPCSETKeylifetime_);
      setGnssPosTechnology (gnssPosTechnology_);
   }

   public void init () {
      posMethod = null;
      triggerParams = null;
      sLPAddress = null;
      supportedNetworkInformation = null;
      reportingMode = null;
      sPCSETKey = null;
      spctid = null;
      sPCSETKeylifetime = null;
      gnssPosTechnology = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Ver2_SUPLTRIGGEREDRESPONSE) ) return false;

      Ver2_SUPLTRIGGEREDRESPONSE rhs = (Ver2_SUPLTRIGGEREDRESPONSE) obj;

      if (posMethod == null) {
         if (rhs.posMethod != null) return false;
      }
      else {
         if (!posMethod.equals(rhs.posMethod)) {
            return false;
         }
      }

      if (triggerParams == null) {
         if (rhs.triggerParams != null) return false;
      }
      else {
         if (!triggerParams.equals(rhs.triggerParams)) {
            return false;
         }
      }

      if (sLPAddress == null) {
         if (rhs.sLPAddress != null) return false;
      }
      else {
         if (!sLPAddress.equals(rhs.sLPAddress)) {
            return false;
         }
      }

      if (supportedNetworkInformation == null) {
         if (rhs.supportedNetworkInformation != null) return false;
      }
      else {
         if (!supportedNetworkInformation.equals(rhs.supportedNetworkInformation)) {
            return false;
         }
      }

      if (reportingMode == null) {
         if (rhs.reportingMode != null) return false;
      }
      else {
         if (!reportingMode.equals(rhs.reportingMode)) {
            return false;
         }
      }

      if (sPCSETKey == null) {
         if (rhs.sPCSETKey != null) return false;
      }
      else {
         if (!sPCSETKey.equals(rhs.sPCSETKey)) {
            return false;
         }
      }

      if (spctid == null) {
         if (rhs.spctid != null) return false;
      }
      else {
         if (!spctid.equals(rhs.spctid)) {
            return false;
         }
      }

      if (sPCSETKeylifetime == null) {
         if (rhs.sPCSETKeylifetime != null) return false;
      }
      else {
         if (!sPCSETKeylifetime.equals(rhs.sPCSETKeylifetime)) {
            return false;
         }
      }

      if (gnssPosTechnology == null) {
         if (rhs.gnssPosTechnology != null) return false;
      }
      else {
         if (!gnssPosTechnology.equals(rhs.gnssPosTechnology)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (posMethod != null) __code = 31*__code + posMethod.hashCode();
      if (triggerParams != null) __code = 31*__code + triggerParams.hashCode();
      if (sLPAddress != null) __code = 31*__code + sLPAddress.hashCode();
      if (supportedNetworkInformation != null) __code = 31*__code + supportedNetworkInformation.hashCode();
      if (reportingMode != null) __code = 31*__code + reportingMode.hashCode();
      if (sPCSETKey != null) __code = 31*__code + sPCSETKey.hashCode();
      if (spctid != null) __code = 31*__code + spctid.hashCode();
      if (sPCSETKeylifetime != null) __code = 31*__code + sPCSETKeylifetime.hashCode();
      if (gnssPosTechnology != null) __code = 31*__code + gnssPosTechnology.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for PosMethod
    */
   public PosMethod getPosMethod () {
      return posMethod;
   }

   public void setPosMethod (PosMethod value) {
      this.posMethod = value;
   }

   /**
    * Accessor/mutator methods for TriggerParams
    */
   public TriggerParams getTriggerParams () {
      return triggerParams;
   }

   public void setTriggerParams (TriggerParams value) {
      this.triggerParams = value;
   }

   public boolean hasTriggerParams () {
      return (triggerParams != null);
   }

   /**
    * Accessor/mutator methods for SLPAddress
    */
   public SLPAddress getSLPAddress () {
      return sLPAddress;
   }

   public void setSLPAddress (SLPAddress value) {
      this.sLPAddress = value;
   }

   public boolean hasSLPAddress () {
      return (sLPAddress != null);
   }

   /**
    * Accessor/mutator methods for SupportedNetworkInformation
    */
   public SupportedNetworkInformation getSupportedNetworkInformation () {
      return supportedNetworkInformation;
   }

   public void setSupportedNetworkInformation (SupportedNetworkInformation value) {
      this.supportedNetworkInformation = value;
   }

   public boolean hasSupportedNetworkInformation () {
      return (supportedNetworkInformation != null);
   }

   /**
    * Accessor/mutator methods for ReportingMode
    */
   public ReportingMode getReportingMode () {
      return reportingMode;
   }

   public void setReportingMode (ReportingMode value) {
      this.reportingMode = value;
   }

   public boolean hasReportingMode () {
      return (reportingMode != null);
   }

   /**
    * Accessor/mutator methods for SPCSETKey
    */
   public SPCSETKey getSPCSETKey () {
      return sPCSETKey;
   }

   public void setSPCSETKey (SPCSETKey value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 128)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.sPCSETKey = value;
   }

   public boolean hasSPCSETKey () {
      return (sPCSETKey != null);
   }

   /**
    * Accessor/mutator methods for Spctid
    */
   public SPCTID getSpctid () {
      return spctid;
   }

   public void setSpctid (SPCTID value) {
      this.spctid = value;
   }

   public boolean hasSpctid () {
      return (spctid != null);
   }

   /**
    * Accessor/mutator methods for SPCSETKeylifetime
    */
   public SPCSETKeylifetime getSPCSETKeylifetime () {
      return sPCSETKeylifetime;
   }

   public void setSPCSETKeylifetime (SPCSETKeylifetime value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 24))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sPCSETKeylifetime = value;
   }

   public void setSPCSETKeylifetime (long value) 
      throws Asn1Exception
   {
      setSPCSETKeylifetime (new SPCSETKeylifetime(value));
   }
   public boolean hasSPCSETKeylifetime () {
      return (sPCSETKeylifetime != null);
   }

   /**
    * Accessor/mutator methods for GnssPosTechnology
    */
   public GNSSPosTechnology getGnssPosTechnology () {
      return gnssPosTechnology;
   }

   public void setGnssPosTechnology (GNSSPosTechnology value) {
      this.gnssPosTechnology = value;
   }

   public boolean hasGnssPosTechnology () {
      return (gnssPosTechnology != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return posMethod;
         case 1: return triggerParams;
         case 2: return sLPAddress;
         case 3: return supportedNetworkInformation;
         case 4: return reportingMode;
         case 5: return sPCSETKey;
         case 6: return spctid;
         case 7: return sPCSETKeylifetime;
         case 8: return gnssPosTechnology;
         case 9: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "posMethod";
         case 1: return "triggerParams";
         case 2: return "sLPAddress";
         case 3: return "supportedNetworkInformation";
         case 4: return "reportingMode";
         case 5: return "sPCSETKey";
         case 6: return "spctid";
         case 7: return "sPCSETKeylifetime";
         case 8: return "gnssPosTechnology";
         case 9: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean triggerParamsPresent = buffer.decodeBit ("triggerParamsPresent");
      boolean sLPAddressPresent = buffer.decodeBit ("sLPAddressPresent");
      boolean supportedNetworkInformationPresent = buffer.decodeBit ("supportedNetworkInformationPresent");
      boolean reportingModePresent = buffer.decodeBit ("reportingModePresent");
      boolean sPCSETKeyPresent = buffer.decodeBit ("sPCSETKeyPresent");
      boolean spctidPresent = buffer.decodeBit ("spctidPresent");
      boolean sPCSETKeylifetimePresent = buffer.decodeBit ("sPCSETKeylifetimePresent");
      boolean gnssPosTechnologyPresent = buffer.decodeBit ("gnssPosTechnologyPresent");

      // decode posMethod

      buffer.getContext().eventDispatcher.startElement("posMethod", -1);

      {
         int tval = PosMethod.decodeEnumValue (buffer);
         posMethod = PosMethod.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("posMethod", -1);

      // decode triggerParams

      if (triggerParamsPresent) {
         buffer.getContext().eventDispatcher.startElement("triggerParams", -1);

         triggerParams = new TriggerParams();
         triggerParams.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("triggerParams", -1);
      }
      else {
         triggerParams = null;
      }

      // decode sLPAddress

      if (sLPAddressPresent) {
         buffer.getContext().eventDispatcher.startElement("sLPAddress", -1);

         sLPAddress = new SLPAddress();
         sLPAddress.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sLPAddress", -1);
      }
      else {
         sLPAddress = null;
      }

      // decode supportedNetworkInformation

      if (supportedNetworkInformationPresent) {
         buffer.getContext().eventDispatcher.startElement("supportedNetworkInformation", -1);

         supportedNetworkInformation = new SupportedNetworkInformation();
         supportedNetworkInformation.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("supportedNetworkInformation", -1);
      }
      else {
         supportedNetworkInformation = null;
      }

      // decode reportingMode

      if (reportingModePresent) {
         buffer.getContext().eventDispatcher.startElement("reportingMode", -1);

         reportingMode = new ReportingMode();
         reportingMode.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("reportingMode", -1);
      }
      else {
         reportingMode = null;
      }

      // decode sPCSETKey

      if (sPCSETKeyPresent) {
         buffer.getContext().eventDispatcher.startElement("sPCSETKey", -1);

         sPCSETKey = new SPCSETKey();
         sPCSETKey.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sPCSETKey", -1);
      }
      else {
         sPCSETKey = null;
      }

      // decode spctid

      if (spctidPresent) {
         buffer.getContext().eventDispatcher.startElement("spctid", -1);

         spctid = new SPCTID();
         spctid.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("spctid", -1);
      }
      else {
         spctid = null;
      }

      // decode sPCSETKeylifetime

      if (sPCSETKeylifetimePresent) {
         buffer.getContext().eventDispatcher.startElement("sPCSETKeylifetime", -1);

         sPCSETKeylifetime = new SPCSETKeylifetime();
         sPCSETKeylifetime.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sPCSETKeylifetime", -1);
      }
      else {
         sPCSETKeylifetime = null;
      }

      // decode gnssPosTechnology

      if (gnssPosTechnologyPresent) {
         buffer.getContext().eventDispatcher.startElement("gnssPosTechnology", -1);

         gnssPosTechnology = new GNSSPosTechnology();
         gnssPosTechnology.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnssPosTechnology", -1);
      }
      else {
         gnssPosTechnology = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((triggerParams != null), null);
      buffer.encodeBit ((sLPAddress != null), null);
      buffer.encodeBit ((supportedNetworkInformation != null), null);
      buffer.encodeBit ((reportingMode != null), null);
      buffer.encodeBit ((sPCSETKey != null), null);
      buffer.encodeBit ((spctid != null), null);
      buffer.encodeBit ((sPCSETKeylifetime != null), null);
      buffer.encodeBit ((gnssPosTechnology != null), null);

      // encode posMethod

      if (posMethod != null) {
         buffer.getContext().eventDispatcher.startElement("posMethod", -1);

         posMethod.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("posMethod", -1);
      }
      else throw new Asn1MissingRequiredException ("posMethod");

      // encode triggerParams

      if (triggerParams != null) {
         buffer.getContext().eventDispatcher.startElement("triggerParams", -1);

         triggerParams.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("triggerParams", -1);
      }

      // encode sLPAddress

      if (sLPAddress != null) {
         buffer.getContext().eventDispatcher.startElement("sLPAddress", -1);

         sLPAddress.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sLPAddress", -1);
      }

      // encode supportedNetworkInformation

      if (supportedNetworkInformation != null) {
         buffer.getContext().eventDispatcher.startElement("supportedNetworkInformation", -1);

         supportedNetworkInformation.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("supportedNetworkInformation", -1);
      }

      // encode reportingMode

      if (reportingMode != null) {
         buffer.getContext().eventDispatcher.startElement("reportingMode", -1);

         reportingMode.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportingMode", -1);
      }

      // encode sPCSETKey

      if (sPCSETKey != null) {
         buffer.getContext().eventDispatcher.startElement("sPCSETKey", -1);

         sPCSETKey.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sPCSETKey", -1);
      }

      // encode spctid

      if (spctid != null) {
         buffer.getContext().eventDispatcher.startElement("spctid", -1);

         spctid.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("spctid", -1);
      }

      // encode sPCSETKeylifetime

      if (sPCSETKeylifetime != null) {
         buffer.getContext().eventDispatcher.startElement("sPCSETKeylifetime", -1);

         sPCSETKeylifetime.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sPCSETKeylifetime", -1);
      }

      // encode gnssPosTechnology

      if (gnssPosTechnology != null) {
         buffer.getContext().eventDispatcher.startElement("gnssPosTechnology", -1);

         gnssPosTechnology.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnssPosTechnology", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
