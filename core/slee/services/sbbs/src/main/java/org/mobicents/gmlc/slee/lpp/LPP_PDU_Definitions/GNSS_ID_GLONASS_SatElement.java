/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_ID_GLONASS_SatElement extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-ID-GLONASS-SatElement";
   }

   protected SV_ID svID;
   protected GNSS_SignalIDs signalsAvailable;
   protected Asn1Integer channelNumber;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_ID_GLONASS_SatElement () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_ID_GLONASS_SatElement (
      SV_ID svID_,
      GNSS_SignalIDs signalsAvailable_,
      Asn1Integer channelNumber_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setSignalsAvailable (signalsAvailable_);
      setChannelNumber (channelNumber_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GNSS_ID_GLONASS_SatElement (
      SV_ID svID_,
      GNSS_SignalIDs signalsAvailable_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setSignalsAvailable (signalsAvailable_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GNSS_ID_GLONASS_SatElement (SV_ID svID_,
      GNSS_SignalIDs signalsAvailable_,
      long channelNumber_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setSignalsAvailable (signalsAvailable_);
      setChannelNumber (channelNumber_);
   }

   public void init () {
      svID = null;
      signalsAvailable = null;
      channelNumber = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_ID_GLONASS_SatElement) ) return false;

      GNSS_ID_GLONASS_SatElement rhs = (GNSS_ID_GLONASS_SatElement) obj;

      if (svID == null) {
         if (rhs.svID != null) return false;
      }
      else {
         if (!svID.equals(rhs.svID)) {
            return false;
         }
      }

      if (signalsAvailable == null) {
         if (rhs.signalsAvailable != null) return false;
      }
      else {
         if (!signalsAvailable.equals(rhs.signalsAvailable)) {
            return false;
         }
      }

      if (channelNumber == null) {
         if (rhs.channelNumber != null) return false;
      }
      else {
         if (!channelNumber.equals(rhs.channelNumber)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (svID != null) __code = 31*__code + svID.hashCode();
      if (signalsAvailable != null) __code = 31*__code + signalsAvailable.hashCode();
      if (channelNumber != null) __code = 31*__code + channelNumber.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SvID
    */
   public SV_ID getSvID () {
      return svID;
   }

   public void setSvID (SV_ID value) {
      this.svID = value;
   }

   /**
    * Accessor/mutator methods for SignalsAvailable
    */
   public GNSS_SignalIDs getSignalsAvailable () {
      return signalsAvailable;
   }

   public void setSignalsAvailable (GNSS_SignalIDs value) {
      this.signalsAvailable = value;
   }

   /**
    * Accessor/mutator methods for ChannelNumber
    */
   public Asn1Integer getChannelNumber () {
      return channelNumber;
   }

   public void setChannelNumber (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -7 && value.value <= 13))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.channelNumber = value;
   }

   public void setChannelNumber (long value) 
      throws Asn1Exception
   {
      setChannelNumber (new Asn1Integer(value));
   }
   public boolean hasChannelNumber () {
      return (channelNumber != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return svID;
         case 1: return signalsAvailable;
         case 2: return channelNumber;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "svID";
         case 1: return "signalsAvailable";
         case 2: return "channelNumber";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean channelNumberPresent = buffer.decodeBit ("channelNumberPresent");

      // decode svID

      buffer.getContext().eventDispatcher.startElement("svID", -1);

      svID = new SV_ID();
      svID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("svID", -1);

      // decode signalsAvailable

      buffer.getContext().eventDispatcher.startElement("signalsAvailable", -1);

      signalsAvailable = new GNSS_SignalIDs();
      signalsAvailable.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("signalsAvailable", -1);

      // decode channelNumber

      if (channelNumberPresent) {
         buffer.getContext().eventDispatcher.startElement("channelNumber", -1);

         channelNumber = new Asn1Integer();
         channelNumber.decode (buffer, -7, 13);
         buffer.getContext().eventDispatcher.endElement("channelNumber", -1);
      }
      else {
         channelNumber = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((channelNumber != null), null);

      // encode svID

      if (svID != null) {
         buffer.getContext().eventDispatcher.startElement("svID", -1);

         svID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("svID", -1);
      }
      else throw new Asn1MissingRequiredException ("svID");

      // encode signalsAvailable

      if (signalsAvailable != null) {
         buffer.getContext().eventDispatcher.startElement("signalsAvailable", -1);

         signalsAvailable.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("signalsAvailable", -1);
      }
      else throw new Asn1MissingRequiredException ("signalsAvailable");

      // encode channelNumber

      if (channelNumber != null) {
         buffer.getContext().eventDispatcher.startElement("channelNumber", -1);

         channelNumber.encode (buffer, -7, 13);

         buffer.getContext().eventDispatcher.endElement("channelNumber", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
