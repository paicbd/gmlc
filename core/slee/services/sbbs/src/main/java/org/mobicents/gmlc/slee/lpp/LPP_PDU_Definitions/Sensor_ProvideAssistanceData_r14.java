/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class Sensor_ProvideAssistanceData_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Sensor-ProvideAssistanceData-r14";
   }

   protected Sensor_AssistanceDataList_r14 sensor_AssistanceDataList_r14;  // optional
   protected Sensor_Error_r13 sensor_Error_r14;  // optional
   protected Asn1OpenExt extElem1;

   public Sensor_ProvideAssistanceData_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Sensor_ProvideAssistanceData_r14 (
      Sensor_AssistanceDataList_r14 sensor_AssistanceDataList_r14_,
      Sensor_Error_r13 sensor_Error_r14_
   ) {
      super();
      setSensor_AssistanceDataList_r14 (sensor_AssistanceDataList_r14_);
      setSensor_Error_r14 (sensor_Error_r14_);
   }

   public void init () {
      sensor_AssistanceDataList_r14 = null;
      sensor_Error_r14 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Sensor_ProvideAssistanceData_r14) ) return false;

      Sensor_ProvideAssistanceData_r14 rhs = (Sensor_ProvideAssistanceData_r14) obj;

      if (sensor_AssistanceDataList_r14 == null) {
         if (rhs.sensor_AssistanceDataList_r14 != null) return false;
      }
      else {
         if (!sensor_AssistanceDataList_r14.equals(rhs.sensor_AssistanceDataList_r14)) {
            return false;
         }
      }

      if (sensor_Error_r14 == null) {
         if (rhs.sensor_Error_r14 != null) return false;
      }
      else {
         if (!sensor_Error_r14.equals(rhs.sensor_Error_r14)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (sensor_AssistanceDataList_r14 != null) __code = 31*__code + sensor_AssistanceDataList_r14.hashCode();
      if (sensor_Error_r14 != null) __code = 31*__code + sensor_Error_r14.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Sensor_AssistanceDataList_r14
    */
   public Sensor_AssistanceDataList_r14 getSensor_AssistanceDataList_r14 () {
      return sensor_AssistanceDataList_r14;
   }

   public void setSensor_AssistanceDataList_r14 (Sensor_AssistanceDataList_r14 value) {
      this.sensor_AssistanceDataList_r14 = value;
   }

   public boolean hasSensor_AssistanceDataList_r14 () {
      return (sensor_AssistanceDataList_r14 != null);
   }

   /**
    * Accessor/mutator methods for Sensor_Error_r14
    */
   public Sensor_Error_r13 getSensor_Error_r14 () {
      return sensor_Error_r14;
   }

   public void setSensor_Error_r14 (Sensor_Error_r13 value) {
      this.sensor_Error_r14 = value;
   }

   public boolean hasSensor_Error_r14 () {
      return (sensor_Error_r14 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sensor_AssistanceDataList_r14;
         case 1: return sensor_Error_r14;
         case 2: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sensor-AssistanceDataList-r14";
         case 1: return "sensor-Error-r14";
         case 2: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean sensor_AssistanceDataList_r14Present = buffer.decodeBit ("sensor_AssistanceDataList_r14Present");
      boolean sensor_Error_r14Present = buffer.decodeBit ("sensor_Error_r14Present");

      // decode sensor_AssistanceDataList_r14

      if (sensor_AssistanceDataList_r14Present) {
         buffer.getContext().eventDispatcher.startElement("sensor_AssistanceDataList_r14", -1);

         sensor_AssistanceDataList_r14 = new Sensor_AssistanceDataList_r14();
         sensor_AssistanceDataList_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sensor_AssistanceDataList_r14", -1);
      }
      else {
         sensor_AssistanceDataList_r14 = null;
      }

      // decode sensor_Error_r14

      if (sensor_Error_r14Present) {
         buffer.getContext().eventDispatcher.startElement("sensor_Error_r14", -1);

         sensor_Error_r14 = new Sensor_Error_r13();
         sensor_Error_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sensor_Error_r14", -1);
      }
      else {
         sensor_Error_r14 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((sensor_AssistanceDataList_r14 != null), null);
      buffer.encodeBit ((sensor_Error_r14 != null), null);

      // encode sensor_AssistanceDataList_r14

      if (sensor_AssistanceDataList_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("sensor_AssistanceDataList_r14", -1);

         sensor_AssistanceDataList_r14.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sensor_AssistanceDataList_r14", -1);
      }

      // encode sensor_Error_r14

      if (sensor_Error_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("sensor_Error_r14", -1);

         sensor_Error_r14.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sensor_Error_r14", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
