/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NR_Multi_RTT_MeasElement_r16_nr_UE_RxTxTimeDiff_r16 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _K0_R16 = 1;
   public final static byte _K1_R16 = 2;
   public final static byte _K2_R16 = 3;
   public final static byte _K3_R16 = 4;
   public final static byte _K4_R16 = 5;
   public final static byte _K5_R16 = 6;
   public final static byte _EXTELEM1 = 7;

   public NR_Multi_RTT_MeasElement_r16_nr_UE_RxTxTimeDiff_r16 () {
      super();
   }

   public NR_Multi_RTT_MeasElement_r16_nr_UE_RxTxTimeDiff_r16 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _K0_R16: return "k0_r16";
      case _K1_R16: return "k1_r16";
      case _K2_R16: return "k2_r16";
      case _K3_R16: return "k3_r16";
      case _K4_R16: return "k4_r16";
      case _K5_R16: return "k5_r16";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for k0_r16
    */
   public Asn1Integer getK0_r16 () {
      return (choiceID == _K0_R16) ? (Asn1Integer)element : null;
   }
   public void setK0_r16 (Asn1Integer value) {
      setElement (_K0_R16, value);
   }
   public boolean isK0_r16 () {
      return (choiceID == _K0_R16);
   }

   /**
    * Accessor/mutator methods for k1_r16
    */
   public Asn1Integer getK1_r16 () {
      return (choiceID == _K1_R16) ? (Asn1Integer)element : null;
   }
   public void setK1_r16 (Asn1Integer value) {
      setElement (_K1_R16, value);
   }
   public boolean isK1_r16 () {
      return (choiceID == _K1_R16);
   }

   /**
    * Accessor/mutator methods for k2_r16
    */
   public Asn1Integer getK2_r16 () {
      return (choiceID == _K2_R16) ? (Asn1Integer)element : null;
   }
   public void setK2_r16 (Asn1Integer value) {
      setElement (_K2_R16, value);
   }
   public boolean isK2_r16 () {
      return (choiceID == _K2_R16);
   }

   /**
    * Accessor/mutator methods for k3_r16
    */
   public Asn1Integer getK3_r16 () {
      return (choiceID == _K3_R16) ? (Asn1Integer)element : null;
   }
   public void setK3_r16 (Asn1Integer value) {
      setElement (_K3_R16, value);
   }
   public boolean isK3_r16 () {
      return (choiceID == _K3_R16);
   }

   /**
    * Accessor/mutator methods for k4_r16
    */
   public Asn1Integer getK4_r16 () {
      return (choiceID == _K4_R16) ? (Asn1Integer)element : null;
   }
   public void setK4_r16 (Asn1Integer value) {
      setElement (_K4_R16, value);
   }
   public boolean isK4_r16 () {
      return (choiceID == _K4_R16);
   }

   /**
    * Accessor/mutator methods for k5_r16
    */
   public Asn1Integer getK5_r16 () {
      return (choiceID == _K5_R16) ? (Asn1Integer)element : null;
   }
   public void setK5_r16 (Asn1Integer value) {
      setElement (_K5_R16, value);
   }
   public boolean isK5_r16 () {
      return (choiceID == _K5_R16);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (6, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // k0_r16
            case 0: { 
               Asn1Integer k0_r16;
               element = k0_r16 = new Asn1Integer();
               k0_r16.decode (buffer, 0, 1970049);
               break;
            }

            // k1_r16
            case 1: { 
               Asn1Integer k1_r16;
               element = k1_r16 = new Asn1Integer();
               k1_r16.decode (buffer, 0, 985025);
               break;
            }

            // k2_r16
            case 2: { 
               Asn1Integer k2_r16;
               element = k2_r16 = new Asn1Integer();
               k2_r16.decode (buffer, 0, 492513);
               break;
            }

            // k3_r16
            case 3: { 
               Asn1Integer k3_r16;
               element = k3_r16 = new Asn1Integer();
               k3_r16.decode (buffer, 0, 246257);
               break;
            }

            // k4_r16
            case 4: { 
               Asn1Integer k4_r16;
               element = k4_r16 = new Asn1Integer();
               k4_r16.decode (buffer, 0, 123129);
               break;
            }

            // k5_r16
            case 5: { 
               Asn1Integer k5_r16;
               element = k5_r16 = new Asn1Integer();
               k5_r16.decode (buffer, 0, 61565);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 7;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         setElement (_EXTELEM1, openType);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 6);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 6, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // k0_r16
            case _K0_R16:
               Asn1Integer k0_r16 = (Asn1Integer) element;
               k0_r16.encode (buffer, 0, 1970049);
               break;

            // k1_r16
            case _K1_R16:
               Asn1Integer k1_r16 = (Asn1Integer) element;
               k1_r16.encode (buffer, 0, 985025);
               break;

            // k2_r16
            case _K2_R16:
               Asn1Integer k2_r16 = (Asn1Integer) element;
               k2_r16.encode (buffer, 0, 492513);
               break;

            // k3_r16
            case _K3_R16:
               Asn1Integer k3_r16 = (Asn1Integer) element;
               k3_r16.encode (buffer, 0, 246257);
               break;

            // k4_r16
            case _K4_R16:
               Asn1Integer k4_r16 = (Asn1Integer) element;
               k4_r16.encode (buffer, 0, 123129);
               break;

            // k5_r16
            case _K5_R16:
               Asn1Integer k5_r16 = (Asn1Integer) element;
               k5_r16.encode (buffer, 0, 61565);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 7);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1OpenType openType = (Asn1OpenType) element;
         buffer.byteAlign();
         openType.encode (buffer);
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
