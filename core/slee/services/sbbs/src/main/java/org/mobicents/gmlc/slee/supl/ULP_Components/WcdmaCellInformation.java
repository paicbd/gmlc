/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Components;

import com.objsys.asn1j.runtime.*;

public class WcdmaCellInformation extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "WcdmaCellInformation";
   }

   protected Asn1Integer refMCC;
   protected Asn1Integer refMNC;
   protected Asn1Integer refUC;
   protected FrequencyInfo frequencyInfo;  // optional
   protected Asn1Integer primaryScramblingCode;  // optional
   protected MeasuredResultsList measuredResultsList;  // optional
   protected Asn1Integer cellParametersId;  // optional
   protected TimingAdvance timingAdvance;  // optional
   protected Asn1OpenExt extElem1;

   public WcdmaCellInformation () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public WcdmaCellInformation (
      Asn1Integer refMCC_,
      Asn1Integer refMNC_,
      Asn1Integer refUC_,
      FrequencyInfo frequencyInfo_,
      Asn1Integer primaryScramblingCode_,
      MeasuredResultsList measuredResultsList_,
      Asn1Integer cellParametersId_,
      TimingAdvance timingAdvance_
   ) throws Asn1Exception {
      super();
      setRefMCC (refMCC_);
      setRefMNC (refMNC_);
      setRefUC (refUC_);
      setFrequencyInfo (frequencyInfo_);
      setPrimaryScramblingCode (primaryScramblingCode_);
      setMeasuredResultsList (measuredResultsList_);
      setCellParametersId (cellParametersId_);
      setTimingAdvance (timingAdvance_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public WcdmaCellInformation (
      Asn1Integer refMCC_,
      Asn1Integer refMNC_,
      Asn1Integer refUC_
   ) throws Asn1Exception {
      super();
      setRefMCC (refMCC_);
      setRefMNC (refMNC_);
      setRefUC (refUC_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public WcdmaCellInformation (long refMCC_,
      long refMNC_,
      long refUC_,
      FrequencyInfo frequencyInfo_,
      long primaryScramblingCode_,
      MeasuredResultsList measuredResultsList_,
      long cellParametersId_,
      TimingAdvance timingAdvance_
   ) throws Asn1Exception {
      super();
      setRefMCC (refMCC_);
      setRefMNC (refMNC_);
      setRefUC (refUC_);
      setFrequencyInfo (frequencyInfo_);
      setPrimaryScramblingCode (primaryScramblingCode_);
      setMeasuredResultsList (measuredResultsList_);
      setCellParametersId (cellParametersId_);
      setTimingAdvance (timingAdvance_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public WcdmaCellInformation (
      long refMCC_,
      long refMNC_,
      long refUC_
   ) throws Asn1Exception {
      super();
      setRefMCC (refMCC_);
      setRefMNC (refMNC_);
      setRefUC (refUC_);
   }

   public void init () {
      refMCC = null;
      refMNC = null;
      refUC = null;
      frequencyInfo = null;
      primaryScramblingCode = null;
      measuredResultsList = null;
      cellParametersId = null;
      timingAdvance = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof WcdmaCellInformation) ) return false;

      WcdmaCellInformation rhs = (WcdmaCellInformation) obj;

      if (refMCC == null) {
         if (rhs.refMCC != null) return false;
      }
      else {
         if (!refMCC.equals(rhs.refMCC)) {
            return false;
         }
      }

      if (refMNC == null) {
         if (rhs.refMNC != null) return false;
      }
      else {
         if (!refMNC.equals(rhs.refMNC)) {
            return false;
         }
      }

      if (refUC == null) {
         if (rhs.refUC != null) return false;
      }
      else {
         if (!refUC.equals(rhs.refUC)) {
            return false;
         }
      }

      if (frequencyInfo == null) {
         if (rhs.frequencyInfo != null) return false;
      }
      else {
         if (!frequencyInfo.equals(rhs.frequencyInfo)) {
            return false;
         }
      }

      if (primaryScramblingCode == null) {
         if (rhs.primaryScramblingCode != null) return false;
      }
      else {
         if (!primaryScramblingCode.equals(rhs.primaryScramblingCode)) {
            return false;
         }
      }

      if (measuredResultsList == null) {
         if (rhs.measuredResultsList != null) return false;
      }
      else {
         if (!measuredResultsList.equals(rhs.measuredResultsList)) {
            return false;
         }
      }

      if (cellParametersId == null) {
         if (rhs.cellParametersId != null) return false;
      }
      else {
         if (!cellParametersId.equals(rhs.cellParametersId)) {
            return false;
         }
      }

      if (timingAdvance == null) {
         if (rhs.timingAdvance != null) return false;
      }
      else {
         if (!timingAdvance.equals(rhs.timingAdvance)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (refMCC != null) __code = 31*__code + refMCC.hashCode();
      if (refMNC != null) __code = 31*__code + refMNC.hashCode();
      if (refUC != null) __code = 31*__code + refUC.hashCode();
      if (frequencyInfo != null) __code = 31*__code + frequencyInfo.hashCode();
      if (primaryScramblingCode != null) __code = 31*__code + primaryScramblingCode.hashCode();
      if (measuredResultsList != null) __code = 31*__code + measuredResultsList.hashCode();
      if (cellParametersId != null) __code = 31*__code + cellParametersId.hashCode();
      if (timingAdvance != null) __code = 31*__code + timingAdvance.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for RefMCC
    */
   public Asn1Integer getRefMCC () {
      return refMCC;
   }

   public void setRefMCC (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 999))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.refMCC = value;
   }

   public void setRefMCC (long value) 
      throws Asn1Exception
   {
      setRefMCC (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for RefMNC
    */
   public Asn1Integer getRefMNC () {
      return refMNC;
   }

   public void setRefMNC (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 999))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.refMNC = value;
   }

   public void setRefMNC (long value) 
      throws Asn1Exception
   {
      setRefMNC (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for RefUC
    */
   public Asn1Integer getRefUC () {
      return refUC;
   }

   public void setRefUC (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 268435455))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.refUC = value;
   }

   public void setRefUC (long value) 
      throws Asn1Exception
   {
      setRefUC (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for FrequencyInfo
    */
   public FrequencyInfo getFrequencyInfo () {
      return frequencyInfo;
   }

   public void setFrequencyInfo (FrequencyInfo value) {
      this.frequencyInfo = value;
   }

   public boolean hasFrequencyInfo () {
      return (frequencyInfo != null);
   }

   /**
    * Accessor/mutator methods for PrimaryScramblingCode
    */
   public Asn1Integer getPrimaryScramblingCode () {
      return primaryScramblingCode;
   }

   public void setPrimaryScramblingCode (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 511))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.primaryScramblingCode = value;
   }

   public void setPrimaryScramblingCode (long value) 
      throws Asn1Exception
   {
      setPrimaryScramblingCode (new Asn1Integer(value));
   }
   public boolean hasPrimaryScramblingCode () {
      return (primaryScramblingCode != null);
   }

   /**
    * Accessor/mutator methods for MeasuredResultsList
    */
   public MeasuredResultsList getMeasuredResultsList () {
      return measuredResultsList;
   }

   public void setMeasuredResultsList (MeasuredResultsList value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 8))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.measuredResultsList = value;
   }

   public boolean hasMeasuredResultsList () {
      return (measuredResultsList != null);
   }

   /**
    * Accessor/mutator methods for CellParametersId
    */
   public Asn1Integer getCellParametersId () {
      return cellParametersId;
   }

   public void setCellParametersId (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cellParametersId = value;
   }

   public void setCellParametersId (long value) 
      throws Asn1Exception
   {
      setCellParametersId (new Asn1Integer(value));
   }
   public boolean hasCellParametersId () {
      return (cellParametersId != null);
   }

   /**
    * Accessor/mutator methods for TimingAdvance
    */
   public TimingAdvance getTimingAdvance () {
      return timingAdvance;
   }

   public void setTimingAdvance (TimingAdvance value) {
      this.timingAdvance = value;
   }

   public boolean hasTimingAdvance () {
      return (timingAdvance != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return refMCC;
         case 1: return refMNC;
         case 2: return refUC;
         case 3: return frequencyInfo;
         case 4: return primaryScramblingCode;
         case 5: return measuredResultsList;
         case 6: return cellParametersId;
         case 7: return timingAdvance;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "refMCC";
         case 1: return "refMNC";
         case 2: return "refUC";
         case 3: return "frequencyInfo";
         case 4: return "primaryScramblingCode";
         case 5: return "measuredResultsList";
         case 6: return "cellParametersId";
         case 7: return "timingAdvance";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean frequencyInfoPresent = buffer.decodeBit ("frequencyInfoPresent");
      boolean primaryScramblingCodePresent = buffer.decodeBit ("primaryScramblingCodePresent");
      boolean measuredResultsListPresent = buffer.decodeBit ("measuredResultsListPresent");

      // decode refMCC

      buffer.getContext().eventDispatcher.startElement("refMCC", -1);

      refMCC = new Asn1Integer();
      refMCC.decode (buffer, 0, 999);
      buffer.getContext().eventDispatcher.endElement("refMCC", -1);

      // decode refMNC

      buffer.getContext().eventDispatcher.startElement("refMNC", -1);

      refMNC = new Asn1Integer();
      refMNC.decode (buffer, 0, 999);
      buffer.getContext().eventDispatcher.endElement("refMNC", -1);

      // decode refUC

      buffer.getContext().eventDispatcher.startElement("refUC", -1);

      refUC = new Asn1Integer();
      refUC.decode (buffer, 0, 268435455);
      buffer.getContext().eventDispatcher.endElement("refUC", -1);

      // decode frequencyInfo

      if (frequencyInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("frequencyInfo", -1);

         frequencyInfo = new FrequencyInfo();
         frequencyInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("frequencyInfo", -1);
      }
      else {
         frequencyInfo = null;
      }

      // decode primaryScramblingCode

      if (primaryScramblingCodePresent) {
         buffer.getContext().eventDispatcher.startElement("primaryScramblingCode", -1);

         primaryScramblingCode = new Asn1Integer();
         primaryScramblingCode.decode (buffer, 0, 511);
         buffer.getContext().eventDispatcher.endElement("primaryScramblingCode", -1);
      }
      else {
         primaryScramblingCode = null;
      }

      // decode measuredResultsList

      if (measuredResultsListPresent) {
         buffer.getContext().eventDispatcher.startElement("measuredResultsList", -1);

         measuredResultsList = new MeasuredResultsList();
         measuredResultsList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measuredResultsList", -1);
      }
      else {
         measuredResultsList = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("cellParametersIdPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("timingAdvancePresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode cellParametersId

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("cellParametersId", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            cellParametersId = new Asn1Integer();
            cellParametersId.decode (buffer, 0, 127);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("cellParametersId", -1);

         }
         else {
            cellParametersId = null;
         }

         // decode timingAdvance

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("timingAdvance", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            timingAdvance = new TimingAdvance();
            timingAdvance.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("timingAdvance", -1);

         }
         else {
            timingAdvance = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((cellParametersId != null) ||
      (timingAdvance != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((frequencyInfo != null), null);
      buffer.encodeBit ((primaryScramblingCode != null), null);
      buffer.encodeBit ((measuredResultsList != null), null);

      // encode refMCC

      if (refMCC != null) {
         buffer.getContext().eventDispatcher.startElement("refMCC", -1);

         refMCC.encode (buffer, 0, 999);

         buffer.getContext().eventDispatcher.endElement("refMCC", -1);
      }
      else throw new Asn1MissingRequiredException ("refMCC");

      // encode refMNC

      if (refMNC != null) {
         buffer.getContext().eventDispatcher.startElement("refMNC", -1);

         refMNC.encode (buffer, 0, 999);

         buffer.getContext().eventDispatcher.endElement("refMNC", -1);
      }
      else throw new Asn1MissingRequiredException ("refMNC");

      // encode refUC

      if (refUC != null) {
         buffer.getContext().eventDispatcher.startElement("refUC", -1);

         refUC.encode (buffer, 0, 268435455);

         buffer.getContext().eventDispatcher.endElement("refUC", -1);
      }
      else throw new Asn1MissingRequiredException ("refUC");

      // encode frequencyInfo

      if (frequencyInfo != null) {
         buffer.getContext().eventDispatcher.startElement("frequencyInfo", -1);

         frequencyInfo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("frequencyInfo", -1);
      }

      // encode primaryScramblingCode

      if (primaryScramblingCode != null) {
         buffer.getContext().eventDispatcher.startElement("primaryScramblingCode", -1);

         primaryScramblingCode.encode (buffer, 0, 511);

         buffer.getContext().eventDispatcher.endElement("primaryScramblingCode", -1);
      }

      // encode measuredResultsList

      if (measuredResultsList != null) {
         buffer.getContext().eventDispatcher.startElement("measuredResultsList", -1);

         measuredResultsList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("measuredResultsList", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 2;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((cellParametersId != null), null);
         buffer.encodeBit ((timingAdvance != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // cellParametersId

         if (cellParametersId != null) {
            buffer.reset();
            cellParametersId.encode (buffer, 0, 127);
            buffer.getContext().eventDispatcher.startElement("cellParametersId", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("cellParametersId", -1);
         }

         // timingAdvance

         if (timingAdvance != null) {
            buffer.reset();
            timingAdvance.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("timingAdvance", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("timingAdvance", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
