/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GLONASS_ClockModel extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GLONASS-ClockModel";
   }

   protected Asn1Integer gloTau;
   protected Asn1Integer gloGamma;
   protected Asn1Integer gloDeltaTau;  // optional
   protected Asn1OpenExt extElem1;

   public GLONASS_ClockModel () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GLONASS_ClockModel (
      Asn1Integer gloTau_,
      Asn1Integer gloGamma_,
      Asn1Integer gloDeltaTau_
   ) throws Asn1Exception {
      super();
      setGloTau (gloTau_);
      setGloGamma (gloGamma_);
      setGloDeltaTau (gloDeltaTau_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GLONASS_ClockModel (
      Asn1Integer gloTau_,
      Asn1Integer gloGamma_
   ) throws Asn1Exception {
      super();
      setGloTau (gloTau_);
      setGloGamma (gloGamma_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GLONASS_ClockModel (long gloTau_,
      long gloGamma_,
      long gloDeltaTau_
   ) throws Asn1Exception {
      super();
      setGloTau (gloTau_);
      setGloGamma (gloGamma_);
      setGloDeltaTau (gloDeltaTau_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public GLONASS_ClockModel (
      long gloTau_,
      long gloGamma_
   ) throws Asn1Exception {
      super();
      setGloTau (gloTau_);
      setGloGamma (gloGamma_);
   }

   public void init () {
      gloTau = null;
      gloGamma = null;
      gloDeltaTau = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GLONASS_ClockModel) ) return false;

      GLONASS_ClockModel rhs = (GLONASS_ClockModel) obj;

      if (gloTau == null) {
         if (rhs.gloTau != null) return false;
      }
      else {
         if (!gloTau.equals(rhs.gloTau)) {
            return false;
         }
      }

      if (gloGamma == null) {
         if (rhs.gloGamma != null) return false;
      }
      else {
         if (!gloGamma.equals(rhs.gloGamma)) {
            return false;
         }
      }

      if (gloDeltaTau == null) {
         if (rhs.gloDeltaTau != null) return false;
      }
      else {
         if (!gloDeltaTau.equals(rhs.gloDeltaTau)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gloTau != null) __code = 31*__code + gloTau.hashCode();
      if (gloGamma != null) __code = 31*__code + gloGamma.hashCode();
      if (gloDeltaTau != null) __code = 31*__code + gloDeltaTau.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for GloTau
    */
   public Asn1Integer getGloTau () {
      return gloTau;
   }

   public void setGloTau (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -2097152 && value.value <= 2097151))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloTau = value;
   }

   public void setGloTau (long value) 
      throws Asn1Exception
   {
      setGloTau (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloGamma
    */
   public Asn1Integer getGloGamma () {
      return gloGamma;
   }

   public void setGloGamma (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1024 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloGamma = value;
   }

   public void setGloGamma (long value) 
      throws Asn1Exception
   {
      setGloGamma (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloDeltaTau
    */
   public Asn1Integer getGloDeltaTau () {
      return gloDeltaTau;
   }

   public void setGloDeltaTau (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -16 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloDeltaTau = value;
   }

   public void setGloDeltaTau (long value) 
      throws Asn1Exception
   {
      setGloDeltaTau (new Asn1Integer(value));
   }
   public boolean hasGloDeltaTau () {
      return (gloDeltaTau != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gloTau;
         case 1: return gloGamma;
         case 2: return gloDeltaTau;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gloTau";
         case 1: return "gloGamma";
         case 2: return "gloDeltaTau";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean gloDeltaTauPresent = buffer.decodeBit ("gloDeltaTauPresent");

      // decode gloTau

      buffer.getContext().eventDispatcher.startElement("gloTau", -1);

      gloTau = new Asn1Integer();
      gloTau.decode (buffer, -2097152, 2097151);
      buffer.getContext().eventDispatcher.endElement("gloTau", -1);

      // decode gloGamma

      buffer.getContext().eventDispatcher.startElement("gloGamma", -1);

      gloGamma = new Asn1Integer();
      gloGamma.decode (buffer, -1024, 1023);
      buffer.getContext().eventDispatcher.endElement("gloGamma", -1);

      // decode gloDeltaTau

      if (gloDeltaTauPresent) {
         buffer.getContext().eventDispatcher.startElement("gloDeltaTau", -1);

         gloDeltaTau = new Asn1Integer();
         gloDeltaTau.decode (buffer, -16, 15);
         buffer.getContext().eventDispatcher.endElement("gloDeltaTau", -1);
      }
      else {
         gloDeltaTau = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((gloDeltaTau != null), null);

      // encode gloTau

      if (gloTau != null) {
         buffer.getContext().eventDispatcher.startElement("gloTau", -1);

         gloTau.encode (buffer, -2097152, 2097151);

         buffer.getContext().eventDispatcher.endElement("gloTau", -1);
      }
      else throw new Asn1MissingRequiredException ("gloTau");

      // encode gloGamma

      if (gloGamma != null) {
         buffer.getContext().eventDispatcher.startElement("gloGamma", -1);

         gloGamma.encode (buffer, -1024, 1023);

         buffer.getContext().eventDispatcher.endElement("gloGamma", -1);
      }
      else throw new Asn1MissingRequiredException ("gloGamma");

      // encode gloDeltaTau

      if (gloDeltaTau != null) {
         buffer.getContext().eventDispatcher.startElement("gloDeltaTau", -1);

         gloDeltaTau.encode (buffer, -16, 15);

         buffer.getContext().eventDispatcher.endElement("gloDeltaTau", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
