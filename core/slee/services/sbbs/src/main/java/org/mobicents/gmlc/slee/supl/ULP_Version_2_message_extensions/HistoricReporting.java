/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Version_2_message_extensions;

import com.objsys.asn1j.runtime.*;

public class HistoricReporting extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_Version_2_message_extensionsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_Version_2_message_extensionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "HistoricReporting";
   }

   protected AllowedReportingType allowedReportingType = null;
   protected ReportingCriteria reportingCriteria;  // optional
   protected Asn1OpenExt extElem1;

   public HistoricReporting () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public HistoricReporting (
      AllowedReportingType allowedReportingType_,
      ReportingCriteria reportingCriteria_
   ) {
      super();
      setAllowedReportingType (allowedReportingType_);
      setReportingCriteria (reportingCriteria_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public HistoricReporting (
      AllowedReportingType allowedReportingType_
   ) {
      super();
      setAllowedReportingType (allowedReportingType_);
   }

   public void init () {
      allowedReportingType = null;
      reportingCriteria = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof HistoricReporting) ) return false;

      HistoricReporting rhs = (HistoricReporting) obj;

      if (allowedReportingType == null) {
         if (rhs.allowedReportingType != null) return false;
      }
      else {
         if (!allowedReportingType.equals(rhs.allowedReportingType)) {
            return false;
         }
      }

      if (reportingCriteria == null) {
         if (rhs.reportingCriteria != null) return false;
      }
      else {
         if (!reportingCriteria.equals(rhs.reportingCriteria)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (allowedReportingType != null) __code = 31*__code + allowedReportingType.hashCode();
      if (reportingCriteria != null) __code = 31*__code + reportingCriteria.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for AllowedReportingType
    */
   public AllowedReportingType getAllowedReportingType () {
      return allowedReportingType;
   }

   public void setAllowedReportingType (AllowedReportingType value) {
      this.allowedReportingType = value;
   }

   /**
    * Accessor/mutator methods for ReportingCriteria
    */
   public ReportingCriteria getReportingCriteria () {
      return reportingCriteria;
   }

   public void setReportingCriteria (ReportingCriteria value) {
      this.reportingCriteria = value;
   }

   public boolean hasReportingCriteria () {
      return (reportingCriteria != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return allowedReportingType;
         case 1: return reportingCriteria;
         case 2: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "allowedReportingType";
         case 1: return "reportingCriteria";
         case 2: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean reportingCriteriaPresent = buffer.decodeBit ("reportingCriteriaPresent");

      // decode allowedReportingType

      buffer.getContext().eventDispatcher.startElement("allowedReportingType", -1);

      {
         int tval = AllowedReportingType.decodeEnumValue (buffer);
         allowedReportingType = AllowedReportingType.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("allowedReportingType", -1);

      // decode reportingCriteria

      if (reportingCriteriaPresent) {
         buffer.getContext().eventDispatcher.startElement("reportingCriteria", -1);

         reportingCriteria = new ReportingCriteria();
         reportingCriteria.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("reportingCriteria", -1);
      }
      else {
         reportingCriteria = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((reportingCriteria != null), null);

      // encode allowedReportingType

      if (allowedReportingType != null) {
         buffer.getContext().eventDispatcher.startElement("allowedReportingType", -1);

         allowedReportingType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("allowedReportingType", -1);
      }
      else throw new Asn1MissingRequiredException ("allowedReportingType");

      // encode reportingCriteria

      if (reportingCriteria != null) {
         buffer.getContext().eventDispatcher.startElement("reportingCriteria", -1);

         reportingCriteria.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportingCriteria", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
