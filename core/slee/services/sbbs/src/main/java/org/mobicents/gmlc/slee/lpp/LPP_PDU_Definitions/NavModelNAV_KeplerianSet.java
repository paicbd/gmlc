/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NavModelNAV_KeplerianSet extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "NavModelNAV-KeplerianSet";
   }

   protected Asn1Integer navURA;
   protected Asn1Integer navFitFlag;
   protected Asn1Integer navToe;
   protected Asn1Integer navOmega;
   protected Asn1Integer navDeltaN;
   protected Asn1Integer navM0;
   protected Asn1Integer navOmegaADot;
   protected Asn1Integer navE;
   protected Asn1Integer navIDot;
   protected Asn1Integer navAPowerHalf;
   protected Asn1Integer navI0;
   protected Asn1Integer navOmegaA0;
   protected Asn1Integer navCrs;
   protected Asn1Integer navCis;
   protected Asn1Integer navCus;
   protected Asn1Integer navCrc;
   protected Asn1Integer navCic;
   protected Asn1Integer navCuc;
   protected NavModelNAV_KeplerianSet_addNAVparam addNAVparam;  // optional
   protected Asn1OpenExt extElem1;

   public NavModelNAV_KeplerianSet () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NavModelNAV_KeplerianSet (
      Asn1Integer navURA_,
      Asn1Integer navFitFlag_,
      Asn1Integer navToe_,
      Asn1Integer navOmega_,
      Asn1Integer navDeltaN_,
      Asn1Integer navM0_,
      Asn1Integer navOmegaADot_,
      Asn1Integer navE_,
      Asn1Integer navIDot_,
      Asn1Integer navAPowerHalf_,
      Asn1Integer navI0_,
      Asn1Integer navOmegaA0_,
      Asn1Integer navCrs_,
      Asn1Integer navCis_,
      Asn1Integer navCus_,
      Asn1Integer navCrc_,
      Asn1Integer navCic_,
      Asn1Integer navCuc_,
      NavModelNAV_KeplerianSet_addNAVparam addNAVparam_
   ) throws Asn1Exception {
      super();
      setNavURA (navURA_);
      setNavFitFlag (navFitFlag_);
      setNavToe (navToe_);
      setNavOmega (navOmega_);
      setNavDeltaN (navDeltaN_);
      setNavM0 (navM0_);
      setNavOmegaADot (navOmegaADot_);
      setNavE (navE_);
      setNavIDot (navIDot_);
      setNavAPowerHalf (navAPowerHalf_);
      setNavI0 (navI0_);
      setNavOmegaA0 (navOmegaA0_);
      setNavCrs (navCrs_);
      setNavCis (navCis_);
      setNavCus (navCus_);
      setNavCrc (navCrc_);
      setNavCic (navCic_);
      setNavCuc (navCuc_);
      setAddNAVparam (addNAVparam_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public NavModelNAV_KeplerianSet (
      Asn1Integer navURA_,
      Asn1Integer navFitFlag_,
      Asn1Integer navToe_,
      Asn1Integer navOmega_,
      Asn1Integer navDeltaN_,
      Asn1Integer navM0_,
      Asn1Integer navOmegaADot_,
      Asn1Integer navE_,
      Asn1Integer navIDot_,
      Asn1Integer navAPowerHalf_,
      Asn1Integer navI0_,
      Asn1Integer navOmegaA0_,
      Asn1Integer navCrs_,
      Asn1Integer navCis_,
      Asn1Integer navCus_,
      Asn1Integer navCrc_,
      Asn1Integer navCic_,
      Asn1Integer navCuc_
   ) throws Asn1Exception {
      super();
      setNavURA (navURA_);
      setNavFitFlag (navFitFlag_);
      setNavToe (navToe_);
      setNavOmega (navOmega_);
      setNavDeltaN (navDeltaN_);
      setNavM0 (navM0_);
      setNavOmegaADot (navOmegaADot_);
      setNavE (navE_);
      setNavIDot (navIDot_);
      setNavAPowerHalf (navAPowerHalf_);
      setNavI0 (navI0_);
      setNavOmegaA0 (navOmegaA0_);
      setNavCrs (navCrs_);
      setNavCis (navCis_);
      setNavCus (navCus_);
      setNavCrc (navCrc_);
      setNavCic (navCic_);
      setNavCuc (navCuc_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NavModelNAV_KeplerianSet (long navURA_,
      long navFitFlag_,
      long navToe_,
      long navOmega_,
      long navDeltaN_,
      long navM0_,
      long navOmegaADot_,
      long navE_,
      long navIDot_,
      long navAPowerHalf_,
      long navI0_,
      long navOmegaA0_,
      long navCrs_,
      long navCis_,
      long navCus_,
      long navCrc_,
      long navCic_,
      long navCuc_,
      NavModelNAV_KeplerianSet_addNAVparam addNAVparam_
   ) throws Asn1Exception {
      super();
      setNavURA (navURA_);
      setNavFitFlag (navFitFlag_);
      setNavToe (navToe_);
      setNavOmega (navOmega_);
      setNavDeltaN (navDeltaN_);
      setNavM0 (navM0_);
      setNavOmegaADot (navOmegaADot_);
      setNavE (navE_);
      setNavIDot (navIDot_);
      setNavAPowerHalf (navAPowerHalf_);
      setNavI0 (navI0_);
      setNavOmegaA0 (navOmegaA0_);
      setNavCrs (navCrs_);
      setNavCis (navCis_);
      setNavCus (navCus_);
      setNavCrc (navCrc_);
      setNavCic (navCic_);
      setNavCuc (navCuc_);
      setAddNAVparam (addNAVparam_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public NavModelNAV_KeplerianSet (
      long navURA_,
      long navFitFlag_,
      long navToe_,
      long navOmega_,
      long navDeltaN_,
      long navM0_,
      long navOmegaADot_,
      long navE_,
      long navIDot_,
      long navAPowerHalf_,
      long navI0_,
      long navOmegaA0_,
      long navCrs_,
      long navCis_,
      long navCus_,
      long navCrc_,
      long navCic_,
      long navCuc_
   ) throws Asn1Exception {
      super();
      setNavURA (navURA_);
      setNavFitFlag (navFitFlag_);
      setNavToe (navToe_);
      setNavOmega (navOmega_);
      setNavDeltaN (navDeltaN_);
      setNavM0 (navM0_);
      setNavOmegaADot (navOmegaADot_);
      setNavE (navE_);
      setNavIDot (navIDot_);
      setNavAPowerHalf (navAPowerHalf_);
      setNavI0 (navI0_);
      setNavOmegaA0 (navOmegaA0_);
      setNavCrs (navCrs_);
      setNavCis (navCis_);
      setNavCus (navCus_);
      setNavCrc (navCrc_);
      setNavCic (navCic_);
      setNavCuc (navCuc_);
   }

   public void init () {
      navURA = null;
      navFitFlag = null;
      navToe = null;
      navOmega = null;
      navDeltaN = null;
      navM0 = null;
      navOmegaADot = null;
      navE = null;
      navIDot = null;
      navAPowerHalf = null;
      navI0 = null;
      navOmegaA0 = null;
      navCrs = null;
      navCis = null;
      navCus = null;
      navCrc = null;
      navCic = null;
      navCuc = null;
      addNAVparam = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof NavModelNAV_KeplerianSet) ) return false;

      NavModelNAV_KeplerianSet rhs = (NavModelNAV_KeplerianSet) obj;

      if (navURA == null) {
         if (rhs.navURA != null) return false;
      }
      else {
         if (!navURA.equals(rhs.navURA)) {
            return false;
         }
      }

      if (navFitFlag == null) {
         if (rhs.navFitFlag != null) return false;
      }
      else {
         if (!navFitFlag.equals(rhs.navFitFlag)) {
            return false;
         }
      }

      if (navToe == null) {
         if (rhs.navToe != null) return false;
      }
      else {
         if (!navToe.equals(rhs.navToe)) {
            return false;
         }
      }

      if (navOmega == null) {
         if (rhs.navOmega != null) return false;
      }
      else {
         if (!navOmega.equals(rhs.navOmega)) {
            return false;
         }
      }

      if (navDeltaN == null) {
         if (rhs.navDeltaN != null) return false;
      }
      else {
         if (!navDeltaN.equals(rhs.navDeltaN)) {
            return false;
         }
      }

      if (navM0 == null) {
         if (rhs.navM0 != null) return false;
      }
      else {
         if (!navM0.equals(rhs.navM0)) {
            return false;
         }
      }

      if (navOmegaADot == null) {
         if (rhs.navOmegaADot != null) return false;
      }
      else {
         if (!navOmegaADot.equals(rhs.navOmegaADot)) {
            return false;
         }
      }

      if (navE == null) {
         if (rhs.navE != null) return false;
      }
      else {
         if (!navE.equals(rhs.navE)) {
            return false;
         }
      }

      if (navIDot == null) {
         if (rhs.navIDot != null) return false;
      }
      else {
         if (!navIDot.equals(rhs.navIDot)) {
            return false;
         }
      }

      if (navAPowerHalf == null) {
         if (rhs.navAPowerHalf != null) return false;
      }
      else {
         if (!navAPowerHalf.equals(rhs.navAPowerHalf)) {
            return false;
         }
      }

      if (navI0 == null) {
         if (rhs.navI0 != null) return false;
      }
      else {
         if (!navI0.equals(rhs.navI0)) {
            return false;
         }
      }

      if (navOmegaA0 == null) {
         if (rhs.navOmegaA0 != null) return false;
      }
      else {
         if (!navOmegaA0.equals(rhs.navOmegaA0)) {
            return false;
         }
      }

      if (navCrs == null) {
         if (rhs.navCrs != null) return false;
      }
      else {
         if (!navCrs.equals(rhs.navCrs)) {
            return false;
         }
      }

      if (navCis == null) {
         if (rhs.navCis != null) return false;
      }
      else {
         if (!navCis.equals(rhs.navCis)) {
            return false;
         }
      }

      if (navCus == null) {
         if (rhs.navCus != null) return false;
      }
      else {
         if (!navCus.equals(rhs.navCus)) {
            return false;
         }
      }

      if (navCrc == null) {
         if (rhs.navCrc != null) return false;
      }
      else {
         if (!navCrc.equals(rhs.navCrc)) {
            return false;
         }
      }

      if (navCic == null) {
         if (rhs.navCic != null) return false;
      }
      else {
         if (!navCic.equals(rhs.navCic)) {
            return false;
         }
      }

      if (navCuc == null) {
         if (rhs.navCuc != null) return false;
      }
      else {
         if (!navCuc.equals(rhs.navCuc)) {
            return false;
         }
      }

      if (addNAVparam == null) {
         if (rhs.addNAVparam != null) return false;
      }
      else {
         if (!addNAVparam.equals(rhs.addNAVparam)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (navURA != null) __code = 31*__code + navURA.hashCode();
      if (navFitFlag != null) __code = 31*__code + navFitFlag.hashCode();
      if (navToe != null) __code = 31*__code + navToe.hashCode();
      if (navOmega != null) __code = 31*__code + navOmega.hashCode();
      if (navDeltaN != null) __code = 31*__code + navDeltaN.hashCode();
      if (navM0 != null) __code = 31*__code + navM0.hashCode();
      if (navOmegaADot != null) __code = 31*__code + navOmegaADot.hashCode();
      if (navE != null) __code = 31*__code + navE.hashCode();
      if (navIDot != null) __code = 31*__code + navIDot.hashCode();
      if (navAPowerHalf != null) __code = 31*__code + navAPowerHalf.hashCode();
      if (navI0 != null) __code = 31*__code + navI0.hashCode();
      if (navOmegaA0 != null) __code = 31*__code + navOmegaA0.hashCode();
      if (navCrs != null) __code = 31*__code + navCrs.hashCode();
      if (navCis != null) __code = 31*__code + navCis.hashCode();
      if (navCus != null) __code = 31*__code + navCus.hashCode();
      if (navCrc != null) __code = 31*__code + navCrc.hashCode();
      if (navCic != null) __code = 31*__code + navCic.hashCode();
      if (navCuc != null) __code = 31*__code + navCuc.hashCode();
      if (addNAVparam != null) __code = 31*__code + addNAVparam.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for NavURA
    */
   public Asn1Integer getNavURA () {
      return navURA;
   }

   public void setNavURA (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navURA = value;
   }

   public void setNavURA (long value) 
      throws Asn1Exception
   {
      setNavURA (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavFitFlag
    */
   public Asn1Integer getNavFitFlag () {
      return navFitFlag;
   }

   public void setNavFitFlag (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navFitFlag = value;
   }

   public void setNavFitFlag (long value) 
      throws Asn1Exception
   {
      setNavFitFlag (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavToe
    */
   public Asn1Integer getNavToe () {
      return navToe;
   }

   public void setNavToe (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 37799))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navToe = value;
   }

   public void setNavToe (long value) 
      throws Asn1Exception
   {
      setNavToe (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavOmega
    */
   public Asn1Integer getNavOmega () {
      return navOmega;
   }

   public void setNavOmega (Asn1Integer value) 
      throws Asn1Exception
   {
      this.navOmega = value;
   }

   public void setNavOmega (long value) 
      throws Asn1Exception
   {
      setNavOmega (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavDeltaN
    */
   public Asn1Integer getNavDeltaN () {
      return navDeltaN;
   }

   public void setNavDeltaN (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navDeltaN = value;
   }

   public void setNavDeltaN (long value) 
      throws Asn1Exception
   {
      setNavDeltaN (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavM0
    */
   public Asn1Integer getNavM0 () {
      return navM0;
   }

   public void setNavM0 (Asn1Integer value) 
      throws Asn1Exception
   {
      this.navM0 = value;
   }

   public void setNavM0 (long value) 
      throws Asn1Exception
   {
      setNavM0 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavOmegaADot
    */
   public Asn1Integer getNavOmegaADot () {
      return navOmegaADot;
   }

   public void setNavOmegaADot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8388608 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navOmegaADot = value;
   }

   public void setNavOmegaADot (long value) 
      throws Asn1Exception
   {
      setNavOmegaADot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavE
    */
   public Asn1Integer getNavE () {
      return navE;
   }

   public void setNavE (Asn1Integer value) 
      throws Asn1Exception
   {
      this.navE = value;
   }

   public void setNavE (long value) 
      throws Asn1Exception
   {
      setNavE (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavIDot
    */
   public Asn1Integer getNavIDot () {
      return navIDot;
   }

   public void setNavIDot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8192 && value.value <= 8191))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navIDot = value;
   }

   public void setNavIDot (long value) 
      throws Asn1Exception
   {
      setNavIDot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavAPowerHalf
    */
   public Asn1Integer getNavAPowerHalf () {
      return navAPowerHalf;
   }

   public void setNavAPowerHalf (Asn1Integer value) 
      throws Asn1Exception
   {
      this.navAPowerHalf = value;
   }

   public void setNavAPowerHalf (long value) 
      throws Asn1Exception
   {
      setNavAPowerHalf (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavI0
    */
   public Asn1Integer getNavI0 () {
      return navI0;
   }

   public void setNavI0 (Asn1Integer value) 
      throws Asn1Exception
   {
      this.navI0 = value;
   }

   public void setNavI0 (long value) 
      throws Asn1Exception
   {
      setNavI0 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavOmegaA0
    */
   public Asn1Integer getNavOmegaA0 () {
      return navOmegaA0;
   }

   public void setNavOmegaA0 (Asn1Integer value) 
      throws Asn1Exception
   {
      this.navOmegaA0 = value;
   }

   public void setNavOmegaA0 (long value) 
      throws Asn1Exception
   {
      setNavOmegaA0 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavCrs
    */
   public Asn1Integer getNavCrs () {
      return navCrs;
   }

   public void setNavCrs (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navCrs = value;
   }

   public void setNavCrs (long value) 
      throws Asn1Exception
   {
      setNavCrs (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavCis
    */
   public Asn1Integer getNavCis () {
      return navCis;
   }

   public void setNavCis (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navCis = value;
   }

   public void setNavCis (long value) 
      throws Asn1Exception
   {
      setNavCis (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavCus
    */
   public Asn1Integer getNavCus () {
      return navCus;
   }

   public void setNavCus (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navCus = value;
   }

   public void setNavCus (long value) 
      throws Asn1Exception
   {
      setNavCus (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavCrc
    */
   public Asn1Integer getNavCrc () {
      return navCrc;
   }

   public void setNavCrc (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navCrc = value;
   }

   public void setNavCrc (long value) 
      throws Asn1Exception
   {
      setNavCrc (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavCic
    */
   public Asn1Integer getNavCic () {
      return navCic;
   }

   public void setNavCic (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navCic = value;
   }

   public void setNavCic (long value) 
      throws Asn1Exception
   {
      setNavCic (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavCuc
    */
   public Asn1Integer getNavCuc () {
      return navCuc;
   }

   public void setNavCuc (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navCuc = value;
   }

   public void setNavCuc (long value) 
      throws Asn1Exception
   {
      setNavCuc (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for AddNAVparam
    */
   public NavModelNAV_KeplerianSet_addNAVparam getAddNAVparam () {
      return addNAVparam;
   }

   public void setAddNAVparam (NavModelNAV_KeplerianSet_addNAVparam value) {
      this.addNAVparam = value;
   }

   public boolean hasAddNAVparam () {
      return (addNAVparam != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 20; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return navURA;
         case 1: return navFitFlag;
         case 2: return navToe;
         case 3: return navOmega;
         case 4: return navDeltaN;
         case 5: return navM0;
         case 6: return navOmegaADot;
         case 7: return navE;
         case 8: return navIDot;
         case 9: return navAPowerHalf;
         case 10: return navI0;
         case 11: return navOmegaA0;
         case 12: return navCrs;
         case 13: return navCis;
         case 14: return navCus;
         case 15: return navCrc;
         case 16: return navCic;
         case 17: return navCuc;
         case 18: return addNAVparam;
         case 19: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "navURA";
         case 1: return "navFitFlag";
         case 2: return "navToe";
         case 3: return "navOmega";
         case 4: return "navDeltaN";
         case 5: return "navM0";
         case 6: return "navOmegaADot";
         case 7: return "navE";
         case 8: return "navIDot";
         case 9: return "navAPowerHalf";
         case 10: return "navI0";
         case 11: return "navOmegaA0";
         case 12: return "navCrs";
         case 13: return "navCis";
         case 14: return "navCus";
         case 15: return "navCrc";
         case 16: return "navCic";
         case 17: return "navCuc";
         case 18: return "addNAVparam";
         case 19: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean addNAVparamPresent = buffer.decodeBit ("addNAVparamPresent");

      // decode navURA

      buffer.getContext().eventDispatcher.startElement("navURA", -1);

      navURA = new Asn1Integer();
      navURA.decode (buffer, 0, 15);
      buffer.getContext().eventDispatcher.endElement("navURA", -1);

      // decode navFitFlag

      buffer.getContext().eventDispatcher.startElement("navFitFlag", -1);

      navFitFlag = new Asn1Integer();
      navFitFlag.decode (buffer, 0, 1);
      buffer.getContext().eventDispatcher.endElement("navFitFlag", -1);

      // decode navToe

      buffer.getContext().eventDispatcher.startElement("navToe", -1);

      navToe = new Asn1Integer();
      navToe.decode (buffer, 0, 37799);
      buffer.getContext().eventDispatcher.endElement("navToe", -1);

      // decode navOmega

      buffer.getContext().eventDispatcher.startElement("navOmega", -1);

      navOmega = new Asn1Integer();
      navOmega.decode (buffer, -2147483648, 2147483647);
      buffer.getContext().eventDispatcher.endElement("navOmega", -1);

      // decode navDeltaN

      buffer.getContext().eventDispatcher.startElement("navDeltaN", -1);

      navDeltaN = new Asn1Integer();
      navDeltaN.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("navDeltaN", -1);

      // decode navM0

      buffer.getContext().eventDispatcher.startElement("navM0", -1);

      navM0 = new Asn1Integer();
      navM0.decode (buffer, -2147483648, 2147483647);
      buffer.getContext().eventDispatcher.endElement("navM0", -1);

      // decode navOmegaADot

      buffer.getContext().eventDispatcher.startElement("navOmegaADot", -1);

      navOmegaADot = new Asn1Integer();
      navOmegaADot.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("navOmegaADot", -1);

      // decode navE

      buffer.getContext().eventDispatcher.startElement("navE", -1);

      navE = new Asn1Integer();
      navE.decode (buffer, 0, 4294967295L);
      buffer.getContext().eventDispatcher.endElement("navE", -1);

      // decode navIDot

      buffer.getContext().eventDispatcher.startElement("navIDot", -1);

      navIDot = new Asn1Integer();
      navIDot.decode (buffer, -8192, 8191);
      buffer.getContext().eventDispatcher.endElement("navIDot", -1);

      // decode navAPowerHalf

      buffer.getContext().eventDispatcher.startElement("navAPowerHalf", -1);

      navAPowerHalf = new Asn1Integer();
      navAPowerHalf.decode (buffer, 0, 4294967295L);
      buffer.getContext().eventDispatcher.endElement("navAPowerHalf", -1);

      // decode navI0

      buffer.getContext().eventDispatcher.startElement("navI0", -1);

      navI0 = new Asn1Integer();
      navI0.decode (buffer, -2147483648, 2147483647);
      buffer.getContext().eventDispatcher.endElement("navI0", -1);

      // decode navOmegaA0

      buffer.getContext().eventDispatcher.startElement("navOmegaA0", -1);

      navOmegaA0 = new Asn1Integer();
      navOmegaA0.decode (buffer, -2147483648, 2147483647);
      buffer.getContext().eventDispatcher.endElement("navOmegaA0", -1);

      // decode navCrs

      buffer.getContext().eventDispatcher.startElement("navCrs", -1);

      navCrs = new Asn1Integer();
      navCrs.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("navCrs", -1);

      // decode navCis

      buffer.getContext().eventDispatcher.startElement("navCis", -1);

      navCis = new Asn1Integer();
      navCis.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("navCis", -1);

      // decode navCus

      buffer.getContext().eventDispatcher.startElement("navCus", -1);

      navCus = new Asn1Integer();
      navCus.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("navCus", -1);

      // decode navCrc

      buffer.getContext().eventDispatcher.startElement("navCrc", -1);

      navCrc = new Asn1Integer();
      navCrc.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("navCrc", -1);

      // decode navCic

      buffer.getContext().eventDispatcher.startElement("navCic", -1);

      navCic = new Asn1Integer();
      navCic.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("navCic", -1);

      // decode navCuc

      buffer.getContext().eventDispatcher.startElement("navCuc", -1);

      navCuc = new Asn1Integer();
      navCuc.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("navCuc", -1);

      // decode addNAVparam

      if (addNAVparamPresent) {
         buffer.getContext().eventDispatcher.startElement("addNAVparam", -1);

         addNAVparam = new NavModelNAV_KeplerianSet_addNAVparam();
         addNAVparam.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("addNAVparam", -1);
      }
      else {
         addNAVparam = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((addNAVparam != null), null);

      // encode navURA

      if (navURA != null) {
         buffer.getContext().eventDispatcher.startElement("navURA", -1);

         navURA.encode (buffer, 0, 15);

         buffer.getContext().eventDispatcher.endElement("navURA", -1);
      }
      else throw new Asn1MissingRequiredException ("navURA");

      // encode navFitFlag

      if (navFitFlag != null) {
         buffer.getContext().eventDispatcher.startElement("navFitFlag", -1);

         navFitFlag.encode (buffer, 0, 1);

         buffer.getContext().eventDispatcher.endElement("navFitFlag", -1);
      }
      else throw new Asn1MissingRequiredException ("navFitFlag");

      // encode navToe

      if (navToe != null) {
         buffer.getContext().eventDispatcher.startElement("navToe", -1);

         navToe.encode (buffer, 0, 37799);

         buffer.getContext().eventDispatcher.endElement("navToe", -1);
      }
      else throw new Asn1MissingRequiredException ("navToe");

      // encode navOmega

      if (navOmega != null) {
         buffer.getContext().eventDispatcher.startElement("navOmega", -1);

         navOmega.encode (buffer, -2147483648, 2147483647);

         buffer.getContext().eventDispatcher.endElement("navOmega", -1);
      }
      else throw new Asn1MissingRequiredException ("navOmega");

      // encode navDeltaN

      if (navDeltaN != null) {
         buffer.getContext().eventDispatcher.startElement("navDeltaN", -1);

         navDeltaN.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("navDeltaN", -1);
      }
      else throw new Asn1MissingRequiredException ("navDeltaN");

      // encode navM0

      if (navM0 != null) {
         buffer.getContext().eventDispatcher.startElement("navM0", -1);

         navM0.encode (buffer, -2147483648, 2147483647);

         buffer.getContext().eventDispatcher.endElement("navM0", -1);
      }
      else throw new Asn1MissingRequiredException ("navM0");

      // encode navOmegaADot

      if (navOmegaADot != null) {
         buffer.getContext().eventDispatcher.startElement("navOmegaADot", -1);

         navOmegaADot.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("navOmegaADot", -1);
      }
      else throw new Asn1MissingRequiredException ("navOmegaADot");

      // encode navE

      if (navE != null) {
         buffer.getContext().eventDispatcher.startElement("navE", -1);

         navE.encode (buffer, 0, 4294967295L);

         buffer.getContext().eventDispatcher.endElement("navE", -1);
      }
      else throw new Asn1MissingRequiredException ("navE");

      // encode navIDot

      if (navIDot != null) {
         buffer.getContext().eventDispatcher.startElement("navIDot", -1);

         navIDot.encode (buffer, -8192, 8191);

         buffer.getContext().eventDispatcher.endElement("navIDot", -1);
      }
      else throw new Asn1MissingRequiredException ("navIDot");

      // encode navAPowerHalf

      if (navAPowerHalf != null) {
         buffer.getContext().eventDispatcher.startElement("navAPowerHalf", -1);

         navAPowerHalf.encode (buffer, 0, 4294967295L);

         buffer.getContext().eventDispatcher.endElement("navAPowerHalf", -1);
      }
      else throw new Asn1MissingRequiredException ("navAPowerHalf");

      // encode navI0

      if (navI0 != null) {
         buffer.getContext().eventDispatcher.startElement("navI0", -1);

         navI0.encode (buffer, -2147483648, 2147483647);

         buffer.getContext().eventDispatcher.endElement("navI0", -1);
      }
      else throw new Asn1MissingRequiredException ("navI0");

      // encode navOmegaA0

      if (navOmegaA0 != null) {
         buffer.getContext().eventDispatcher.startElement("navOmegaA0", -1);

         navOmegaA0.encode (buffer, -2147483648, 2147483647);

         buffer.getContext().eventDispatcher.endElement("navOmegaA0", -1);
      }
      else throw new Asn1MissingRequiredException ("navOmegaA0");

      // encode navCrs

      if (navCrs != null) {
         buffer.getContext().eventDispatcher.startElement("navCrs", -1);

         navCrs.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("navCrs", -1);
      }
      else throw new Asn1MissingRequiredException ("navCrs");

      // encode navCis

      if (navCis != null) {
         buffer.getContext().eventDispatcher.startElement("navCis", -1);

         navCis.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("navCis", -1);
      }
      else throw new Asn1MissingRequiredException ("navCis");

      // encode navCus

      if (navCus != null) {
         buffer.getContext().eventDispatcher.startElement("navCus", -1);

         navCus.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("navCus", -1);
      }
      else throw new Asn1MissingRequiredException ("navCus");

      // encode navCrc

      if (navCrc != null) {
         buffer.getContext().eventDispatcher.startElement("navCrc", -1);

         navCrc.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("navCrc", -1);
      }
      else throw new Asn1MissingRequiredException ("navCrc");

      // encode navCic

      if (navCic != null) {
         buffer.getContext().eventDispatcher.startElement("navCic", -1);

         navCic.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("navCic", -1);
      }
      else throw new Asn1MissingRequiredException ("navCic");

      // encode navCuc

      if (navCuc != null) {
         buffer.getContext().eventDispatcher.startElement("navCuc", -1);

         navCuc.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("navCuc", -1);
      }
      else throw new Asn1MissingRequiredException ("navCuc");

      // encode addNAVparam

      if (addNAVparam != null) {
         buffer.getContext().eventDispatcher.startElement("addNAVparam", -1);

         addNAVparam.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("addNAVparam", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
