/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Components;

import com.objsys.asn1j.runtime.*;

public class QoP extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "QoP";
   }

   protected Asn1Integer horacc;
   protected Asn1Integer veracc;  // optional
   protected Asn1Integer maxLocAge;  // optional
   protected Asn1Integer delay;  // optional
   protected Asn1Integer ver2_responseTime;  // optional
   protected Asn1OpenExt extElem1;

   public QoP () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public QoP (
      Asn1Integer horacc_,
      Asn1Integer veracc_,
      Asn1Integer maxLocAge_,
      Asn1Integer delay_,
      Asn1Integer ver2_responseTime_
   ) throws Asn1Exception {
      super();
      setHoracc (horacc_);
      setVeracc (veracc_);
      setMaxLocAge (maxLocAge_);
      setDelay (delay_);
      setVer2_responseTime (ver2_responseTime_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public QoP (
      Asn1Integer horacc_
   ) throws Asn1Exception {
      super();
      setHoracc (horacc_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public QoP (long horacc_,
      long veracc_,
      long maxLocAge_,
      long delay_,
      long ver2_responseTime_
   ) throws Asn1Exception {
      super();
      setHoracc (horacc_);
      setVeracc (veracc_);
      setMaxLocAge (maxLocAge_);
      setDelay (delay_);
      setVer2_responseTime (ver2_responseTime_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public QoP (
      long horacc_
   ) throws Asn1Exception {
      super();
      setHoracc (horacc_);
   }

   public void init () {
      horacc = null;
      veracc = null;
      maxLocAge = null;
      delay = null;
      ver2_responseTime = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof QoP) ) return false;

      QoP rhs = (QoP) obj;

      if (horacc == null) {
         if (rhs.horacc != null) return false;
      }
      else {
         if (!horacc.equals(rhs.horacc)) {
            return false;
         }
      }

      if (veracc == null) {
         if (rhs.veracc != null) return false;
      }
      else {
         if (!veracc.equals(rhs.veracc)) {
            return false;
         }
      }

      if (maxLocAge == null) {
         if (rhs.maxLocAge != null) return false;
      }
      else {
         if (!maxLocAge.equals(rhs.maxLocAge)) {
            return false;
         }
      }

      if (delay == null) {
         if (rhs.delay != null) return false;
      }
      else {
         if (!delay.equals(rhs.delay)) {
            return false;
         }
      }

      if (ver2_responseTime == null) {
         if (rhs.ver2_responseTime != null) return false;
      }
      else {
         if (!ver2_responseTime.equals(rhs.ver2_responseTime)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (horacc != null) __code = 31*__code + horacc.hashCode();
      if (veracc != null) __code = 31*__code + veracc.hashCode();
      if (maxLocAge != null) __code = 31*__code + maxLocAge.hashCode();
      if (delay != null) __code = 31*__code + delay.hashCode();
      if (ver2_responseTime != null) __code = 31*__code + ver2_responseTime.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Horacc
    */
   public Asn1Integer getHoracc () {
      return horacc;
   }

   public void setHoracc (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.horacc = value;
   }

   public void setHoracc (long value) 
      throws Asn1Exception
   {
      setHoracc (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Veracc
    */
   public Asn1Integer getVeracc () {
      return veracc;
   }

   public void setVeracc (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.veracc = value;
   }

   public void setVeracc (long value) 
      throws Asn1Exception
   {
      setVeracc (new Asn1Integer(value));
   }
   public boolean hasVeracc () {
      return (veracc != null);
   }

   /**
    * Accessor/mutator methods for MaxLocAge
    */
   public Asn1Integer getMaxLocAge () {
      return maxLocAge;
   }

   public void setMaxLocAge (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.maxLocAge = value;
   }

   public void setMaxLocAge (long value) 
      throws Asn1Exception
   {
      setMaxLocAge (new Asn1Integer(value));
   }
   public boolean hasMaxLocAge () {
      return (maxLocAge != null);
   }

   /**
    * Accessor/mutator methods for Delay
    */
   public Asn1Integer getDelay () {
      return delay;
   }

   public void setDelay (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 7))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.delay = value;
   }

   public void setDelay (long value) 
      throws Asn1Exception
   {
      setDelay (new Asn1Integer(value));
   }
   public boolean hasDelay () {
      return (delay != null);
   }

   /**
    * Accessor/mutator methods for Ver2_responseTime
    */
   public Asn1Integer getVer2_responseTime () {
      return ver2_responseTime;
   }

   public void setVer2_responseTime (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 128))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.ver2_responseTime = value;
   }

   public void setVer2_responseTime (long value) 
      throws Asn1Exception
   {
      setVer2_responseTime (new Asn1Integer(value));
   }
   public boolean hasVer2_responseTime () {
      return (ver2_responseTime != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return horacc;
         case 1: return veracc;
         case 2: return maxLocAge;
         case 3: return delay;
         case 4: return ver2_responseTime;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "horacc";
         case 1: return "veracc";
         case 2: return "maxLocAge";
         case 3: return "delay";
         case 4: return "ver2-responseTime";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean veraccPresent = buffer.decodeBit ("veraccPresent");
      boolean maxLocAgePresent = buffer.decodeBit ("maxLocAgePresent");
      boolean delayPresent = buffer.decodeBit ("delayPresent");

      // decode horacc

      buffer.getContext().eventDispatcher.startElement("horacc", -1);

      horacc = new Asn1Integer();
      horacc.decode (buffer, 0, 127);
      buffer.getContext().eventDispatcher.endElement("horacc", -1);

      // decode veracc

      if (veraccPresent) {
         buffer.getContext().eventDispatcher.startElement("veracc", -1);

         veracc = new Asn1Integer();
         veracc.decode (buffer, 0, 127);
         buffer.getContext().eventDispatcher.endElement("veracc", -1);
      }
      else {
         veracc = null;
      }

      // decode maxLocAge

      if (maxLocAgePresent) {
         buffer.getContext().eventDispatcher.startElement("maxLocAge", -1);

         maxLocAge = new Asn1Integer();
         maxLocAge.decode (buffer, 0, 65535);
         buffer.getContext().eventDispatcher.endElement("maxLocAge", -1);
      }
      else {
         maxLocAge = null;
      }

      // decode delay

      if (delayPresent) {
         buffer.getContext().eventDispatcher.startElement("delay", -1);

         delay = new Asn1Integer();
         delay.decode (buffer, 0, 7);
         buffer.getContext().eventDispatcher.endElement("delay", -1);
      }
      else {
         delay = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("ver2_responseTimePresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode ver2_responseTime

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("ver2_responseTime", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            ver2_responseTime = new Asn1Integer();
            ver2_responseTime.decode (buffer, 1, 128);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("ver2_responseTime", -1);

         }
         else {
            ver2_responseTime = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((ver2_responseTime != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((veracc != null), null);
      buffer.encodeBit ((maxLocAge != null), null);
      buffer.encodeBit ((delay != null), null);

      // encode horacc

      if (horacc != null) {
         buffer.getContext().eventDispatcher.startElement("horacc", -1);

         horacc.encode (buffer, 0, 127);

         buffer.getContext().eventDispatcher.endElement("horacc", -1);
      }
      else throw new Asn1MissingRequiredException ("horacc");

      // encode veracc

      if (veracc != null) {
         buffer.getContext().eventDispatcher.startElement("veracc", -1);

         veracc.encode (buffer, 0, 127);

         buffer.getContext().eventDispatcher.endElement("veracc", -1);
      }

      // encode maxLocAge

      if (maxLocAge != null) {
         buffer.getContext().eventDispatcher.startElement("maxLocAge", -1);

         maxLocAge.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("maxLocAge", -1);
      }

      // encode delay

      if (delay != null) {
         buffer.getContext().eventDispatcher.startElement("delay", -1);

         delay.encode (buffer, 0, 7);

         buffer.getContext().eventDispatcher.endElement("delay", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((ver2_responseTime != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // ver2_responseTime

         if (ver2_responseTime != null) {
            buffer.reset();
            ver2_responseTime.encode (buffer, 1, 128);
            buffer.getContext().eventDispatcher.startElement("ver2_responseTime", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("ver2_responseTime", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
