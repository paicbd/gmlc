/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasurementReferenceTime_networkTime_gSM extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   protected Asn1Integer bcchCarrier;
   protected Asn1Integer bsic;
   protected CellGlobalIdGERAN cellGlobalId;  // optional
   protected MeasurementReferenceTime_networkTime_gSM_referenceFrame referenceFrame;
   protected Asn1Integer deltaGNSS_TOD;  // optional
   protected Asn1OpenExt extElem1;

   public MeasurementReferenceTime_networkTime_gSM () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasurementReferenceTime_networkTime_gSM (
      Asn1Integer bcchCarrier_,
      Asn1Integer bsic_,
      CellGlobalIdGERAN cellGlobalId_,
      MeasurementReferenceTime_networkTime_gSM_referenceFrame referenceFrame_,
      Asn1Integer deltaGNSS_TOD_
   ) throws Asn1Exception {
      super();
      setBcchCarrier (bcchCarrier_);
      setBsic (bsic_);
      setCellGlobalId (cellGlobalId_);
      setReferenceFrame (referenceFrame_);
      setDeltaGNSS_TOD (deltaGNSS_TOD_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasurementReferenceTime_networkTime_gSM (
      Asn1Integer bcchCarrier_,
      Asn1Integer bsic_,
      MeasurementReferenceTime_networkTime_gSM_referenceFrame referenceFrame_
   ) throws Asn1Exception {
      super();
      setBcchCarrier (bcchCarrier_);
      setBsic (bsic_);
      setReferenceFrame (referenceFrame_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasurementReferenceTime_networkTime_gSM (long bcchCarrier_,
      long bsic_,
      CellGlobalIdGERAN cellGlobalId_,
      MeasurementReferenceTime_networkTime_gSM_referenceFrame referenceFrame_,
      long deltaGNSS_TOD_
   ) throws Asn1Exception {
      super();
      setBcchCarrier (bcchCarrier_);
      setBsic (bsic_);
      setCellGlobalId (cellGlobalId_);
      setReferenceFrame (referenceFrame_);
      setDeltaGNSS_TOD (deltaGNSS_TOD_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MeasurementReferenceTime_networkTime_gSM (
      long bcchCarrier_,
      long bsic_,
      MeasurementReferenceTime_networkTime_gSM_referenceFrame referenceFrame_
   ) throws Asn1Exception {
      super();
      setBcchCarrier (bcchCarrier_);
      setBsic (bsic_);
      setReferenceFrame (referenceFrame_);
   }

   public void init () {
      bcchCarrier = null;
      bsic = null;
      cellGlobalId = null;
      referenceFrame = null;
      deltaGNSS_TOD = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof MeasurementReferenceTime_networkTime_gSM) ) return false;

      MeasurementReferenceTime_networkTime_gSM rhs = (MeasurementReferenceTime_networkTime_gSM) obj;

      if (bcchCarrier == null) {
         if (rhs.bcchCarrier != null) return false;
      }
      else {
         if (!bcchCarrier.equals(rhs.bcchCarrier)) {
            return false;
         }
      }

      if (bsic == null) {
         if (rhs.bsic != null) return false;
      }
      else {
         if (!bsic.equals(rhs.bsic)) {
            return false;
         }
      }

      if (cellGlobalId == null) {
         if (rhs.cellGlobalId != null) return false;
      }
      else {
         if (!cellGlobalId.equals(rhs.cellGlobalId)) {
            return false;
         }
      }

      if (referenceFrame == null) {
         if (rhs.referenceFrame != null) return false;
      }
      else {
         if (!referenceFrame.equals(rhs.referenceFrame)) {
            return false;
         }
      }

      if (deltaGNSS_TOD == null) {
         if (rhs.deltaGNSS_TOD != null) return false;
      }
      else {
         if (!deltaGNSS_TOD.equals(rhs.deltaGNSS_TOD)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (bcchCarrier != null) __code = 31*__code + bcchCarrier.hashCode();
      if (bsic != null) __code = 31*__code + bsic.hashCode();
      if (cellGlobalId != null) __code = 31*__code + cellGlobalId.hashCode();
      if (referenceFrame != null) __code = 31*__code + referenceFrame.hashCode();
      if (deltaGNSS_TOD != null) __code = 31*__code + deltaGNSS_TOD.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for BcchCarrier
    */
   public Asn1Integer getBcchCarrier () {
      return bcchCarrier;
   }

   public void setBcchCarrier (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.bcchCarrier = value;
   }

   public void setBcchCarrier (long value) 
      throws Asn1Exception
   {
      setBcchCarrier (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Bsic
    */
   public Asn1Integer getBsic () {
      return bsic;
   }

   public void setBsic (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 63))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.bsic = value;
   }

   public void setBsic (long value) 
      throws Asn1Exception
   {
      setBsic (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CellGlobalId
    */
   public CellGlobalIdGERAN getCellGlobalId () {
      return cellGlobalId;
   }

   public void setCellGlobalId (CellGlobalIdGERAN value) {
      this.cellGlobalId = value;
   }

   public boolean hasCellGlobalId () {
      return (cellGlobalId != null);
   }

   /**
    * Accessor/mutator methods for ReferenceFrame
    */
   public MeasurementReferenceTime_networkTime_gSM_referenceFrame getReferenceFrame () {
      return referenceFrame;
   }

   public void setReferenceFrame (MeasurementReferenceTime_networkTime_gSM_referenceFrame value) {
      this.referenceFrame = value;
   }

   /**
    * Accessor/mutator methods for DeltaGNSS_TOD
    */
   public Asn1Integer getDeltaGNSS_TOD () {
      return deltaGNSS_TOD;
   }

   public void setDeltaGNSS_TOD (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.deltaGNSS_TOD = value;
   }

   public void setDeltaGNSS_TOD (long value) 
      throws Asn1Exception
   {
      setDeltaGNSS_TOD (new Asn1Integer(value));
   }
   public boolean hasDeltaGNSS_TOD () {
      return (deltaGNSS_TOD != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return bcchCarrier;
         case 1: return bsic;
         case 2: return cellGlobalId;
         case 3: return referenceFrame;
         case 4: return deltaGNSS_TOD;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "bcchCarrier";
         case 1: return "bsic";
         case 2: return "cellGlobalId";
         case 3: return "referenceFrame";
         case 4: return "deltaGNSS-TOD";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean cellGlobalIdPresent = buffer.decodeBit ("cellGlobalIdPresent");
      boolean deltaGNSS_TODPresent = buffer.decodeBit ("deltaGNSS_TODPresent");

      // decode bcchCarrier

      buffer.getContext().eventDispatcher.startElement("bcchCarrier", -1);

      bcchCarrier = new Asn1Integer();
      bcchCarrier.decode (buffer, 0, 1023);
      buffer.getContext().eventDispatcher.endElement("bcchCarrier", -1);

      // decode bsic

      buffer.getContext().eventDispatcher.startElement("bsic", -1);

      bsic = new Asn1Integer();
      bsic.decode (buffer, 0, 63);
      buffer.getContext().eventDispatcher.endElement("bsic", -1);

      // decode cellGlobalId

      if (cellGlobalIdPresent) {
         buffer.getContext().eventDispatcher.startElement("cellGlobalId", -1);

         cellGlobalId = new CellGlobalIdGERAN();
         cellGlobalId.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellGlobalId", -1);
      }
      else {
         cellGlobalId = null;
      }

      // decode referenceFrame

      buffer.getContext().eventDispatcher.startElement("referenceFrame", -1);

      referenceFrame = new MeasurementReferenceTime_networkTime_gSM_referenceFrame();
      referenceFrame.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("referenceFrame", -1);

      // decode deltaGNSS_TOD

      if (deltaGNSS_TODPresent) {
         buffer.getContext().eventDispatcher.startElement("deltaGNSS_TOD", -1);

         deltaGNSS_TOD = new Asn1Integer();
         deltaGNSS_TOD.decode (buffer, 0, 127);
         buffer.getContext().eventDispatcher.endElement("deltaGNSS_TOD", -1);
      }
      else {
         deltaGNSS_TOD = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((cellGlobalId != null), null);
      buffer.encodeBit ((deltaGNSS_TOD != null), null);

      // encode bcchCarrier

      if (bcchCarrier != null) {
         buffer.getContext().eventDispatcher.startElement("bcchCarrier", -1);

         bcchCarrier.encode (buffer, 0, 1023);

         buffer.getContext().eventDispatcher.endElement("bcchCarrier", -1);
      }
      else throw new Asn1MissingRequiredException ("bcchCarrier");

      // encode bsic

      if (bsic != null) {
         buffer.getContext().eventDispatcher.startElement("bsic", -1);

         bsic.encode (buffer, 0, 63);

         buffer.getContext().eventDispatcher.endElement("bsic", -1);
      }
      else throw new Asn1MissingRequiredException ("bsic");

      // encode cellGlobalId

      if (cellGlobalId != null) {
         buffer.getContext().eventDispatcher.startElement("cellGlobalId", -1);

         cellGlobalId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cellGlobalId", -1);
      }

      // encode referenceFrame

      if (referenceFrame != null) {
         buffer.getContext().eventDispatcher.startElement("referenceFrame", -1);

         referenceFrame.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("referenceFrame", -1);
      }
      else throw new Asn1MissingRequiredException ("referenceFrame");

      // encode deltaGNSS_TOD

      if (deltaGNSS_TOD != null) {
         buffer.getContext().eventDispatcher.startElement("deltaGNSS_TOD", -1);

         deltaGNSS_TOD.encode (buffer, 0, 127);

         buffer.getContext().eventDispatcher.endElement("deltaGNSS_TOD", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
