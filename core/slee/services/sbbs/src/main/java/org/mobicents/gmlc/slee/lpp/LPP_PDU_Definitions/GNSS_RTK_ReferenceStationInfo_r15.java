/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_RTK_ReferenceStationInfo_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-RTK-ReferenceStationInfo-r15";
   }

   protected GNSS_ReferenceStationID_r15 referenceStationID_r15;
   protected GNSS_RTK_ReferenceStationInfo_r15_referenceStationIndicator_r15 referenceStationIndicator_r15 = null;
   protected Asn1Integer antenna_reference_point_ECEF_X_r15;
   protected Asn1Integer antenna_reference_point_ECEF_Y_r15;
   protected Asn1Integer antenna_reference_point_ECEF_Z_r15;
   protected Asn1Integer antennaHeight_r15;  // optional
   protected AntennaDescription_r15 antennaDescription_r15;  // optional
   protected AntennaReferencePointUnc_r15 antenna_reference_point_unc_r15;  // optional
   protected PhysicalReferenceStationInfo_r15 physical_reference_station_info_r15;  // optional
   protected EqualIntegerAmbiguityLevel_r16 equalIntegerAmbiguityLevel_r16;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_RTK_ReferenceStationInfo_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_RTK_ReferenceStationInfo_r15 (
      GNSS_ReferenceStationID_r15 referenceStationID_r15_,
      GNSS_RTK_ReferenceStationInfo_r15_referenceStationIndicator_r15 referenceStationIndicator_r15_,
      Asn1Integer antenna_reference_point_ECEF_X_r15_,
      Asn1Integer antenna_reference_point_ECEF_Y_r15_,
      Asn1Integer antenna_reference_point_ECEF_Z_r15_,
      Asn1Integer antennaHeight_r15_,
      AntennaDescription_r15 antennaDescription_r15_,
      AntennaReferencePointUnc_r15 antenna_reference_point_unc_r15_,
      PhysicalReferenceStationInfo_r15 physical_reference_station_info_r15_,
      EqualIntegerAmbiguityLevel_r16 equalIntegerAmbiguityLevel_r16_
   ) throws Asn1Exception {
      super();
      setReferenceStationID_r15 (referenceStationID_r15_);
      setReferenceStationIndicator_r15 (referenceStationIndicator_r15_);
      setAntenna_reference_point_ECEF_X_r15 (antenna_reference_point_ECEF_X_r15_);
      setAntenna_reference_point_ECEF_Y_r15 (antenna_reference_point_ECEF_Y_r15_);
      setAntenna_reference_point_ECEF_Z_r15 (antenna_reference_point_ECEF_Z_r15_);
      setAntennaHeight_r15 (antennaHeight_r15_);
      setAntennaDescription_r15 (antennaDescription_r15_);
      setAntenna_reference_point_unc_r15 (antenna_reference_point_unc_r15_);
      setPhysical_reference_station_info_r15 (physical_reference_station_info_r15_);
      setEqualIntegerAmbiguityLevel_r16 (equalIntegerAmbiguityLevel_r16_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GNSS_RTK_ReferenceStationInfo_r15 (
      GNSS_ReferenceStationID_r15 referenceStationID_r15_,
      GNSS_RTK_ReferenceStationInfo_r15_referenceStationIndicator_r15 referenceStationIndicator_r15_,
      Asn1Integer antenna_reference_point_ECEF_X_r15_,
      Asn1Integer antenna_reference_point_ECEF_Y_r15_,
      Asn1Integer antenna_reference_point_ECEF_Z_r15_
   ) throws Asn1Exception {
      super();
      setReferenceStationID_r15 (referenceStationID_r15_);
      setReferenceStationIndicator_r15 (referenceStationIndicator_r15_);
      setAntenna_reference_point_ECEF_X_r15 (antenna_reference_point_ECEF_X_r15_);
      setAntenna_reference_point_ECEF_Y_r15 (antenna_reference_point_ECEF_Y_r15_);
      setAntenna_reference_point_ECEF_Z_r15 (antenna_reference_point_ECEF_Z_r15_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GNSS_RTK_ReferenceStationInfo_r15 (GNSS_ReferenceStationID_r15 referenceStationID_r15_,
      GNSS_RTK_ReferenceStationInfo_r15_referenceStationIndicator_r15 referenceStationIndicator_r15_,
      long antenna_reference_point_ECEF_X_r15_,
      long antenna_reference_point_ECEF_Y_r15_,
      long antenna_reference_point_ECEF_Z_r15_,
      long antennaHeight_r15_,
      AntennaDescription_r15 antennaDescription_r15_,
      AntennaReferencePointUnc_r15 antenna_reference_point_unc_r15_,
      PhysicalReferenceStationInfo_r15 physical_reference_station_info_r15_,
      EqualIntegerAmbiguityLevel_r16 equalIntegerAmbiguityLevel_r16_
   ) throws Asn1Exception {
      super();
      setReferenceStationID_r15 (referenceStationID_r15_);
      setReferenceStationIndicator_r15 (referenceStationIndicator_r15_);
      setAntenna_reference_point_ECEF_X_r15 (antenna_reference_point_ECEF_X_r15_);
      setAntenna_reference_point_ECEF_Y_r15 (antenna_reference_point_ECEF_Y_r15_);
      setAntenna_reference_point_ECEF_Z_r15 (antenna_reference_point_ECEF_Z_r15_);
      setAntennaHeight_r15 (antennaHeight_r15_);
      setAntennaDescription_r15 (antennaDescription_r15_);
      setAntenna_reference_point_unc_r15 (antenna_reference_point_unc_r15_);
      setPhysical_reference_station_info_r15 (physical_reference_station_info_r15_);
      setEqualIntegerAmbiguityLevel_r16 (equalIntegerAmbiguityLevel_r16_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public GNSS_RTK_ReferenceStationInfo_r15 (
      GNSS_ReferenceStationID_r15 referenceStationID_r15_,
      GNSS_RTK_ReferenceStationInfo_r15_referenceStationIndicator_r15 referenceStationIndicator_r15_,
      long antenna_reference_point_ECEF_X_r15_,
      long antenna_reference_point_ECEF_Y_r15_,
      long antenna_reference_point_ECEF_Z_r15_
   ) throws Asn1Exception {
      super();
      setReferenceStationID_r15 (referenceStationID_r15_);
      setReferenceStationIndicator_r15 (referenceStationIndicator_r15_);
      setAntenna_reference_point_ECEF_X_r15 (antenna_reference_point_ECEF_X_r15_);
      setAntenna_reference_point_ECEF_Y_r15 (antenna_reference_point_ECEF_Y_r15_);
      setAntenna_reference_point_ECEF_Z_r15 (antenna_reference_point_ECEF_Z_r15_);
   }

   public void init () {
      referenceStationID_r15 = null;
      referenceStationIndicator_r15 = null;
      antenna_reference_point_ECEF_X_r15 = null;
      antenna_reference_point_ECEF_Y_r15 = null;
      antenna_reference_point_ECEF_Z_r15 = null;
      antennaHeight_r15 = null;
      antennaDescription_r15 = null;
      antenna_reference_point_unc_r15 = null;
      physical_reference_station_info_r15 = null;
      equalIntegerAmbiguityLevel_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_RTK_ReferenceStationInfo_r15) ) return false;

      GNSS_RTK_ReferenceStationInfo_r15 rhs = (GNSS_RTK_ReferenceStationInfo_r15) obj;

      if (referenceStationID_r15 == null) {
         if (rhs.referenceStationID_r15 != null) return false;
      }
      else {
         if (!referenceStationID_r15.equals(rhs.referenceStationID_r15)) {
            return false;
         }
      }

      if (referenceStationIndicator_r15 == null) {
         if (rhs.referenceStationIndicator_r15 != null) return false;
      }
      else {
         if (!referenceStationIndicator_r15.equals(rhs.referenceStationIndicator_r15)) {
            return false;
         }
      }

      if (antenna_reference_point_ECEF_X_r15 == null) {
         if (rhs.antenna_reference_point_ECEF_X_r15 != null) return false;
      }
      else {
         if (!antenna_reference_point_ECEF_X_r15.equals(rhs.antenna_reference_point_ECEF_X_r15)) {
            return false;
         }
      }

      if (antenna_reference_point_ECEF_Y_r15 == null) {
         if (rhs.antenna_reference_point_ECEF_Y_r15 != null) return false;
      }
      else {
         if (!antenna_reference_point_ECEF_Y_r15.equals(rhs.antenna_reference_point_ECEF_Y_r15)) {
            return false;
         }
      }

      if (antenna_reference_point_ECEF_Z_r15 == null) {
         if (rhs.antenna_reference_point_ECEF_Z_r15 != null) return false;
      }
      else {
         if (!antenna_reference_point_ECEF_Z_r15.equals(rhs.antenna_reference_point_ECEF_Z_r15)) {
            return false;
         }
      }

      if (antennaHeight_r15 == null) {
         if (rhs.antennaHeight_r15 != null) return false;
      }
      else {
         if (!antennaHeight_r15.equals(rhs.antennaHeight_r15)) {
            return false;
         }
      }

      if (antennaDescription_r15 == null) {
         if (rhs.antennaDescription_r15 != null) return false;
      }
      else {
         if (!antennaDescription_r15.equals(rhs.antennaDescription_r15)) {
            return false;
         }
      }

      if (antenna_reference_point_unc_r15 == null) {
         if (rhs.antenna_reference_point_unc_r15 != null) return false;
      }
      else {
         if (!antenna_reference_point_unc_r15.equals(rhs.antenna_reference_point_unc_r15)) {
            return false;
         }
      }

      if (physical_reference_station_info_r15 == null) {
         if (rhs.physical_reference_station_info_r15 != null) return false;
      }
      else {
         if (!physical_reference_station_info_r15.equals(rhs.physical_reference_station_info_r15)) {
            return false;
         }
      }

      if (equalIntegerAmbiguityLevel_r16 == null) {
         if (rhs.equalIntegerAmbiguityLevel_r16 != null) return false;
      }
      else {
         if (!equalIntegerAmbiguityLevel_r16.equals(rhs.equalIntegerAmbiguityLevel_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (referenceStationID_r15 != null) __code = 31*__code + referenceStationID_r15.hashCode();
      if (referenceStationIndicator_r15 != null) __code = 31*__code + referenceStationIndicator_r15.hashCode();
      if (antenna_reference_point_ECEF_X_r15 != null) __code = 31*__code + antenna_reference_point_ECEF_X_r15.hashCode();
      if (antenna_reference_point_ECEF_Y_r15 != null) __code = 31*__code + antenna_reference_point_ECEF_Y_r15.hashCode();
      if (antenna_reference_point_ECEF_Z_r15 != null) __code = 31*__code + antenna_reference_point_ECEF_Z_r15.hashCode();
      if (antennaHeight_r15 != null) __code = 31*__code + antennaHeight_r15.hashCode();
      if (antennaDescription_r15 != null) __code = 31*__code + antennaDescription_r15.hashCode();
      if (antenna_reference_point_unc_r15 != null) __code = 31*__code + antenna_reference_point_unc_r15.hashCode();
      if (physical_reference_station_info_r15 != null) __code = 31*__code + physical_reference_station_info_r15.hashCode();
      if (equalIntegerAmbiguityLevel_r16 != null) __code = 31*__code + equalIntegerAmbiguityLevel_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for ReferenceStationID_r15
    */
   public GNSS_ReferenceStationID_r15 getReferenceStationID_r15 () {
      return referenceStationID_r15;
   }

   public void setReferenceStationID_r15 (GNSS_ReferenceStationID_r15 value) {
      this.referenceStationID_r15 = value;
   }

   /**
    * Accessor/mutator methods for ReferenceStationIndicator_r15
    */
   public GNSS_RTK_ReferenceStationInfo_r15_referenceStationIndicator_r15 getReferenceStationIndicator_r15 () {
      return referenceStationIndicator_r15;
   }

   public void setReferenceStationIndicator_r15 (GNSS_RTK_ReferenceStationInfo_r15_referenceStationIndicator_r15 value) {
      this.referenceStationIndicator_r15 = value;
   }

   /**
    * Accessor/mutator methods for Antenna_reference_point_ECEF_X_r15
    */
   public Asn1Integer getAntenna_reference_point_ECEF_X_r15 () {
      return antenna_reference_point_ECEF_X_r15;
   }

   public void setAntenna_reference_point_ECEF_X_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      this.antenna_reference_point_ECEF_X_r15 = value;
   }

   public void setAntenna_reference_point_ECEF_X_r15 (long value) 
      throws Asn1Exception
   {
      setAntenna_reference_point_ECEF_X_r15 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Antenna_reference_point_ECEF_Y_r15
    */
   public Asn1Integer getAntenna_reference_point_ECEF_Y_r15 () {
      return antenna_reference_point_ECEF_Y_r15;
   }

   public void setAntenna_reference_point_ECEF_Y_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      this.antenna_reference_point_ECEF_Y_r15 = value;
   }

   public void setAntenna_reference_point_ECEF_Y_r15 (long value) 
      throws Asn1Exception
   {
      setAntenna_reference_point_ECEF_Y_r15 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Antenna_reference_point_ECEF_Z_r15
    */
   public Asn1Integer getAntenna_reference_point_ECEF_Z_r15 () {
      return antenna_reference_point_ECEF_Z_r15;
   }

   public void setAntenna_reference_point_ECEF_Z_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      this.antenna_reference_point_ECEF_Z_r15 = value;
   }

   public void setAntenna_reference_point_ECEF_Z_r15 (long value) 
      throws Asn1Exception
   {
      setAntenna_reference_point_ECEF_Z_r15 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for AntennaHeight_r15
    */
   public Asn1Integer getAntennaHeight_r15 () {
      return antennaHeight_r15;
   }

   public void setAntennaHeight_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.antennaHeight_r15 = value;
   }

   public void setAntennaHeight_r15 (long value) 
      throws Asn1Exception
   {
      setAntennaHeight_r15 (new Asn1Integer(value));
   }
   public boolean hasAntennaHeight_r15 () {
      return (antennaHeight_r15 != null);
   }

   /**
    * Accessor/mutator methods for AntennaDescription_r15
    */
   public AntennaDescription_r15 getAntennaDescription_r15 () {
      return antennaDescription_r15;
   }

   public void setAntennaDescription_r15 (AntennaDescription_r15 value) {
      this.antennaDescription_r15 = value;
   }

   public boolean hasAntennaDescription_r15 () {
      return (antennaDescription_r15 != null);
   }

   /**
    * Accessor/mutator methods for Antenna_reference_point_unc_r15
    */
   public AntennaReferencePointUnc_r15 getAntenna_reference_point_unc_r15 () {
      return antenna_reference_point_unc_r15;
   }

   public void setAntenna_reference_point_unc_r15 (AntennaReferencePointUnc_r15 value) {
      this.antenna_reference_point_unc_r15 = value;
   }

   public boolean hasAntenna_reference_point_unc_r15 () {
      return (antenna_reference_point_unc_r15 != null);
   }

   /**
    * Accessor/mutator methods for Physical_reference_station_info_r15
    */
   public PhysicalReferenceStationInfo_r15 getPhysical_reference_station_info_r15 () {
      return physical_reference_station_info_r15;
   }

   public void setPhysical_reference_station_info_r15 (PhysicalReferenceStationInfo_r15 value) {
      this.physical_reference_station_info_r15 = value;
   }

   public boolean hasPhysical_reference_station_info_r15 () {
      return (physical_reference_station_info_r15 != null);
   }

   /**
    * Accessor/mutator methods for EqualIntegerAmbiguityLevel_r16
    */
   public EqualIntegerAmbiguityLevel_r16 getEqualIntegerAmbiguityLevel_r16 () {
      return equalIntegerAmbiguityLevel_r16;
   }

   public void setEqualIntegerAmbiguityLevel_r16 (EqualIntegerAmbiguityLevel_r16 value) {
      this.equalIntegerAmbiguityLevel_r16 = value;
   }

   public boolean hasEqualIntegerAmbiguityLevel_r16 () {
      return (equalIntegerAmbiguityLevel_r16 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 11; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return referenceStationID_r15;
         case 1: return referenceStationIndicator_r15;
         case 2: return antenna_reference_point_ECEF_X_r15;
         case 3: return antenna_reference_point_ECEF_Y_r15;
         case 4: return antenna_reference_point_ECEF_Z_r15;
         case 5: return antennaHeight_r15;
         case 6: return antennaDescription_r15;
         case 7: return antenna_reference_point_unc_r15;
         case 8: return physical_reference_station_info_r15;
         case 9: return equalIntegerAmbiguityLevel_r16;
         case 10: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "referenceStationID-r15";
         case 1: return "referenceStationIndicator-r15";
         case 2: return "antenna-reference-point-ECEF-X-r15";
         case 3: return "antenna-reference-point-ECEF-Y-r15";
         case 4: return "antenna-reference-point-ECEF-Z-r15";
         case 5: return "antennaHeight-r15";
         case 6: return "antennaDescription-r15";
         case 7: return "antenna-reference-point-unc-r15";
         case 8: return "physical-reference-station-info-r15";
         case 9: return "equalIntegerAmbiguityLevel-r16";
         case 10: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean antennaHeight_r15Present = buffer.decodeBit ("antennaHeight_r15Present");
      boolean antennaDescription_r15Present = buffer.decodeBit ("antennaDescription_r15Present");
      boolean antenna_reference_point_unc_r15Present = buffer.decodeBit ("antenna_reference_point_unc_r15Present");
      boolean physical_reference_station_info_r15Present = buffer.decodeBit ("physical_reference_station_info_r15Present");

      // decode referenceStationID_r15

      buffer.getContext().eventDispatcher.startElement("referenceStationID_r15", -1);

      referenceStationID_r15 = new GNSS_ReferenceStationID_r15();
      referenceStationID_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("referenceStationID_r15", -1);

      // decode referenceStationIndicator_r15

      buffer.getContext().eventDispatcher.startElement("referenceStationIndicator_r15", -1);

      {
         int tval = GNSS_RTK_ReferenceStationInfo_r15_referenceStationIndicator_r15.decodeEnumValue (buffer);
         referenceStationIndicator_r15 = GNSS_RTK_ReferenceStationInfo_r15_referenceStationIndicator_r15.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("referenceStationIndicator_r15", -1);

      // decode antenna_reference_point_ECEF_X_r15

      buffer.getContext().eventDispatcher.startElement("antenna_reference_point_ECEF_X_r15", -1);

      antenna_reference_point_ECEF_X_r15 = new Asn1Integer();
      antenna_reference_point_ECEF_X_r15.decode (buffer, -137438953472L, 137438953471L);
      buffer.getContext().eventDispatcher.endElement("antenna_reference_point_ECEF_X_r15", -1);

      // decode antenna_reference_point_ECEF_Y_r15

      buffer.getContext().eventDispatcher.startElement("antenna_reference_point_ECEF_Y_r15", -1);

      antenna_reference_point_ECEF_Y_r15 = new Asn1Integer();
      antenna_reference_point_ECEF_Y_r15.decode (buffer, -137438953472L, 137438953471L);
      buffer.getContext().eventDispatcher.endElement("antenna_reference_point_ECEF_Y_r15", -1);

      // decode antenna_reference_point_ECEF_Z_r15

      buffer.getContext().eventDispatcher.startElement("antenna_reference_point_ECEF_Z_r15", -1);

      antenna_reference_point_ECEF_Z_r15 = new Asn1Integer();
      antenna_reference_point_ECEF_Z_r15.decode (buffer, -137438953472L, 137438953471L);
      buffer.getContext().eventDispatcher.endElement("antenna_reference_point_ECEF_Z_r15", -1);

      // decode antennaHeight_r15

      if (antennaHeight_r15Present) {
         buffer.getContext().eventDispatcher.startElement("antennaHeight_r15", -1);

         antennaHeight_r15 = new Asn1Integer();
         antennaHeight_r15.decode (buffer, 0, 65535);
         buffer.getContext().eventDispatcher.endElement("antennaHeight_r15", -1);
      }
      else {
         antennaHeight_r15 = null;
      }

      // decode antennaDescription_r15

      if (antennaDescription_r15Present) {
         buffer.getContext().eventDispatcher.startElement("antennaDescription_r15", -1);

         antennaDescription_r15 = new AntennaDescription_r15();
         antennaDescription_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("antennaDescription_r15", -1);
      }
      else {
         antennaDescription_r15 = null;
      }

      // decode antenna_reference_point_unc_r15

      if (antenna_reference_point_unc_r15Present) {
         buffer.getContext().eventDispatcher.startElement("antenna_reference_point_unc_r15", -1);

         antenna_reference_point_unc_r15 = new AntennaReferencePointUnc_r15();
         antenna_reference_point_unc_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("antenna_reference_point_unc_r15", -1);
      }
      else {
         antenna_reference_point_unc_r15 = null;
      }

      // decode physical_reference_station_info_r15

      if (physical_reference_station_info_r15Present) {
         buffer.getContext().eventDispatcher.startElement("physical_reference_station_info_r15", -1);

         physical_reference_station_info_r15 = new PhysicalReferenceStationInfo_r15();
         physical_reference_station_info_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("physical_reference_station_info_r15", -1);
      }
      else {
         physical_reference_station_info_r15 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("equalIntegerAmbiguityLevel_r16Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode equalIntegerAmbiguityLevel_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("equalIntegerAmbiguityLevel_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            equalIntegerAmbiguityLevel_r16 = new EqualIntegerAmbiguityLevel_r16();
            equalIntegerAmbiguityLevel_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("equalIntegerAmbiguityLevel_r16", -1);

         }
         else {
            equalIntegerAmbiguityLevel_r16 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((equalIntegerAmbiguityLevel_r16 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((antennaHeight_r15 != null), null);
      buffer.encodeBit ((antennaDescription_r15 != null), null);
      buffer.encodeBit ((antenna_reference_point_unc_r15 != null), null);
      buffer.encodeBit ((physical_reference_station_info_r15 != null), null);

      // encode referenceStationID_r15

      if (referenceStationID_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("referenceStationID_r15", -1);

         referenceStationID_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("referenceStationID_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("referenceStationID_r15");

      // encode referenceStationIndicator_r15

      if (referenceStationIndicator_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("referenceStationIndicator_r15", -1);

         referenceStationIndicator_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("referenceStationIndicator_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("referenceStationIndicator_r15");

      // encode antenna_reference_point_ECEF_X_r15

      if (antenna_reference_point_ECEF_X_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("antenna_reference_point_ECEF_X_r15", -1);

         antenna_reference_point_ECEF_X_r15.encode (buffer, -137438953472L, 137438953471L);

         buffer.getContext().eventDispatcher.endElement("antenna_reference_point_ECEF_X_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("antenna_reference_point_ECEF_X_r15");

      // encode antenna_reference_point_ECEF_Y_r15

      if (antenna_reference_point_ECEF_Y_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("antenna_reference_point_ECEF_Y_r15", -1);

         antenna_reference_point_ECEF_Y_r15.encode (buffer, -137438953472L, 137438953471L);

         buffer.getContext().eventDispatcher.endElement("antenna_reference_point_ECEF_Y_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("antenna_reference_point_ECEF_Y_r15");

      // encode antenna_reference_point_ECEF_Z_r15

      if (antenna_reference_point_ECEF_Z_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("antenna_reference_point_ECEF_Z_r15", -1);

         antenna_reference_point_ECEF_Z_r15.encode (buffer, -137438953472L, 137438953471L);

         buffer.getContext().eventDispatcher.endElement("antenna_reference_point_ECEF_Z_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("antenna_reference_point_ECEF_Z_r15");

      // encode antennaHeight_r15

      if (antennaHeight_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("antennaHeight_r15", -1);

         antennaHeight_r15.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("antennaHeight_r15", -1);
      }

      // encode antennaDescription_r15

      if (antennaDescription_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("antennaDescription_r15", -1);

         antennaDescription_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("antennaDescription_r15", -1);
      }

      // encode antenna_reference_point_unc_r15

      if (antenna_reference_point_unc_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("antenna_reference_point_unc_r15", -1);

         antenna_reference_point_unc_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("antenna_reference_point_unc_r15", -1);
      }

      // encode physical_reference_station_info_r15

      if (physical_reference_station_info_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("physical_reference_station_info_r15", -1);

         physical_reference_station_info_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("physical_reference_station_info_r15", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((equalIntegerAmbiguityLevel_r16 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // equalIntegerAmbiguityLevel_r16

         if (equalIntegerAmbiguityLevel_r16 != null) {
            buffer.reset();
            equalIntegerAmbiguityLevel_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("equalIntegerAmbiguityLevel_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("equalIntegerAmbiguityLevel_r16", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
