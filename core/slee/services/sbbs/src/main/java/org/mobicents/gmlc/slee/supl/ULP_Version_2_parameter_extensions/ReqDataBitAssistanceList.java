/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Version_2_parameter_extensions;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.GANSSSignals;

public class ReqDataBitAssistanceList extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_Version_2_parameter_extensionsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_Version_2_parameter_extensionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ReqDataBitAssistanceList";
   }

   protected GANSSSignals gnssSignals;
   protected Asn1Integer ganssDataBitInterval;
   protected ReqDataBitAssistanceList_ganssDataBitSatList ganssDataBitSatList;  // optional
   protected Asn1OpenExt extElem1;

   public ReqDataBitAssistanceList () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ReqDataBitAssistanceList (
      GANSSSignals gnssSignals_,
      Asn1Integer ganssDataBitInterval_,
      ReqDataBitAssistanceList_ganssDataBitSatList ganssDataBitSatList_
   ) throws Asn1Exception {
      super();
      setGnssSignals (gnssSignals_);
      setGanssDataBitInterval (ganssDataBitInterval_);
      setGanssDataBitSatList (ganssDataBitSatList_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ReqDataBitAssistanceList (
      GANSSSignals gnssSignals_,
      Asn1Integer ganssDataBitInterval_
   ) throws Asn1Exception {
      super();
      setGnssSignals (gnssSignals_);
      setGanssDataBitInterval (ganssDataBitInterval_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ReqDataBitAssistanceList (GANSSSignals gnssSignals_,
      long ganssDataBitInterval_,
      ReqDataBitAssistanceList_ganssDataBitSatList ganssDataBitSatList_
   ) throws Asn1Exception {
      super();
      setGnssSignals (gnssSignals_);
      setGanssDataBitInterval (ganssDataBitInterval_);
      setGanssDataBitSatList (ganssDataBitSatList_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ReqDataBitAssistanceList (
      GANSSSignals gnssSignals_,
      long ganssDataBitInterval_
   ) throws Asn1Exception {
      super();
      setGnssSignals (gnssSignals_);
      setGanssDataBitInterval (ganssDataBitInterval_);
   }

   public void init () {
      gnssSignals = null;
      ganssDataBitInterval = null;
      ganssDataBitSatList = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof ReqDataBitAssistanceList) ) return false;

      ReqDataBitAssistanceList rhs = (ReqDataBitAssistanceList) obj;

      if (gnssSignals == null) {
         if (rhs.gnssSignals != null) return false;
      }
      else {
         if (!gnssSignals.equals(rhs.gnssSignals)) {
            return false;
         }
      }

      if (ganssDataBitInterval == null) {
         if (rhs.ganssDataBitInterval != null) return false;
      }
      else {
         if (!ganssDataBitInterval.equals(rhs.ganssDataBitInterval)) {
            return false;
         }
      }

      if (ganssDataBitSatList == null) {
         if (rhs.ganssDataBitSatList != null) return false;
      }
      else {
         if (!ganssDataBitSatList.equals(rhs.ganssDataBitSatList)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gnssSignals != null) __code = 31*__code + gnssSignals.hashCode();
      if (ganssDataBitInterval != null) __code = 31*__code + ganssDataBitInterval.hashCode();
      if (ganssDataBitSatList != null) __code = 31*__code + ganssDataBitSatList.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for GnssSignals
    */
   public GANSSSignals getGnssSignals () {
      return gnssSignals;
   }

   public void setGnssSignals (GANSSSignals value) 
      throws Asn1Exception
   {
      if (!((value.getLength() >= 1 && value.getLength() <= 8))) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.gnssSignals = value;
   }

   /**
    * Accessor/mutator methods for GanssDataBitInterval
    */
   public Asn1Integer getGanssDataBitInterval () {
      return ganssDataBitInterval;
   }

   public void setGanssDataBitInterval (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.ganssDataBitInterval = value;
   }

   public void setGanssDataBitInterval (long value) 
      throws Asn1Exception
   {
      setGanssDataBitInterval (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GanssDataBitSatList
    */
   public ReqDataBitAssistanceList_ganssDataBitSatList getGanssDataBitSatList () {
      return ganssDataBitSatList;
   }

   public void setGanssDataBitSatList (ReqDataBitAssistanceList_ganssDataBitSatList value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 32))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.ganssDataBitSatList = value;
   }

   public boolean hasGanssDataBitSatList () {
      return (ganssDataBitSatList != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gnssSignals;
         case 1: return ganssDataBitInterval;
         case 2: return ganssDataBitSatList;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gnssSignals";
         case 1: return "ganssDataBitInterval";
         case 2: return "ganssDataBitSatList";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean ganssDataBitSatListPresent = buffer.decodeBit ("ganssDataBitSatListPresent");

      // decode gnssSignals

      buffer.getContext().eventDispatcher.startElement("gnssSignals", -1);

      gnssSignals = new GANSSSignals();
      gnssSignals.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("gnssSignals", -1);

      // decode ganssDataBitInterval

      buffer.getContext().eventDispatcher.startElement("ganssDataBitInterval", -1);

      ganssDataBitInterval = new Asn1Integer();
      ganssDataBitInterval.decode (buffer, 0, 15);
      buffer.getContext().eventDispatcher.endElement("ganssDataBitInterval", -1);

      // decode ganssDataBitSatList

      if (ganssDataBitSatListPresent) {
         buffer.getContext().eventDispatcher.startElement("ganssDataBitSatList", -1);

         ganssDataBitSatList = new ReqDataBitAssistanceList_ganssDataBitSatList();
         ganssDataBitSatList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ganssDataBitSatList", -1);
      }
      else {
         ganssDataBitSatList = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((ganssDataBitSatList != null), null);

      // encode gnssSignals

      if (gnssSignals != null) {
         buffer.getContext().eventDispatcher.startElement("gnssSignals", -1);

         gnssSignals.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnssSignals", -1);
      }
      else throw new Asn1MissingRequiredException ("gnssSignals");

      // encode ganssDataBitInterval

      if (ganssDataBitInterval != null) {
         buffer.getContext().eventDispatcher.startElement("ganssDataBitInterval", -1);

         ganssDataBitInterval.encode (buffer, 0, 15);

         buffer.getContext().eventDispatcher.endElement("ganssDataBitInterval", -1);
      }
      else throw new Asn1MissingRequiredException ("ganssDataBitInterval");

      // encode ganssDataBitSatList

      if (ganssDataBitSatList != null) {
         buffer.getContext().eventDispatcher.startElement("ganssDataBitSatList", -1);

         ganssDataBitSatList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ganssDataBitSatList", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
