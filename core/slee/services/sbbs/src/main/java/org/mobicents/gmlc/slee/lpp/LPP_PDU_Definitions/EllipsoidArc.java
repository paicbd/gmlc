/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class EllipsoidArc extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "EllipsoidArc";
   }

   protected EllipsoidArc_latitudeSign latitudeSign = null;
   protected Asn1Integer degreesLatitude;
   protected Asn1Integer degreesLongitude;
   protected Asn1Integer innerRadius;
   protected Asn1Integer uncertaintyRadius;
   protected Asn1Integer offsetAngle;
   protected Asn1Integer includedAngle;
   protected Asn1Integer confidence;

   public EllipsoidArc () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EllipsoidArc (
      EllipsoidArc_latitudeSign latitudeSign_,
      Asn1Integer degreesLatitude_,
      Asn1Integer degreesLongitude_,
      Asn1Integer innerRadius_,
      Asn1Integer uncertaintyRadius_,
      Asn1Integer offsetAngle_,
      Asn1Integer includedAngle_,
      Asn1Integer confidence_
   ) throws Asn1Exception {
      super();
      setLatitudeSign (latitudeSign_);
      setDegreesLatitude (degreesLatitude_);
      setDegreesLongitude (degreesLongitude_);
      setInnerRadius (innerRadius_);
      setUncertaintyRadius (uncertaintyRadius_);
      setOffsetAngle (offsetAngle_);
      setIncludedAngle (includedAngle_);
      setConfidence (confidence_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EllipsoidArc (EllipsoidArc_latitudeSign latitudeSign_,
      long degreesLatitude_,
      long degreesLongitude_,
      long innerRadius_,
      long uncertaintyRadius_,
      long offsetAngle_,
      long includedAngle_,
      long confidence_
   ) throws Asn1Exception {
      super();
      setLatitudeSign (latitudeSign_);
      setDegreesLatitude (degreesLatitude_);
      setDegreesLongitude (degreesLongitude_);
      setInnerRadius (innerRadius_);
      setUncertaintyRadius (uncertaintyRadius_);
      setOffsetAngle (offsetAngle_);
      setIncludedAngle (includedAngle_);
      setConfidence (confidence_);
   }

   public void init () {
      latitudeSign = null;
      degreesLatitude = null;
      degreesLongitude = null;
      innerRadius = null;
      uncertaintyRadius = null;
      offsetAngle = null;
      includedAngle = null;
      confidence = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof EllipsoidArc) ) return false;

      EllipsoidArc rhs = (EllipsoidArc) obj;

      if (latitudeSign == null) {
         if (rhs.latitudeSign != null) return false;
      }
      else {
         if (!latitudeSign.equals(rhs.latitudeSign)) {
            return false;
         }
      }

      if (degreesLatitude == null) {
         if (rhs.degreesLatitude != null) return false;
      }
      else {
         if (!degreesLatitude.equals(rhs.degreesLatitude)) {
            return false;
         }
      }

      if (degreesLongitude == null) {
         if (rhs.degreesLongitude != null) return false;
      }
      else {
         if (!degreesLongitude.equals(rhs.degreesLongitude)) {
            return false;
         }
      }

      if (innerRadius == null) {
         if (rhs.innerRadius != null) return false;
      }
      else {
         if (!innerRadius.equals(rhs.innerRadius)) {
            return false;
         }
      }

      if (uncertaintyRadius == null) {
         if (rhs.uncertaintyRadius != null) return false;
      }
      else {
         if (!uncertaintyRadius.equals(rhs.uncertaintyRadius)) {
            return false;
         }
      }

      if (offsetAngle == null) {
         if (rhs.offsetAngle != null) return false;
      }
      else {
         if (!offsetAngle.equals(rhs.offsetAngle)) {
            return false;
         }
      }

      if (includedAngle == null) {
         if (rhs.includedAngle != null) return false;
      }
      else {
         if (!includedAngle.equals(rhs.includedAngle)) {
            return false;
         }
      }

      if (confidence == null) {
         if (rhs.confidence != null) return false;
      }
      else {
         if (!confidence.equals(rhs.confidence)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (latitudeSign != null) __code = 31*__code + latitudeSign.hashCode();
      if (degreesLatitude != null) __code = 31*__code + degreesLatitude.hashCode();
      if (degreesLongitude != null) __code = 31*__code + degreesLongitude.hashCode();
      if (innerRadius != null) __code = 31*__code + innerRadius.hashCode();
      if (uncertaintyRadius != null) __code = 31*__code + uncertaintyRadius.hashCode();
      if (offsetAngle != null) __code = 31*__code + offsetAngle.hashCode();
      if (includedAngle != null) __code = 31*__code + includedAngle.hashCode();
      if (confidence != null) __code = 31*__code + confidence.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for LatitudeSign
    */
   public EllipsoidArc_latitudeSign getLatitudeSign () {
      return latitudeSign;
   }

   public void setLatitudeSign (EllipsoidArc_latitudeSign value) {
      this.latitudeSign = value;
   }

   /**
    * Accessor/mutator methods for DegreesLatitude
    */
   public Asn1Integer getDegreesLatitude () {
      return degreesLatitude;
   }

   public void setDegreesLatitude (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.degreesLatitude = value;
   }

   public void setDegreesLatitude (long value) 
      throws Asn1Exception
   {
      setDegreesLatitude (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for DegreesLongitude
    */
   public Asn1Integer getDegreesLongitude () {
      return degreesLongitude;
   }

   public void setDegreesLongitude (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8388608 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.degreesLongitude = value;
   }

   public void setDegreesLongitude (long value) 
      throws Asn1Exception
   {
      setDegreesLongitude (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for InnerRadius
    */
   public Asn1Integer getInnerRadius () {
      return innerRadius;
   }

   public void setInnerRadius (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.innerRadius = value;
   }

   public void setInnerRadius (long value) 
      throws Asn1Exception
   {
      setInnerRadius (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for UncertaintyRadius
    */
   public Asn1Integer getUncertaintyRadius () {
      return uncertaintyRadius;
   }

   public void setUncertaintyRadius (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.uncertaintyRadius = value;
   }

   public void setUncertaintyRadius (long value) 
      throws Asn1Exception
   {
      setUncertaintyRadius (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for OffsetAngle
    */
   public Asn1Integer getOffsetAngle () {
      return offsetAngle;
   }

   public void setOffsetAngle (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 179))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.offsetAngle = value;
   }

   public void setOffsetAngle (long value) 
      throws Asn1Exception
   {
      setOffsetAngle (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for IncludedAngle
    */
   public Asn1Integer getIncludedAngle () {
      return includedAngle;
   }

   public void setIncludedAngle (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 179))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.includedAngle = value;
   }

   public void setIncludedAngle (long value) 
      throws Asn1Exception
   {
      setIncludedAngle (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Confidence
    */
   public Asn1Integer getConfidence () {
      return confidence;
   }

   public void setConfidence (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 100))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.confidence = value;
   }

   public void setConfidence (long value) 
      throws Asn1Exception
   {
      setConfidence (new Asn1Integer(value));
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return latitudeSign;
         case 1: return degreesLatitude;
         case 2: return degreesLongitude;
         case 3: return innerRadius;
         case 4: return uncertaintyRadius;
         case 5: return offsetAngle;
         case 6: return includedAngle;
         case 7: return confidence;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "latitudeSign";
         case 1: return "degreesLatitude";
         case 2: return "degreesLongitude";
         case 3: return "innerRadius";
         case 4: return "uncertaintyRadius";
         case 5: return "offsetAngle";
         case 6: return "includedAngle";
         case 7: return "confidence";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode latitudeSign

      buffer.getContext().eventDispatcher.startElement("latitudeSign", -1);

      {
         int tval = EllipsoidArc_latitudeSign.decodeEnumValue (buffer);
         latitudeSign = EllipsoidArc_latitudeSign.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("latitudeSign", -1);

      // decode degreesLatitude

      buffer.getContext().eventDispatcher.startElement("degreesLatitude", -1);

      degreesLatitude = new Asn1Integer();
      degreesLatitude.decode (buffer, 0, 8388607);
      buffer.getContext().eventDispatcher.endElement("degreesLatitude", -1);

      // decode degreesLongitude

      buffer.getContext().eventDispatcher.startElement("degreesLongitude", -1);

      degreesLongitude = new Asn1Integer();
      degreesLongitude.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("degreesLongitude", -1);

      // decode innerRadius

      buffer.getContext().eventDispatcher.startElement("innerRadius", -1);

      innerRadius = new Asn1Integer();
      innerRadius.decode (buffer, 0, 65535);
      buffer.getContext().eventDispatcher.endElement("innerRadius", -1);

      // decode uncertaintyRadius

      buffer.getContext().eventDispatcher.startElement("uncertaintyRadius", -1);

      uncertaintyRadius = new Asn1Integer();
      uncertaintyRadius.decode (buffer, 0, 127);
      buffer.getContext().eventDispatcher.endElement("uncertaintyRadius", -1);

      // decode offsetAngle

      buffer.getContext().eventDispatcher.startElement("offsetAngle", -1);

      offsetAngle = new Asn1Integer();
      offsetAngle.decode (buffer, 0, 179);
      buffer.getContext().eventDispatcher.endElement("offsetAngle", -1);

      // decode includedAngle

      buffer.getContext().eventDispatcher.startElement("includedAngle", -1);

      includedAngle = new Asn1Integer();
      includedAngle.decode (buffer, 0, 179);
      buffer.getContext().eventDispatcher.endElement("includedAngle", -1);

      // decode confidence

      buffer.getContext().eventDispatcher.startElement("confidence", -1);

      confidence = new Asn1Integer();
      confidence.decode (buffer, 0, 100);
      buffer.getContext().eventDispatcher.endElement("confidence", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode latitudeSign

      if (latitudeSign != null) {
         buffer.getContext().eventDispatcher.startElement("latitudeSign", -1);

         latitudeSign.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("latitudeSign", -1);
      }
      else throw new Asn1MissingRequiredException ("latitudeSign");

      // encode degreesLatitude

      if (degreesLatitude != null) {
         buffer.getContext().eventDispatcher.startElement("degreesLatitude", -1);

         degreesLatitude.encode (buffer, 0, 8388607);

         buffer.getContext().eventDispatcher.endElement("degreesLatitude", -1);
      }
      else throw new Asn1MissingRequiredException ("degreesLatitude");

      // encode degreesLongitude

      if (degreesLongitude != null) {
         buffer.getContext().eventDispatcher.startElement("degreesLongitude", -1);

         degreesLongitude.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("degreesLongitude", -1);
      }
      else throw new Asn1MissingRequiredException ("degreesLongitude");

      // encode innerRadius

      if (innerRadius != null) {
         buffer.getContext().eventDispatcher.startElement("innerRadius", -1);

         innerRadius.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("innerRadius", -1);
      }
      else throw new Asn1MissingRequiredException ("innerRadius");

      // encode uncertaintyRadius

      if (uncertaintyRadius != null) {
         buffer.getContext().eventDispatcher.startElement("uncertaintyRadius", -1);

         uncertaintyRadius.encode (buffer, 0, 127);

         buffer.getContext().eventDispatcher.endElement("uncertaintyRadius", -1);
      }
      else throw new Asn1MissingRequiredException ("uncertaintyRadius");

      // encode offsetAngle

      if (offsetAngle != null) {
         buffer.getContext().eventDispatcher.startElement("offsetAngle", -1);

         offsetAngle.encode (buffer, 0, 179);

         buffer.getContext().eventDispatcher.endElement("offsetAngle", -1);
      }
      else throw new Asn1MissingRequiredException ("offsetAngle");

      // encode includedAngle

      if (includedAngle != null) {
         buffer.getContext().eventDispatcher.startElement("includedAngle", -1);

         includedAngle.encode (buffer, 0, 179);

         buffer.getContext().eventDispatcher.endElement("includedAngle", -1);
      }
      else throw new Asn1MissingRequiredException ("includedAngle");

      // encode confidence

      if (confidence != null) {
         buffer.getContext().eventDispatcher.startElement("confidence", -1);

         confidence.encode (buffer, 0, 100);

         buffer.getContext().eventDispatcher.endElement("confidence", -1);
      }
      else throw new Asn1MissingRequiredException ("confidence");

   }

}
