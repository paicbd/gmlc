/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class OTDOA_ProvideCapabilities extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "OTDOA-ProvideCapabilities";
   }

   protected OTDOA_ProvideCapabilities_otdoa_Mode otdoa_Mode;
   protected OTDOA_ProvideCapabilities_supportedBandListEUTRA supportedBandListEUTRA;  // optional
   protected OTDOA_ProvideCapabilities_supportedBandListEUTRA_v9a0 supportedBandListEUTRA_v9a0;  // optional
   protected OTDOA_ProvideCapabilities_interFreqRSTDmeasurement_r10 interFreqRSTDmeasurement_r10 = null;  // optional
   protected OTDOA_ProvideCapabilities_additionalNeighbourCellInfoList_r10 additionalNeighbourCellInfoList_r10 = null;  // optional
   protected OTDOA_ProvideCapabilities_prs_id_r14 prs_id_r14 = null;  // optional
   protected OTDOA_ProvideCapabilities_tp_separation_via_muting_r14 tp_separation_via_muting_r14 = null;  // optional
   protected OTDOA_ProvideCapabilities_additional_prs_config_r14 additional_prs_config_r14 = null;  // optional
   protected OTDOA_ProvideCapabilities_prs_based_tbs_r14 prs_based_tbs_r14 = null;  // optional
   protected OTDOA_ProvideCapabilities_additionalPathsReport_r14 additionalPathsReport_r14 = null;  // optional
   protected OTDOA_ProvideCapabilities_densePrsConfig_r14 densePrsConfig_r14 = null;  // optional
   protected OTDOA_ProvideCapabilities_maxSupportedPrsBandwidth_r14 maxSupportedPrsBandwidth_r14 = null;  // optional
   protected OTDOA_ProvideCapabilities_prsOccGroup_r14 prsOccGroup_r14 = null;  // optional
   protected OTDOA_ProvideCapabilities_prsFrequencyHopping_r14 prsFrequencyHopping_r14 = null;  // optional
   protected OTDOA_ProvideCapabilities_maxSupportedPrsConfigs_r14 maxSupportedPrsConfigs_r14 = null;  // optional
   protected OTDOA_ProvideCapabilities_periodicalReporting_r14 periodicalReporting_r14 = null;  // optional
   protected OTDOA_ProvideCapabilities_multiPrbNprs_r14 multiPrbNprs_r14 = null;  // optional
   protected OTDOA_ProvideCapabilities_idleStateForMeasurements_r14 idleStateForMeasurements_r14 = null;  // optional
   protected OTDOA_ProvideCapabilities_numberOfRXantennas_r14 numberOfRXantennas_r14 = null;  // optional
   protected OTDOA_ProvideCapabilities_motionMeasurements_r15 motionMeasurements_r15 = null;  // optional
   protected OTDOA_ProvideCapabilities_interRAT_RSTDmeasurement_r15 interRAT_RSTDmeasurement_r15 = null;  // optional
   protected Asn1OpenExt extElem1;

   public OTDOA_ProvideCapabilities () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public OTDOA_ProvideCapabilities (
      OTDOA_ProvideCapabilities_otdoa_Mode otdoa_Mode_,
      OTDOA_ProvideCapabilities_supportedBandListEUTRA supportedBandListEUTRA_,
      OTDOA_ProvideCapabilities_supportedBandListEUTRA_v9a0 supportedBandListEUTRA_v9a0_,
      OTDOA_ProvideCapabilities_interFreqRSTDmeasurement_r10 interFreqRSTDmeasurement_r10_,
      OTDOA_ProvideCapabilities_additionalNeighbourCellInfoList_r10 additionalNeighbourCellInfoList_r10_,
      OTDOA_ProvideCapabilities_prs_id_r14 prs_id_r14_,
      OTDOA_ProvideCapabilities_tp_separation_via_muting_r14 tp_separation_via_muting_r14_,
      OTDOA_ProvideCapabilities_additional_prs_config_r14 additional_prs_config_r14_,
      OTDOA_ProvideCapabilities_prs_based_tbs_r14 prs_based_tbs_r14_,
      OTDOA_ProvideCapabilities_additionalPathsReport_r14 additionalPathsReport_r14_,
      OTDOA_ProvideCapabilities_densePrsConfig_r14 densePrsConfig_r14_,
      OTDOA_ProvideCapabilities_maxSupportedPrsBandwidth_r14 maxSupportedPrsBandwidth_r14_,
      OTDOA_ProvideCapabilities_prsOccGroup_r14 prsOccGroup_r14_,
      OTDOA_ProvideCapabilities_prsFrequencyHopping_r14 prsFrequencyHopping_r14_,
      OTDOA_ProvideCapabilities_maxSupportedPrsConfigs_r14 maxSupportedPrsConfigs_r14_,
      OTDOA_ProvideCapabilities_periodicalReporting_r14 periodicalReporting_r14_,
      OTDOA_ProvideCapabilities_multiPrbNprs_r14 multiPrbNprs_r14_,
      OTDOA_ProvideCapabilities_idleStateForMeasurements_r14 idleStateForMeasurements_r14_,
      OTDOA_ProvideCapabilities_numberOfRXantennas_r14 numberOfRXantennas_r14_,
      OTDOA_ProvideCapabilities_motionMeasurements_r15 motionMeasurements_r15_,
      OTDOA_ProvideCapabilities_interRAT_RSTDmeasurement_r15 interRAT_RSTDmeasurement_r15_
   ) throws Asn1Exception {
      super();
      setOtdoa_Mode (otdoa_Mode_);
      setSupportedBandListEUTRA (supportedBandListEUTRA_);
      setSupportedBandListEUTRA_v9a0 (supportedBandListEUTRA_v9a0_);
      setInterFreqRSTDmeasurement_r10 (interFreqRSTDmeasurement_r10_);
      setAdditionalNeighbourCellInfoList_r10 (additionalNeighbourCellInfoList_r10_);
      setPrs_id_r14 (prs_id_r14_);
      setTp_separation_via_muting_r14 (tp_separation_via_muting_r14_);
      setAdditional_prs_config_r14 (additional_prs_config_r14_);
      setPrs_based_tbs_r14 (prs_based_tbs_r14_);
      setAdditionalPathsReport_r14 (additionalPathsReport_r14_);
      setDensePrsConfig_r14 (densePrsConfig_r14_);
      setMaxSupportedPrsBandwidth_r14 (maxSupportedPrsBandwidth_r14_);
      setPrsOccGroup_r14 (prsOccGroup_r14_);
      setPrsFrequencyHopping_r14 (prsFrequencyHopping_r14_);
      setMaxSupportedPrsConfigs_r14 (maxSupportedPrsConfigs_r14_);
      setPeriodicalReporting_r14 (periodicalReporting_r14_);
      setMultiPrbNprs_r14 (multiPrbNprs_r14_);
      setIdleStateForMeasurements_r14 (idleStateForMeasurements_r14_);
      setNumberOfRXantennas_r14 (numberOfRXantennas_r14_);
      setMotionMeasurements_r15 (motionMeasurements_r15_);
      setInterRAT_RSTDmeasurement_r15 (interRAT_RSTDmeasurement_r15_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public OTDOA_ProvideCapabilities (
      OTDOA_ProvideCapabilities_otdoa_Mode otdoa_Mode_
   ) throws Asn1Exception {
      super();
      setOtdoa_Mode (otdoa_Mode_);
   }

   public void init () {
      otdoa_Mode = null;
      supportedBandListEUTRA = null;
      supportedBandListEUTRA_v9a0 = null;
      interFreqRSTDmeasurement_r10 = null;
      additionalNeighbourCellInfoList_r10 = null;
      prs_id_r14 = null;
      tp_separation_via_muting_r14 = null;
      additional_prs_config_r14 = null;
      prs_based_tbs_r14 = null;
      additionalPathsReport_r14 = null;
      densePrsConfig_r14 = null;
      maxSupportedPrsBandwidth_r14 = null;
      prsOccGroup_r14 = null;
      prsFrequencyHopping_r14 = null;
      maxSupportedPrsConfigs_r14 = null;
      periodicalReporting_r14 = null;
      multiPrbNprs_r14 = null;
      idleStateForMeasurements_r14 = null;
      numberOfRXantennas_r14 = null;
      motionMeasurements_r15 = null;
      interRAT_RSTDmeasurement_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof OTDOA_ProvideCapabilities) ) return false;

      OTDOA_ProvideCapabilities rhs = (OTDOA_ProvideCapabilities) obj;

      if (otdoa_Mode == null) {
         if (rhs.otdoa_Mode != null) return false;
      }
      else {
         if (!otdoa_Mode.equals(rhs.otdoa_Mode)) {
            return false;
         }
      }

      if (supportedBandListEUTRA == null) {
         if (rhs.supportedBandListEUTRA != null) return false;
      }
      else {
         if (!supportedBandListEUTRA.equals(rhs.supportedBandListEUTRA)) {
            return false;
         }
      }

      if (supportedBandListEUTRA_v9a0 == null) {
         if (rhs.supportedBandListEUTRA_v9a0 != null) return false;
      }
      else {
         if (!supportedBandListEUTRA_v9a0.equals(rhs.supportedBandListEUTRA_v9a0)) {
            return false;
         }
      }

      if (interFreqRSTDmeasurement_r10 == null) {
         if (rhs.interFreqRSTDmeasurement_r10 != null) return false;
      }
      else {
         if (!interFreqRSTDmeasurement_r10.equals(rhs.interFreqRSTDmeasurement_r10)) {
            return false;
         }
      }

      if (additionalNeighbourCellInfoList_r10 == null) {
         if (rhs.additionalNeighbourCellInfoList_r10 != null) return false;
      }
      else {
         if (!additionalNeighbourCellInfoList_r10.equals(rhs.additionalNeighbourCellInfoList_r10)) {
            return false;
         }
      }

      if (prs_id_r14 == null) {
         if (rhs.prs_id_r14 != null) return false;
      }
      else {
         if (!prs_id_r14.equals(rhs.prs_id_r14)) {
            return false;
         }
      }

      if (tp_separation_via_muting_r14 == null) {
         if (rhs.tp_separation_via_muting_r14 != null) return false;
      }
      else {
         if (!tp_separation_via_muting_r14.equals(rhs.tp_separation_via_muting_r14)) {
            return false;
         }
      }

      if (additional_prs_config_r14 == null) {
         if (rhs.additional_prs_config_r14 != null) return false;
      }
      else {
         if (!additional_prs_config_r14.equals(rhs.additional_prs_config_r14)) {
            return false;
         }
      }

      if (prs_based_tbs_r14 == null) {
         if (rhs.prs_based_tbs_r14 != null) return false;
      }
      else {
         if (!prs_based_tbs_r14.equals(rhs.prs_based_tbs_r14)) {
            return false;
         }
      }

      if (additionalPathsReport_r14 == null) {
         if (rhs.additionalPathsReport_r14 != null) return false;
      }
      else {
         if (!additionalPathsReport_r14.equals(rhs.additionalPathsReport_r14)) {
            return false;
         }
      }

      if (densePrsConfig_r14 == null) {
         if (rhs.densePrsConfig_r14 != null) return false;
      }
      else {
         if (!densePrsConfig_r14.equals(rhs.densePrsConfig_r14)) {
            return false;
         }
      }

      if (maxSupportedPrsBandwidth_r14 == null) {
         if (rhs.maxSupportedPrsBandwidth_r14 != null) return false;
      }
      else {
         if (!maxSupportedPrsBandwidth_r14.equals(rhs.maxSupportedPrsBandwidth_r14)) {
            return false;
         }
      }

      if (prsOccGroup_r14 == null) {
         if (rhs.prsOccGroup_r14 != null) return false;
      }
      else {
         if (!prsOccGroup_r14.equals(rhs.prsOccGroup_r14)) {
            return false;
         }
      }

      if (prsFrequencyHopping_r14 == null) {
         if (rhs.prsFrequencyHopping_r14 != null) return false;
      }
      else {
         if (!prsFrequencyHopping_r14.equals(rhs.prsFrequencyHopping_r14)) {
            return false;
         }
      }

      if (maxSupportedPrsConfigs_r14 == null) {
         if (rhs.maxSupportedPrsConfigs_r14 != null) return false;
      }
      else {
         if (!maxSupportedPrsConfigs_r14.equals(rhs.maxSupportedPrsConfigs_r14)) {
            return false;
         }
      }

      if (periodicalReporting_r14 == null) {
         if (rhs.periodicalReporting_r14 != null) return false;
      }
      else {
         if (!periodicalReporting_r14.equals(rhs.periodicalReporting_r14)) {
            return false;
         }
      }

      if (multiPrbNprs_r14 == null) {
         if (rhs.multiPrbNprs_r14 != null) return false;
      }
      else {
         if (!multiPrbNprs_r14.equals(rhs.multiPrbNprs_r14)) {
            return false;
         }
      }

      if (idleStateForMeasurements_r14 == null) {
         if (rhs.idleStateForMeasurements_r14 != null) return false;
      }
      else {
         if (!idleStateForMeasurements_r14.equals(rhs.idleStateForMeasurements_r14)) {
            return false;
         }
      }

      if (numberOfRXantennas_r14 == null) {
         if (rhs.numberOfRXantennas_r14 != null) return false;
      }
      else {
         if (!numberOfRXantennas_r14.equals(rhs.numberOfRXantennas_r14)) {
            return false;
         }
      }

      if (motionMeasurements_r15 == null) {
         if (rhs.motionMeasurements_r15 != null) return false;
      }
      else {
         if (!motionMeasurements_r15.equals(rhs.motionMeasurements_r15)) {
            return false;
         }
      }

      if (interRAT_RSTDmeasurement_r15 == null) {
         if (rhs.interRAT_RSTDmeasurement_r15 != null) return false;
      }
      else {
         if (!interRAT_RSTDmeasurement_r15.equals(rhs.interRAT_RSTDmeasurement_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (otdoa_Mode != null) __code = 31*__code + otdoa_Mode.hashCode();
      if (supportedBandListEUTRA != null) __code = 31*__code + supportedBandListEUTRA.hashCode();
      if (supportedBandListEUTRA_v9a0 != null) __code = 31*__code + supportedBandListEUTRA_v9a0.hashCode();
      if (interFreqRSTDmeasurement_r10 != null) __code = 31*__code + interFreqRSTDmeasurement_r10.hashCode();
      if (additionalNeighbourCellInfoList_r10 != null) __code = 31*__code + additionalNeighbourCellInfoList_r10.hashCode();
      if (prs_id_r14 != null) __code = 31*__code + prs_id_r14.hashCode();
      if (tp_separation_via_muting_r14 != null) __code = 31*__code + tp_separation_via_muting_r14.hashCode();
      if (additional_prs_config_r14 != null) __code = 31*__code + additional_prs_config_r14.hashCode();
      if (prs_based_tbs_r14 != null) __code = 31*__code + prs_based_tbs_r14.hashCode();
      if (additionalPathsReport_r14 != null) __code = 31*__code + additionalPathsReport_r14.hashCode();
      if (densePrsConfig_r14 != null) __code = 31*__code + densePrsConfig_r14.hashCode();
      if (maxSupportedPrsBandwidth_r14 != null) __code = 31*__code + maxSupportedPrsBandwidth_r14.hashCode();
      if (prsOccGroup_r14 != null) __code = 31*__code + prsOccGroup_r14.hashCode();
      if (prsFrequencyHopping_r14 != null) __code = 31*__code + prsFrequencyHopping_r14.hashCode();
      if (maxSupportedPrsConfigs_r14 != null) __code = 31*__code + maxSupportedPrsConfigs_r14.hashCode();
      if (periodicalReporting_r14 != null) __code = 31*__code + periodicalReporting_r14.hashCode();
      if (multiPrbNprs_r14 != null) __code = 31*__code + multiPrbNprs_r14.hashCode();
      if (idleStateForMeasurements_r14 != null) __code = 31*__code + idleStateForMeasurements_r14.hashCode();
      if (numberOfRXantennas_r14 != null) __code = 31*__code + numberOfRXantennas_r14.hashCode();
      if (motionMeasurements_r15 != null) __code = 31*__code + motionMeasurements_r15.hashCode();
      if (interRAT_RSTDmeasurement_r15 != null) __code = 31*__code + interRAT_RSTDmeasurement_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Otdoa_Mode
    */
   public OTDOA_ProvideCapabilities_otdoa_Mode getOtdoa_Mode () {
      return otdoa_Mode;
   }

   public void setOtdoa_Mode (OTDOA_ProvideCapabilities_otdoa_Mode value) 
      throws Asn1Exception
   {
      if (!((value.getLength() >= 1 && value.getLength() <= 8))) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.otdoa_Mode = value;
   }

   /**
    * Accessor/mutator methods for SupportedBandListEUTRA
    */
   public OTDOA_ProvideCapabilities_supportedBandListEUTRA getSupportedBandListEUTRA () {
      return supportedBandListEUTRA;
   }

   public void setSupportedBandListEUTRA (OTDOA_ProvideCapabilities_supportedBandListEUTRA value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 64))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.supportedBandListEUTRA = value;
   }

   public boolean hasSupportedBandListEUTRA () {
      return (supportedBandListEUTRA != null);
   }

   /**
    * Accessor/mutator methods for SupportedBandListEUTRA_v9a0
    */
   public OTDOA_ProvideCapabilities_supportedBandListEUTRA_v9a0 getSupportedBandListEUTRA_v9a0 () {
      return supportedBandListEUTRA_v9a0;
   }

   public void setSupportedBandListEUTRA_v9a0 (OTDOA_ProvideCapabilities_supportedBandListEUTRA_v9a0 value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 64))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.supportedBandListEUTRA_v9a0 = value;
   }

   public boolean hasSupportedBandListEUTRA_v9a0 () {
      return (supportedBandListEUTRA_v9a0 != null);
   }

   /**
    * Accessor/mutator methods for InterFreqRSTDmeasurement_r10
    */
   public OTDOA_ProvideCapabilities_interFreqRSTDmeasurement_r10 getInterFreqRSTDmeasurement_r10 () {
      return interFreqRSTDmeasurement_r10;
   }

   public void setInterFreqRSTDmeasurement_r10 (OTDOA_ProvideCapabilities_interFreqRSTDmeasurement_r10 value) {
      this.interFreqRSTDmeasurement_r10 = value;
   }

   public boolean hasInterFreqRSTDmeasurement_r10 () {
      return (interFreqRSTDmeasurement_r10 != null);
   }

   /**
    * Accessor/mutator methods for AdditionalNeighbourCellInfoList_r10
    */
   public OTDOA_ProvideCapabilities_additionalNeighbourCellInfoList_r10 getAdditionalNeighbourCellInfoList_r10 () {
      return additionalNeighbourCellInfoList_r10;
   }

   public void setAdditionalNeighbourCellInfoList_r10 (OTDOA_ProvideCapabilities_additionalNeighbourCellInfoList_r10 value) {
      this.additionalNeighbourCellInfoList_r10 = value;
   }

   public boolean hasAdditionalNeighbourCellInfoList_r10 () {
      return (additionalNeighbourCellInfoList_r10 != null);
   }

   /**
    * Accessor/mutator methods for Prs_id_r14
    */
   public OTDOA_ProvideCapabilities_prs_id_r14 getPrs_id_r14 () {
      return prs_id_r14;
   }

   public void setPrs_id_r14 (OTDOA_ProvideCapabilities_prs_id_r14 value) {
      this.prs_id_r14 = value;
   }

   public boolean hasPrs_id_r14 () {
      return (prs_id_r14 != null);
   }

   /**
    * Accessor/mutator methods for Tp_separation_via_muting_r14
    */
   public OTDOA_ProvideCapabilities_tp_separation_via_muting_r14 getTp_separation_via_muting_r14 () {
      return tp_separation_via_muting_r14;
   }

   public void setTp_separation_via_muting_r14 (OTDOA_ProvideCapabilities_tp_separation_via_muting_r14 value) {
      this.tp_separation_via_muting_r14 = value;
   }

   public boolean hasTp_separation_via_muting_r14 () {
      return (tp_separation_via_muting_r14 != null);
   }

   /**
    * Accessor/mutator methods for Additional_prs_config_r14
    */
   public OTDOA_ProvideCapabilities_additional_prs_config_r14 getAdditional_prs_config_r14 () {
      return additional_prs_config_r14;
   }

   public void setAdditional_prs_config_r14 (OTDOA_ProvideCapabilities_additional_prs_config_r14 value) {
      this.additional_prs_config_r14 = value;
   }

   public boolean hasAdditional_prs_config_r14 () {
      return (additional_prs_config_r14 != null);
   }

   /**
    * Accessor/mutator methods for Prs_based_tbs_r14
    */
   public OTDOA_ProvideCapabilities_prs_based_tbs_r14 getPrs_based_tbs_r14 () {
      return prs_based_tbs_r14;
   }

   public void setPrs_based_tbs_r14 (OTDOA_ProvideCapabilities_prs_based_tbs_r14 value) {
      this.prs_based_tbs_r14 = value;
   }

   public boolean hasPrs_based_tbs_r14 () {
      return (prs_based_tbs_r14 != null);
   }

   /**
    * Accessor/mutator methods for AdditionalPathsReport_r14
    */
   public OTDOA_ProvideCapabilities_additionalPathsReport_r14 getAdditionalPathsReport_r14 () {
      return additionalPathsReport_r14;
   }

   public void setAdditionalPathsReport_r14 (OTDOA_ProvideCapabilities_additionalPathsReport_r14 value) {
      this.additionalPathsReport_r14 = value;
   }

   public boolean hasAdditionalPathsReport_r14 () {
      return (additionalPathsReport_r14 != null);
   }

   /**
    * Accessor/mutator methods for DensePrsConfig_r14
    */
   public OTDOA_ProvideCapabilities_densePrsConfig_r14 getDensePrsConfig_r14 () {
      return densePrsConfig_r14;
   }

   public void setDensePrsConfig_r14 (OTDOA_ProvideCapabilities_densePrsConfig_r14 value) {
      this.densePrsConfig_r14 = value;
   }

   public boolean hasDensePrsConfig_r14 () {
      return (densePrsConfig_r14 != null);
   }

   /**
    * Accessor/mutator methods for MaxSupportedPrsBandwidth_r14
    */
   public OTDOA_ProvideCapabilities_maxSupportedPrsBandwidth_r14 getMaxSupportedPrsBandwidth_r14 () {
      return maxSupportedPrsBandwidth_r14;
   }

   public void setMaxSupportedPrsBandwidth_r14 (OTDOA_ProvideCapabilities_maxSupportedPrsBandwidth_r14 value) {
      this.maxSupportedPrsBandwidth_r14 = value;
   }

   public boolean hasMaxSupportedPrsBandwidth_r14 () {
      return (maxSupportedPrsBandwidth_r14 != null);
   }

   /**
    * Accessor/mutator methods for PrsOccGroup_r14
    */
   public OTDOA_ProvideCapabilities_prsOccGroup_r14 getPrsOccGroup_r14 () {
      return prsOccGroup_r14;
   }

   public void setPrsOccGroup_r14 (OTDOA_ProvideCapabilities_prsOccGroup_r14 value) {
      this.prsOccGroup_r14 = value;
   }

   public boolean hasPrsOccGroup_r14 () {
      return (prsOccGroup_r14 != null);
   }

   /**
    * Accessor/mutator methods for PrsFrequencyHopping_r14
    */
   public OTDOA_ProvideCapabilities_prsFrequencyHopping_r14 getPrsFrequencyHopping_r14 () {
      return prsFrequencyHopping_r14;
   }

   public void setPrsFrequencyHopping_r14 (OTDOA_ProvideCapabilities_prsFrequencyHopping_r14 value) {
      this.prsFrequencyHopping_r14 = value;
   }

   public boolean hasPrsFrequencyHopping_r14 () {
      return (prsFrequencyHopping_r14 != null);
   }

   /**
    * Accessor/mutator methods for MaxSupportedPrsConfigs_r14
    */
   public OTDOA_ProvideCapabilities_maxSupportedPrsConfigs_r14 getMaxSupportedPrsConfigs_r14 () {
      return maxSupportedPrsConfigs_r14;
   }

   public void setMaxSupportedPrsConfigs_r14 (OTDOA_ProvideCapabilities_maxSupportedPrsConfigs_r14 value) {
      this.maxSupportedPrsConfigs_r14 = value;
   }

   public boolean hasMaxSupportedPrsConfigs_r14 () {
      return (maxSupportedPrsConfigs_r14 != null);
   }

   /**
    * Accessor/mutator methods for PeriodicalReporting_r14
    */
   public OTDOA_ProvideCapabilities_periodicalReporting_r14 getPeriodicalReporting_r14 () {
      return periodicalReporting_r14;
   }

   public void setPeriodicalReporting_r14 (OTDOA_ProvideCapabilities_periodicalReporting_r14 value) {
      this.periodicalReporting_r14 = value;
   }

   public boolean hasPeriodicalReporting_r14 () {
      return (periodicalReporting_r14 != null);
   }

   /**
    * Accessor/mutator methods for MultiPrbNprs_r14
    */
   public OTDOA_ProvideCapabilities_multiPrbNprs_r14 getMultiPrbNprs_r14 () {
      return multiPrbNprs_r14;
   }

   public void setMultiPrbNprs_r14 (OTDOA_ProvideCapabilities_multiPrbNprs_r14 value) {
      this.multiPrbNprs_r14 = value;
   }

   public boolean hasMultiPrbNprs_r14 () {
      return (multiPrbNprs_r14 != null);
   }

   /**
    * Accessor/mutator methods for IdleStateForMeasurements_r14
    */
   public OTDOA_ProvideCapabilities_idleStateForMeasurements_r14 getIdleStateForMeasurements_r14 () {
      return idleStateForMeasurements_r14;
   }

   public void setIdleStateForMeasurements_r14 (OTDOA_ProvideCapabilities_idleStateForMeasurements_r14 value) {
      this.idleStateForMeasurements_r14 = value;
   }

   public boolean hasIdleStateForMeasurements_r14 () {
      return (idleStateForMeasurements_r14 != null);
   }

   /**
    * Accessor/mutator methods for NumberOfRXantennas_r14
    */
   public OTDOA_ProvideCapabilities_numberOfRXantennas_r14 getNumberOfRXantennas_r14 () {
      return numberOfRXantennas_r14;
   }

   public void setNumberOfRXantennas_r14 (OTDOA_ProvideCapabilities_numberOfRXantennas_r14 value) {
      this.numberOfRXantennas_r14 = value;
   }

   public boolean hasNumberOfRXantennas_r14 () {
      return (numberOfRXantennas_r14 != null);
   }

   /**
    * Accessor/mutator methods for MotionMeasurements_r15
    */
   public OTDOA_ProvideCapabilities_motionMeasurements_r15 getMotionMeasurements_r15 () {
      return motionMeasurements_r15;
   }

   public void setMotionMeasurements_r15 (OTDOA_ProvideCapabilities_motionMeasurements_r15 value) {
      this.motionMeasurements_r15 = value;
   }

   public boolean hasMotionMeasurements_r15 () {
      return (motionMeasurements_r15 != null);
   }

   /**
    * Accessor/mutator methods for InterRAT_RSTDmeasurement_r15
    */
   public OTDOA_ProvideCapabilities_interRAT_RSTDmeasurement_r15 getInterRAT_RSTDmeasurement_r15 () {
      return interRAT_RSTDmeasurement_r15;
   }

   public void setInterRAT_RSTDmeasurement_r15 (OTDOA_ProvideCapabilities_interRAT_RSTDmeasurement_r15 value) {
      this.interRAT_RSTDmeasurement_r15 = value;
   }

   public boolean hasInterRAT_RSTDmeasurement_r15 () {
      return (interRAT_RSTDmeasurement_r15 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 22; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return otdoa_Mode;
         case 1: return supportedBandListEUTRA;
         case 2: return supportedBandListEUTRA_v9a0;
         case 3: return interFreqRSTDmeasurement_r10;
         case 4: return additionalNeighbourCellInfoList_r10;
         case 5: return prs_id_r14;
         case 6: return tp_separation_via_muting_r14;
         case 7: return additional_prs_config_r14;
         case 8: return prs_based_tbs_r14;
         case 9: return additionalPathsReport_r14;
         case 10: return densePrsConfig_r14;
         case 11: return maxSupportedPrsBandwidth_r14;
         case 12: return prsOccGroup_r14;
         case 13: return prsFrequencyHopping_r14;
         case 14: return maxSupportedPrsConfigs_r14;
         case 15: return periodicalReporting_r14;
         case 16: return multiPrbNprs_r14;
         case 17: return idleStateForMeasurements_r14;
         case 18: return numberOfRXantennas_r14;
         case 19: return motionMeasurements_r15;
         case 20: return interRAT_RSTDmeasurement_r15;
         case 21: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "otdoa-Mode";
         case 1: return "supportedBandListEUTRA";
         case 2: return "supportedBandListEUTRA-v9a0";
         case 3: return "interFreqRSTDmeasurement-r10";
         case 4: return "additionalNeighbourCellInfoList-r10";
         case 5: return "prs-id-r14";
         case 6: return "tp-separation-via-muting-r14";
         case 7: return "additional-prs-config-r14";
         case 8: return "prs-based-tbs-r14";
         case 9: return "additionalPathsReport-r14";
         case 10: return "densePrsConfig-r14";
         case 11: return "maxSupportedPrsBandwidth-r14";
         case 12: return "prsOccGroup-r14";
         case 13: return "prsFrequencyHopping-r14";
         case 14: return "maxSupportedPrsConfigs-r14";
         case 15: return "periodicalReporting-r14";
         case 16: return "multiPrbNprs-r14";
         case 17: return "idleStateForMeasurements-r14";
         case 18: return "numberOfRXantennas-r14";
         case 19: return "motionMeasurements-r15";
         case 20: return "interRAT-RSTDmeasurement-r15";
         case 21: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode otdoa_Mode

      buffer.getContext().eventDispatcher.startElement("otdoa_Mode", -1);

      otdoa_Mode = new OTDOA_ProvideCapabilities_otdoa_Mode();
      otdoa_Mode.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("otdoa_Mode", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("supportedBandListEUTRAPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("supportedBandListEUTRA_v9a0Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("interFreqRSTDmeasurement_r10Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("additionalNeighbourCellInfoList_r10Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("prs_id_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("tp_separation_via_muting_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("additional_prs_config_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("prs_based_tbs_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("additionalPathsReport_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("densePrsConfig_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("maxSupportedPrsBandwidth_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("prsOccGroup_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("prsFrequencyHopping_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("maxSupportedPrsConfigs_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("periodicalReporting_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("multiPrbNprs_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("idleStateForMeasurements_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("numberOfRXantennas_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("motionMeasurements_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("interRAT_RSTDmeasurement_r15Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode supportedBandListEUTRA

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("supportedBandListEUTRA", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            supportedBandListEUTRA = new OTDOA_ProvideCapabilities_supportedBandListEUTRA();
            supportedBandListEUTRA.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("supportedBandListEUTRA", -1);

         }
         else {
            supportedBandListEUTRA = null;
         }

         // decode supportedBandListEUTRA_v9a0

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("supportedBandListEUTRA_v9a0", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            supportedBandListEUTRA_v9a0 = new OTDOA_ProvideCapabilities_supportedBandListEUTRA_v9a0();
            supportedBandListEUTRA_v9a0.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("supportedBandListEUTRA_v9a0", -1);

         }
         else {
            supportedBandListEUTRA_v9a0 = null;
         }

         // decode interFreqRSTDmeasurement_r10

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("interFreqRSTDmeasurement_r10", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = OTDOA_ProvideCapabilities_interFreqRSTDmeasurement_r10.decodeEnumValue (buffer);
               interFreqRSTDmeasurement_r10 = OTDOA_ProvideCapabilities_interFreqRSTDmeasurement_r10.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("interFreqRSTDmeasurement_r10", -1);

         }
         else {
            interFreqRSTDmeasurement_r10 = null;
         }

         // decode additionalNeighbourCellInfoList_r10

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("additionalNeighbourCellInfoList_r10", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = OTDOA_ProvideCapabilities_additionalNeighbourCellInfoList_r10.decodeEnumValue (buffer);
               additionalNeighbourCellInfoList_r10 = OTDOA_ProvideCapabilities_additionalNeighbourCellInfoList_r10.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("additionalNeighbourCellInfoList_r10", -1);

         }
         else {
            additionalNeighbourCellInfoList_r10 = null;
         }

         // decode prs_id_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("prs_id_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = OTDOA_ProvideCapabilities_prs_id_r14.decodeEnumValue (buffer);
               prs_id_r14 = OTDOA_ProvideCapabilities_prs_id_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("prs_id_r14", -1);

         }
         else {
            prs_id_r14 = null;
         }

         // decode tp_separation_via_muting_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("tp_separation_via_muting_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = OTDOA_ProvideCapabilities_tp_separation_via_muting_r14.decodeEnumValue (buffer);
               tp_separation_via_muting_r14 = OTDOA_ProvideCapabilities_tp_separation_via_muting_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("tp_separation_via_muting_r14", -1);

         }
         else {
            tp_separation_via_muting_r14 = null;
         }

         // decode additional_prs_config_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("additional_prs_config_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = OTDOA_ProvideCapabilities_additional_prs_config_r14.decodeEnumValue (buffer);
               additional_prs_config_r14 = OTDOA_ProvideCapabilities_additional_prs_config_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("additional_prs_config_r14", -1);

         }
         else {
            additional_prs_config_r14 = null;
         }

         // decode prs_based_tbs_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("prs_based_tbs_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = OTDOA_ProvideCapabilities_prs_based_tbs_r14.decodeEnumValue (buffer);
               prs_based_tbs_r14 = OTDOA_ProvideCapabilities_prs_based_tbs_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("prs_based_tbs_r14", -1);

         }
         else {
            prs_based_tbs_r14 = null;
         }

         // decode additionalPathsReport_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("additionalPathsReport_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = OTDOA_ProvideCapabilities_additionalPathsReport_r14.decodeEnumValue (buffer);
               additionalPathsReport_r14 = OTDOA_ProvideCapabilities_additionalPathsReport_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("additionalPathsReport_r14", -1);

         }
         else {
            additionalPathsReport_r14 = null;
         }

         // decode densePrsConfig_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("densePrsConfig_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = OTDOA_ProvideCapabilities_densePrsConfig_r14.decodeEnumValue (buffer);
               densePrsConfig_r14 = OTDOA_ProvideCapabilities_densePrsConfig_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("densePrsConfig_r14", -1);

         }
         else {
            densePrsConfig_r14 = null;
         }

         // decode maxSupportedPrsBandwidth_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("maxSupportedPrsBandwidth_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = OTDOA_ProvideCapabilities_maxSupportedPrsBandwidth_r14.decodeEnumValue (buffer);
               maxSupportedPrsBandwidth_r14 = OTDOA_ProvideCapabilities_maxSupportedPrsBandwidth_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("maxSupportedPrsBandwidth_r14", -1);

         }
         else {
            maxSupportedPrsBandwidth_r14 = null;
         }

         // decode prsOccGroup_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("prsOccGroup_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = OTDOA_ProvideCapabilities_prsOccGroup_r14.decodeEnumValue (buffer);
               prsOccGroup_r14 = OTDOA_ProvideCapabilities_prsOccGroup_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("prsOccGroup_r14", -1);

         }
         else {
            prsOccGroup_r14 = null;
         }

         // decode prsFrequencyHopping_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("prsFrequencyHopping_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = OTDOA_ProvideCapabilities_prsFrequencyHopping_r14.decodeEnumValue (buffer);
               prsFrequencyHopping_r14 = OTDOA_ProvideCapabilities_prsFrequencyHopping_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("prsFrequencyHopping_r14", -1);

         }
         else {
            prsFrequencyHopping_r14 = null;
         }

         // decode maxSupportedPrsConfigs_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("maxSupportedPrsConfigs_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = OTDOA_ProvideCapabilities_maxSupportedPrsConfigs_r14.decodeEnumValue (buffer);
               maxSupportedPrsConfigs_r14 = OTDOA_ProvideCapabilities_maxSupportedPrsConfigs_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("maxSupportedPrsConfigs_r14", -1);

         }
         else {
            maxSupportedPrsConfigs_r14 = null;
         }

         // decode periodicalReporting_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("periodicalReporting_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = OTDOA_ProvideCapabilities_periodicalReporting_r14.decodeEnumValue (buffer);
               periodicalReporting_r14 = OTDOA_ProvideCapabilities_periodicalReporting_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("periodicalReporting_r14", -1);

         }
         else {
            periodicalReporting_r14 = null;
         }

         // decode multiPrbNprs_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("multiPrbNprs_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = OTDOA_ProvideCapabilities_multiPrbNprs_r14.decodeEnumValue (buffer);
               multiPrbNprs_r14 = OTDOA_ProvideCapabilities_multiPrbNprs_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("multiPrbNprs_r14", -1);

         }
         else {
            multiPrbNprs_r14 = null;
         }

         // decode idleStateForMeasurements_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("idleStateForMeasurements_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = OTDOA_ProvideCapabilities_idleStateForMeasurements_r14.decodeEnumValue (buffer);
               idleStateForMeasurements_r14 = OTDOA_ProvideCapabilities_idleStateForMeasurements_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("idleStateForMeasurements_r14", -1);

         }
         else {
            idleStateForMeasurements_r14 = null;
         }

         // decode numberOfRXantennas_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("numberOfRXantennas_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = OTDOA_ProvideCapabilities_numberOfRXantennas_r14.decodeEnumValue (buffer);
               numberOfRXantennas_r14 = OTDOA_ProvideCapabilities_numberOfRXantennas_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("numberOfRXantennas_r14", -1);

         }
         else {
            numberOfRXantennas_r14 = null;
         }

         // decode motionMeasurements_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("motionMeasurements_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = OTDOA_ProvideCapabilities_motionMeasurements_r15.decodeEnumValue (buffer);
               motionMeasurements_r15 = OTDOA_ProvideCapabilities_motionMeasurements_r15.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("motionMeasurements_r15", -1);

         }
         else {
            motionMeasurements_r15 = null;
         }

         // decode interRAT_RSTDmeasurement_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("interRAT_RSTDmeasurement_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = OTDOA_ProvideCapabilities_interRAT_RSTDmeasurement_r15.decodeEnumValue (buffer);
               interRAT_RSTDmeasurement_r15 = OTDOA_ProvideCapabilities_interRAT_RSTDmeasurement_r15.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("interRAT_RSTDmeasurement_r15", -1);

         }
         else {
            interRAT_RSTDmeasurement_r15 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((supportedBandListEUTRA != null) ||
      (supportedBandListEUTRA_v9a0 != null) ||
      (interFreqRSTDmeasurement_r10 != null) ||
      (additionalNeighbourCellInfoList_r10 != null) ||
      (prs_id_r14 != null) ||
      (tp_separation_via_muting_r14 != null) ||
      (additional_prs_config_r14 != null) ||
      (prs_based_tbs_r14 != null) ||
      (additionalPathsReport_r14 != null) ||
      (densePrsConfig_r14 != null) ||
      (maxSupportedPrsBandwidth_r14 != null) ||
      (prsOccGroup_r14 != null) ||
      (prsFrequencyHopping_r14 != null) ||
      (maxSupportedPrsConfigs_r14 != null) ||
      (periodicalReporting_r14 != null) ||
      (multiPrbNprs_r14 != null) ||
      (idleStateForMeasurements_r14 != null) ||
      (numberOfRXantennas_r14 != null) ||
      (motionMeasurements_r15 != null) ||
      (interRAT_RSTDmeasurement_r15 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode otdoa_Mode

      if (otdoa_Mode != null) {
         buffer.getContext().eventDispatcher.startElement("otdoa_Mode", -1);

         otdoa_Mode.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("otdoa_Mode", -1);
      }
      else throw new Asn1MissingRequiredException ("otdoa_Mode");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 20;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((supportedBandListEUTRA != null), null);
         buffer.encodeBit ((supportedBandListEUTRA_v9a0 != null), null);
         buffer.encodeBit ((interFreqRSTDmeasurement_r10 != null), null);
         buffer.encodeBit ((additionalNeighbourCellInfoList_r10 != null), null);
         buffer.encodeBit ((prs_id_r14 != null), null);
         buffer.encodeBit ((tp_separation_via_muting_r14 != null), null);
         buffer.encodeBit ((additional_prs_config_r14 != null), null);
         buffer.encodeBit ((prs_based_tbs_r14 != null), null);
         buffer.encodeBit ((additionalPathsReport_r14 != null), null);
         buffer.encodeBit ((densePrsConfig_r14 != null), null);
         buffer.encodeBit ((maxSupportedPrsBandwidth_r14 != null), null);
         buffer.encodeBit ((prsOccGroup_r14 != null), null);
         buffer.encodeBit ((prsFrequencyHopping_r14 != null), null);
         buffer.encodeBit ((maxSupportedPrsConfigs_r14 != null), null);
         buffer.encodeBit ((periodicalReporting_r14 != null), null);
         buffer.encodeBit ((multiPrbNprs_r14 != null), null);
         buffer.encodeBit ((idleStateForMeasurements_r14 != null), null);
         buffer.encodeBit ((numberOfRXantennas_r14 != null), null);
         buffer.encodeBit ((motionMeasurements_r15 != null), null);
         buffer.encodeBit ((interRAT_RSTDmeasurement_r15 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // supportedBandListEUTRA

         if (supportedBandListEUTRA != null) {
            buffer.reset();
            supportedBandListEUTRA.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("supportedBandListEUTRA", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("supportedBandListEUTRA", -1);
         }

         // supportedBandListEUTRA_v9a0

         if (supportedBandListEUTRA_v9a0 != null) {
            buffer.reset();
            supportedBandListEUTRA_v9a0.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("supportedBandListEUTRA_v9a0", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("supportedBandListEUTRA_v9a0", -1);
         }

         // interFreqRSTDmeasurement_r10

         if (interFreqRSTDmeasurement_r10 != null) {
            buffer.reset();
            interFreqRSTDmeasurement_r10.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("interFreqRSTDmeasurement_r10", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("interFreqRSTDmeasurement_r10", -1);
         }

         // additionalNeighbourCellInfoList_r10

         if (additionalNeighbourCellInfoList_r10 != null) {
            buffer.reset();
            additionalNeighbourCellInfoList_r10.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("additionalNeighbourCellInfoList_r10", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("additionalNeighbourCellInfoList_r10", -1);
         }

         // prs_id_r14

         if (prs_id_r14 != null) {
            buffer.reset();
            prs_id_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("prs_id_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("prs_id_r14", -1);
         }

         // tp_separation_via_muting_r14

         if (tp_separation_via_muting_r14 != null) {
            buffer.reset();
            tp_separation_via_muting_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("tp_separation_via_muting_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("tp_separation_via_muting_r14", -1);
         }

         // additional_prs_config_r14

         if (additional_prs_config_r14 != null) {
            buffer.reset();
            additional_prs_config_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("additional_prs_config_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("additional_prs_config_r14", -1);
         }

         // prs_based_tbs_r14

         if (prs_based_tbs_r14 != null) {
            buffer.reset();
            prs_based_tbs_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("prs_based_tbs_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("prs_based_tbs_r14", -1);
         }

         // additionalPathsReport_r14

         if (additionalPathsReport_r14 != null) {
            buffer.reset();
            additionalPathsReport_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("additionalPathsReport_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("additionalPathsReport_r14", -1);
         }

         // densePrsConfig_r14

         if (densePrsConfig_r14 != null) {
            buffer.reset();
            densePrsConfig_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("densePrsConfig_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("densePrsConfig_r14", -1);
         }

         // maxSupportedPrsBandwidth_r14

         if (maxSupportedPrsBandwidth_r14 != null) {
            buffer.reset();
            maxSupportedPrsBandwidth_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("maxSupportedPrsBandwidth_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("maxSupportedPrsBandwidth_r14", -1);
         }

         // prsOccGroup_r14

         if (prsOccGroup_r14 != null) {
            buffer.reset();
            prsOccGroup_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("prsOccGroup_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("prsOccGroup_r14", -1);
         }

         // prsFrequencyHopping_r14

         if (prsFrequencyHopping_r14 != null) {
            buffer.reset();
            prsFrequencyHopping_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("prsFrequencyHopping_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("prsFrequencyHopping_r14", -1);
         }

         // maxSupportedPrsConfigs_r14

         if (maxSupportedPrsConfigs_r14 != null) {
            buffer.reset();
            maxSupportedPrsConfigs_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("maxSupportedPrsConfigs_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("maxSupportedPrsConfigs_r14", -1);
         }

         // periodicalReporting_r14

         if (periodicalReporting_r14 != null) {
            buffer.reset();
            periodicalReporting_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("periodicalReporting_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("periodicalReporting_r14", -1);
         }

         // multiPrbNprs_r14

         if (multiPrbNprs_r14 != null) {
            buffer.reset();
            multiPrbNprs_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("multiPrbNprs_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("multiPrbNprs_r14", -1);
         }

         // idleStateForMeasurements_r14

         if (idleStateForMeasurements_r14 != null) {
            buffer.reset();
            idleStateForMeasurements_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("idleStateForMeasurements_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("idleStateForMeasurements_r14", -1);
         }

         // numberOfRXantennas_r14

         if (numberOfRXantennas_r14 != null) {
            buffer.reset();
            numberOfRXantennas_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("numberOfRXantennas_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("numberOfRXantennas_r14", -1);
         }

         // motionMeasurements_r15

         if (motionMeasurements_r15 != null) {
            buffer.reset();
            motionMeasurements_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("motionMeasurements_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("motionMeasurements_r15", -1);
         }

         // interRAT_RSTDmeasurement_r15

         if (interRAT_RSTDmeasurement_r15 != null) {
            buffer.reset();
            interRAT_RSTDmeasurement_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("interRAT_RSTDmeasurement_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("interRAT_RSTDmeasurement_r15", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
