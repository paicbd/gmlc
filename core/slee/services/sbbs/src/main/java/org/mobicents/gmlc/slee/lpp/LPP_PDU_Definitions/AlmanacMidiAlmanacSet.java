/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class AlmanacMidiAlmanacSet extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "AlmanacMidiAlmanacSet";
   }

   protected SV_ID svID;
   protected Asn1Integer midiAlmE;
   protected Asn1Integer midiAlmDeltaI;
   protected Asn1Integer midiAlmOmegaDot;
   protected Asn1Integer midiAlmSqrtA;
   protected Asn1Integer midiAlmOmega0;
   protected Asn1Integer midiAlmOmega;
   protected Asn1Integer midiAlmMo;
   protected Asn1Integer midiAlmaf0;
   protected Asn1Integer midiAlmaf1;
   protected Asn1Boolean midiAlmL1Health;
   protected Asn1Boolean midiAlmL2Health;
   protected Asn1Boolean midiAlmL5Health;
   protected Asn1OpenExt extElem1;

   public AlmanacMidiAlmanacSet () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AlmanacMidiAlmanacSet (
      SV_ID svID_,
      Asn1Integer midiAlmE_,
      Asn1Integer midiAlmDeltaI_,
      Asn1Integer midiAlmOmegaDot_,
      Asn1Integer midiAlmSqrtA_,
      Asn1Integer midiAlmOmega0_,
      Asn1Integer midiAlmOmega_,
      Asn1Integer midiAlmMo_,
      Asn1Integer midiAlmaf0_,
      Asn1Integer midiAlmaf1_,
      Asn1Boolean midiAlmL1Health_,
      Asn1Boolean midiAlmL2Health_,
      Asn1Boolean midiAlmL5Health_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setMidiAlmE (midiAlmE_);
      setMidiAlmDeltaI (midiAlmDeltaI_);
      setMidiAlmOmegaDot (midiAlmOmegaDot_);
      setMidiAlmSqrtA (midiAlmSqrtA_);
      setMidiAlmOmega0 (midiAlmOmega0_);
      setMidiAlmOmega (midiAlmOmega_);
      setMidiAlmMo (midiAlmMo_);
      setMidiAlmaf0 (midiAlmaf0_);
      setMidiAlmaf1 (midiAlmaf1_);
      setMidiAlmL1Health (midiAlmL1Health_);
      setMidiAlmL2Health (midiAlmL2Health_);
      setMidiAlmL5Health (midiAlmL5Health_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AlmanacMidiAlmanacSet (SV_ID svID_,
      long midiAlmE_,
      long midiAlmDeltaI_,
      long midiAlmOmegaDot_,
      long midiAlmSqrtA_,
      long midiAlmOmega0_,
      long midiAlmOmega_,
      long midiAlmMo_,
      long midiAlmaf0_,
      long midiAlmaf1_,
      boolean midiAlmL1Health_,
      boolean midiAlmL2Health_,
      boolean midiAlmL5Health_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setMidiAlmE (midiAlmE_);
      setMidiAlmDeltaI (midiAlmDeltaI_);
      setMidiAlmOmegaDot (midiAlmOmegaDot_);
      setMidiAlmSqrtA (midiAlmSqrtA_);
      setMidiAlmOmega0 (midiAlmOmega0_);
      setMidiAlmOmega (midiAlmOmega_);
      setMidiAlmMo (midiAlmMo_);
      setMidiAlmaf0 (midiAlmaf0_);
      setMidiAlmaf1 (midiAlmaf1_);
      setMidiAlmL1Health (midiAlmL1Health_);
      setMidiAlmL2Health (midiAlmL2Health_);
      setMidiAlmL5Health (midiAlmL5Health_);
   }

   public void init () {
      svID = null;
      midiAlmE = null;
      midiAlmDeltaI = null;
      midiAlmOmegaDot = null;
      midiAlmSqrtA = null;
      midiAlmOmega0 = null;
      midiAlmOmega = null;
      midiAlmMo = null;
      midiAlmaf0 = null;
      midiAlmaf1 = null;
      midiAlmL1Health = null;
      midiAlmL2Health = null;
      midiAlmL5Health = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof AlmanacMidiAlmanacSet) ) return false;

      AlmanacMidiAlmanacSet rhs = (AlmanacMidiAlmanacSet) obj;

      if (svID == null) {
         if (rhs.svID != null) return false;
      }
      else {
         if (!svID.equals(rhs.svID)) {
            return false;
         }
      }

      if (midiAlmE == null) {
         if (rhs.midiAlmE != null) return false;
      }
      else {
         if (!midiAlmE.equals(rhs.midiAlmE)) {
            return false;
         }
      }

      if (midiAlmDeltaI == null) {
         if (rhs.midiAlmDeltaI != null) return false;
      }
      else {
         if (!midiAlmDeltaI.equals(rhs.midiAlmDeltaI)) {
            return false;
         }
      }

      if (midiAlmOmegaDot == null) {
         if (rhs.midiAlmOmegaDot != null) return false;
      }
      else {
         if (!midiAlmOmegaDot.equals(rhs.midiAlmOmegaDot)) {
            return false;
         }
      }

      if (midiAlmSqrtA == null) {
         if (rhs.midiAlmSqrtA != null) return false;
      }
      else {
         if (!midiAlmSqrtA.equals(rhs.midiAlmSqrtA)) {
            return false;
         }
      }

      if (midiAlmOmega0 == null) {
         if (rhs.midiAlmOmega0 != null) return false;
      }
      else {
         if (!midiAlmOmega0.equals(rhs.midiAlmOmega0)) {
            return false;
         }
      }

      if (midiAlmOmega == null) {
         if (rhs.midiAlmOmega != null) return false;
      }
      else {
         if (!midiAlmOmega.equals(rhs.midiAlmOmega)) {
            return false;
         }
      }

      if (midiAlmMo == null) {
         if (rhs.midiAlmMo != null) return false;
      }
      else {
         if (!midiAlmMo.equals(rhs.midiAlmMo)) {
            return false;
         }
      }

      if (midiAlmaf0 == null) {
         if (rhs.midiAlmaf0 != null) return false;
      }
      else {
         if (!midiAlmaf0.equals(rhs.midiAlmaf0)) {
            return false;
         }
      }

      if (midiAlmaf1 == null) {
         if (rhs.midiAlmaf1 != null) return false;
      }
      else {
         if (!midiAlmaf1.equals(rhs.midiAlmaf1)) {
            return false;
         }
      }

      if (midiAlmL1Health == null) {
         if (rhs.midiAlmL1Health != null) return false;
      }
      else {
         if (!midiAlmL1Health.equals(rhs.midiAlmL1Health)) {
            return false;
         }
      }

      if (midiAlmL2Health == null) {
         if (rhs.midiAlmL2Health != null) return false;
      }
      else {
         if (!midiAlmL2Health.equals(rhs.midiAlmL2Health)) {
            return false;
         }
      }

      if (midiAlmL5Health == null) {
         if (rhs.midiAlmL5Health != null) return false;
      }
      else {
         if (!midiAlmL5Health.equals(rhs.midiAlmL5Health)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (svID != null) __code = 31*__code + svID.hashCode();
      if (midiAlmE != null) __code = 31*__code + midiAlmE.hashCode();
      if (midiAlmDeltaI != null) __code = 31*__code + midiAlmDeltaI.hashCode();
      if (midiAlmOmegaDot != null) __code = 31*__code + midiAlmOmegaDot.hashCode();
      if (midiAlmSqrtA != null) __code = 31*__code + midiAlmSqrtA.hashCode();
      if (midiAlmOmega0 != null) __code = 31*__code + midiAlmOmega0.hashCode();
      if (midiAlmOmega != null) __code = 31*__code + midiAlmOmega.hashCode();
      if (midiAlmMo != null) __code = 31*__code + midiAlmMo.hashCode();
      if (midiAlmaf0 != null) __code = 31*__code + midiAlmaf0.hashCode();
      if (midiAlmaf1 != null) __code = 31*__code + midiAlmaf1.hashCode();
      if (midiAlmL1Health != null) __code = 31*__code + midiAlmL1Health.hashCode();
      if (midiAlmL2Health != null) __code = 31*__code + midiAlmL2Health.hashCode();
      if (midiAlmL5Health != null) __code = 31*__code + midiAlmL5Health.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SvID
    */
   public SV_ID getSvID () {
      return svID;
   }

   public void setSvID (SV_ID value) {
      this.svID = value;
   }

   /**
    * Accessor/mutator methods for MidiAlmE
    */
   public Asn1Integer getMidiAlmE () {
      return midiAlmE;
   }

   public void setMidiAlmE (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 2047))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.midiAlmE = value;
   }

   public void setMidiAlmE (long value) 
      throws Asn1Exception
   {
      setMidiAlmE (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for MidiAlmDeltaI
    */
   public Asn1Integer getMidiAlmDeltaI () {
      return midiAlmDeltaI;
   }

   public void setMidiAlmDeltaI (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1024 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.midiAlmDeltaI = value;
   }

   public void setMidiAlmDeltaI (long value) 
      throws Asn1Exception
   {
      setMidiAlmDeltaI (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for MidiAlmOmegaDot
    */
   public Asn1Integer getMidiAlmOmegaDot () {
      return midiAlmOmegaDot;
   }

   public void setMidiAlmOmegaDot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1024 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.midiAlmOmegaDot = value;
   }

   public void setMidiAlmOmegaDot (long value) 
      throws Asn1Exception
   {
      setMidiAlmOmegaDot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for MidiAlmSqrtA
    */
   public Asn1Integer getMidiAlmSqrtA () {
      return midiAlmSqrtA;
   }

   public void setMidiAlmSqrtA (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 131071))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.midiAlmSqrtA = value;
   }

   public void setMidiAlmSqrtA (long value) 
      throws Asn1Exception
   {
      setMidiAlmSqrtA (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for MidiAlmOmega0
    */
   public Asn1Integer getMidiAlmOmega0 () {
      return midiAlmOmega0;
   }

   public void setMidiAlmOmega0 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.midiAlmOmega0 = value;
   }

   public void setMidiAlmOmega0 (long value) 
      throws Asn1Exception
   {
      setMidiAlmOmega0 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for MidiAlmOmega
    */
   public Asn1Integer getMidiAlmOmega () {
      return midiAlmOmega;
   }

   public void setMidiAlmOmega (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.midiAlmOmega = value;
   }

   public void setMidiAlmOmega (long value) 
      throws Asn1Exception
   {
      setMidiAlmOmega (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for MidiAlmMo
    */
   public Asn1Integer getMidiAlmMo () {
      return midiAlmMo;
   }

   public void setMidiAlmMo (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.midiAlmMo = value;
   }

   public void setMidiAlmMo (long value) 
      throws Asn1Exception
   {
      setMidiAlmMo (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for MidiAlmaf0
    */
   public Asn1Integer getMidiAlmaf0 () {
      return midiAlmaf0;
   }

   public void setMidiAlmaf0 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1024 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.midiAlmaf0 = value;
   }

   public void setMidiAlmaf0 (long value) 
      throws Asn1Exception
   {
      setMidiAlmaf0 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for MidiAlmaf1
    */
   public Asn1Integer getMidiAlmaf1 () {
      return midiAlmaf1;
   }

   public void setMidiAlmaf1 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -512 && value.value <= 511))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.midiAlmaf1 = value;
   }

   public void setMidiAlmaf1 (long value) 
      throws Asn1Exception
   {
      setMidiAlmaf1 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for MidiAlmL1Health
    */
   public Asn1Boolean getMidiAlmL1Health () {
      return midiAlmL1Health;
   }

   public void setMidiAlmL1Health (Asn1Boolean value) {
      this.midiAlmL1Health = value;
   }

   public void setMidiAlmL1Health (boolean value) {
      setMidiAlmL1Health (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for MidiAlmL2Health
    */
   public Asn1Boolean getMidiAlmL2Health () {
      return midiAlmL2Health;
   }

   public void setMidiAlmL2Health (Asn1Boolean value) {
      this.midiAlmL2Health = value;
   }

   public void setMidiAlmL2Health (boolean value) {
      setMidiAlmL2Health (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for MidiAlmL5Health
    */
   public Asn1Boolean getMidiAlmL5Health () {
      return midiAlmL5Health;
   }

   public void setMidiAlmL5Health (Asn1Boolean value) {
      this.midiAlmL5Health = value;
   }

   public void setMidiAlmL5Health (boolean value) {
      setMidiAlmL5Health (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return svID;
         case 1: return midiAlmE;
         case 2: return midiAlmDeltaI;
         case 3: return midiAlmOmegaDot;
         case 4: return midiAlmSqrtA;
         case 5: return midiAlmOmega0;
         case 6: return midiAlmOmega;
         case 7: return midiAlmMo;
         case 8: return midiAlmaf0;
         case 9: return midiAlmaf1;
         case 10: return midiAlmL1Health;
         case 11: return midiAlmL2Health;
         case 12: return midiAlmL5Health;
         case 13: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "svID";
         case 1: return "midiAlmE";
         case 2: return "midiAlmDeltaI";
         case 3: return "midiAlmOmegaDot";
         case 4: return "midiAlmSqrtA";
         case 5: return "midiAlmOmega0";
         case 6: return "midiAlmOmega";
         case 7: return "midiAlmMo";
         case 8: return "midiAlmaf0";
         case 9: return "midiAlmaf1";
         case 10: return "midiAlmL1Health";
         case 11: return "midiAlmL2Health";
         case 12: return "midiAlmL5Health";
         case 13: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode svID

      buffer.getContext().eventDispatcher.startElement("svID", -1);

      svID = new SV_ID();
      svID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("svID", -1);

      // decode midiAlmE

      buffer.getContext().eventDispatcher.startElement("midiAlmE", -1);

      midiAlmE = new Asn1Integer();
      midiAlmE.decode (buffer, 0, 2047);
      buffer.getContext().eventDispatcher.endElement("midiAlmE", -1);

      // decode midiAlmDeltaI

      buffer.getContext().eventDispatcher.startElement("midiAlmDeltaI", -1);

      midiAlmDeltaI = new Asn1Integer();
      midiAlmDeltaI.decode (buffer, -1024, 1023);
      buffer.getContext().eventDispatcher.endElement("midiAlmDeltaI", -1);

      // decode midiAlmOmegaDot

      buffer.getContext().eventDispatcher.startElement("midiAlmOmegaDot", -1);

      midiAlmOmegaDot = new Asn1Integer();
      midiAlmOmegaDot.decode (buffer, -1024, 1023);
      buffer.getContext().eventDispatcher.endElement("midiAlmOmegaDot", -1);

      // decode midiAlmSqrtA

      buffer.getContext().eventDispatcher.startElement("midiAlmSqrtA", -1);

      midiAlmSqrtA = new Asn1Integer();
      midiAlmSqrtA.decode (buffer, 0, 131071);
      buffer.getContext().eventDispatcher.endElement("midiAlmSqrtA", -1);

      // decode midiAlmOmega0

      buffer.getContext().eventDispatcher.startElement("midiAlmOmega0", -1);

      midiAlmOmega0 = new Asn1Integer();
      midiAlmOmega0.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("midiAlmOmega0", -1);

      // decode midiAlmOmega

      buffer.getContext().eventDispatcher.startElement("midiAlmOmega", -1);

      midiAlmOmega = new Asn1Integer();
      midiAlmOmega.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("midiAlmOmega", -1);

      // decode midiAlmMo

      buffer.getContext().eventDispatcher.startElement("midiAlmMo", -1);

      midiAlmMo = new Asn1Integer();
      midiAlmMo.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("midiAlmMo", -1);

      // decode midiAlmaf0

      buffer.getContext().eventDispatcher.startElement("midiAlmaf0", -1);

      midiAlmaf0 = new Asn1Integer();
      midiAlmaf0.decode (buffer, -1024, 1023);
      buffer.getContext().eventDispatcher.endElement("midiAlmaf0", -1);

      // decode midiAlmaf1

      buffer.getContext().eventDispatcher.startElement("midiAlmaf1", -1);

      midiAlmaf1 = new Asn1Integer();
      midiAlmaf1.decode (buffer, -512, 511);
      buffer.getContext().eventDispatcher.endElement("midiAlmaf1", -1);

      // decode midiAlmL1Health

      buffer.getContext().eventDispatcher.startElement("midiAlmL1Health", -1);

      midiAlmL1Health = new Asn1Boolean();
      midiAlmL1Health.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("midiAlmL1Health", -1);

      // decode midiAlmL2Health

      buffer.getContext().eventDispatcher.startElement("midiAlmL2Health", -1);

      midiAlmL2Health = new Asn1Boolean();
      midiAlmL2Health.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("midiAlmL2Health", -1);

      // decode midiAlmL5Health

      buffer.getContext().eventDispatcher.startElement("midiAlmL5Health", -1);

      midiAlmL5Health = new Asn1Boolean();
      midiAlmL5Health.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("midiAlmL5Health", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode svID

      if (svID != null) {
         buffer.getContext().eventDispatcher.startElement("svID", -1);

         svID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("svID", -1);
      }
      else throw new Asn1MissingRequiredException ("svID");

      // encode midiAlmE

      if (midiAlmE != null) {
         buffer.getContext().eventDispatcher.startElement("midiAlmE", -1);

         midiAlmE.encode (buffer, 0, 2047);

         buffer.getContext().eventDispatcher.endElement("midiAlmE", -1);
      }
      else throw new Asn1MissingRequiredException ("midiAlmE");

      // encode midiAlmDeltaI

      if (midiAlmDeltaI != null) {
         buffer.getContext().eventDispatcher.startElement("midiAlmDeltaI", -1);

         midiAlmDeltaI.encode (buffer, -1024, 1023);

         buffer.getContext().eventDispatcher.endElement("midiAlmDeltaI", -1);
      }
      else throw new Asn1MissingRequiredException ("midiAlmDeltaI");

      // encode midiAlmOmegaDot

      if (midiAlmOmegaDot != null) {
         buffer.getContext().eventDispatcher.startElement("midiAlmOmegaDot", -1);

         midiAlmOmegaDot.encode (buffer, -1024, 1023);

         buffer.getContext().eventDispatcher.endElement("midiAlmOmegaDot", -1);
      }
      else throw new Asn1MissingRequiredException ("midiAlmOmegaDot");

      // encode midiAlmSqrtA

      if (midiAlmSqrtA != null) {
         buffer.getContext().eventDispatcher.startElement("midiAlmSqrtA", -1);

         midiAlmSqrtA.encode (buffer, 0, 131071);

         buffer.getContext().eventDispatcher.endElement("midiAlmSqrtA", -1);
      }
      else throw new Asn1MissingRequiredException ("midiAlmSqrtA");

      // encode midiAlmOmega0

      if (midiAlmOmega0 != null) {
         buffer.getContext().eventDispatcher.startElement("midiAlmOmega0", -1);

         midiAlmOmega0.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("midiAlmOmega0", -1);
      }
      else throw new Asn1MissingRequiredException ("midiAlmOmega0");

      // encode midiAlmOmega

      if (midiAlmOmega != null) {
         buffer.getContext().eventDispatcher.startElement("midiAlmOmega", -1);

         midiAlmOmega.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("midiAlmOmega", -1);
      }
      else throw new Asn1MissingRequiredException ("midiAlmOmega");

      // encode midiAlmMo

      if (midiAlmMo != null) {
         buffer.getContext().eventDispatcher.startElement("midiAlmMo", -1);

         midiAlmMo.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("midiAlmMo", -1);
      }
      else throw new Asn1MissingRequiredException ("midiAlmMo");

      // encode midiAlmaf0

      if (midiAlmaf0 != null) {
         buffer.getContext().eventDispatcher.startElement("midiAlmaf0", -1);

         midiAlmaf0.encode (buffer, -1024, 1023);

         buffer.getContext().eventDispatcher.endElement("midiAlmaf0", -1);
      }
      else throw new Asn1MissingRequiredException ("midiAlmaf0");

      // encode midiAlmaf1

      if (midiAlmaf1 != null) {
         buffer.getContext().eventDispatcher.startElement("midiAlmaf1", -1);

         midiAlmaf1.encode (buffer, -512, 511);

         buffer.getContext().eventDispatcher.endElement("midiAlmaf1", -1);
      }
      else throw new Asn1MissingRequiredException ("midiAlmaf1");

      // encode midiAlmL1Health

      if (midiAlmL1Health != null) {
         buffer.getContext().eventDispatcher.startElement("midiAlmL1Health", -1);

         midiAlmL1Health.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("midiAlmL1Health", -1);
      }
      else throw new Asn1MissingRequiredException ("midiAlmL1Health");

      // encode midiAlmL2Health

      if (midiAlmL2Health != null) {
         buffer.getContext().eventDispatcher.startElement("midiAlmL2Health", -1);

         midiAlmL2Health.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("midiAlmL2Health", -1);
      }
      else throw new Asn1MissingRequiredException ("midiAlmL2Health");

      // encode midiAlmL5Health

      if (midiAlmL5Health != null) {
         buffer.getContext().eventDispatcher.startElement("midiAlmL5Health", -1);

         midiAlmL5Health.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("midiAlmL5Health", -1);
      }
      else throw new Asn1MissingRequiredException ("midiAlmL5Health");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
