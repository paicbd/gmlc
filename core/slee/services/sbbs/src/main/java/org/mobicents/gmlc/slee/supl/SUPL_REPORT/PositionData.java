/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_REPORT;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.ULP_Components.Position;
import org.mobicents.gmlc.slee.supl.ULP_Components.PosMethod;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.GNSSPosTechnology;

public class PositionData extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_REPORTRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_REPORTRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "PositionData";
   }

   protected Position position;
   protected PosMethod posMethod = null;  // optional
   protected GNSSPosTechnology gnssPosTechnology;  // optional
   protected GANSSsignalsInfo ganssSignalsInfo;  // optional
   protected Asn1OpenExt extElem1;

   public PositionData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PositionData (
      Position position_,
      PosMethod posMethod_,
      GNSSPosTechnology gnssPosTechnology_,
      GANSSsignalsInfo ganssSignalsInfo_
   ) throws Asn1Exception {
      super();
      setPosition (position_);
      setPosMethod (posMethod_);
      setGnssPosTechnology (gnssPosTechnology_);
      setGanssSignalsInfo (ganssSignalsInfo_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PositionData (
      Position position_
   ) throws Asn1Exception {
      super();
      setPosition (position_);
   }

   public void init () {
      position = null;
      posMethod = null;
      gnssPosTechnology = null;
      ganssSignalsInfo = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof PositionData) ) return false;

      PositionData rhs = (PositionData) obj;

      if (position == null) {
         if (rhs.position != null) return false;
      }
      else {
         if (!position.equals(rhs.position)) {
            return false;
         }
      }

      if (posMethod == null) {
         if (rhs.posMethod != null) return false;
      }
      else {
         if (!posMethod.equals(rhs.posMethod)) {
            return false;
         }
      }

      if (gnssPosTechnology == null) {
         if (rhs.gnssPosTechnology != null) return false;
      }
      else {
         if (!gnssPosTechnology.equals(rhs.gnssPosTechnology)) {
            return false;
         }
      }

      if (ganssSignalsInfo == null) {
         if (rhs.ganssSignalsInfo != null) return false;
      }
      else {
         if (!ganssSignalsInfo.equals(rhs.ganssSignalsInfo)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (position != null) __code = 31*__code + position.hashCode();
      if (posMethod != null) __code = 31*__code + posMethod.hashCode();
      if (gnssPosTechnology != null) __code = 31*__code + gnssPosTechnology.hashCode();
      if (ganssSignalsInfo != null) __code = 31*__code + ganssSignalsInfo.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Position
    */
   public Position getPosition () {
      return position;
   }

   public void setPosition (Position value) {
      this.position = value;
   }

   /**
    * Accessor/mutator methods for PosMethod
    */
   public PosMethod getPosMethod () {
      return posMethod;
   }

   public void setPosMethod (PosMethod value) {
      this.posMethod = value;
   }

   public boolean hasPosMethod () {
      return (posMethod != null);
   }

   /**
    * Accessor/mutator methods for GnssPosTechnology
    */
   public GNSSPosTechnology getGnssPosTechnology () {
      return gnssPosTechnology;
   }

   public void setGnssPosTechnology (GNSSPosTechnology value) {
      this.gnssPosTechnology = value;
   }

   public boolean hasGnssPosTechnology () {
      return (gnssPosTechnology != null);
   }

   /**
    * Accessor/mutator methods for GanssSignalsInfo
    */
   public GANSSsignalsInfo getGanssSignalsInfo () {
      return ganssSignalsInfo;
   }

   public void setGanssSignalsInfo (GANSSsignalsInfo value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 16))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.ganssSignalsInfo = value;
   }

   public boolean hasGanssSignalsInfo () {
      return (ganssSignalsInfo != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return position;
         case 1: return posMethod;
         case 2: return gnssPosTechnology;
         case 3: return ganssSignalsInfo;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "position";
         case 1: return "posMethod";
         case 2: return "gnssPosTechnology";
         case 3: return "ganssSignalsInfo";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean posMethodPresent = buffer.decodeBit ("posMethodPresent");
      boolean gnssPosTechnologyPresent = buffer.decodeBit ("gnssPosTechnologyPresent");
      boolean ganssSignalsInfoPresent = buffer.decodeBit ("ganssSignalsInfoPresent");

      // decode position

      buffer.getContext().eventDispatcher.startElement("position", -1);

      position = new Position();
      position.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("position", -1);

      // decode posMethod

      if (posMethodPresent) {
         buffer.getContext().eventDispatcher.startElement("posMethod", -1);

         int tval = PosMethod.decodeEnumValue (buffer);
         posMethod = PosMethod.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("posMethod", -1);
      }
      else {
         posMethod = null;
      }

      // decode gnssPosTechnology

      if (gnssPosTechnologyPresent) {
         buffer.getContext().eventDispatcher.startElement("gnssPosTechnology", -1);

         gnssPosTechnology = new GNSSPosTechnology();
         gnssPosTechnology.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnssPosTechnology", -1);
      }
      else {
         gnssPosTechnology = null;
      }

      // decode ganssSignalsInfo

      if (ganssSignalsInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("ganssSignalsInfo", -1);

         ganssSignalsInfo = new GANSSsignalsInfo();
         ganssSignalsInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ganssSignalsInfo", -1);
      }
      else {
         ganssSignalsInfo = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((posMethod != null), null);
      buffer.encodeBit ((gnssPosTechnology != null), null);
      buffer.encodeBit ((ganssSignalsInfo != null), null);

      // encode position

      if (position != null) {
         buffer.getContext().eventDispatcher.startElement("position", -1);

         position.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("position", -1);
      }
      else throw new Asn1MissingRequiredException ("position");

      // encode posMethod

      if (posMethod != null) {
         buffer.getContext().eventDispatcher.startElement("posMethod", -1);

         posMethod.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("posMethod", -1);
      }

      // encode gnssPosTechnology

      if (gnssPosTechnology != null) {
         buffer.getContext().eventDispatcher.startElement("gnssPosTechnology", -1);

         gnssPosTechnology.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnssPosTechnology", -1);
      }

      // encode ganssSignalsInfo

      if (ganssSignalsInfo != null) {
         buffer.getContext().eventDispatcher.startElement("ganssSignalsInfo", -1);

         ganssSignalsInfo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ganssSignalsInfo", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
