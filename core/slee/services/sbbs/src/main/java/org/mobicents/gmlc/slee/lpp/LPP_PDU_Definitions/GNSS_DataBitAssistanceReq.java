/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_DataBitAssistanceReq extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-DataBitAssistanceReq";
   }

   protected Asn1Integer gnss_TOD_Req;
   protected Asn1Integer gnss_TOD_FracReq;  // optional
   protected Asn1Integer dataBitInterval;
   protected GNSS_SignalIDs gnss_SignalType;
   protected GNSS_DataBitsReqSatList gnss_DataBitsReq;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_DataBitAssistanceReq () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_DataBitAssistanceReq (
      Asn1Integer gnss_TOD_Req_,
      Asn1Integer gnss_TOD_FracReq_,
      Asn1Integer dataBitInterval_,
      GNSS_SignalIDs gnss_SignalType_,
      GNSS_DataBitsReqSatList gnss_DataBitsReq_
   ) throws Asn1Exception {
      super();
      setGnss_TOD_Req (gnss_TOD_Req_);
      setGnss_TOD_FracReq (gnss_TOD_FracReq_);
      setDataBitInterval (dataBitInterval_);
      setGnss_SignalType (gnss_SignalType_);
      setGnss_DataBitsReq (gnss_DataBitsReq_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GNSS_DataBitAssistanceReq (
      Asn1Integer gnss_TOD_Req_,
      Asn1Integer dataBitInterval_,
      GNSS_SignalIDs gnss_SignalType_
   ) throws Asn1Exception {
      super();
      setGnss_TOD_Req (gnss_TOD_Req_);
      setDataBitInterval (dataBitInterval_);
      setGnss_SignalType (gnss_SignalType_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GNSS_DataBitAssistanceReq (long gnss_TOD_Req_,
      long gnss_TOD_FracReq_,
      long dataBitInterval_,
      GNSS_SignalIDs gnss_SignalType_,
      GNSS_DataBitsReqSatList gnss_DataBitsReq_
   ) throws Asn1Exception {
      super();
      setGnss_TOD_Req (gnss_TOD_Req_);
      setGnss_TOD_FracReq (gnss_TOD_FracReq_);
      setDataBitInterval (dataBitInterval_);
      setGnss_SignalType (gnss_SignalType_);
      setGnss_DataBitsReq (gnss_DataBitsReq_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public GNSS_DataBitAssistanceReq (
      long gnss_TOD_Req_,
      long dataBitInterval_,
      GNSS_SignalIDs gnss_SignalType_
   ) throws Asn1Exception {
      super();
      setGnss_TOD_Req (gnss_TOD_Req_);
      setDataBitInterval (dataBitInterval_);
      setGnss_SignalType (gnss_SignalType_);
   }

   public void init () {
      gnss_TOD_Req = null;
      gnss_TOD_FracReq = null;
      dataBitInterval = null;
      gnss_SignalType = null;
      gnss_DataBitsReq = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_DataBitAssistanceReq) ) return false;

      GNSS_DataBitAssistanceReq rhs = (GNSS_DataBitAssistanceReq) obj;

      if (gnss_TOD_Req == null) {
         if (rhs.gnss_TOD_Req != null) return false;
      }
      else {
         if (!gnss_TOD_Req.equals(rhs.gnss_TOD_Req)) {
            return false;
         }
      }

      if (gnss_TOD_FracReq == null) {
         if (rhs.gnss_TOD_FracReq != null) return false;
      }
      else {
         if (!gnss_TOD_FracReq.equals(rhs.gnss_TOD_FracReq)) {
            return false;
         }
      }

      if (dataBitInterval == null) {
         if (rhs.dataBitInterval != null) return false;
      }
      else {
         if (!dataBitInterval.equals(rhs.dataBitInterval)) {
            return false;
         }
      }

      if (gnss_SignalType == null) {
         if (rhs.gnss_SignalType != null) return false;
      }
      else {
         if (!gnss_SignalType.equals(rhs.gnss_SignalType)) {
            return false;
         }
      }

      if (gnss_DataBitsReq == null) {
         if (rhs.gnss_DataBitsReq != null) return false;
      }
      else {
         if (!gnss_DataBitsReq.equals(rhs.gnss_DataBitsReq)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gnss_TOD_Req != null) __code = 31*__code + gnss_TOD_Req.hashCode();
      if (gnss_TOD_FracReq != null) __code = 31*__code + gnss_TOD_FracReq.hashCode();
      if (dataBitInterval != null) __code = 31*__code + dataBitInterval.hashCode();
      if (gnss_SignalType != null) __code = 31*__code + gnss_SignalType.hashCode();
      if (gnss_DataBitsReq != null) __code = 31*__code + gnss_DataBitsReq.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Gnss_TOD_Req
    */
   public Asn1Integer getGnss_TOD_Req () {
      return gnss_TOD_Req;
   }

   public void setGnss_TOD_Req (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 3599))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gnss_TOD_Req = value;
   }

   public void setGnss_TOD_Req (long value) 
      throws Asn1Exception
   {
      setGnss_TOD_Req (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Gnss_TOD_FracReq
    */
   public Asn1Integer getGnss_TOD_FracReq () {
      return gnss_TOD_FracReq;
   }

   public void setGnss_TOD_FracReq (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 999))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gnss_TOD_FracReq = value;
   }

   public void setGnss_TOD_FracReq (long value) 
      throws Asn1Exception
   {
      setGnss_TOD_FracReq (new Asn1Integer(value));
   }
   public boolean hasGnss_TOD_FracReq () {
      return (gnss_TOD_FracReq != null);
   }

   /**
    * Accessor/mutator methods for DataBitInterval
    */
   public Asn1Integer getDataBitInterval () {
      return dataBitInterval;
   }

   public void setDataBitInterval (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.dataBitInterval = value;
   }

   public void setDataBitInterval (long value) 
      throws Asn1Exception
   {
      setDataBitInterval (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Gnss_SignalType
    */
   public GNSS_SignalIDs getGnss_SignalType () {
      return gnss_SignalType;
   }

   public void setGnss_SignalType (GNSS_SignalIDs value) {
      this.gnss_SignalType = value;
   }

   /**
    * Accessor/mutator methods for Gnss_DataBitsReq
    */
   public GNSS_DataBitsReqSatList getGnss_DataBitsReq () {
      return gnss_DataBitsReq;
   }

   public void setGnss_DataBitsReq (GNSS_DataBitsReqSatList value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 64))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.gnss_DataBitsReq = value;
   }

   public boolean hasGnss_DataBitsReq () {
      return (gnss_DataBitsReq != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gnss_TOD_Req;
         case 1: return gnss_TOD_FracReq;
         case 2: return dataBitInterval;
         case 3: return gnss_SignalType;
         case 4: return gnss_DataBitsReq;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gnss-TOD-Req";
         case 1: return "gnss-TOD-FracReq";
         case 2: return "dataBitInterval";
         case 3: return "gnss-SignalType";
         case 4: return "gnss-DataBitsReq";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean gnss_TOD_FracReqPresent = buffer.decodeBit ("gnss_TOD_FracReqPresent");
      boolean gnss_DataBitsReqPresent = buffer.decodeBit ("gnss_DataBitsReqPresent");

      // decode gnss_TOD_Req

      buffer.getContext().eventDispatcher.startElement("gnss_TOD_Req", -1);

      gnss_TOD_Req = new Asn1Integer();
      gnss_TOD_Req.decode (buffer, 0, 3599);
      buffer.getContext().eventDispatcher.endElement("gnss_TOD_Req", -1);

      // decode gnss_TOD_FracReq

      if (gnss_TOD_FracReqPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_TOD_FracReq", -1);

         gnss_TOD_FracReq = new Asn1Integer();
         gnss_TOD_FracReq.decode (buffer, 0, 999);
         buffer.getContext().eventDispatcher.endElement("gnss_TOD_FracReq", -1);
      }
      else {
         gnss_TOD_FracReq = null;
      }

      // decode dataBitInterval

      buffer.getContext().eventDispatcher.startElement("dataBitInterval", -1);

      dataBitInterval = new Asn1Integer();
      dataBitInterval.decode (buffer, 0, 15);
      buffer.getContext().eventDispatcher.endElement("dataBitInterval", -1);

      // decode gnss_SignalType

      buffer.getContext().eventDispatcher.startElement("gnss_SignalType", -1);

      gnss_SignalType = new GNSS_SignalIDs();
      gnss_SignalType.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("gnss_SignalType", -1);

      // decode gnss_DataBitsReq

      if (gnss_DataBitsReqPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_DataBitsReq", -1);

         gnss_DataBitsReq = new GNSS_DataBitsReqSatList();
         gnss_DataBitsReq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_DataBitsReq", -1);
      }
      else {
         gnss_DataBitsReq = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((gnss_TOD_FracReq != null), null);
      buffer.encodeBit ((gnss_DataBitsReq != null), null);

      // encode gnss_TOD_Req

      if (gnss_TOD_Req != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_TOD_Req", -1);

         gnss_TOD_Req.encode (buffer, 0, 3599);

         buffer.getContext().eventDispatcher.endElement("gnss_TOD_Req", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_TOD_Req");

      // encode gnss_TOD_FracReq

      if (gnss_TOD_FracReq != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_TOD_FracReq", -1);

         gnss_TOD_FracReq.encode (buffer, 0, 999);

         buffer.getContext().eventDispatcher.endElement("gnss_TOD_FracReq", -1);
      }

      // encode dataBitInterval

      if (dataBitInterval != null) {
         buffer.getContext().eventDispatcher.startElement("dataBitInterval", -1);

         dataBitInterval.encode (buffer, 0, 15);

         buffer.getContext().eventDispatcher.endElement("dataBitInterval", -1);
      }
      else throw new Asn1MissingRequiredException ("dataBitInterval");

      // encode gnss_SignalType

      if (gnss_SignalType != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_SignalType", -1);

         gnss_SignalType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_SignalType", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_SignalType");

      // encode gnss_DataBitsReq

      if (gnss_DataBitsReq != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_DataBitsReq", -1);

         gnss_DataBitsReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_DataBitsReq", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
