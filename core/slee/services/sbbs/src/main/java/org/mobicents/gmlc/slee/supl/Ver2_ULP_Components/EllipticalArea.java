/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class EllipticalArea extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "EllipticalArea";
   }

   protected Coordinate coordinate;
   protected Asn1Integer semiMajor;
   protected Asn1Integer semiMajor_min;  // optional
   protected Asn1Integer semiMajor_max;  // optional
   protected Asn1Integer semiMinor;
   protected Asn1Integer semiMinor_min;  // optional
   protected Asn1Integer semiMinor_max;  // optional
   protected Asn1Integer angle;

   public EllipticalArea () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EllipticalArea (
      Coordinate coordinate_,
      Asn1Integer semiMajor_,
      Asn1Integer semiMajor_min_,
      Asn1Integer semiMajor_max_,
      Asn1Integer semiMinor_,
      Asn1Integer semiMinor_min_,
      Asn1Integer semiMinor_max_,
      Asn1Integer angle_
   ) throws Asn1Exception {
      super();
      setCoordinate (coordinate_);
      setSemiMajor (semiMajor_);
      setSemiMajor_min (semiMajor_min_);
      setSemiMajor_max (semiMajor_max_);
      setSemiMinor (semiMinor_);
      setSemiMinor_min (semiMinor_min_);
      setSemiMinor_max (semiMinor_max_);
      setAngle (angle_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EllipticalArea (
      Coordinate coordinate_,
      Asn1Integer semiMajor_,
      Asn1Integer semiMinor_,
      Asn1Integer angle_
   ) throws Asn1Exception {
      super();
      setCoordinate (coordinate_);
      setSemiMajor (semiMajor_);
      setSemiMinor (semiMinor_);
      setAngle (angle_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EllipticalArea (Coordinate coordinate_,
      long semiMajor_,
      long semiMajor_min_,
      long semiMajor_max_,
      long semiMinor_,
      long semiMinor_min_,
      long semiMinor_max_,
      long angle_
   ) throws Asn1Exception {
      super();
      setCoordinate (coordinate_);
      setSemiMajor (semiMajor_);
      setSemiMajor_min (semiMajor_min_);
      setSemiMajor_max (semiMajor_max_);
      setSemiMinor (semiMinor_);
      setSemiMinor_min (semiMinor_min_);
      setSemiMinor_max (semiMinor_max_);
      setAngle (angle_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public EllipticalArea (
      Coordinate coordinate_,
      long semiMajor_,
      long semiMinor_,
      long angle_
   ) throws Asn1Exception {
      super();
      setCoordinate (coordinate_);
      setSemiMajor (semiMajor_);
      setSemiMinor (semiMinor_);
      setAngle (angle_);
   }

   public void init () {
      coordinate = null;
      semiMajor = null;
      semiMajor_min = null;
      semiMajor_max = null;
      semiMinor = null;
      semiMinor_min = null;
      semiMinor_max = null;
      angle = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof EllipticalArea) ) return false;

      EllipticalArea rhs = (EllipticalArea) obj;

      if (coordinate == null) {
         if (rhs.coordinate != null) return false;
      }
      else {
         if (!coordinate.equals(rhs.coordinate)) {
            return false;
         }
      }

      if (semiMajor == null) {
         if (rhs.semiMajor != null) return false;
      }
      else {
         if (!semiMajor.equals(rhs.semiMajor)) {
            return false;
         }
      }

      if (semiMajor_min == null) {
         if (rhs.semiMajor_min != null) return false;
      }
      else {
         if (!semiMajor_min.equals(rhs.semiMajor_min)) {
            return false;
         }
      }

      if (semiMajor_max == null) {
         if (rhs.semiMajor_max != null) return false;
      }
      else {
         if (!semiMajor_max.equals(rhs.semiMajor_max)) {
            return false;
         }
      }

      if (semiMinor == null) {
         if (rhs.semiMinor != null) return false;
      }
      else {
         if (!semiMinor.equals(rhs.semiMinor)) {
            return false;
         }
      }

      if (semiMinor_min == null) {
         if (rhs.semiMinor_min != null) return false;
      }
      else {
         if (!semiMinor_min.equals(rhs.semiMinor_min)) {
            return false;
         }
      }

      if (semiMinor_max == null) {
         if (rhs.semiMinor_max != null) return false;
      }
      else {
         if (!semiMinor_max.equals(rhs.semiMinor_max)) {
            return false;
         }
      }

      if (angle == null) {
         if (rhs.angle != null) return false;
      }
      else {
         if (!angle.equals(rhs.angle)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (coordinate != null) __code = 31*__code + coordinate.hashCode();
      if (semiMajor != null) __code = 31*__code + semiMajor.hashCode();
      if (semiMajor_min != null) __code = 31*__code + semiMajor_min.hashCode();
      if (semiMajor_max != null) __code = 31*__code + semiMajor_max.hashCode();
      if (semiMinor != null) __code = 31*__code + semiMinor.hashCode();
      if (semiMinor_min != null) __code = 31*__code + semiMinor_min.hashCode();
      if (semiMinor_max != null) __code = 31*__code + semiMinor_max.hashCode();
      if (angle != null) __code = 31*__code + angle.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Coordinate
    */
   public Coordinate getCoordinate () {
      return coordinate;
   }

   public void setCoordinate (Coordinate value) {
      this.coordinate = value;
   }

   /**
    * Accessor/mutator methods for SemiMajor
    */
   public Asn1Integer getSemiMajor () {
      return semiMajor;
   }

   public void setSemiMajor (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 1000000))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.semiMajor = value;
   }

   public void setSemiMajor (long value) 
      throws Asn1Exception
   {
      setSemiMajor (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SemiMajor_min
    */
   public Asn1Integer getSemiMajor_min () {
      return semiMajor_min;
   }

   public void setSemiMajor_min (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 1000000))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.semiMajor_min = value;
   }

   public void setSemiMajor_min (long value) 
      throws Asn1Exception
   {
      setSemiMajor_min (new Asn1Integer(value));
   }
   public boolean hasSemiMajor_min () {
      return (semiMajor_min != null);
   }

   /**
    * Accessor/mutator methods for SemiMajor_max
    */
   public Asn1Integer getSemiMajor_max () {
      return semiMajor_max;
   }

   public void setSemiMajor_max (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 1500000))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.semiMajor_max = value;
   }

   public void setSemiMajor_max (long value) 
      throws Asn1Exception
   {
      setSemiMajor_max (new Asn1Integer(value));
   }
   public boolean hasSemiMajor_max () {
      return (semiMajor_max != null);
   }

   /**
    * Accessor/mutator methods for SemiMinor
    */
   public Asn1Integer getSemiMinor () {
      return semiMinor;
   }

   public void setSemiMinor (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 1000000))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.semiMinor = value;
   }

   public void setSemiMinor (long value) 
      throws Asn1Exception
   {
      setSemiMinor (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SemiMinor_min
    */
   public Asn1Integer getSemiMinor_min () {
      return semiMinor_min;
   }

   public void setSemiMinor_min (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 1000000))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.semiMinor_min = value;
   }

   public void setSemiMinor_min (long value) 
      throws Asn1Exception
   {
      setSemiMinor_min (new Asn1Integer(value));
   }
   public boolean hasSemiMinor_min () {
      return (semiMinor_min != null);
   }

   /**
    * Accessor/mutator methods for SemiMinor_max
    */
   public Asn1Integer getSemiMinor_max () {
      return semiMinor_max;
   }

   public void setSemiMinor_max (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 1500000))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.semiMinor_max = value;
   }

   public void setSemiMinor_max (long value) 
      throws Asn1Exception
   {
      setSemiMinor_max (new Asn1Integer(value));
   }
   public boolean hasSemiMinor_max () {
      return (semiMinor_max != null);
   }

   /**
    * Accessor/mutator methods for Angle
    */
   public Asn1Integer getAngle () {
      return angle;
   }

   public void setAngle (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 179))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.angle = value;
   }

   public void setAngle (long value) 
      throws Asn1Exception
   {
      setAngle (new Asn1Integer(value));
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return coordinate;
         case 1: return semiMajor;
         case 2: return semiMajor_min;
         case 3: return semiMajor_max;
         case 4: return semiMinor;
         case 5: return semiMinor_min;
         case 6: return semiMinor_max;
         case 7: return angle;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "coordinate";
         case 1: return "semiMajor";
         case 2: return "semiMajor-min";
         case 3: return "semiMajor-max";
         case 4: return "semiMinor";
         case 5: return "semiMinor-min";
         case 6: return "semiMinor-max";
         case 7: return "angle";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean semiMajor_minPresent = buffer.decodeBit ("semiMajor_minPresent");
      boolean semiMajor_maxPresent = buffer.decodeBit ("semiMajor_maxPresent");
      boolean semiMinor_minPresent = buffer.decodeBit ("semiMinor_minPresent");
      boolean semiMinor_maxPresent = buffer.decodeBit ("semiMinor_maxPresent");

      // decode coordinate

      buffer.getContext().eventDispatcher.startElement("coordinate", -1);

      coordinate = new Coordinate();
      coordinate.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("coordinate", -1);

      // decode semiMajor

      buffer.getContext().eventDispatcher.startElement("semiMajor", -1);

      semiMajor = new Asn1Integer();
      semiMajor.decode (buffer, 1, 1000000);
      buffer.getContext().eventDispatcher.endElement("semiMajor", -1);

      // decode semiMajor_min

      if (semiMajor_minPresent) {
         buffer.getContext().eventDispatcher.startElement("semiMajor_min", -1);

         semiMajor_min = new Asn1Integer();
         semiMajor_min.decode (buffer, 1, 1000000);
         buffer.getContext().eventDispatcher.endElement("semiMajor_min", -1);
      }
      else {
         semiMajor_min = null;
      }

      // decode semiMajor_max

      if (semiMajor_maxPresent) {
         buffer.getContext().eventDispatcher.startElement("semiMajor_max", -1);

         semiMajor_max = new Asn1Integer();
         semiMajor_max.decode (buffer, 1, 1500000);
         buffer.getContext().eventDispatcher.endElement("semiMajor_max", -1);
      }
      else {
         semiMajor_max = null;
      }

      // decode semiMinor

      buffer.getContext().eventDispatcher.startElement("semiMinor", -1);

      semiMinor = new Asn1Integer();
      semiMinor.decode (buffer, 1, 1000000);
      buffer.getContext().eventDispatcher.endElement("semiMinor", -1);

      // decode semiMinor_min

      if (semiMinor_minPresent) {
         buffer.getContext().eventDispatcher.startElement("semiMinor_min", -1);

         semiMinor_min = new Asn1Integer();
         semiMinor_min.decode (buffer, 1, 1000000);
         buffer.getContext().eventDispatcher.endElement("semiMinor_min", -1);
      }
      else {
         semiMinor_min = null;
      }

      // decode semiMinor_max

      if (semiMinor_maxPresent) {
         buffer.getContext().eventDispatcher.startElement("semiMinor_max", -1);

         semiMinor_max = new Asn1Integer();
         semiMinor_max.decode (buffer, 1, 1500000);
         buffer.getContext().eventDispatcher.endElement("semiMinor_max", -1);
      }
      else {
         semiMinor_max = null;
      }

      // decode angle

      buffer.getContext().eventDispatcher.startElement("angle", -1);

      angle = new Asn1Integer();
      angle.decode (buffer, 0, 179);
      buffer.getContext().eventDispatcher.endElement("angle", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((semiMajor_min != null), null);
      buffer.encodeBit ((semiMajor_max != null), null);
      buffer.encodeBit ((semiMinor_min != null), null);
      buffer.encodeBit ((semiMinor_max != null), null);

      // encode coordinate

      if (coordinate != null) {
         buffer.getContext().eventDispatcher.startElement("coordinate", -1);

         coordinate.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("coordinate", -1);
      }
      else throw new Asn1MissingRequiredException ("coordinate");

      // encode semiMajor

      if (semiMajor != null) {
         buffer.getContext().eventDispatcher.startElement("semiMajor", -1);

         semiMajor.encode (buffer, 1, 1000000);

         buffer.getContext().eventDispatcher.endElement("semiMajor", -1);
      }
      else throw new Asn1MissingRequiredException ("semiMajor");

      // encode semiMajor_min

      if (semiMajor_min != null) {
         buffer.getContext().eventDispatcher.startElement("semiMajor_min", -1);

         semiMajor_min.encode (buffer, 1, 1000000);

         buffer.getContext().eventDispatcher.endElement("semiMajor_min", -1);
      }

      // encode semiMajor_max

      if (semiMajor_max != null) {
         buffer.getContext().eventDispatcher.startElement("semiMajor_max", -1);

         semiMajor_max.encode (buffer, 1, 1500000);

         buffer.getContext().eventDispatcher.endElement("semiMajor_max", -1);
      }

      // encode semiMinor

      if (semiMinor != null) {
         buffer.getContext().eventDispatcher.startElement("semiMinor", -1);

         semiMinor.encode (buffer, 1, 1000000);

         buffer.getContext().eventDispatcher.endElement("semiMinor", -1);
      }
      else throw new Asn1MissingRequiredException ("semiMinor");

      // encode semiMinor_min

      if (semiMinor_min != null) {
         buffer.getContext().eventDispatcher.startElement("semiMinor_min", -1);

         semiMinor_min.encode (buffer, 1, 1000000);

         buffer.getContext().eventDispatcher.endElement("semiMinor_min", -1);
      }

      // encode semiMinor_max

      if (semiMinor_max != null) {
         buffer.getContext().eventDispatcher.startElement("semiMinor_max", -1);

         semiMinor_max.encode (buffer, 1, 1500000);

         buffer.getContext().eventDispatcher.endElement("semiMinor_max", -1);
      }

      // encode angle

      if (angle != null) {
         buffer.getContext().eventDispatcher.startElement("angle", -1);

         angle.encode (buffer, 0, 179);

         buffer.getContext().eventDispatcher.endElement("angle", -1);
      }
      else throw new Asn1MissingRequiredException ("angle");

   }

}
