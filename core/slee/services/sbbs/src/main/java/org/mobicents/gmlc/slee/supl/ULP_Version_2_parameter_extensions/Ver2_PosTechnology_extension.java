/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Version_2_parameter_extensions;

import com.objsys.asn1j.runtime.*;

public class Ver2_PosTechnology_extension extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_Version_2_parameter_extensionsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_Version_2_parameter_extensionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Ver2-PosTechnology-extension";
   }

   protected GANSSPositionMethods gANSSPositionMethods;  // optional
   protected AdditionalPositioningMethods additionalPositioningMethods;  // optional
   protected Asn1OpenExt extElem1;

   public Ver2_PosTechnology_extension () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Ver2_PosTechnology_extension (
      GANSSPositionMethods gANSSPositionMethods_,
      AdditionalPositioningMethods additionalPositioningMethods_
   ) throws Asn1Exception {
      super();
      setGANSSPositionMethods (gANSSPositionMethods_);
      setAdditionalPositioningMethods (additionalPositioningMethods_);
   }

   public void init () {
      gANSSPositionMethods = null;
      additionalPositioningMethods = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Ver2_PosTechnology_extension) ) return false;

      Ver2_PosTechnology_extension rhs = (Ver2_PosTechnology_extension) obj;

      if (gANSSPositionMethods == null) {
         if (rhs.gANSSPositionMethods != null) return false;
      }
      else {
         if (!gANSSPositionMethods.equals(rhs.gANSSPositionMethods)) {
            return false;
         }
      }

      if (additionalPositioningMethods == null) {
         if (rhs.additionalPositioningMethods != null) return false;
      }
      else {
         if (!additionalPositioningMethods.equals(rhs.additionalPositioningMethods)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gANSSPositionMethods != null) __code = 31*__code + gANSSPositionMethods.hashCode();
      if (additionalPositioningMethods != null) __code = 31*__code + additionalPositioningMethods.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for GANSSPositionMethods
    */
   public GANSSPositionMethods getGANSSPositionMethods () {
      return gANSSPositionMethods;
   }

   public void setGANSSPositionMethods (GANSSPositionMethods value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 16))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.gANSSPositionMethods = value;
   }

   public boolean hasGANSSPositionMethods () {
      return (gANSSPositionMethods != null);
   }

   /**
    * Accessor/mutator methods for AdditionalPositioningMethods
    */
   public AdditionalPositioningMethods getAdditionalPositioningMethods () {
      return additionalPositioningMethods;
   }

   public void setAdditionalPositioningMethods (AdditionalPositioningMethods value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 8))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.additionalPositioningMethods = value;
   }

   public boolean hasAdditionalPositioningMethods () {
      return (additionalPositioningMethods != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gANSSPositionMethods;
         case 1: return additionalPositioningMethods;
         case 2: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gANSSPositionMethods";
         case 1: return "additionalPositioningMethods";
         case 2: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean gANSSPositionMethodsPresent = buffer.decodeBit ("gANSSPositionMethodsPresent");

      // decode gANSSPositionMethods

      if (gANSSPositionMethodsPresent) {
         buffer.getContext().eventDispatcher.startElement("gANSSPositionMethods", -1);

         gANSSPositionMethods = new GANSSPositionMethods();
         gANSSPositionMethods.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gANSSPositionMethods", -1);
      }
      else {
         gANSSPositionMethods = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("additionalPositioningMethodsPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode additionalPositioningMethods

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("additionalPositioningMethods", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            additionalPositioningMethods = new AdditionalPositioningMethods();
            additionalPositioningMethods.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("additionalPositioningMethods", -1);

         }
         else {
            additionalPositioningMethods = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((additionalPositioningMethods != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((gANSSPositionMethods != null), null);

      // encode gANSSPositionMethods

      if (gANSSPositionMethods != null) {
         buffer.getContext().eventDispatcher.startElement("gANSSPositionMethods", -1);

         gANSSPositionMethods.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gANSSPositionMethods", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((additionalPositioningMethods != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // additionalPositioningMethods

         if (additionalPositioningMethods != null) {
            buffer.reset();
            additionalPositioningMethods.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("additionalPositioningMethods", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("additionalPositioningMethods", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
