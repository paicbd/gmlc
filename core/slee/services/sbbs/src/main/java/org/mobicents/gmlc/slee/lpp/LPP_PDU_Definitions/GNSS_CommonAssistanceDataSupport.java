/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_CommonAssistanceDataSupport extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-CommonAssistanceDataSupport";
   }

   protected GNSS_ReferenceTimeSupport gnss_ReferenceTimeSupport;  // optional
   protected GNSS_ReferenceLocationSupport gnss_ReferenceLocationSupport;  // optional
   protected GNSS_IonosphericModelSupport gnss_IonosphericModelSupport;  // optional
   protected GNSS_EarthOrientationParametersSupport gnss_EarthOrientationParametersSupport;  // optional
   protected GNSS_RTK_ReferenceStationInfoSupport_r15 gnss_RTK_ReferenceStationInfoSupport_r15;  // optional
   protected GNSS_RTK_AuxiliaryStationDataSupport_r15 gnss_RTK_AuxiliaryStationDataSupport_r15;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_CommonAssistanceDataSupport () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_CommonAssistanceDataSupport (
      GNSS_ReferenceTimeSupport gnss_ReferenceTimeSupport_,
      GNSS_ReferenceLocationSupport gnss_ReferenceLocationSupport_,
      GNSS_IonosphericModelSupport gnss_IonosphericModelSupport_,
      GNSS_EarthOrientationParametersSupport gnss_EarthOrientationParametersSupport_,
      GNSS_RTK_ReferenceStationInfoSupport_r15 gnss_RTK_ReferenceStationInfoSupport_r15_,
      GNSS_RTK_AuxiliaryStationDataSupport_r15 gnss_RTK_AuxiliaryStationDataSupport_r15_
   ) {
      super();
      setGnss_ReferenceTimeSupport (gnss_ReferenceTimeSupport_);
      setGnss_ReferenceLocationSupport (gnss_ReferenceLocationSupport_);
      setGnss_IonosphericModelSupport (gnss_IonosphericModelSupport_);
      setGnss_EarthOrientationParametersSupport (gnss_EarthOrientationParametersSupport_);
      setGnss_RTK_ReferenceStationInfoSupport_r15 (gnss_RTK_ReferenceStationInfoSupport_r15_);
      setGnss_RTK_AuxiliaryStationDataSupport_r15 (gnss_RTK_AuxiliaryStationDataSupport_r15_);
   }

   public void init () {
      gnss_ReferenceTimeSupport = null;
      gnss_ReferenceLocationSupport = null;
      gnss_IonosphericModelSupport = null;
      gnss_EarthOrientationParametersSupport = null;
      gnss_RTK_ReferenceStationInfoSupport_r15 = null;
      gnss_RTK_AuxiliaryStationDataSupport_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_CommonAssistanceDataSupport) ) return false;

      GNSS_CommonAssistanceDataSupport rhs = (GNSS_CommonAssistanceDataSupport) obj;

      if (gnss_ReferenceTimeSupport == null) {
         if (rhs.gnss_ReferenceTimeSupport != null) return false;
      }
      else {
         if (!gnss_ReferenceTimeSupport.equals(rhs.gnss_ReferenceTimeSupport)) {
            return false;
         }
      }

      if (gnss_ReferenceLocationSupport == null) {
         if (rhs.gnss_ReferenceLocationSupport != null) return false;
      }
      else {
         if (!gnss_ReferenceLocationSupport.equals(rhs.gnss_ReferenceLocationSupport)) {
            return false;
         }
      }

      if (gnss_IonosphericModelSupport == null) {
         if (rhs.gnss_IonosphericModelSupport != null) return false;
      }
      else {
         if (!gnss_IonosphericModelSupport.equals(rhs.gnss_IonosphericModelSupport)) {
            return false;
         }
      }

      if (gnss_EarthOrientationParametersSupport == null) {
         if (rhs.gnss_EarthOrientationParametersSupport != null) return false;
      }
      else {
         if (!gnss_EarthOrientationParametersSupport.equals(rhs.gnss_EarthOrientationParametersSupport)) {
            return false;
         }
      }

      if (gnss_RTK_ReferenceStationInfoSupport_r15 == null) {
         if (rhs.gnss_RTK_ReferenceStationInfoSupport_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_ReferenceStationInfoSupport_r15.equals(rhs.gnss_RTK_ReferenceStationInfoSupport_r15)) {
            return false;
         }
      }

      if (gnss_RTK_AuxiliaryStationDataSupport_r15 == null) {
         if (rhs.gnss_RTK_AuxiliaryStationDataSupport_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_AuxiliaryStationDataSupport_r15.equals(rhs.gnss_RTK_AuxiliaryStationDataSupport_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gnss_ReferenceTimeSupport != null) __code = 31*__code + gnss_ReferenceTimeSupport.hashCode();
      if (gnss_ReferenceLocationSupport != null) __code = 31*__code + gnss_ReferenceLocationSupport.hashCode();
      if (gnss_IonosphericModelSupport != null) __code = 31*__code + gnss_IonosphericModelSupport.hashCode();
      if (gnss_EarthOrientationParametersSupport != null) __code = 31*__code + gnss_EarthOrientationParametersSupport.hashCode();
      if (gnss_RTK_ReferenceStationInfoSupport_r15 != null) __code = 31*__code + gnss_RTK_ReferenceStationInfoSupport_r15.hashCode();
      if (gnss_RTK_AuxiliaryStationDataSupport_r15 != null) __code = 31*__code + gnss_RTK_AuxiliaryStationDataSupport_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Gnss_ReferenceTimeSupport
    */
   public GNSS_ReferenceTimeSupport getGnss_ReferenceTimeSupport () {
      return gnss_ReferenceTimeSupport;
   }

   public void setGnss_ReferenceTimeSupport (GNSS_ReferenceTimeSupport value) {
      this.gnss_ReferenceTimeSupport = value;
   }

   public boolean hasGnss_ReferenceTimeSupport () {
      return (gnss_ReferenceTimeSupport != null);
   }

   /**
    * Accessor/mutator methods for Gnss_ReferenceLocationSupport
    */
   public GNSS_ReferenceLocationSupport getGnss_ReferenceLocationSupport () {
      return gnss_ReferenceLocationSupport;
   }

   public void setGnss_ReferenceLocationSupport (GNSS_ReferenceLocationSupport value) {
      this.gnss_ReferenceLocationSupport = value;
   }

   public boolean hasGnss_ReferenceLocationSupport () {
      return (gnss_ReferenceLocationSupport != null);
   }

   /**
    * Accessor/mutator methods for Gnss_IonosphericModelSupport
    */
   public GNSS_IonosphericModelSupport getGnss_IonosphericModelSupport () {
      return gnss_IonosphericModelSupport;
   }

   public void setGnss_IonosphericModelSupport (GNSS_IonosphericModelSupport value) {
      this.gnss_IonosphericModelSupport = value;
   }

   public boolean hasGnss_IonosphericModelSupport () {
      return (gnss_IonosphericModelSupport != null);
   }

   /**
    * Accessor/mutator methods for Gnss_EarthOrientationParametersSupport
    */
   public GNSS_EarthOrientationParametersSupport getGnss_EarthOrientationParametersSupport () {
      return gnss_EarthOrientationParametersSupport;
   }

   public void setGnss_EarthOrientationParametersSupport (GNSS_EarthOrientationParametersSupport value) {
      this.gnss_EarthOrientationParametersSupport = value;
   }

   public boolean hasGnss_EarthOrientationParametersSupport () {
      return (gnss_EarthOrientationParametersSupport != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_ReferenceStationInfoSupport_r15
    */
   public GNSS_RTK_ReferenceStationInfoSupport_r15 getGnss_RTK_ReferenceStationInfoSupport_r15 () {
      return gnss_RTK_ReferenceStationInfoSupport_r15;
   }

   public void setGnss_RTK_ReferenceStationInfoSupport_r15 (GNSS_RTK_ReferenceStationInfoSupport_r15 value) {
      this.gnss_RTK_ReferenceStationInfoSupport_r15 = value;
   }

   public boolean hasGnss_RTK_ReferenceStationInfoSupport_r15 () {
      return (gnss_RTK_ReferenceStationInfoSupport_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_AuxiliaryStationDataSupport_r15
    */
   public GNSS_RTK_AuxiliaryStationDataSupport_r15 getGnss_RTK_AuxiliaryStationDataSupport_r15 () {
      return gnss_RTK_AuxiliaryStationDataSupport_r15;
   }

   public void setGnss_RTK_AuxiliaryStationDataSupport_r15 (GNSS_RTK_AuxiliaryStationDataSupport_r15 value) {
      this.gnss_RTK_AuxiliaryStationDataSupport_r15 = value;
   }

   public boolean hasGnss_RTK_AuxiliaryStationDataSupport_r15 () {
      return (gnss_RTK_AuxiliaryStationDataSupport_r15 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gnss_ReferenceTimeSupport;
         case 1: return gnss_ReferenceLocationSupport;
         case 2: return gnss_IonosphericModelSupport;
         case 3: return gnss_EarthOrientationParametersSupport;
         case 4: return gnss_RTK_ReferenceStationInfoSupport_r15;
         case 5: return gnss_RTK_AuxiliaryStationDataSupport_r15;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gnss-ReferenceTimeSupport";
         case 1: return "gnss-ReferenceLocationSupport";
         case 2: return "gnss-IonosphericModelSupport";
         case 3: return "gnss-EarthOrientationParametersSupport";
         case 4: return "gnss-RTK-ReferenceStationInfoSupport-r15";
         case 5: return "gnss-RTK-AuxiliaryStationDataSupport-r15";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean gnss_ReferenceTimeSupportPresent = buffer.decodeBit ("gnss_ReferenceTimeSupportPresent");
      boolean gnss_ReferenceLocationSupportPresent = buffer.decodeBit ("gnss_ReferenceLocationSupportPresent");
      boolean gnss_IonosphericModelSupportPresent = buffer.decodeBit ("gnss_IonosphericModelSupportPresent");
      boolean gnss_EarthOrientationParametersSupportPresent = buffer.decodeBit ("gnss_EarthOrientationParametersSupportPresent");

      // decode gnss_ReferenceTimeSupport

      if (gnss_ReferenceTimeSupportPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_ReferenceTimeSupport", -1);

         gnss_ReferenceTimeSupport = new GNSS_ReferenceTimeSupport();
         gnss_ReferenceTimeSupport.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_ReferenceTimeSupport", -1);
      }
      else {
         gnss_ReferenceTimeSupport = null;
      }

      // decode gnss_ReferenceLocationSupport

      if (gnss_ReferenceLocationSupportPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_ReferenceLocationSupport", -1);

         gnss_ReferenceLocationSupport = new GNSS_ReferenceLocationSupport();
         gnss_ReferenceLocationSupport.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_ReferenceLocationSupport", -1);
      }
      else {
         gnss_ReferenceLocationSupport = null;
      }

      // decode gnss_IonosphericModelSupport

      if (gnss_IonosphericModelSupportPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_IonosphericModelSupport", -1);

         gnss_IonosphericModelSupport = new GNSS_IonosphericModelSupport();
         gnss_IonosphericModelSupport.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_IonosphericModelSupport", -1);
      }
      else {
         gnss_IonosphericModelSupport = null;
      }

      // decode gnss_EarthOrientationParametersSupport

      if (gnss_EarthOrientationParametersSupportPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_EarthOrientationParametersSupport", -1);

         gnss_EarthOrientationParametersSupport = new GNSS_EarthOrientationParametersSupport();
         gnss_EarthOrientationParametersSupport.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_EarthOrientationParametersSupport", -1);
      }
      else {
         gnss_EarthOrientationParametersSupport = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_RTK_ReferenceStationInfoSupport_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_RTK_AuxiliaryStationDataSupport_r15Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode gnss_RTK_ReferenceStationInfoSupport_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_ReferenceStationInfoSupport_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_RTK_ReferenceStationInfoSupport_r15 = new GNSS_RTK_ReferenceStationInfoSupport_r15();
            gnss_RTK_ReferenceStationInfoSupport_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_RTK_ReferenceStationInfoSupport_r15", -1);

         }
         else {
            gnss_RTK_ReferenceStationInfoSupport_r15 = null;
         }

         // decode gnss_RTK_AuxiliaryStationDataSupport_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_AuxiliaryStationDataSupport_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_RTK_AuxiliaryStationDataSupport_r15 = new GNSS_RTK_AuxiliaryStationDataSupport_r15();
            gnss_RTK_AuxiliaryStationDataSupport_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_RTK_AuxiliaryStationDataSupport_r15", -1);

         }
         else {
            gnss_RTK_AuxiliaryStationDataSupport_r15 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((gnss_RTK_ReferenceStationInfoSupport_r15 != null) ||
      (gnss_RTK_AuxiliaryStationDataSupport_r15 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((gnss_ReferenceTimeSupport != null), null);
      buffer.encodeBit ((gnss_ReferenceLocationSupport != null), null);
      buffer.encodeBit ((gnss_IonosphericModelSupport != null), null);
      buffer.encodeBit ((gnss_EarthOrientationParametersSupport != null), null);

      // encode gnss_ReferenceTimeSupport

      if (gnss_ReferenceTimeSupport != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_ReferenceTimeSupport", -1);

         gnss_ReferenceTimeSupport.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_ReferenceTimeSupport", -1);
      }

      // encode gnss_ReferenceLocationSupport

      if (gnss_ReferenceLocationSupport != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_ReferenceLocationSupport", -1);

         gnss_ReferenceLocationSupport.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_ReferenceLocationSupport", -1);
      }

      // encode gnss_IonosphericModelSupport

      if (gnss_IonosphericModelSupport != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_IonosphericModelSupport", -1);

         gnss_IonosphericModelSupport.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_IonosphericModelSupport", -1);
      }

      // encode gnss_EarthOrientationParametersSupport

      if (gnss_EarthOrientationParametersSupport != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_EarthOrientationParametersSupport", -1);

         gnss_EarthOrientationParametersSupport.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_EarthOrientationParametersSupport", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 2;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((gnss_RTK_ReferenceStationInfoSupport_r15 != null), null);
         buffer.encodeBit ((gnss_RTK_AuxiliaryStationDataSupport_r15 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // gnss_RTK_ReferenceStationInfoSupport_r15

         if (gnss_RTK_ReferenceStationInfoSupport_r15 != null) {
            buffer.reset();
            gnss_RTK_ReferenceStationInfoSupport_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_ReferenceStationInfoSupport_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_RTK_ReferenceStationInfoSupport_r15", -1);
         }

         // gnss_RTK_AuxiliaryStationDataSupport_r15

         if (gnss_RTK_AuxiliaryStationDataSupport_r15 != null) {
            buffer.reset();
            gnss_RTK_AuxiliaryStationDataSupport_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_AuxiliaryStationDataSupport_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_RTK_AuxiliaryStationDataSupport_r15", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
