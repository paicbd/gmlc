/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class UTRAN_GPSReferenceTimeAssistance extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "UTRAN-GPSReferenceTimeAssistance";
   }

   protected UTRAN_GPSReferenceTime utran_GPSReferenceTime;
   protected Asn1Integer gpsReferenceTimeUncertainty;  // optional
   protected UTRANGPSDriftRate utranGPSDriftRate = null;  // optional

   public UTRAN_GPSReferenceTimeAssistance () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UTRAN_GPSReferenceTimeAssistance (
      UTRAN_GPSReferenceTime utran_GPSReferenceTime_,
      Asn1Integer gpsReferenceTimeUncertainty_,
      UTRANGPSDriftRate utranGPSDriftRate_
   ) throws Asn1Exception {
      super();
      setUtran_GPSReferenceTime (utran_GPSReferenceTime_);
      setGpsReferenceTimeUncertainty (gpsReferenceTimeUncertainty_);
      setUtranGPSDriftRate (utranGPSDriftRate_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public UTRAN_GPSReferenceTimeAssistance (
      UTRAN_GPSReferenceTime utran_GPSReferenceTime_
   ) throws Asn1Exception {
      super();
      setUtran_GPSReferenceTime (utran_GPSReferenceTime_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UTRAN_GPSReferenceTimeAssistance (UTRAN_GPSReferenceTime utran_GPSReferenceTime_,
      long gpsReferenceTimeUncertainty_,
      UTRANGPSDriftRate utranGPSDriftRate_
   ) throws Asn1Exception {
      super();
      setUtran_GPSReferenceTime (utran_GPSReferenceTime_);
      setGpsReferenceTimeUncertainty (gpsReferenceTimeUncertainty_);
      setUtranGPSDriftRate (utranGPSDriftRate_);
   }

   public void init () {
      utran_GPSReferenceTime = null;
      gpsReferenceTimeUncertainty = null;
      utranGPSDriftRate = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof UTRAN_GPSReferenceTimeAssistance) ) return false;

      UTRAN_GPSReferenceTimeAssistance rhs = (UTRAN_GPSReferenceTimeAssistance) obj;

      if (utran_GPSReferenceTime == null) {
         if (rhs.utran_GPSReferenceTime != null) return false;
      }
      else {
         if (!utran_GPSReferenceTime.equals(rhs.utran_GPSReferenceTime)) {
            return false;
         }
      }

      if (gpsReferenceTimeUncertainty == null) {
         if (rhs.gpsReferenceTimeUncertainty != null) return false;
      }
      else {
         if (!gpsReferenceTimeUncertainty.equals(rhs.gpsReferenceTimeUncertainty)) {
            return false;
         }
      }

      if (utranGPSDriftRate == null) {
         if (rhs.utranGPSDriftRate != null) return false;
      }
      else {
         if (!utranGPSDriftRate.equals(rhs.utranGPSDriftRate)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (utran_GPSReferenceTime != null) __code = 31*__code + utran_GPSReferenceTime.hashCode();
      if (gpsReferenceTimeUncertainty != null) __code = 31*__code + gpsReferenceTimeUncertainty.hashCode();
      if (utranGPSDriftRate != null) __code = 31*__code + utranGPSDriftRate.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Utran_GPSReferenceTime
    */
   public UTRAN_GPSReferenceTime getUtran_GPSReferenceTime () {
      return utran_GPSReferenceTime;
   }

   public void setUtran_GPSReferenceTime (UTRAN_GPSReferenceTime value) {
      this.utran_GPSReferenceTime = value;
   }

   /**
    * Accessor/mutator methods for GpsReferenceTimeUncertainty
    */
   public Asn1Integer getGpsReferenceTimeUncertainty () {
      return gpsReferenceTimeUncertainty;
   }

   public void setGpsReferenceTimeUncertainty (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gpsReferenceTimeUncertainty = value;
   }

   public void setGpsReferenceTimeUncertainty (long value) 
      throws Asn1Exception
   {
      setGpsReferenceTimeUncertainty (new Asn1Integer(value));
   }
   public boolean hasGpsReferenceTimeUncertainty () {
      return (gpsReferenceTimeUncertainty != null);
   }

   /**
    * Accessor/mutator methods for UtranGPSDriftRate
    */
   public UTRANGPSDriftRate getUtranGPSDriftRate () {
      return utranGPSDriftRate;
   }

   public void setUtranGPSDriftRate (UTRANGPSDriftRate value) {
      this.utranGPSDriftRate = value;
   }

   public boolean hasUtranGPSDriftRate () {
      return (utranGPSDriftRate != null);
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return utran_GPSReferenceTime;
         case 1: return gpsReferenceTimeUncertainty;
         case 2: return utranGPSDriftRate;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "utran-GPSReferenceTime";
         case 1: return "gpsReferenceTimeUncertainty";
         case 2: return "utranGPSDriftRate";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean gpsReferenceTimeUncertaintyPresent = buffer.decodeBit ("gpsReferenceTimeUncertaintyPresent");
      boolean utranGPSDriftRatePresent = buffer.decodeBit ("utranGPSDriftRatePresent");

      // decode utran_GPSReferenceTime

      buffer.getContext().eventDispatcher.startElement("utran_GPSReferenceTime", -1);

      utran_GPSReferenceTime = new UTRAN_GPSReferenceTime();
      utran_GPSReferenceTime.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("utran_GPSReferenceTime", -1);

      // decode gpsReferenceTimeUncertainty

      if (gpsReferenceTimeUncertaintyPresent) {
         buffer.getContext().eventDispatcher.startElement("gpsReferenceTimeUncertainty", -1);

         gpsReferenceTimeUncertainty = new Asn1Integer();
         gpsReferenceTimeUncertainty.decode (buffer, 0, 127);
         buffer.getContext().eventDispatcher.endElement("gpsReferenceTimeUncertainty", -1);
      }
      else {
         gpsReferenceTimeUncertainty = null;
      }

      // decode utranGPSDriftRate

      if (utranGPSDriftRatePresent) {
         buffer.getContext().eventDispatcher.startElement("utranGPSDriftRate", -1);

         int tval = UTRANGPSDriftRate.decodeEnumValue (buffer);
         utranGPSDriftRate = UTRANGPSDriftRate.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("utranGPSDriftRate", -1);
      }
      else {
         utranGPSDriftRate = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((gpsReferenceTimeUncertainty != null), null);
      buffer.encodeBit ((utranGPSDriftRate != null), null);

      // encode utran_GPSReferenceTime

      if (utran_GPSReferenceTime != null) {
         buffer.getContext().eventDispatcher.startElement("utran_GPSReferenceTime", -1);

         utran_GPSReferenceTime.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("utran_GPSReferenceTime", -1);
      }
      else throw new Asn1MissingRequiredException ("utran_GPSReferenceTime");

      // encode gpsReferenceTimeUncertainty

      if (gpsReferenceTimeUncertainty != null) {
         buffer.getContext().eventDispatcher.startElement("gpsReferenceTimeUncertainty", -1);

         gpsReferenceTimeUncertainty.encode (buffer, 0, 127);

         buffer.getContext().eventDispatcher.endElement("gpsReferenceTimeUncertainty", -1);
      }

      // encode utranGPSDriftRate

      if (utranGPSDriftRate != null) {
         buffer.getContext().eventDispatcher.startElement("utranGPSDriftRate", -1);

         utranGPSDriftRate.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("utranGPSDriftRate", -1);
      }

   }

}
