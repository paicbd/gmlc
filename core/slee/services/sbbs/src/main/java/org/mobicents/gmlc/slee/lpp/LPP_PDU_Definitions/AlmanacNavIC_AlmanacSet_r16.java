/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class AlmanacNavIC_AlmanacSet_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "AlmanacNavIC-AlmanacSet-r16";
   }

   protected SV_ID svID_r16;
   protected Asn1Integer navic_AlmToa_r16;  // optional
   protected Asn1Integer navic_AlmE_r16;
   protected Asn1Integer navic_AlmOMEGADOT_r16;
   protected Asn1Integer navic_AlmSqrtA_r16;
   protected Asn1Integer navic_AlmOMEGAo_r16;
   protected Asn1Integer navic_AlmOmega_r16;
   protected Asn1Integer navic_AlmMo_r16;
   protected Asn1Integer navic_Almaf0_r16;
   protected Asn1Integer navic_Almaf1_r16;
   protected Asn1OpenExt extElem1;

   public AlmanacNavIC_AlmanacSet_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AlmanacNavIC_AlmanacSet_r16 (
      SV_ID svID_r16_,
      Asn1Integer navic_AlmToa_r16_,
      Asn1Integer navic_AlmE_r16_,
      Asn1Integer navic_AlmOMEGADOT_r16_,
      Asn1Integer navic_AlmSqrtA_r16_,
      Asn1Integer navic_AlmOMEGAo_r16_,
      Asn1Integer navic_AlmOmega_r16_,
      Asn1Integer navic_AlmMo_r16_,
      Asn1Integer navic_Almaf0_r16_,
      Asn1Integer navic_Almaf1_r16_
   ) throws Asn1Exception {
      super();
      setSvID_r16 (svID_r16_);
      setNavic_AlmToa_r16 (navic_AlmToa_r16_);
      setNavic_AlmE_r16 (navic_AlmE_r16_);
      setNavic_AlmOMEGADOT_r16 (navic_AlmOMEGADOT_r16_);
      setNavic_AlmSqrtA_r16 (navic_AlmSqrtA_r16_);
      setNavic_AlmOMEGAo_r16 (navic_AlmOMEGAo_r16_);
      setNavic_AlmOmega_r16 (navic_AlmOmega_r16_);
      setNavic_AlmMo_r16 (navic_AlmMo_r16_);
      setNavic_Almaf0_r16 (navic_Almaf0_r16_);
      setNavic_Almaf1_r16 (navic_Almaf1_r16_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public AlmanacNavIC_AlmanacSet_r16 (
      SV_ID svID_r16_,
      Asn1Integer navic_AlmE_r16_,
      Asn1Integer navic_AlmOMEGADOT_r16_,
      Asn1Integer navic_AlmSqrtA_r16_,
      Asn1Integer navic_AlmOMEGAo_r16_,
      Asn1Integer navic_AlmOmega_r16_,
      Asn1Integer navic_AlmMo_r16_,
      Asn1Integer navic_Almaf0_r16_,
      Asn1Integer navic_Almaf1_r16_
   ) throws Asn1Exception {
      super();
      setSvID_r16 (svID_r16_);
      setNavic_AlmE_r16 (navic_AlmE_r16_);
      setNavic_AlmOMEGADOT_r16 (navic_AlmOMEGADOT_r16_);
      setNavic_AlmSqrtA_r16 (navic_AlmSqrtA_r16_);
      setNavic_AlmOMEGAo_r16 (navic_AlmOMEGAo_r16_);
      setNavic_AlmOmega_r16 (navic_AlmOmega_r16_);
      setNavic_AlmMo_r16 (navic_AlmMo_r16_);
      setNavic_Almaf0_r16 (navic_Almaf0_r16_);
      setNavic_Almaf1_r16 (navic_Almaf1_r16_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AlmanacNavIC_AlmanacSet_r16 (SV_ID svID_r16_,
      long navic_AlmToa_r16_,
      long navic_AlmE_r16_,
      long navic_AlmOMEGADOT_r16_,
      long navic_AlmSqrtA_r16_,
      long navic_AlmOMEGAo_r16_,
      long navic_AlmOmega_r16_,
      long navic_AlmMo_r16_,
      long navic_Almaf0_r16_,
      long navic_Almaf1_r16_
   ) throws Asn1Exception {
      super();
      setSvID_r16 (svID_r16_);
      setNavic_AlmToa_r16 (navic_AlmToa_r16_);
      setNavic_AlmE_r16 (navic_AlmE_r16_);
      setNavic_AlmOMEGADOT_r16 (navic_AlmOMEGADOT_r16_);
      setNavic_AlmSqrtA_r16 (navic_AlmSqrtA_r16_);
      setNavic_AlmOMEGAo_r16 (navic_AlmOMEGAo_r16_);
      setNavic_AlmOmega_r16 (navic_AlmOmega_r16_);
      setNavic_AlmMo_r16 (navic_AlmMo_r16_);
      setNavic_Almaf0_r16 (navic_Almaf0_r16_);
      setNavic_Almaf1_r16 (navic_Almaf1_r16_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public AlmanacNavIC_AlmanacSet_r16 (
      SV_ID svID_r16_,
      long navic_AlmE_r16_,
      long navic_AlmOMEGADOT_r16_,
      long navic_AlmSqrtA_r16_,
      long navic_AlmOMEGAo_r16_,
      long navic_AlmOmega_r16_,
      long navic_AlmMo_r16_,
      long navic_Almaf0_r16_,
      long navic_Almaf1_r16_
   ) throws Asn1Exception {
      super();
      setSvID_r16 (svID_r16_);
      setNavic_AlmE_r16 (navic_AlmE_r16_);
      setNavic_AlmOMEGADOT_r16 (navic_AlmOMEGADOT_r16_);
      setNavic_AlmSqrtA_r16 (navic_AlmSqrtA_r16_);
      setNavic_AlmOMEGAo_r16 (navic_AlmOMEGAo_r16_);
      setNavic_AlmOmega_r16 (navic_AlmOmega_r16_);
      setNavic_AlmMo_r16 (navic_AlmMo_r16_);
      setNavic_Almaf0_r16 (navic_Almaf0_r16_);
      setNavic_Almaf1_r16 (navic_Almaf1_r16_);
   }

   public void init () {
      svID_r16 = null;
      navic_AlmToa_r16 = null;
      navic_AlmE_r16 = null;
      navic_AlmOMEGADOT_r16 = null;
      navic_AlmSqrtA_r16 = null;
      navic_AlmOMEGAo_r16 = null;
      navic_AlmOmega_r16 = null;
      navic_AlmMo_r16 = null;
      navic_Almaf0_r16 = null;
      navic_Almaf1_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof AlmanacNavIC_AlmanacSet_r16) ) return false;

      AlmanacNavIC_AlmanacSet_r16 rhs = (AlmanacNavIC_AlmanacSet_r16) obj;

      if (svID_r16 == null) {
         if (rhs.svID_r16 != null) return false;
      }
      else {
         if (!svID_r16.equals(rhs.svID_r16)) {
            return false;
         }
      }

      if (navic_AlmToa_r16 == null) {
         if (rhs.navic_AlmToa_r16 != null) return false;
      }
      else {
         if (!navic_AlmToa_r16.equals(rhs.navic_AlmToa_r16)) {
            return false;
         }
      }

      if (navic_AlmE_r16 == null) {
         if (rhs.navic_AlmE_r16 != null) return false;
      }
      else {
         if (!navic_AlmE_r16.equals(rhs.navic_AlmE_r16)) {
            return false;
         }
      }

      if (navic_AlmOMEGADOT_r16 == null) {
         if (rhs.navic_AlmOMEGADOT_r16 != null) return false;
      }
      else {
         if (!navic_AlmOMEGADOT_r16.equals(rhs.navic_AlmOMEGADOT_r16)) {
            return false;
         }
      }

      if (navic_AlmSqrtA_r16 == null) {
         if (rhs.navic_AlmSqrtA_r16 != null) return false;
      }
      else {
         if (!navic_AlmSqrtA_r16.equals(rhs.navic_AlmSqrtA_r16)) {
            return false;
         }
      }

      if (navic_AlmOMEGAo_r16 == null) {
         if (rhs.navic_AlmOMEGAo_r16 != null) return false;
      }
      else {
         if (!navic_AlmOMEGAo_r16.equals(rhs.navic_AlmOMEGAo_r16)) {
            return false;
         }
      }

      if (navic_AlmOmega_r16 == null) {
         if (rhs.navic_AlmOmega_r16 != null) return false;
      }
      else {
         if (!navic_AlmOmega_r16.equals(rhs.navic_AlmOmega_r16)) {
            return false;
         }
      }

      if (navic_AlmMo_r16 == null) {
         if (rhs.navic_AlmMo_r16 != null) return false;
      }
      else {
         if (!navic_AlmMo_r16.equals(rhs.navic_AlmMo_r16)) {
            return false;
         }
      }

      if (navic_Almaf0_r16 == null) {
         if (rhs.navic_Almaf0_r16 != null) return false;
      }
      else {
         if (!navic_Almaf0_r16.equals(rhs.navic_Almaf0_r16)) {
            return false;
         }
      }

      if (navic_Almaf1_r16 == null) {
         if (rhs.navic_Almaf1_r16 != null) return false;
      }
      else {
         if (!navic_Almaf1_r16.equals(rhs.navic_Almaf1_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (svID_r16 != null) __code = 31*__code + svID_r16.hashCode();
      if (navic_AlmToa_r16 != null) __code = 31*__code + navic_AlmToa_r16.hashCode();
      if (navic_AlmE_r16 != null) __code = 31*__code + navic_AlmE_r16.hashCode();
      if (navic_AlmOMEGADOT_r16 != null) __code = 31*__code + navic_AlmOMEGADOT_r16.hashCode();
      if (navic_AlmSqrtA_r16 != null) __code = 31*__code + navic_AlmSqrtA_r16.hashCode();
      if (navic_AlmOMEGAo_r16 != null) __code = 31*__code + navic_AlmOMEGAo_r16.hashCode();
      if (navic_AlmOmega_r16 != null) __code = 31*__code + navic_AlmOmega_r16.hashCode();
      if (navic_AlmMo_r16 != null) __code = 31*__code + navic_AlmMo_r16.hashCode();
      if (navic_Almaf0_r16 != null) __code = 31*__code + navic_Almaf0_r16.hashCode();
      if (navic_Almaf1_r16 != null) __code = 31*__code + navic_Almaf1_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SvID_r16
    */
   public SV_ID getSvID_r16 () {
      return svID_r16;
   }

   public void setSvID_r16 (SV_ID value) {
      this.svID_r16 = value;
   }

   /**
    * Accessor/mutator methods for Navic_AlmToa_r16
    */
   public Asn1Integer getNavic_AlmToa_r16 () {
      return navic_AlmToa_r16;
   }

   public void setNavic_AlmToa_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_AlmToa_r16 = value;
   }

   public void setNavic_AlmToa_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_AlmToa_r16 (new Asn1Integer(value));
   }
   public boolean hasNavic_AlmToa_r16 () {
      return (navic_AlmToa_r16 != null);
   }

   /**
    * Accessor/mutator methods for Navic_AlmE_r16
    */
   public Asn1Integer getNavic_AlmE_r16 () {
      return navic_AlmE_r16;
   }

   public void setNavic_AlmE_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_AlmE_r16 = value;
   }

   public void setNavic_AlmE_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_AlmE_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_AlmOMEGADOT_r16
    */
   public Asn1Integer getNavic_AlmOMEGADOT_r16 () {
      return navic_AlmOMEGADOT_r16;
   }

   public void setNavic_AlmOMEGADOT_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_AlmOMEGADOT_r16 = value;
   }

   public void setNavic_AlmOMEGADOT_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_AlmOMEGADOT_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_AlmSqrtA_r16
    */
   public Asn1Integer getNavic_AlmSqrtA_r16 () {
      return navic_AlmSqrtA_r16;
   }

   public void setNavic_AlmSqrtA_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 16777215))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_AlmSqrtA_r16 = value;
   }

   public void setNavic_AlmSqrtA_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_AlmSqrtA_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_AlmOMEGAo_r16
    */
   public Asn1Integer getNavic_AlmOMEGAo_r16 () {
      return navic_AlmOMEGAo_r16;
   }

   public void setNavic_AlmOMEGAo_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8388608 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_AlmOMEGAo_r16 = value;
   }

   public void setNavic_AlmOMEGAo_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_AlmOMEGAo_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_AlmOmega_r16
    */
   public Asn1Integer getNavic_AlmOmega_r16 () {
      return navic_AlmOmega_r16;
   }

   public void setNavic_AlmOmega_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8388608 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_AlmOmega_r16 = value;
   }

   public void setNavic_AlmOmega_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_AlmOmega_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_AlmMo_r16
    */
   public Asn1Integer getNavic_AlmMo_r16 () {
      return navic_AlmMo_r16;
   }

   public void setNavic_AlmMo_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8388608 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_AlmMo_r16 = value;
   }

   public void setNavic_AlmMo_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_AlmMo_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_Almaf0_r16
    */
   public Asn1Integer getNavic_Almaf0_r16 () {
      return navic_Almaf0_r16;
   }

   public void setNavic_Almaf0_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1024 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_Almaf0_r16 = value;
   }

   public void setNavic_Almaf0_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_Almaf0_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_Almaf1_r16
    */
   public Asn1Integer getNavic_Almaf1_r16 () {
      return navic_Almaf1_r16;
   }

   public void setNavic_Almaf1_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1024 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_Almaf1_r16 = value;
   }

   public void setNavic_Almaf1_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_Almaf1_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 11; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return svID_r16;
         case 1: return navic_AlmToa_r16;
         case 2: return navic_AlmE_r16;
         case 3: return navic_AlmOMEGADOT_r16;
         case 4: return navic_AlmSqrtA_r16;
         case 5: return navic_AlmOMEGAo_r16;
         case 6: return navic_AlmOmega_r16;
         case 7: return navic_AlmMo_r16;
         case 8: return navic_Almaf0_r16;
         case 9: return navic_Almaf1_r16;
         case 10: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "svID-r16";
         case 1: return "navic-AlmToa-r16";
         case 2: return "navic-AlmE-r16";
         case 3: return "navic-AlmOMEGADOT-r16";
         case 4: return "navic-AlmSqrtA-r16";
         case 5: return "navic-AlmOMEGAo-r16";
         case 6: return "navic-AlmOmega-r16";
         case 7: return "navic-AlmMo-r16";
         case 8: return "navic-Almaf0-r16";
         case 9: return "navic-Almaf1-r16";
         case 10: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean navic_AlmToa_r16Present = buffer.decodeBit ("navic_AlmToa_r16Present");

      // decode svID_r16

      buffer.getContext().eventDispatcher.startElement("svID_r16", -1);

      svID_r16 = new SV_ID();
      svID_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("svID_r16", -1);

      // decode navic_AlmToa_r16

      if (navic_AlmToa_r16Present) {
         buffer.getContext().eventDispatcher.startElement("navic_AlmToa_r16", -1);

         navic_AlmToa_r16 = new Asn1Integer();
         navic_AlmToa_r16.decode (buffer, 0, 65535);
         buffer.getContext().eventDispatcher.endElement("navic_AlmToa_r16", -1);
      }
      else {
         navic_AlmToa_r16 = null;
      }

      // decode navic_AlmE_r16

      buffer.getContext().eventDispatcher.startElement("navic_AlmE_r16", -1);

      navic_AlmE_r16 = new Asn1Integer();
      navic_AlmE_r16.decode (buffer, 0, 65535);
      buffer.getContext().eventDispatcher.endElement("navic_AlmE_r16", -1);

      // decode navic_AlmOMEGADOT_r16

      buffer.getContext().eventDispatcher.startElement("navic_AlmOMEGADOT_r16", -1);

      navic_AlmOMEGADOT_r16 = new Asn1Integer();
      navic_AlmOMEGADOT_r16.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("navic_AlmOMEGADOT_r16", -1);

      // decode navic_AlmSqrtA_r16

      buffer.getContext().eventDispatcher.startElement("navic_AlmSqrtA_r16", -1);

      navic_AlmSqrtA_r16 = new Asn1Integer();
      navic_AlmSqrtA_r16.decode (buffer, 0, 16777215);
      buffer.getContext().eventDispatcher.endElement("navic_AlmSqrtA_r16", -1);

      // decode navic_AlmOMEGAo_r16

      buffer.getContext().eventDispatcher.startElement("navic_AlmOMEGAo_r16", -1);

      navic_AlmOMEGAo_r16 = new Asn1Integer();
      navic_AlmOMEGAo_r16.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("navic_AlmOMEGAo_r16", -1);

      // decode navic_AlmOmega_r16

      buffer.getContext().eventDispatcher.startElement("navic_AlmOmega_r16", -1);

      navic_AlmOmega_r16 = new Asn1Integer();
      navic_AlmOmega_r16.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("navic_AlmOmega_r16", -1);

      // decode navic_AlmMo_r16

      buffer.getContext().eventDispatcher.startElement("navic_AlmMo_r16", -1);

      navic_AlmMo_r16 = new Asn1Integer();
      navic_AlmMo_r16.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("navic_AlmMo_r16", -1);

      // decode navic_Almaf0_r16

      buffer.getContext().eventDispatcher.startElement("navic_Almaf0_r16", -1);

      navic_Almaf0_r16 = new Asn1Integer();
      navic_Almaf0_r16.decode (buffer, -1024, 1023);
      buffer.getContext().eventDispatcher.endElement("navic_Almaf0_r16", -1);

      // decode navic_Almaf1_r16

      buffer.getContext().eventDispatcher.startElement("navic_Almaf1_r16", -1);

      navic_Almaf1_r16 = new Asn1Integer();
      navic_Almaf1_r16.decode (buffer, -1024, 1023);
      buffer.getContext().eventDispatcher.endElement("navic_Almaf1_r16", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((navic_AlmToa_r16 != null), null);

      // encode svID_r16

      if (svID_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("svID_r16", -1);

         svID_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("svID_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("svID_r16");

      // encode navic_AlmToa_r16

      if (navic_AlmToa_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_AlmToa_r16", -1);

         navic_AlmToa_r16.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("navic_AlmToa_r16", -1);
      }

      // encode navic_AlmE_r16

      if (navic_AlmE_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_AlmE_r16", -1);

         navic_AlmE_r16.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("navic_AlmE_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_AlmE_r16");

      // encode navic_AlmOMEGADOT_r16

      if (navic_AlmOMEGADOT_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_AlmOMEGADOT_r16", -1);

         navic_AlmOMEGADOT_r16.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("navic_AlmOMEGADOT_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_AlmOMEGADOT_r16");

      // encode navic_AlmSqrtA_r16

      if (navic_AlmSqrtA_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_AlmSqrtA_r16", -1);

         navic_AlmSqrtA_r16.encode (buffer, 0, 16777215);

         buffer.getContext().eventDispatcher.endElement("navic_AlmSqrtA_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_AlmSqrtA_r16");

      // encode navic_AlmOMEGAo_r16

      if (navic_AlmOMEGAo_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_AlmOMEGAo_r16", -1);

         navic_AlmOMEGAo_r16.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("navic_AlmOMEGAo_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_AlmOMEGAo_r16");

      // encode navic_AlmOmega_r16

      if (navic_AlmOmega_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_AlmOmega_r16", -1);

         navic_AlmOmega_r16.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("navic_AlmOmega_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_AlmOmega_r16");

      // encode navic_AlmMo_r16

      if (navic_AlmMo_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_AlmMo_r16", -1);

         navic_AlmMo_r16.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("navic_AlmMo_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_AlmMo_r16");

      // encode navic_Almaf0_r16

      if (navic_Almaf0_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_Almaf0_r16", -1);

         navic_Almaf0_r16.encode (buffer, -1024, 1023);

         buffer.getContext().eventDispatcher.endElement("navic_Almaf0_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_Almaf0_r16");

      // encode navic_Almaf1_r16

      if (navic_Almaf1_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_Almaf1_r16", -1);

         navic_Almaf1_r16.encode (buffer, -1024, 1023);

         buffer.getContext().eventDispatcher.endElement("navic_Almaf1_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_Almaf1_r16");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
