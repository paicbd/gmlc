/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.ULP_Components.LocationId;

public class LocationIdData extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "LocationIdData";
   }

   protected LocationId locationId;
   protected RelativeTime relativetimestamp;  // optional
   protected Asn1Boolean servingFlag;
   protected Asn1OpenExt extElem1;

   public LocationIdData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public LocationIdData (
      LocationId locationId_,
      RelativeTime relativetimestamp_,
      Asn1Boolean servingFlag_
   ) throws Asn1Exception {
      super();
      setLocationId (locationId_);
      setRelativetimestamp (relativetimestamp_);
      setServingFlag (servingFlag_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public LocationIdData (
      LocationId locationId_,
      Asn1Boolean servingFlag_
   ) throws Asn1Exception {
      super();
      setLocationId (locationId_);
      setServingFlag (servingFlag_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public LocationIdData (LocationId locationId_,
      long relativetimestamp_,
      boolean servingFlag_
   ) throws Asn1Exception {
      super();
      setLocationId (locationId_);
      setRelativetimestamp (relativetimestamp_);
      setServingFlag (servingFlag_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public LocationIdData (
      LocationId locationId_,
      boolean servingFlag_
   ) throws Asn1Exception {
      super();
      setLocationId (locationId_);
      setServingFlag (servingFlag_);
   }

   public void init () {
      locationId = null;
      relativetimestamp = null;
      servingFlag = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof LocationIdData) ) return false;

      LocationIdData rhs = (LocationIdData) obj;

      if (locationId == null) {
         if (rhs.locationId != null) return false;
      }
      else {
         if (!locationId.equals(rhs.locationId)) {
            return false;
         }
      }

      if (relativetimestamp == null) {
         if (rhs.relativetimestamp != null) return false;
      }
      else {
         if (!relativetimestamp.equals(rhs.relativetimestamp)) {
            return false;
         }
      }

      if (servingFlag == null) {
         if (rhs.servingFlag != null) return false;
      }
      else {
         if (!servingFlag.equals(rhs.servingFlag)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (locationId != null) __code = 31*__code + locationId.hashCode();
      if (relativetimestamp != null) __code = 31*__code + relativetimestamp.hashCode();
      if (servingFlag != null) __code = 31*__code + servingFlag.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for LocationId
    */
   public LocationId getLocationId () {
      return locationId;
   }

   public void setLocationId (LocationId value) {
      this.locationId = value;
   }

   /**
    * Accessor/mutator methods for Relativetimestamp
    */
   public RelativeTime getRelativetimestamp () {
      return relativetimestamp;
   }

   public void setRelativetimestamp (RelativeTime value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.relativetimestamp = value;
   }

   public void setRelativetimestamp (long value) 
      throws Asn1Exception
   {
      setRelativetimestamp (new RelativeTime(value));
   }
   public boolean hasRelativetimestamp () {
      return (relativetimestamp != null);
   }

   /**
    * Accessor/mutator methods for ServingFlag
    */
   public Asn1Boolean getServingFlag () {
      return servingFlag;
   }

   public void setServingFlag (Asn1Boolean value) {
      this.servingFlag = value;
   }

   public void setServingFlag (boolean value) {
      setServingFlag (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return locationId;
         case 1: return relativetimestamp;
         case 2: return servingFlag;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "locationId";
         case 1: return "relativetimestamp";
         case 2: return "servingFlag";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean relativetimestampPresent = buffer.decodeBit ("relativetimestampPresent");

      // decode locationId

      buffer.getContext().eventDispatcher.startElement("locationId", -1);

      locationId = new LocationId();
      locationId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("locationId", -1);

      // decode relativetimestamp

      if (relativetimestampPresent) {
         buffer.getContext().eventDispatcher.startElement("relativetimestamp", -1);

         relativetimestamp = new RelativeTime();
         relativetimestamp.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("relativetimestamp", -1);
      }
      else {
         relativetimestamp = null;
      }

      // decode servingFlag

      buffer.getContext().eventDispatcher.startElement("servingFlag", -1);

      servingFlag = new Asn1Boolean();
      servingFlag.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("servingFlag", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((relativetimestamp != null), null);

      // encode locationId

      if (locationId != null) {
         buffer.getContext().eventDispatcher.startElement("locationId", -1);

         locationId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("locationId", -1);
      }
      else throw new Asn1MissingRequiredException ("locationId");

      // encode relativetimestamp

      if (relativetimestamp != null) {
         buffer.getContext().eventDispatcher.startElement("relativetimestamp", -1);

         relativetimestamp.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("relativetimestamp", -1);
      }

      // encode servingFlag

      if (servingFlag != null) {
         buffer.getContext().eventDispatcher.startElement("servingFlag", -1);

         servingFlag.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("servingFlag", -1);
      }
      else throw new Asn1MissingRequiredException ("servingFlag");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
