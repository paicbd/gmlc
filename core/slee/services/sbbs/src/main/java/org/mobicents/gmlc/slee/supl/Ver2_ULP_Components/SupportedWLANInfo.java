/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class SupportedWLANInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SupportedWLANInfo";
   }

   protected Asn1Boolean apTP;
   protected Asn1Boolean apAG;
   protected Asn1Boolean apSN;
   protected Asn1Boolean apDevType;
   protected Asn1Boolean apRSSI;
   protected Asn1Boolean apChanFreq;
   protected Asn1Boolean apRTD;
   protected Asn1Boolean setTP;
   protected Asn1Boolean setAG;
   protected Asn1Boolean setSN;
   protected Asn1Boolean setRSSI;
   protected Asn1Boolean apRepLoc;
   protected Asn1Boolean apRL;  // optional
   protected Asn1Boolean opClass;  // optional
   protected Asn1Boolean apSSID;  // optional
   protected Asn1Boolean apPHYType;  // optional
   protected Asn1Boolean setMACAddress;  // optional
   protected Asn1OpenExt extElem1;

   public SupportedWLANInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SupportedWLANInfo (
      Asn1Boolean apTP_,
      Asn1Boolean apAG_,
      Asn1Boolean apSN_,
      Asn1Boolean apDevType_,
      Asn1Boolean apRSSI_,
      Asn1Boolean apChanFreq_,
      Asn1Boolean apRTD_,
      Asn1Boolean setTP_,
      Asn1Boolean setAG_,
      Asn1Boolean setSN_,
      Asn1Boolean setRSSI_,
      Asn1Boolean apRepLoc_,
      Asn1Boolean apRL_,
      Asn1Boolean opClass_,
      Asn1Boolean apSSID_,
      Asn1Boolean apPHYType_,
      Asn1Boolean setMACAddress_
   ) {
      super();
      setApTP (apTP_);
      setApAG (apAG_);
      setApSN (apSN_);
      setApDevType (apDevType_);
      setApRSSI (apRSSI_);
      setApChanFreq (apChanFreq_);
      setApRTD (apRTD_);
      setSetTP (setTP_);
      setSetAG (setAG_);
      setSetSN (setSN_);
      setSetRSSI (setRSSI_);
      setApRepLoc (apRepLoc_);
      setApRL (apRL_);
      setOpClass (opClass_);
      setApSSID (apSSID_);
      setApPHYType (apPHYType_);
      setSetMACAddress (setMACAddress_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SupportedWLANInfo (
      Asn1Boolean apTP_,
      Asn1Boolean apAG_,
      Asn1Boolean apSN_,
      Asn1Boolean apDevType_,
      Asn1Boolean apRSSI_,
      Asn1Boolean apChanFreq_,
      Asn1Boolean apRTD_,
      Asn1Boolean setTP_,
      Asn1Boolean setAG_,
      Asn1Boolean setSN_,
      Asn1Boolean setRSSI_,
      Asn1Boolean apRepLoc_
   ) {
      super();
      setApTP (apTP_);
      setApAG (apAG_);
      setApSN (apSN_);
      setApDevType (apDevType_);
      setApRSSI (apRSSI_);
      setApChanFreq (apChanFreq_);
      setApRTD (apRTD_);
      setSetTP (setTP_);
      setSetAG (setAG_);
      setSetSN (setSN_);
      setSetRSSI (setRSSI_);
      setApRepLoc (apRepLoc_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SupportedWLANInfo (boolean apTP_,
      boolean apAG_,
      boolean apSN_,
      boolean apDevType_,
      boolean apRSSI_,
      boolean apChanFreq_,
      boolean apRTD_,
      boolean setTP_,
      boolean setAG_,
      boolean setSN_,
      boolean setRSSI_,
      boolean apRepLoc_,
      boolean apRL_,
      boolean opClass_,
      boolean apSSID_,
      boolean apPHYType_,
      boolean setMACAddress_
   ) {
      super();
      setApTP (apTP_);
      setApAG (apAG_);
      setApSN (apSN_);
      setApDevType (apDevType_);
      setApRSSI (apRSSI_);
      setApChanFreq (apChanFreq_);
      setApRTD (apRTD_);
      setSetTP (setTP_);
      setSetAG (setAG_);
      setSetSN (setSN_);
      setSetRSSI (setRSSI_);
      setApRepLoc (apRepLoc_);
      setApRL (apRL_);
      setOpClass (opClass_);
      setApSSID (apSSID_);
      setApPHYType (apPHYType_);
      setSetMACAddress (setMACAddress_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SupportedWLANInfo (
      boolean apTP_,
      boolean apAG_,
      boolean apSN_,
      boolean apDevType_,
      boolean apRSSI_,
      boolean apChanFreq_,
      boolean apRTD_,
      boolean setTP_,
      boolean setAG_,
      boolean setSN_,
      boolean setRSSI_,
      boolean apRepLoc_
   ) {
      super();
      setApTP (apTP_);
      setApAG (apAG_);
      setApSN (apSN_);
      setApDevType (apDevType_);
      setApRSSI (apRSSI_);
      setApChanFreq (apChanFreq_);
      setApRTD (apRTD_);
      setSetTP (setTP_);
      setSetAG (setAG_);
      setSetSN (setSN_);
      setSetRSSI (setRSSI_);
      setApRepLoc (apRepLoc_);
   }

   public void init () {
      apTP = null;
      apAG = null;
      apSN = null;
      apDevType = null;
      apRSSI = null;
      apChanFreq = null;
      apRTD = null;
      setTP = null;
      setAG = null;
      setSN = null;
      setRSSI = null;
      apRepLoc = null;
      apRL = null;
      opClass = null;
      apSSID = null;
      apPHYType = null;
      setMACAddress = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof SupportedWLANInfo) ) return false;

      SupportedWLANInfo rhs = (SupportedWLANInfo) obj;

      if (apTP == null) {
         if (rhs.apTP != null) return false;
      }
      else {
         if (!apTP.equals(rhs.apTP)) {
            return false;
         }
      }

      if (apAG == null) {
         if (rhs.apAG != null) return false;
      }
      else {
         if (!apAG.equals(rhs.apAG)) {
            return false;
         }
      }

      if (apSN == null) {
         if (rhs.apSN != null) return false;
      }
      else {
         if (!apSN.equals(rhs.apSN)) {
            return false;
         }
      }

      if (apDevType == null) {
         if (rhs.apDevType != null) return false;
      }
      else {
         if (!apDevType.equals(rhs.apDevType)) {
            return false;
         }
      }

      if (apRSSI == null) {
         if (rhs.apRSSI != null) return false;
      }
      else {
         if (!apRSSI.equals(rhs.apRSSI)) {
            return false;
         }
      }

      if (apChanFreq == null) {
         if (rhs.apChanFreq != null) return false;
      }
      else {
         if (!apChanFreq.equals(rhs.apChanFreq)) {
            return false;
         }
      }

      if (apRTD == null) {
         if (rhs.apRTD != null) return false;
      }
      else {
         if (!apRTD.equals(rhs.apRTD)) {
            return false;
         }
      }

      if (setTP == null) {
         if (rhs.setTP != null) return false;
      }
      else {
         if (!setTP.equals(rhs.setTP)) {
            return false;
         }
      }

      if (setAG == null) {
         if (rhs.setAG != null) return false;
      }
      else {
         if (!setAG.equals(rhs.setAG)) {
            return false;
         }
      }

      if (setSN == null) {
         if (rhs.setSN != null) return false;
      }
      else {
         if (!setSN.equals(rhs.setSN)) {
            return false;
         }
      }

      if (setRSSI == null) {
         if (rhs.setRSSI != null) return false;
      }
      else {
         if (!setRSSI.equals(rhs.setRSSI)) {
            return false;
         }
      }

      if (apRepLoc == null) {
         if (rhs.apRepLoc != null) return false;
      }
      else {
         if (!apRepLoc.equals(rhs.apRepLoc)) {
            return false;
         }
      }

      if (apRL == null) {
         if (rhs.apRL != null) return false;
      }
      else {
         if (!apRL.equals(rhs.apRL)) {
            return false;
         }
      }

      if (opClass == null) {
         if (rhs.opClass != null) return false;
      }
      else {
         if (!opClass.equals(rhs.opClass)) {
            return false;
         }
      }

      if (apSSID == null) {
         if (rhs.apSSID != null) return false;
      }
      else {
         if (!apSSID.equals(rhs.apSSID)) {
            return false;
         }
      }

      if (apPHYType == null) {
         if (rhs.apPHYType != null) return false;
      }
      else {
         if (!apPHYType.equals(rhs.apPHYType)) {
            return false;
         }
      }

      if (setMACAddress == null) {
         if (rhs.setMACAddress != null) return false;
      }
      else {
         if (!setMACAddress.equals(rhs.setMACAddress)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (apTP != null) __code = 31*__code + apTP.hashCode();
      if (apAG != null) __code = 31*__code + apAG.hashCode();
      if (apSN != null) __code = 31*__code + apSN.hashCode();
      if (apDevType != null) __code = 31*__code + apDevType.hashCode();
      if (apRSSI != null) __code = 31*__code + apRSSI.hashCode();
      if (apChanFreq != null) __code = 31*__code + apChanFreq.hashCode();
      if (apRTD != null) __code = 31*__code + apRTD.hashCode();
      if (setTP != null) __code = 31*__code + setTP.hashCode();
      if (setAG != null) __code = 31*__code + setAG.hashCode();
      if (setSN != null) __code = 31*__code + setSN.hashCode();
      if (setRSSI != null) __code = 31*__code + setRSSI.hashCode();
      if (apRepLoc != null) __code = 31*__code + apRepLoc.hashCode();
      if (apRL != null) __code = 31*__code + apRL.hashCode();
      if (opClass != null) __code = 31*__code + opClass.hashCode();
      if (apSSID != null) __code = 31*__code + apSSID.hashCode();
      if (apPHYType != null) __code = 31*__code + apPHYType.hashCode();
      if (setMACAddress != null) __code = 31*__code + setMACAddress.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for ApTP
    */
   public Asn1Boolean getApTP () {
      return apTP;
   }

   public void setApTP (Asn1Boolean value) {
      this.apTP = value;
   }

   public void setApTP (boolean value) {
      setApTP (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for ApAG
    */
   public Asn1Boolean getApAG () {
      return apAG;
   }

   public void setApAG (Asn1Boolean value) {
      this.apAG = value;
   }

   public void setApAG (boolean value) {
      setApAG (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for ApSN
    */
   public Asn1Boolean getApSN () {
      return apSN;
   }

   public void setApSN (Asn1Boolean value) {
      this.apSN = value;
   }

   public void setApSN (boolean value) {
      setApSN (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for ApDevType
    */
   public Asn1Boolean getApDevType () {
      return apDevType;
   }

   public void setApDevType (Asn1Boolean value) {
      this.apDevType = value;
   }

   public void setApDevType (boolean value) {
      setApDevType (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for ApRSSI
    */
   public Asn1Boolean getApRSSI () {
      return apRSSI;
   }

   public void setApRSSI (Asn1Boolean value) {
      this.apRSSI = value;
   }

   public void setApRSSI (boolean value) {
      setApRSSI (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for ApChanFreq
    */
   public Asn1Boolean getApChanFreq () {
      return apChanFreq;
   }

   public void setApChanFreq (Asn1Boolean value) {
      this.apChanFreq = value;
   }

   public void setApChanFreq (boolean value) {
      setApChanFreq (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for ApRTD
    */
   public Asn1Boolean getApRTD () {
      return apRTD;
   }

   public void setApRTD (Asn1Boolean value) {
      this.apRTD = value;
   }

   public void setApRTD (boolean value) {
      setApRTD (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for SetTP
    */
   public Asn1Boolean getSetTP () {
      return setTP;
   }

   public void setSetTP (Asn1Boolean value) {
      this.setTP = value;
   }

   public void setSetTP (boolean value) {
      setSetTP (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for SetAG
    */
   public Asn1Boolean getSetAG () {
      return setAG;
   }

   public void setSetAG (Asn1Boolean value) {
      this.setAG = value;
   }

   public void setSetAG (boolean value) {
      setSetAG (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for SetSN
    */
   public Asn1Boolean getSetSN () {
      return setSN;
   }

   public void setSetSN (Asn1Boolean value) {
      this.setSN = value;
   }

   public void setSetSN (boolean value) {
      setSetSN (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for SetRSSI
    */
   public Asn1Boolean getSetRSSI () {
      return setRSSI;
   }

   public void setSetRSSI (Asn1Boolean value) {
      this.setRSSI = value;
   }

   public void setSetRSSI (boolean value) {
      setSetRSSI (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for ApRepLoc
    */
   public Asn1Boolean getApRepLoc () {
      return apRepLoc;
   }

   public void setApRepLoc (Asn1Boolean value) {
      this.apRepLoc = value;
   }

   public void setApRepLoc (boolean value) {
      setApRepLoc (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for ApRL
    */
   public Asn1Boolean getApRL () {
      return apRL;
   }

   public void setApRL (Asn1Boolean value) {
      this.apRL = value;
   }

   public void setApRL (boolean value) {
      setApRL (new Asn1Boolean(value));
   }
   public boolean hasApRL () {
      return (apRL != null);
   }

   /**
    * Accessor/mutator methods for OpClass
    */
   public Asn1Boolean getOpClass () {
      return opClass;
   }

   public void setOpClass (Asn1Boolean value) {
      this.opClass = value;
   }

   public void setOpClass (boolean value) {
      setOpClass (new Asn1Boolean(value));
   }
   public boolean hasOpClass () {
      return (opClass != null);
   }

   /**
    * Accessor/mutator methods for ApSSID
    */
   public Asn1Boolean getApSSID () {
      return apSSID;
   }

   public void setApSSID (Asn1Boolean value) {
      this.apSSID = value;
   }

   public void setApSSID (boolean value) {
      setApSSID (new Asn1Boolean(value));
   }
   public boolean hasApSSID () {
      return (apSSID != null);
   }

   /**
    * Accessor/mutator methods for ApPHYType
    */
   public Asn1Boolean getApPHYType () {
      return apPHYType;
   }

   public void setApPHYType (Asn1Boolean value) {
      this.apPHYType = value;
   }

   public void setApPHYType (boolean value) {
      setApPHYType (new Asn1Boolean(value));
   }
   public boolean hasApPHYType () {
      return (apPHYType != null);
   }

   /**
    * Accessor/mutator methods for SetMACAddress
    */
   public Asn1Boolean getSetMACAddress () {
      return setMACAddress;
   }

   public void setSetMACAddress (Asn1Boolean value) {
      this.setMACAddress = value;
   }

   public void setSetMACAddress (boolean value) {
      setSetMACAddress (new Asn1Boolean(value));
   }
   public boolean hasSetMACAddress () {
      return (setMACAddress != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 18; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return apTP;
         case 1: return apAG;
         case 2: return apSN;
         case 3: return apDevType;
         case 4: return apRSSI;
         case 5: return apChanFreq;
         case 6: return apRTD;
         case 7: return setTP;
         case 8: return setAG;
         case 9: return setSN;
         case 10: return setRSSI;
         case 11: return apRepLoc;
         case 12: return apRL;
         case 13: return opClass;
         case 14: return apSSID;
         case 15: return apPHYType;
         case 16: return setMACAddress;
         case 17: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "apTP";
         case 1: return "apAG";
         case 2: return "apSN";
         case 3: return "apDevType";
         case 4: return "apRSSI";
         case 5: return "apChanFreq";
         case 6: return "apRTD";
         case 7: return "setTP";
         case 8: return "setAG";
         case 9: return "setSN";
         case 10: return "setRSSI";
         case 11: return "apRepLoc";
         case 12: return "apRL";
         case 13: return "opClass";
         case 14: return "apSSID";
         case 15: return "apPHYType";
         case 16: return "setMACAddress";
         case 17: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode apTP

      buffer.getContext().eventDispatcher.startElement("apTP", -1);

      apTP = new Asn1Boolean();
      apTP.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("apTP", -1);

      // decode apAG

      buffer.getContext().eventDispatcher.startElement("apAG", -1);

      apAG = new Asn1Boolean();
      apAG.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("apAG", -1);

      // decode apSN

      buffer.getContext().eventDispatcher.startElement("apSN", -1);

      apSN = new Asn1Boolean();
      apSN.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("apSN", -1);

      // decode apDevType

      buffer.getContext().eventDispatcher.startElement("apDevType", -1);

      apDevType = new Asn1Boolean();
      apDevType.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("apDevType", -1);

      // decode apRSSI

      buffer.getContext().eventDispatcher.startElement("apRSSI", -1);

      apRSSI = new Asn1Boolean();
      apRSSI.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("apRSSI", -1);

      // decode apChanFreq

      buffer.getContext().eventDispatcher.startElement("apChanFreq", -1);

      apChanFreq = new Asn1Boolean();
      apChanFreq.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("apChanFreq", -1);

      // decode apRTD

      buffer.getContext().eventDispatcher.startElement("apRTD", -1);

      apRTD = new Asn1Boolean();
      apRTD.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("apRTD", -1);

      // decode setTP

      buffer.getContext().eventDispatcher.startElement("setTP", -1);

      setTP = new Asn1Boolean();
      setTP.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("setTP", -1);

      // decode setAG

      buffer.getContext().eventDispatcher.startElement("setAG", -1);

      setAG = new Asn1Boolean();
      setAG.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("setAG", -1);

      // decode setSN

      buffer.getContext().eventDispatcher.startElement("setSN", -1);

      setSN = new Asn1Boolean();
      setSN.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("setSN", -1);

      // decode setRSSI

      buffer.getContext().eventDispatcher.startElement("setRSSI", -1);

      setRSSI = new Asn1Boolean();
      setRSSI.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("setRSSI", -1);

      // decode apRepLoc

      buffer.getContext().eventDispatcher.startElement("apRepLoc", -1);

      apRepLoc = new Asn1Boolean();
      apRepLoc.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("apRepLoc", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("apRLPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("opClassPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("apSSIDPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("apPHYTypePresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("setMACAddressPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode apRL

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("apRL", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            apRL = new Asn1Boolean();
            apRL.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("apRL", -1);

         }
         else {
            apRL = null;
         }

         // decode opClass

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("opClass", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            opClass = new Asn1Boolean();
            opClass.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("opClass", -1);

         }
         else {
            opClass = null;
         }

         // decode apSSID

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("apSSID", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            apSSID = new Asn1Boolean();
            apSSID.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("apSSID", -1);

         }
         else {
            apSSID = null;
         }

         // decode apPHYType

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("apPHYType", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            apPHYType = new Asn1Boolean();
            apPHYType.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("apPHYType", -1);

         }
         else {
            apPHYType = null;
         }

         // decode setMACAddress

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("setMACAddress", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            setMACAddress = new Asn1Boolean();
            setMACAddress.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("setMACAddress", -1);

         }
         else {
            setMACAddress = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((apRL != null) ||
      (opClass != null) ||
      (apSSID != null) ||
      (apPHYType != null) ||
      (setMACAddress != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode apTP

      if (apTP != null) {
         buffer.getContext().eventDispatcher.startElement("apTP", -1);

         apTP.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("apTP", -1);
      }
      else throw new Asn1MissingRequiredException ("apTP");

      // encode apAG

      if (apAG != null) {
         buffer.getContext().eventDispatcher.startElement("apAG", -1);

         apAG.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("apAG", -1);
      }
      else throw new Asn1MissingRequiredException ("apAG");

      // encode apSN

      if (apSN != null) {
         buffer.getContext().eventDispatcher.startElement("apSN", -1);

         apSN.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("apSN", -1);
      }
      else throw new Asn1MissingRequiredException ("apSN");

      // encode apDevType

      if (apDevType != null) {
         buffer.getContext().eventDispatcher.startElement("apDevType", -1);

         apDevType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("apDevType", -1);
      }
      else throw new Asn1MissingRequiredException ("apDevType");

      // encode apRSSI

      if (apRSSI != null) {
         buffer.getContext().eventDispatcher.startElement("apRSSI", -1);

         apRSSI.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("apRSSI", -1);
      }
      else throw new Asn1MissingRequiredException ("apRSSI");

      // encode apChanFreq

      if (apChanFreq != null) {
         buffer.getContext().eventDispatcher.startElement("apChanFreq", -1);

         apChanFreq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("apChanFreq", -1);
      }
      else throw new Asn1MissingRequiredException ("apChanFreq");

      // encode apRTD

      if (apRTD != null) {
         buffer.getContext().eventDispatcher.startElement("apRTD", -1);

         apRTD.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("apRTD", -1);
      }
      else throw new Asn1MissingRequiredException ("apRTD");

      // encode setTP

      if (setTP != null) {
         buffer.getContext().eventDispatcher.startElement("setTP", -1);

         setTP.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("setTP", -1);
      }
      else throw new Asn1MissingRequiredException ("setTP");

      // encode setAG

      if (setAG != null) {
         buffer.getContext().eventDispatcher.startElement("setAG", -1);

         setAG.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("setAG", -1);
      }
      else throw new Asn1MissingRequiredException ("setAG");

      // encode setSN

      if (setSN != null) {
         buffer.getContext().eventDispatcher.startElement("setSN", -1);

         setSN.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("setSN", -1);
      }
      else throw new Asn1MissingRequiredException ("setSN");

      // encode setRSSI

      if (setRSSI != null) {
         buffer.getContext().eventDispatcher.startElement("setRSSI", -1);

         setRSSI.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("setRSSI", -1);
      }
      else throw new Asn1MissingRequiredException ("setRSSI");

      // encode apRepLoc

      if (apRepLoc != null) {
         buffer.getContext().eventDispatcher.startElement("apRepLoc", -1);

         apRepLoc.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("apRepLoc", -1);
      }
      else throw new Asn1MissingRequiredException ("apRepLoc");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 5;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((apRL != null), null);
         buffer.encodeBit ((opClass != null), null);
         buffer.encodeBit ((apSSID != null), null);
         buffer.encodeBit ((apPHYType != null), null);
         buffer.encodeBit ((setMACAddress != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // apRL

         if (apRL != null) {
            buffer.reset();
            apRL.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("apRL", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("apRL", -1);
         }

         // opClass

         if (opClass != null) {
            buffer.reset();
            opClass.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("opClass", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("opClass", -1);
         }

         // apSSID

         if (apSSID != null) {
            buffer.reset();
            apSSID.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("apSSID", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("apSSID", -1);
         }

         // apPHYType

         if (apPHYType != null) {
            buffer.reset();
            apPHYType.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("apPHYType", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("apPHYType", -1);
         }

         // setMACAddress

         if (setMACAddress != null) {
            buffer.reset();
            setMACAddress.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("setMACAddress", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("setMACAddress", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
