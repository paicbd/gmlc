/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class PRS_Info extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "PRS-Info";
   }

   protected PRS_Info_prs_Bandwidth prs_Bandwidth = null;
   protected Asn1Integer prs_ConfigurationIndex;
   protected PRS_Info_numDL_Frames numDL_Frames = null;
   protected PRS_Info_prs_MutingInfo_r9 prs_MutingInfo_r9;  // optional
   protected Asn1Integer prsID_r14;  // optional
   protected Asn1Integer add_numDL_Frames_r14;  // optional
   protected PRS_Info_prsOccGroupLen_r14 prsOccGroupLen_r14 = null;  // optional
   protected PRS_Info_prsHoppingInfo_r14 prsHoppingInfo_r14;  // optional
   protected Asn1OpenExt extElem1;

   public PRS_Info () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PRS_Info (
      PRS_Info_prs_Bandwidth prs_Bandwidth_,
      Asn1Integer prs_ConfigurationIndex_,
      PRS_Info_numDL_Frames numDL_Frames_,
      PRS_Info_prs_MutingInfo_r9 prs_MutingInfo_r9_,
      Asn1Integer prsID_r14_,
      Asn1Integer add_numDL_Frames_r14_,
      PRS_Info_prsOccGroupLen_r14 prsOccGroupLen_r14_,
      PRS_Info_prsHoppingInfo_r14 prsHoppingInfo_r14_
   ) throws Asn1Exception {
      super();
      setPrs_Bandwidth (prs_Bandwidth_);
      setPrs_ConfigurationIndex (prs_ConfigurationIndex_);
      setNumDL_Frames (numDL_Frames_);
      setPrs_MutingInfo_r9 (prs_MutingInfo_r9_);
      setPrsID_r14 (prsID_r14_);
      setAdd_numDL_Frames_r14 (add_numDL_Frames_r14_);
      setPrsOccGroupLen_r14 (prsOccGroupLen_r14_);
      setPrsHoppingInfo_r14 (prsHoppingInfo_r14_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PRS_Info (
      PRS_Info_prs_Bandwidth prs_Bandwidth_,
      Asn1Integer prs_ConfigurationIndex_,
      PRS_Info_numDL_Frames numDL_Frames_
   ) throws Asn1Exception {
      super();
      setPrs_Bandwidth (prs_Bandwidth_);
      setPrs_ConfigurationIndex (prs_ConfigurationIndex_);
      setNumDL_Frames (numDL_Frames_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PRS_Info (PRS_Info_prs_Bandwidth prs_Bandwidth_,
      long prs_ConfigurationIndex_,
      PRS_Info_numDL_Frames numDL_Frames_,
      PRS_Info_prs_MutingInfo_r9 prs_MutingInfo_r9_,
      long prsID_r14_,
      long add_numDL_Frames_r14_,
      PRS_Info_prsOccGroupLen_r14 prsOccGroupLen_r14_,
      PRS_Info_prsHoppingInfo_r14 prsHoppingInfo_r14_
   ) throws Asn1Exception {
      super();
      setPrs_Bandwidth (prs_Bandwidth_);
      setPrs_ConfigurationIndex (prs_ConfigurationIndex_);
      setNumDL_Frames (numDL_Frames_);
      setPrs_MutingInfo_r9 (prs_MutingInfo_r9_);
      setPrsID_r14 (prsID_r14_);
      setAdd_numDL_Frames_r14 (add_numDL_Frames_r14_);
      setPrsOccGroupLen_r14 (prsOccGroupLen_r14_);
      setPrsHoppingInfo_r14 (prsHoppingInfo_r14_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public PRS_Info (
      PRS_Info_prs_Bandwidth prs_Bandwidth_,
      long prs_ConfigurationIndex_,
      PRS_Info_numDL_Frames numDL_Frames_
   ) throws Asn1Exception {
      super();
      setPrs_Bandwidth (prs_Bandwidth_);
      setPrs_ConfigurationIndex (prs_ConfigurationIndex_);
      setNumDL_Frames (numDL_Frames_);
   }

   public void init () {
      prs_Bandwidth = null;
      prs_ConfigurationIndex = null;
      numDL_Frames = null;
      prs_MutingInfo_r9 = null;
      prsID_r14 = null;
      add_numDL_Frames_r14 = null;
      prsOccGroupLen_r14 = null;
      prsHoppingInfo_r14 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof PRS_Info) ) return false;

      PRS_Info rhs = (PRS_Info) obj;

      if (prs_Bandwidth == null) {
         if (rhs.prs_Bandwidth != null) return false;
      }
      else {
         if (!prs_Bandwidth.equals(rhs.prs_Bandwidth)) {
            return false;
         }
      }

      if (prs_ConfigurationIndex == null) {
         if (rhs.prs_ConfigurationIndex != null) return false;
      }
      else {
         if (!prs_ConfigurationIndex.equals(rhs.prs_ConfigurationIndex)) {
            return false;
         }
      }

      if (numDL_Frames == null) {
         if (rhs.numDL_Frames != null) return false;
      }
      else {
         if (!numDL_Frames.equals(rhs.numDL_Frames)) {
            return false;
         }
      }

      if (prs_MutingInfo_r9 == null) {
         if (rhs.prs_MutingInfo_r9 != null) return false;
      }
      else {
         if (!prs_MutingInfo_r9.equals(rhs.prs_MutingInfo_r9)) {
            return false;
         }
      }

      if (prsID_r14 == null) {
         if (rhs.prsID_r14 != null) return false;
      }
      else {
         if (!prsID_r14.equals(rhs.prsID_r14)) {
            return false;
         }
      }

      if (add_numDL_Frames_r14 == null) {
         if (rhs.add_numDL_Frames_r14 != null) return false;
      }
      else {
         if (!add_numDL_Frames_r14.equals(rhs.add_numDL_Frames_r14)) {
            return false;
         }
      }

      if (prsOccGroupLen_r14 == null) {
         if (rhs.prsOccGroupLen_r14 != null) return false;
      }
      else {
         if (!prsOccGroupLen_r14.equals(rhs.prsOccGroupLen_r14)) {
            return false;
         }
      }

      if (prsHoppingInfo_r14 == null) {
         if (rhs.prsHoppingInfo_r14 != null) return false;
      }
      else {
         if (!prsHoppingInfo_r14.equals(rhs.prsHoppingInfo_r14)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (prs_Bandwidth != null) __code = 31*__code + prs_Bandwidth.hashCode();
      if (prs_ConfigurationIndex != null) __code = 31*__code + prs_ConfigurationIndex.hashCode();
      if (numDL_Frames != null) __code = 31*__code + numDL_Frames.hashCode();
      if (prs_MutingInfo_r9 != null) __code = 31*__code + prs_MutingInfo_r9.hashCode();
      if (prsID_r14 != null) __code = 31*__code + prsID_r14.hashCode();
      if (add_numDL_Frames_r14 != null) __code = 31*__code + add_numDL_Frames_r14.hashCode();
      if (prsOccGroupLen_r14 != null) __code = 31*__code + prsOccGroupLen_r14.hashCode();
      if (prsHoppingInfo_r14 != null) __code = 31*__code + prsHoppingInfo_r14.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Prs_Bandwidth
    */
   public PRS_Info_prs_Bandwidth getPrs_Bandwidth () {
      return prs_Bandwidth;
   }

   public void setPrs_Bandwidth (PRS_Info_prs_Bandwidth value) {
      this.prs_Bandwidth = value;
   }

   /**
    * Accessor/mutator methods for Prs_ConfigurationIndex
    */
   public Asn1Integer getPrs_ConfigurationIndex () {
      return prs_ConfigurationIndex;
   }

   public void setPrs_ConfigurationIndex (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.prs_ConfigurationIndex = value;
   }

   public void setPrs_ConfigurationIndex (long value) 
      throws Asn1Exception
   {
      setPrs_ConfigurationIndex (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NumDL_Frames
    */
   public PRS_Info_numDL_Frames getNumDL_Frames () {
      return numDL_Frames;
   }

   public void setNumDL_Frames (PRS_Info_numDL_Frames value) {
      this.numDL_Frames = value;
   }

   /**
    * Accessor/mutator methods for Prs_MutingInfo_r9
    */
   public PRS_Info_prs_MutingInfo_r9 getPrs_MutingInfo_r9 () {
      return prs_MutingInfo_r9;
   }

   public void setPrs_MutingInfo_r9 (PRS_Info_prs_MutingInfo_r9 value) {
      this.prs_MutingInfo_r9 = value;
   }

   public boolean hasPrs_MutingInfo_r9 () {
      return (prs_MutingInfo_r9 != null);
   }

   /**
    * Accessor/mutator methods for PrsID_r14
    */
   public Asn1Integer getPrsID_r14 () {
      return prsID_r14;
   }

   public void setPrsID_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.prsID_r14 = value;
   }

   public void setPrsID_r14 (long value) 
      throws Asn1Exception
   {
      setPrsID_r14 (new Asn1Integer(value));
   }
   public boolean hasPrsID_r14 () {
      return (prsID_r14 != null);
   }

   /**
    * Accessor/mutator methods for Add_numDL_Frames_r14
    */
   public Asn1Integer getAdd_numDL_Frames_r14 () {
      return add_numDL_Frames_r14;
   }

   public void setAdd_numDL_Frames_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 160))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.add_numDL_Frames_r14 = value;
   }

   public void setAdd_numDL_Frames_r14 (long value) 
      throws Asn1Exception
   {
      setAdd_numDL_Frames_r14 (new Asn1Integer(value));
   }
   public boolean hasAdd_numDL_Frames_r14 () {
      return (add_numDL_Frames_r14 != null);
   }

   /**
    * Accessor/mutator methods for PrsOccGroupLen_r14
    */
   public PRS_Info_prsOccGroupLen_r14 getPrsOccGroupLen_r14 () {
      return prsOccGroupLen_r14;
   }

   public void setPrsOccGroupLen_r14 (PRS_Info_prsOccGroupLen_r14 value) {
      this.prsOccGroupLen_r14 = value;
   }

   public boolean hasPrsOccGroupLen_r14 () {
      return (prsOccGroupLen_r14 != null);
   }

   /**
    * Accessor/mutator methods for PrsHoppingInfo_r14
    */
   public PRS_Info_prsHoppingInfo_r14 getPrsHoppingInfo_r14 () {
      return prsHoppingInfo_r14;
   }

   public void setPrsHoppingInfo_r14 (PRS_Info_prsHoppingInfo_r14 value) {
      this.prsHoppingInfo_r14 = value;
   }

   public boolean hasPrsHoppingInfo_r14 () {
      return (prsHoppingInfo_r14 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return prs_Bandwidth;
         case 1: return prs_ConfigurationIndex;
         case 2: return numDL_Frames;
         case 3: return prs_MutingInfo_r9;
         case 4: return prsID_r14;
         case 5: return add_numDL_Frames_r14;
         case 6: return prsOccGroupLen_r14;
         case 7: return prsHoppingInfo_r14;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "prs-Bandwidth";
         case 1: return "prs-ConfigurationIndex";
         case 2: return "numDL-Frames";
         case 3: return "prs-MutingInfo-r9";
         case 4: return "prsID-r14";
         case 5: return "add-numDL-Frames-r14";
         case 6: return "prsOccGroupLen-r14";
         case 7: return "prsHoppingInfo-r14";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode prs_Bandwidth

      buffer.getContext().eventDispatcher.startElement("prs_Bandwidth", -1);

      {
         int tval = PRS_Info_prs_Bandwidth.decodeEnumValue (buffer);
         prs_Bandwidth = PRS_Info_prs_Bandwidth.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("prs_Bandwidth", -1);

      // decode prs_ConfigurationIndex

      buffer.getContext().eventDispatcher.startElement("prs_ConfigurationIndex", -1);

      prs_ConfigurationIndex = new Asn1Integer();
      prs_ConfigurationIndex.decode (buffer, 0, 4095);
      buffer.getContext().eventDispatcher.endElement("prs_ConfigurationIndex", -1);

      // decode numDL_Frames

      buffer.getContext().eventDispatcher.startElement("numDL_Frames", -1);

      {
         int tval = PRS_Info_numDL_Frames.decodeEnumValue (buffer);
         numDL_Frames = PRS_Info_numDL_Frames.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("numDL_Frames", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("prs_MutingInfo_r9Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("prsID_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("add_numDL_Frames_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("prsOccGroupLen_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("prsHoppingInfo_r14Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode prs_MutingInfo_r9

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("prs_MutingInfo_r9", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            prs_MutingInfo_r9 = new PRS_Info_prs_MutingInfo_r9();
            prs_MutingInfo_r9.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("prs_MutingInfo_r9", -1);

         }
         else {
            prs_MutingInfo_r9 = null;
         }

         // decode prsID_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("prsID_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            prsID_r14 = new Asn1Integer();
            prsID_r14.decode (buffer, 0, 4095);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("prsID_r14", -1);

         }
         else {
            prsID_r14 = null;
         }

         // decode add_numDL_Frames_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("add_numDL_Frames_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            add_numDL_Frames_r14 = new Asn1Integer();
            add_numDL_Frames_r14.decode (buffer, 1, 160);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("add_numDL_Frames_r14", -1);

         }
         else {
            add_numDL_Frames_r14 = null;
         }

         // decode prsOccGroupLen_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("prsOccGroupLen_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = PRS_Info_prsOccGroupLen_r14.decodeEnumValue (buffer);
               prsOccGroupLen_r14 = PRS_Info_prsOccGroupLen_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("prsOccGroupLen_r14", -1);

         }
         else {
            prsOccGroupLen_r14 = null;
         }

         // decode prsHoppingInfo_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("prsHoppingInfo_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            prsHoppingInfo_r14 = new PRS_Info_prsHoppingInfo_r14();
            prsHoppingInfo_r14.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("prsHoppingInfo_r14", -1);

         }
         else {
            prsHoppingInfo_r14 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((prs_MutingInfo_r9 != null) ||
      (prsID_r14 != null) ||
      (add_numDL_Frames_r14 != null) ||
      (prsOccGroupLen_r14 != null) ||
      (prsHoppingInfo_r14 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode prs_Bandwidth

      if (prs_Bandwidth != null) {
         buffer.getContext().eventDispatcher.startElement("prs_Bandwidth", -1);

         prs_Bandwidth.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("prs_Bandwidth", -1);
      }
      else throw new Asn1MissingRequiredException ("prs_Bandwidth");

      // encode prs_ConfigurationIndex

      if (prs_ConfigurationIndex != null) {
         buffer.getContext().eventDispatcher.startElement("prs_ConfigurationIndex", -1);

         prs_ConfigurationIndex.encode (buffer, 0, 4095);

         buffer.getContext().eventDispatcher.endElement("prs_ConfigurationIndex", -1);
      }
      else throw new Asn1MissingRequiredException ("prs_ConfigurationIndex");

      // encode numDL_Frames

      if (numDL_Frames != null) {
         buffer.getContext().eventDispatcher.startElement("numDL_Frames", -1);

         numDL_Frames.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("numDL_Frames", -1);
      }
      else throw new Asn1MissingRequiredException ("numDL_Frames");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 5;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((prs_MutingInfo_r9 != null), null);
         buffer.encodeBit ((prsID_r14 != null), null);
         buffer.encodeBit ((add_numDL_Frames_r14 != null), null);
         buffer.encodeBit ((prsOccGroupLen_r14 != null), null);
         buffer.encodeBit ((prsHoppingInfo_r14 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // prs_MutingInfo_r9

         if (prs_MutingInfo_r9 != null) {
            buffer.reset();
            prs_MutingInfo_r9.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("prs_MutingInfo_r9", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("prs_MutingInfo_r9", -1);
         }

         // prsID_r14

         if (prsID_r14 != null) {
            buffer.reset();
            prsID_r14.encode (buffer, 0, 4095);
            buffer.getContext().eventDispatcher.startElement("prsID_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("prsID_r14", -1);
         }

         // add_numDL_Frames_r14

         if (add_numDL_Frames_r14 != null) {
            buffer.reset();
            add_numDL_Frames_r14.encode (buffer, 1, 160);
            buffer.getContext().eventDispatcher.startElement("add_numDL_Frames_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("add_numDL_Frames_r14", -1);
         }

         // prsOccGroupLen_r14

         if (prsOccGroupLen_r14 != null) {
            buffer.reset();
            prsOccGroupLen_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("prsOccGroupLen_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("prsOccGroupLen_r14", -1);
         }

         // prsHoppingInfo_r14

         if (prsHoppingInfo_r14 != null) {
            buffer.reset();
            prsHoppingInfo_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("prsHoppingInfo_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("prsHoppingInfo_r14", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
