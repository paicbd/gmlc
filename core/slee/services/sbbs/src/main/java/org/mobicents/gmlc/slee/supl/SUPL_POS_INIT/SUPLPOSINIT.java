/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_POS_INIT;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.SUPL_START.SETCapabilities;
import org.mobicents.gmlc.slee.supl.ULP_Components.LocationId;
import org.mobicents.gmlc.slee.supl.ULP_Components.Position;
import org.mobicents.gmlc.slee.supl.SUPL_POS.SUPLPOS;
import org.mobicents.gmlc.slee.supl.ULP_Components.Ver;
import org.mobicents.gmlc.slee.supl.ULP_Version_2_message_extensions.Ver2_SUPL_POS_INIT_extension;

public class SUPLPOSINIT extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_POS_INITRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_POS_INITRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SUPLPOSINIT";
   }

   protected SETCapabilities sETCapabilities;
   protected RequestedAssistData requestedAssistData;  // optional
   protected LocationId locationId;
   protected Position position;  // optional
   protected SUPLPOS suplpos;  // optional
   protected Ver ver;  // optional
   protected Ver2_SUPL_POS_INIT_extension ver2_SUPL_POS_INIT_extension;  // optional
   protected Asn1OpenExt extElem1;

   public SUPLPOSINIT () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SUPLPOSINIT (
      SETCapabilities sETCapabilities_,
      RequestedAssistData requestedAssistData_,
      LocationId locationId_,
      Position position_,
      SUPLPOS suplpos_,
      Ver ver_,
      Ver2_SUPL_POS_INIT_extension ver2_SUPL_POS_INIT_extension_
   ) throws Asn1Exception {
      super();
      setSETCapabilities (sETCapabilities_);
      setRequestedAssistData (requestedAssistData_);
      setLocationId (locationId_);
      setPosition (position_);
      setSuplpos (suplpos_);
      setVer (ver_);
      setVer2_SUPL_POS_INIT_extension (ver2_SUPL_POS_INIT_extension_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SUPLPOSINIT (
      SETCapabilities sETCapabilities_,
      LocationId locationId_
   ) throws Asn1Exception {
      super();
      setSETCapabilities (sETCapabilities_);
      setLocationId (locationId_);
   }

   public void init () {
      sETCapabilities = null;
      requestedAssistData = null;
      locationId = null;
      position = null;
      suplpos = null;
      ver = null;
      ver2_SUPL_POS_INIT_extension = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof SUPLPOSINIT) ) return false;

      SUPLPOSINIT rhs = (SUPLPOSINIT) obj;

      if (sETCapabilities == null) {
         if (rhs.sETCapabilities != null) return false;
      }
      else {
         if (!sETCapabilities.equals(rhs.sETCapabilities)) {
            return false;
         }
      }

      if (requestedAssistData == null) {
         if (rhs.requestedAssistData != null) return false;
      }
      else {
         if (!requestedAssistData.equals(rhs.requestedAssistData)) {
            return false;
         }
      }

      if (locationId == null) {
         if (rhs.locationId != null) return false;
      }
      else {
         if (!locationId.equals(rhs.locationId)) {
            return false;
         }
      }

      if (position == null) {
         if (rhs.position != null) return false;
      }
      else {
         if (!position.equals(rhs.position)) {
            return false;
         }
      }

      if (suplpos == null) {
         if (rhs.suplpos != null) return false;
      }
      else {
         if (!suplpos.equals(rhs.suplpos)) {
            return false;
         }
      }

      if (ver == null) {
         if (rhs.ver != null) return false;
      }
      else {
         if (!ver.equals(rhs.ver)) {
            return false;
         }
      }

      if (ver2_SUPL_POS_INIT_extension == null) {
         if (rhs.ver2_SUPL_POS_INIT_extension != null) return false;
      }
      else {
         if (!ver2_SUPL_POS_INIT_extension.equals(rhs.ver2_SUPL_POS_INIT_extension)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (sETCapabilities != null) __code = 31*__code + sETCapabilities.hashCode();
      if (requestedAssistData != null) __code = 31*__code + requestedAssistData.hashCode();
      if (locationId != null) __code = 31*__code + locationId.hashCode();
      if (position != null) __code = 31*__code + position.hashCode();
      if (suplpos != null) __code = 31*__code + suplpos.hashCode();
      if (ver != null) __code = 31*__code + ver.hashCode();
      if (ver2_SUPL_POS_INIT_extension != null) __code = 31*__code + ver2_SUPL_POS_INIT_extension.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SETCapabilities
    */
   public SETCapabilities getSETCapabilities () {
      return sETCapabilities;
   }

   public void setSETCapabilities (SETCapabilities value) {
      this.sETCapabilities = value;
   }

   /**
    * Accessor/mutator methods for RequestedAssistData
    */
   public RequestedAssistData getRequestedAssistData () {
      return requestedAssistData;
   }

   public void setRequestedAssistData (RequestedAssistData value) {
      this.requestedAssistData = value;
   }

   public boolean hasRequestedAssistData () {
      return (requestedAssistData != null);
   }

   /**
    * Accessor/mutator methods for LocationId
    */
   public LocationId getLocationId () {
      return locationId;
   }

   public void setLocationId (LocationId value) {
      this.locationId = value;
   }

   /**
    * Accessor/mutator methods for Position
    */
   public Position getPosition () {
      return position;
   }

   public void setPosition (Position value) {
      this.position = value;
   }

   public boolean hasPosition () {
      return (position != null);
   }

   /**
    * Accessor/mutator methods for Suplpos
    */
   public SUPLPOS getSuplpos () {
      return suplpos;
   }

   public void setSuplpos (SUPLPOS value) {
      this.suplpos = value;
   }

   public boolean hasSuplpos () {
      return (suplpos != null);
   }

   /**
    * Accessor/mutator methods for Ver
    */
   public Ver getVer () {
      return ver;
   }

   public void setVer (Ver value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 64)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.ver = value;
   }

   public boolean hasVer () {
      return (ver != null);
   }

   /**
    * Accessor/mutator methods for Ver2_SUPL_POS_INIT_extension
    */
   public Ver2_SUPL_POS_INIT_extension getVer2_SUPL_POS_INIT_extension () {
      return ver2_SUPL_POS_INIT_extension;
   }

   public void setVer2_SUPL_POS_INIT_extension (Ver2_SUPL_POS_INIT_extension value) {
      this.ver2_SUPL_POS_INIT_extension = value;
   }

   public boolean hasVer2_SUPL_POS_INIT_extension () {
      return (ver2_SUPL_POS_INIT_extension != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sETCapabilities;
         case 1: return requestedAssistData;
         case 2: return locationId;
         case 3: return position;
         case 4: return suplpos;
         case 5: return ver;
         case 6: return ver2_SUPL_POS_INIT_extension;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sETCapabilities";
         case 1: return "requestedAssistData";
         case 2: return "locationId";
         case 3: return "position";
         case 4: return "suplpos";
         case 5: return "ver";
         case 6: return "ver2-SUPL-POS-INIT-extension";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean requestedAssistDataPresent = buffer.decodeBit ("requestedAssistDataPresent");
      boolean positionPresent = buffer.decodeBit ("positionPresent");
      boolean suplposPresent = buffer.decodeBit ("suplposPresent");
      boolean verPresent = buffer.decodeBit ("verPresent");

      // decode sETCapabilities

      buffer.getContext().eventDispatcher.startElement("sETCapabilities", -1);

      sETCapabilities = new SETCapabilities();
      sETCapabilities.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sETCapabilities", -1);

      // decode requestedAssistData

      if (requestedAssistDataPresent) {
         buffer.getContext().eventDispatcher.startElement("requestedAssistData", -1);

         requestedAssistData = new RequestedAssistData();
         requestedAssistData.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("requestedAssistData", -1);
      }
      else {
         requestedAssistData = null;
      }

      // decode locationId

      buffer.getContext().eventDispatcher.startElement("locationId", -1);

      locationId = new LocationId();
      locationId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("locationId", -1);

      // decode position

      if (positionPresent) {
         buffer.getContext().eventDispatcher.startElement("position", -1);

         position = new Position();
         position.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("position", -1);
      }
      else {
         position = null;
      }

      // decode suplpos

      if (suplposPresent) {
         buffer.getContext().eventDispatcher.startElement("suplpos", -1);

         suplpos = new SUPLPOS();
         suplpos.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("suplpos", -1);
      }
      else {
         suplpos = null;
      }

      // decode ver

      if (verPresent) {
         buffer.getContext().eventDispatcher.startElement("ver", -1);

         ver = new Ver();
         ver.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ver", -1);
      }
      else {
         ver = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("ver2_SUPL_POS_INIT_extensionPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode ver2_SUPL_POS_INIT_extension

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("ver2_SUPL_POS_INIT_extension", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            ver2_SUPL_POS_INIT_extension = new Ver2_SUPL_POS_INIT_extension();
            ver2_SUPL_POS_INIT_extension.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("ver2_SUPL_POS_INIT_extension", -1);

         }
         else {
            ver2_SUPL_POS_INIT_extension = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((ver2_SUPL_POS_INIT_extension != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((requestedAssistData != null), null);
      buffer.encodeBit ((position != null), null);
      buffer.encodeBit ((suplpos != null), null);
      buffer.encodeBit ((ver != null), null);

      // encode sETCapabilities

      if (sETCapabilities != null) {
         buffer.getContext().eventDispatcher.startElement("sETCapabilities", -1);

         sETCapabilities.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sETCapabilities", -1);
      }
      else throw new Asn1MissingRequiredException ("sETCapabilities");

      // encode requestedAssistData

      if (requestedAssistData != null) {
         buffer.getContext().eventDispatcher.startElement("requestedAssistData", -1);

         requestedAssistData.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("requestedAssistData", -1);
      }

      // encode locationId

      if (locationId != null) {
         buffer.getContext().eventDispatcher.startElement("locationId", -1);

         locationId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("locationId", -1);
      }
      else throw new Asn1MissingRequiredException ("locationId");

      // encode position

      if (position != null) {
         buffer.getContext().eventDispatcher.startElement("position", -1);

         position.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("position", -1);
      }

      // encode suplpos

      if (suplpos != null) {
         buffer.getContext().eventDispatcher.startElement("suplpos", -1);

         suplpos.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("suplpos", -1);
      }

      // encode ver

      if (ver != null) {
         buffer.getContext().eventDispatcher.startElement("ver", -1);

         ver.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ver", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((ver2_SUPL_POS_INIT_extension != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // ver2_SUPL_POS_INIT_extension

         if (ver2_SUPL_POS_INIT_extension != null) {
            buffer.reset();
            ver2_SUPL_POS_INIT_extension.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("ver2_SUPL_POS_INIT_extension", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("ver2_SUPL_POS_INIT_extension", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
