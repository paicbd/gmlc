/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_REPORT;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.SUPL_START.SETCapabilities;
import org.mobicents.gmlc.slee.supl.ULP_Components.Ver;

public class Ver2_SUPLREPORT extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_REPORTRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_REPORTRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Ver2-SUPLREPORT";
   }

   protected SessionList sessionList;  // optional
   protected SETCapabilities sETCapabilities;  // optional
   protected ReportDataList reportDataList;  // optional
   protected Ver ver;  // optional
   protected Asn1Null moreComponents;  // optional
   protected Asn1OpenExt extElem1;

   public Ver2_SUPLREPORT () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Ver2_SUPLREPORT (
      SessionList sessionList_,
      SETCapabilities sETCapabilities_,
      ReportDataList reportDataList_,
      Ver ver_,
      Asn1Null moreComponents_
   ) throws Asn1Exception {
      super();
      setSessionList (sessionList_);
      setSETCapabilities (sETCapabilities_);
      setReportDataList (reportDataList_);
      setVer (ver_);
      setMoreComponents (moreComponents_);
   }

   public void init () {
      sessionList = null;
      sETCapabilities = null;
      reportDataList = null;
      ver = null;
      moreComponents = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Ver2_SUPLREPORT) ) return false;

      Ver2_SUPLREPORT rhs = (Ver2_SUPLREPORT) obj;

      if (sessionList == null) {
         if (rhs.sessionList != null) return false;
      }
      else {
         if (!sessionList.equals(rhs.sessionList)) {
            return false;
         }
      }

      if (sETCapabilities == null) {
         if (rhs.sETCapabilities != null) return false;
      }
      else {
         if (!sETCapabilities.equals(rhs.sETCapabilities)) {
            return false;
         }
      }

      if (reportDataList == null) {
         if (rhs.reportDataList != null) return false;
      }
      else {
         if (!reportDataList.equals(rhs.reportDataList)) {
            return false;
         }
      }

      if (ver == null) {
         if (rhs.ver != null) return false;
      }
      else {
         if (!ver.equals(rhs.ver)) {
            return false;
         }
      }

      if (moreComponents == null) {
         if (rhs.moreComponents != null) return false;
      }
      else {
         if (!moreComponents.equals(rhs.moreComponents)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (sessionList != null) __code = 31*__code + sessionList.hashCode();
      if (sETCapabilities != null) __code = 31*__code + sETCapabilities.hashCode();
      if (reportDataList != null) __code = 31*__code + reportDataList.hashCode();
      if (ver != null) __code = 31*__code + ver.hashCode();
      if (moreComponents != null) __code = 31*__code + moreComponents.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SessionList
    */
   public SessionList getSessionList () {
      return sessionList;
   }

   public void setSessionList (SessionList value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 64))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.sessionList = value;
   }

   public boolean hasSessionList () {
      return (sessionList != null);
   }

   /**
    * Accessor/mutator methods for SETCapabilities
    */
   public SETCapabilities getSETCapabilities () {
      return sETCapabilities;
   }

   public void setSETCapabilities (SETCapabilities value) {
      this.sETCapabilities = value;
   }

   public boolean hasSETCapabilities () {
      return (sETCapabilities != null);
   }

   /**
    * Accessor/mutator methods for ReportDataList
    */
   public ReportDataList getReportDataList () {
      return reportDataList;
   }

   public void setReportDataList (ReportDataList value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 1024))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.reportDataList = value;
   }

   public boolean hasReportDataList () {
      return (reportDataList != null);
   }

   /**
    * Accessor/mutator methods for Ver
    */
   public Ver getVer () {
      return ver;
   }

   public void setVer (Ver value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 64)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.ver = value;
   }

   public boolean hasVer () {
      return (ver != null);
   }

   /**
    * Accessor/mutator methods for MoreComponents
    */
   public Asn1Null getMoreComponents () {
      return moreComponents;
   }

   public void setMoreComponents (Asn1Null value) {
      this.moreComponents = value;
   }

   public boolean hasMoreComponents () {
      return (moreComponents != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sessionList;
         case 1: return sETCapabilities;
         case 2: return reportDataList;
         case 3: return ver;
         case 4: return moreComponents;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sessionList";
         case 1: return "sETCapabilities";
         case 2: return "reportDataList";
         case 3: return "ver";
         case 4: return "moreComponents";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean sessionListPresent = buffer.decodeBit ("sessionListPresent");
      boolean sETCapabilitiesPresent = buffer.decodeBit ("sETCapabilitiesPresent");
      boolean reportDataListPresent = buffer.decodeBit ("reportDataListPresent");
      boolean verPresent = buffer.decodeBit ("verPresent");
      boolean moreComponentsPresent = buffer.decodeBit ("moreComponentsPresent");

      // decode sessionList

      if (sessionListPresent) {
         buffer.getContext().eventDispatcher.startElement("sessionList", -1);

         sessionList = new SessionList();
         sessionList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sessionList", -1);
      }
      else {
         sessionList = null;
      }

      // decode sETCapabilities

      if (sETCapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("sETCapabilities", -1);

         sETCapabilities = new SETCapabilities();
         sETCapabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sETCapabilities", -1);
      }
      else {
         sETCapabilities = null;
      }

      // decode reportDataList

      if (reportDataListPresent) {
         buffer.getContext().eventDispatcher.startElement("reportDataList", -1);

         reportDataList = new ReportDataList();
         reportDataList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("reportDataList", -1);
      }
      else {
         reportDataList = null;
      }

      // decode ver

      if (verPresent) {
         buffer.getContext().eventDispatcher.startElement("ver", -1);

         ver = new Ver();
         ver.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ver", -1);
      }
      else {
         ver = null;
      }

      // decode moreComponents

      if (moreComponentsPresent) {
         buffer.getContext().eventDispatcher.startElement("moreComponents", -1);

         moreComponents = Asn1Null.NULL_VALUE;
         moreComponents.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("moreComponents", -1);
      }
      else {
         moreComponents = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((sessionList != null), null);
      buffer.encodeBit ((sETCapabilities != null), null);
      buffer.encodeBit ((reportDataList != null), null);
      buffer.encodeBit ((ver != null), null);
      buffer.encodeBit ((moreComponents != null), null);

      // encode sessionList

      if (sessionList != null) {
         buffer.getContext().eventDispatcher.startElement("sessionList", -1);

         sessionList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sessionList", -1);
      }

      // encode sETCapabilities

      if (sETCapabilities != null) {
         buffer.getContext().eventDispatcher.startElement("sETCapabilities", -1);

         sETCapabilities.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sETCapabilities", -1);
      }

      // encode reportDataList

      if (reportDataList != null) {
         buffer.getContext().eventDispatcher.startElement("reportDataList", -1);

         reportDataList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportDataList", -1);
      }

      // encode ver

      if (ver != null) {
         buffer.getContext().eventDispatcher.startElement("ver", -1);

         ver.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ver", -1);
      }

      // encode moreComponents

      if (moreComponents != null) {
         buffer.getContext().eventDispatcher.startElement("moreComponents", -1);

         moreComponents.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("moreComponents", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
