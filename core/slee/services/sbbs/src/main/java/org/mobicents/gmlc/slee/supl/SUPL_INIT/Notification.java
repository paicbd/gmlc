/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_INIT;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.ULP_Version_2_parameter_extensions.Ver2_Notification_extension;

public class Notification extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_INITRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_INITRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Notification";
   }

   protected NotificationType notificationType = null;
   protected EncodingType encodingType = null;  // optional
   protected Asn1OctetString requestorId;  // optional
   protected FormatIndicator requestorIdType = null;  // optional
   protected Asn1OctetString clientName;  // optional
   protected FormatIndicator clientNameType = null;  // optional
   protected Ver2_Notification_extension ver2_Notification_extension;  // optional
   protected Asn1OpenExt extElem1;

   public Notification () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Notification (
      NotificationType notificationType_,
      EncodingType encodingType_,
      Asn1OctetString requestorId_,
      FormatIndicator requestorIdType_,
      Asn1OctetString clientName_,
      FormatIndicator clientNameType_,
      Ver2_Notification_extension ver2_Notification_extension_
   ) throws Asn1Exception {
      super();
      setNotificationType (notificationType_);
      setEncodingType (encodingType_);
      setRequestorId (requestorId_);
      setRequestorIdType (requestorIdType_);
      setClientName (clientName_);
      setClientNameType (clientNameType_);
      setVer2_Notification_extension (ver2_Notification_extension_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public Notification (
      NotificationType notificationType_
   ) throws Asn1Exception {
      super();
      setNotificationType (notificationType_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Notification (NotificationType notificationType_,
      EncodingType encodingType_,
      byte[] requestorId_,
      FormatIndicator requestorIdType_,
      byte[] clientName_,
      FormatIndicator clientNameType_,
      Ver2_Notification_extension ver2_Notification_extension_
   ) throws Asn1Exception {
      super();
      setNotificationType (notificationType_);
      setEncodingType (encodingType_);
      setRequestorId (requestorId_);
      setRequestorIdType (requestorIdType_);
      setClientName (clientName_);
      setClientNameType (clientNameType_);
      setVer2_Notification_extension (ver2_Notification_extension_);
   }

   public void init () {
      notificationType = null;
      encodingType = null;
      requestorId = null;
      requestorIdType = null;
      clientName = null;
      clientNameType = null;
      ver2_Notification_extension = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Notification) ) return false;

      Notification rhs = (Notification) obj;

      if (notificationType == null) {
         if (rhs.notificationType != null) return false;
      }
      else {
         if (!notificationType.equals(rhs.notificationType)) {
            return false;
         }
      }

      if (encodingType == null) {
         if (rhs.encodingType != null) return false;
      }
      else {
         if (!encodingType.equals(rhs.encodingType)) {
            return false;
         }
      }

      if (requestorId == null) {
         if (rhs.requestorId != null) return false;
      }
      else {
         if (!requestorId.equals(rhs.requestorId)) {
            return false;
         }
      }

      if (requestorIdType == null) {
         if (rhs.requestorIdType != null) return false;
      }
      else {
         if (!requestorIdType.equals(rhs.requestorIdType)) {
            return false;
         }
      }

      if (clientName == null) {
         if (rhs.clientName != null) return false;
      }
      else {
         if (!clientName.equals(rhs.clientName)) {
            return false;
         }
      }

      if (clientNameType == null) {
         if (rhs.clientNameType != null) return false;
      }
      else {
         if (!clientNameType.equals(rhs.clientNameType)) {
            return false;
         }
      }

      if (ver2_Notification_extension == null) {
         if (rhs.ver2_Notification_extension != null) return false;
      }
      else {
         if (!ver2_Notification_extension.equals(rhs.ver2_Notification_extension)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (notificationType != null) __code = 31*__code + notificationType.hashCode();
      if (encodingType != null) __code = 31*__code + encodingType.hashCode();
      if (requestorId != null) __code = 31*__code + requestorId.hashCode();
      if (requestorIdType != null) __code = 31*__code + requestorIdType.hashCode();
      if (clientName != null) __code = 31*__code + clientName.hashCode();
      if (clientNameType != null) __code = 31*__code + clientNameType.hashCode();
      if (ver2_Notification_extension != null) __code = 31*__code + ver2_Notification_extension.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for NotificationType
    */
   public NotificationType getNotificationType () {
      return notificationType;
   }

   public void setNotificationType (NotificationType value) {
      this.notificationType = value;
   }

   /**
    * Accessor/mutator methods for EncodingType
    */
   public EncodingType getEncodingType () {
      return encodingType;
   }

   public void setEncodingType (EncodingType value) {
      this.encodingType = value;
   }

   public boolean hasEncodingType () {
      return (encodingType != null);
   }

   /**
    * Accessor/mutator methods for RequestorId
    */
   public Asn1OctetString getRequestorId () {
      return requestorId;
   }

   public void setRequestorId (Asn1OctetString value) 
      throws Asn1Exception
   {
      if (!((value.getLength() >= 1 && value.getLength() <= 50))) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.requestorId = value;
   }

   public void setRequestorId (byte[] value) 
      throws Asn1Exception
   {
      setRequestorId (new Asn1OctetString(value));
   }
   public boolean hasRequestorId () {
      return (requestorId != null);
   }

   /**
    * Accessor/mutator methods for RequestorIdType
    */
   public FormatIndicator getRequestorIdType () {
      return requestorIdType;
   }

   public void setRequestorIdType (FormatIndicator value) {
      this.requestorIdType = value;
   }

   public boolean hasRequestorIdType () {
      return (requestorIdType != null);
   }

   /**
    * Accessor/mutator methods for ClientName
    */
   public Asn1OctetString getClientName () {
      return clientName;
   }

   public void setClientName (Asn1OctetString value) 
      throws Asn1Exception
   {
      if (!((value.getLength() >= 1 && value.getLength() <= 50))) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.clientName = value;
   }

   public void setClientName (byte[] value) 
      throws Asn1Exception
   {
      setClientName (new Asn1OctetString(value));
   }
   public boolean hasClientName () {
      return (clientName != null);
   }

   /**
    * Accessor/mutator methods for ClientNameType
    */
   public FormatIndicator getClientNameType () {
      return clientNameType;
   }

   public void setClientNameType (FormatIndicator value) {
      this.clientNameType = value;
   }

   public boolean hasClientNameType () {
      return (clientNameType != null);
   }

   /**
    * Accessor/mutator methods for Ver2_Notification_extension
    */
   public Ver2_Notification_extension getVer2_Notification_extension () {
      return ver2_Notification_extension;
   }

   public void setVer2_Notification_extension (Ver2_Notification_extension value) {
      this.ver2_Notification_extension = value;
   }

   public boolean hasVer2_Notification_extension () {
      return (ver2_Notification_extension != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return notificationType;
         case 1: return encodingType;
         case 2: return requestorId;
         case 3: return requestorIdType;
         case 4: return clientName;
         case 5: return clientNameType;
         case 6: return ver2_Notification_extension;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "notificationType";
         case 1: return "encodingType";
         case 2: return "requestorId";
         case 3: return "requestorIdType";
         case 4: return "clientName";
         case 5: return "clientNameType";
         case 6: return "ver2-Notification-extension";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean encodingTypePresent = buffer.decodeBit ("encodingTypePresent");
      boolean requestorIdPresent = buffer.decodeBit ("requestorIdPresent");
      boolean requestorIdTypePresent = buffer.decodeBit ("requestorIdTypePresent");
      boolean clientNamePresent = buffer.decodeBit ("clientNamePresent");
      boolean clientNameTypePresent = buffer.decodeBit ("clientNameTypePresent");

      // decode notificationType

      buffer.getContext().eventDispatcher.startElement("notificationType", -1);

      {
         int tval = NotificationType.decodeEnumValue (buffer);
         notificationType = NotificationType.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("notificationType", -1);

      // decode encodingType

      if (encodingTypePresent) {
         buffer.getContext().eventDispatcher.startElement("encodingType", -1);

         int tval = EncodingType.decodeEnumValue (buffer);
         encodingType = EncodingType.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("encodingType", -1);
      }
      else {
         encodingType = null;
      }

      // decode requestorId

      if (requestorIdPresent) {
         buffer.getContext().eventDispatcher.startElement("requestorId", -1);

         requestorId = new Asn1OctetString();
         requestorId.decode (buffer, 1, 50);
         buffer.getContext().eventDispatcher.endElement("requestorId", -1);
      }
      else {
         requestorId = null;
      }

      // decode requestorIdType

      if (requestorIdTypePresent) {
         buffer.getContext().eventDispatcher.startElement("requestorIdType", -1);

         int tval = FormatIndicator.decodeEnumValue (buffer);
         requestorIdType = FormatIndicator.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("requestorIdType", -1);
      }
      else {
         requestorIdType = null;
      }

      // decode clientName

      if (clientNamePresent) {
         buffer.getContext().eventDispatcher.startElement("clientName", -1);

         clientName = new Asn1OctetString();
         clientName.decode (buffer, 1, 50);
         buffer.getContext().eventDispatcher.endElement("clientName", -1);
      }
      else {
         clientName = null;
      }

      // decode clientNameType

      if (clientNameTypePresent) {
         buffer.getContext().eventDispatcher.startElement("clientNameType", -1);

         int tval = FormatIndicator.decodeEnumValue (buffer);
         clientNameType = FormatIndicator.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("clientNameType", -1);
      }
      else {
         clientNameType = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("ver2_Notification_extensionPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode ver2_Notification_extension

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("ver2_Notification_extension", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            ver2_Notification_extension = new Ver2_Notification_extension();
            ver2_Notification_extension.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("ver2_Notification_extension", -1);

         }
         else {
            ver2_Notification_extension = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((ver2_Notification_extension != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((encodingType != null), null);
      buffer.encodeBit ((requestorId != null), null);
      buffer.encodeBit ((requestorIdType != null), null);
      buffer.encodeBit ((clientName != null), null);
      buffer.encodeBit ((clientNameType != null), null);

      // encode notificationType

      if (notificationType != null) {
         buffer.getContext().eventDispatcher.startElement("notificationType", -1);

         notificationType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("notificationType", -1);
      }
      else throw new Asn1MissingRequiredException ("notificationType");

      // encode encodingType

      if (encodingType != null) {
         buffer.getContext().eventDispatcher.startElement("encodingType", -1);

         encodingType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("encodingType", -1);
      }

      // encode requestorId

      if (requestorId != null) {
         buffer.getContext().eventDispatcher.startElement("requestorId", -1);

         requestorId.encode (buffer, 1, 50);

         buffer.getContext().eventDispatcher.endElement("requestorId", -1);
      }

      // encode requestorIdType

      if (requestorIdType != null) {
         buffer.getContext().eventDispatcher.startElement("requestorIdType", -1);

         requestorIdType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("requestorIdType", -1);
      }

      // encode clientName

      if (clientName != null) {
         buffer.getContext().eventDispatcher.startElement("clientName", -1);

         clientName.encode (buffer, 1, 50);

         buffer.getContext().eventDispatcher.endElement("clientName", -1);
      }

      // encode clientNameType

      if (clientNameType != null) {
         buffer.getContext().eventDispatcher.startElement("clientNameType", -1);

         clientNameType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("clientNameType", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((ver2_Notification_extension != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // ver2_Notification_extension

         if (ver2_Notification_extension != null) {
            buffer.reset();
            ver2_Notification_extension.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("ver2_Notification_extension", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("ver2_Notification_extension", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
