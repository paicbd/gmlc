/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NPRS_Info_r14_partA_TDD_r15_nprs_MutingInfoA_r15 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _PO2_R15 = 1;
   public final static byte _PO4_R15 = 2;
   public final static byte _PO8_R15 = 3;
   public final static byte _PO16_R15 = 4;
   public final static byte _EXTELEM1 = 5;

   public NPRS_Info_r14_partA_TDD_r15_nprs_MutingInfoA_r15 () {
      super();
   }

   public NPRS_Info_r14_partA_TDD_r15_nprs_MutingInfoA_r15 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _PO2_R15: return "po2_r15";
      case _PO4_R15: return "po4_r15";
      case _PO8_R15: return "po8_r15";
      case _PO16_R15: return "po16_r15";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for po2_r15
    */
   public Asn1BitString getPo2_r15 () {
      return (choiceID == _PO2_R15) ? (Asn1BitString)element : null;
   }
   public void setPo2_r15 (Asn1BitString value) {
      setElement (_PO2_R15, value);
   }
   public boolean isPo2_r15 () {
      return (choiceID == _PO2_R15);
   }

   /**
    * Accessor/mutator methods for po4_r15
    */
   public Asn1BitString getPo4_r15 () {
      return (choiceID == _PO4_R15) ? (Asn1BitString)element : null;
   }
   public void setPo4_r15 (Asn1BitString value) {
      setElement (_PO4_R15, value);
   }
   public boolean isPo4_r15 () {
      return (choiceID == _PO4_R15);
   }

   /**
    * Accessor/mutator methods for po8_r15
    */
   public Asn1BitString getPo8_r15 () {
      return (choiceID == _PO8_R15) ? (Asn1BitString)element : null;
   }
   public void setPo8_r15 (Asn1BitString value) {
      setElement (_PO8_R15, value);
   }
   public boolean isPo8_r15 () {
      return (choiceID == _PO8_R15);
   }

   /**
    * Accessor/mutator methods for po16_r15
    */
   public Asn1BitString getPo16_r15 () {
      return (choiceID == _PO16_R15) ? (Asn1BitString)element : null;
   }
   public void setPo16_r15 (Asn1BitString value) {
      setElement (_PO16_R15, value);
   }
   public boolean isPo16_r15 () {
      return (choiceID == _PO16_R15);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (4, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // po2_r15
            case 0: { 
               Asn1BitString po2_r15;
               element = po2_r15 = new Asn1BitString();
               po2_r15.decode (buffer, 2, 2);
               break;
            }

            // po4_r15
            case 1: { 
               Asn1BitString po4_r15;
               element = po4_r15 = new Asn1BitString();
               po4_r15.decode (buffer, 4, 4);
               break;
            }

            // po8_r15
            case 2: { 
               Asn1BitString po8_r15;
               element = po8_r15 = new Asn1BitString();
               po8_r15.decode (buffer, 8, 8);
               break;
            }

            // po16_r15
            case 3: { 
               Asn1BitString po16_r15;
               element = po16_r15 = new Asn1BitString();
               po16_r15.decode (buffer, 16, 16);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 5;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         setElement (_EXTELEM1, openType);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 4);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 4, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // po2_r15
            case _PO2_R15:
               Asn1BitString po2_r15 = (Asn1BitString) element;
               po2_r15.encode (buffer, 2, 2);
               break;

            // po4_r15
            case _PO4_R15:
               Asn1BitString po4_r15 = (Asn1BitString) element;
               po4_r15.encode (buffer, 4, 4);
               break;

            // po8_r15
            case _PO8_R15:
               Asn1BitString po8_r15 = (Asn1BitString) element;
               po8_r15.encode (buffer, 8, 8);
               break;

            // po16_r15
            case _PO16_R15:
               Asn1BitString po16_r15 = (Asn1BitString) element;
               po16_r15.encode (buffer, 16, 16);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 5);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1OpenType openType = (Asn1OpenType) element;
         buffer.byteAlign();
         openType.encode (buffer);
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
