/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_AuxiliaryInformation extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-AuxiliaryInformation";
   }

   // Choice element identifier constants
   public final static byte _GNSS_ID_GPS = 1;
   public final static byte _GNSS_ID_GLONASS = 2;
   public final static byte _GNSS_ID_BDS_R16 = 3;
   public final static byte _EXTELEM1 = 4;

   public GNSS_AuxiliaryInformation () {
      super();
   }

   public GNSS_AuxiliaryInformation (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _GNSS_ID_GPS: return "gnss_ID_GPS";
      case _GNSS_ID_GLONASS: return "gnss_ID_GLONASS";
      case _GNSS_ID_BDS_R16: return "gnss_ID_BDS_r16";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for gnss_ID_GPS
    */
   public GNSS_ID_GPS getGnss_ID_GPS () {
      return (choiceID == _GNSS_ID_GPS) ? (GNSS_ID_GPS)element : null;
   }
   public void setGnss_ID_GPS (GNSS_ID_GPS value) {
      setElement (_GNSS_ID_GPS, value);
   }
   public boolean isGnss_ID_GPS () {
      return (choiceID == _GNSS_ID_GPS);
   }

   /**
    * Accessor/mutator methods for gnss_ID_GLONASS
    */
   public GNSS_ID_GLONASS getGnss_ID_GLONASS () {
      return (choiceID == _GNSS_ID_GLONASS) ? (GNSS_ID_GLONASS)element : null;
   }
   public void setGnss_ID_GLONASS (GNSS_ID_GLONASS value) {
      setElement (_GNSS_ID_GLONASS, value);
   }
   public boolean isGnss_ID_GLONASS () {
      return (choiceID == _GNSS_ID_GLONASS);
   }

   /**
    * Accessor/mutator methods for gnss_ID_BDS_r16
    */
   public GNSS_ID_BDS_r16 getGnss_ID_BDS_r16 () {
      return (choiceID == _GNSS_ID_BDS_R16) ? (GNSS_ID_BDS_r16)element : null;
   }
   public void setGnss_ID_BDS_r16 (GNSS_ID_BDS_r16 value) {
      setElement (_GNSS_ID_BDS_R16, value);
   }
   public boolean isGnss_ID_BDS_r16 () {
      return (choiceID == _GNSS_ID_BDS_R16);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (2, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // gnss_ID_GPS
            case 0: { 
               GNSS_ID_GPS gnss_ID_GPS;
               element = gnss_ID_GPS = new GNSS_ID_GPS();
               gnss_ID_GPS.decode (buffer);
               break;
            }

            // gnss_ID_GLONASS
            case 1: { 
               GNSS_ID_GLONASS gnss_ID_GLONASS;
               element = gnss_ID_GLONASS = new GNSS_ID_GLONASS();
               gnss_ID_GLONASS.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 3;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // gnss_ID_BDS_r16
            case 0: { 
               GNSS_ID_BDS_r16 gnss_ID_BDS_r16;
               element = gnss_ID_BDS_r16 = new GNSS_ID_BDS_r16();
               gnss_ID_BDS_r16.decode (buffer);
               break;
            }

            // extElem1
            case 1: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 2);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 2, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // gnss_ID_GPS
            case _GNSS_ID_GPS:
               GNSS_ID_GPS gnss_ID_GPS = (GNSS_ID_GPS) element;
               gnss_ID_GPS.encode (buffer);
               break;

            // gnss_ID_GLONASS
            case _GNSS_ID_GLONASS:
               GNSS_ID_GLONASS gnss_ID_GLONASS = (GNSS_ID_GLONASS) element;
               gnss_ID_GLONASS.encode (buffer);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 3);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1PerEncodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());
         Asn1OpenType openType;

         switch (choiceID) {
            // gnss_ID_BDS_r16
            case _GNSS_ID_BDS_R16:
               GNSS_ID_BDS_r16 gnss_ID_BDS_r16 = (GNSS_ID_BDS_r16) element;
               gnss_ID_BDS_r16.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            default:
               openType = (Asn1OpenType)getElement();
         }

         buffer = savedBuffer;
         if (openType != null) {
            buffer.byteAlign();
            openType.encode (buffer);
         }
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
