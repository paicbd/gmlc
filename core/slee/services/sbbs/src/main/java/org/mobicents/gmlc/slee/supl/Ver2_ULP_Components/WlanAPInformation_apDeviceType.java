/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class WlanAPInformation_apDeviceType extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _WLAN802_11A = 0;
   public static final int _WLAN802_11B = 1;
   public static final int _WLAN802_11G = 2;
   public static final int _WLAN802_11N = 3;
   public static final int _WLAN802_11AC = 4;
   public static final int _WLAN802_11AD = 5;

   // Singleton instances of WlanAPInformation_apDeviceType
   protected static final WlanAPInformation_apDeviceType _wlan802_11a = new WlanAPInformation_apDeviceType(0);
   protected static final WlanAPInformation_apDeviceType _wlan802_11b = new WlanAPInformation_apDeviceType(1);
   protected static final WlanAPInformation_apDeviceType _wlan802_11g = new WlanAPInformation_apDeviceType(2);
   protected static final WlanAPInformation_apDeviceType _wlan802_11n = new WlanAPInformation_apDeviceType(3);
   protected static final WlanAPInformation_apDeviceType _wlan802_11ac = new WlanAPInformation_apDeviceType(4);
   protected static final WlanAPInformation_apDeviceType _wlan802_11ad = new WlanAPInformation_apDeviceType(5);
   private static WlanAPInformation_apDeviceType __undefined = new WlanAPInformation_apDeviceType(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    */
   protected WlanAPInformation_apDeviceType (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for wlan802_11a.
    */
   public static WlanAPInformation_apDeviceType wlan802_11a() {
      return _wlan802_11a;
   }

   /**
    * Singleton accessor method for wlan802_11b.
    */
   public static WlanAPInformation_apDeviceType wlan802_11b() {
      return _wlan802_11b;
   }

   /**
    * Singleton accessor method for wlan802_11g.
    */
   public static WlanAPInformation_apDeviceType wlan802_11g() {
      return _wlan802_11g;
   }

   /**
    * Singleton accessor method for wlan802_11n.
    */
   public static WlanAPInformation_apDeviceType wlan802_11n() {
      return _wlan802_11n;
   }

   /**
    * Singleton accessor method for wlan802_11ac.
    */
   public static WlanAPInformation_apDeviceType wlan802_11ac() {
      return _wlan802_11ac;
   }

   /**
    * Singleton accessor method for wlan802_11ad.
    */
   public static WlanAPInformation_apDeviceType wlan802_11ad() {
      return _wlan802_11ad;
   }

   /** Undefined value. */
   protected static WlanAPInformation_apDeviceType __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return WlanAPInformation_apDeviceType.valueOf( WlanAPInformation_apDeviceType.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static WlanAPInformation_apDeviceType valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return wlan802_11a();
         case 1: return wlan802_11b();
         case 2: return wlan802_11g();
         case 3: return wlan802_11n();
         case 4: return wlan802_11ac();
         case 5: return wlan802_11ad();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         switch (ui) {
            case 0: ret = 3; break;
            case 1: ret = 4; break;
            case 2: ret = 5; break;
            default: ret = 0x7fffffff; break;
         }
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (3);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      boolean extbit = false;

      switch ((int)value) {
         case 0: ui = 0; /* wlan802_11a */break;
         case 1: ui = 1; /* wlan802_11b */break;
         case 2: ui = 2; /* wlan802_11g */break;
         case 3: ui = 0; /* wlan802_11n */extbit = true; break;
         case 4: ui = 1; /* wlan802_11ac */extbit = true; break;
         case 5: ui = 2; /* wlan802_11ad */extbit = true; break;
         default:
            ui = (int) value;
            extbit = true;
      }

      buffer.encodeBit (extbit, "extbit");

      if (extbit) {
         buffer.encodeSmallNonNegWholeNumber (ui);
      }
      else {
         buffer.encodeConsWholeNumber (ui, 3);
      }
   }

}
