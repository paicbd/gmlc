/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Version_2_parameter_extensions;

import com.objsys.asn1j.runtime.*;

public class AddPosSupport_Element extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_Version_2_parameter_extensionsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_Version_2_parameter_extensionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "AddPosSupport-Element";
   }

   protected AddPosSupport_Element_addPosID addPosID = null;
   protected AddPosSupport_Element_addPosMode addPosMode;  // optional
   protected Asn1OpenExt extElem1;

   public AddPosSupport_Element () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AddPosSupport_Element (
      AddPosSupport_Element_addPosID addPosID_,
      AddPosSupport_Element_addPosMode addPosMode_
   ) throws Asn1Exception {
      super();
      setAddPosID (addPosID_);
      setAddPosMode (addPosMode_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public AddPosSupport_Element (
      AddPosSupport_Element_addPosID addPosID_
   ) throws Asn1Exception {
      super();
      setAddPosID (addPosID_);
   }

   public void init () {
      addPosID = null;
      addPosMode = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof AddPosSupport_Element) ) return false;

      AddPosSupport_Element rhs = (AddPosSupport_Element) obj;

      if (addPosID == null) {
         if (rhs.addPosID != null) return false;
      }
      else {
         if (!addPosID.equals(rhs.addPosID)) {
            return false;
         }
      }

      if (addPosMode == null) {
         if (rhs.addPosMode != null) return false;
      }
      else {
         if (!addPosMode.equals(rhs.addPosMode)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (addPosID != null) __code = 31*__code + addPosID.hashCode();
      if (addPosMode != null) __code = 31*__code + addPosMode.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for AddPosID
    */
   public AddPosSupport_Element_addPosID getAddPosID () {
      return addPosID;
   }

   public void setAddPosID (AddPosSupport_Element_addPosID value) {
      this.addPosID = value;
   }

   /**
    * Accessor/mutator methods for AddPosMode
    */
   public AddPosSupport_Element_addPosMode getAddPosMode () {
      return addPosMode;
   }

   public void setAddPosMode (AddPosSupport_Element_addPosMode value) 
      throws Asn1Exception
   {
      if (!((value.getLength() >= 1 && value.getLength() <= 8))) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.addPosMode = value;
   }

   public boolean hasAddPosMode () {
      return (addPosMode != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return addPosID;
         case 1: return addPosMode;
         case 2: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "addPosID";
         case 1: return "addPosMode";
         case 2: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean addPosModePresent = buffer.decodeBit ("addPosModePresent");

      // decode addPosID

      buffer.getContext().eventDispatcher.startElement("addPosID", -1);

      {
         int tval = AddPosSupport_Element_addPosID.decodeEnumValue (buffer);
         addPosID = AddPosSupport_Element_addPosID.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("addPosID", -1);

      // decode addPosMode

      if (addPosModePresent) {
         buffer.getContext().eventDispatcher.startElement("addPosMode", -1);

         addPosMode = new AddPosSupport_Element_addPosMode();
         addPosMode.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("addPosMode", -1);
      }
      else {
         addPosMode = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((addPosMode != null), null);

      // encode addPosID

      if (addPosID != null) {
         buffer.getContext().eventDispatcher.startElement("addPosID", -1);

         addPosID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("addPosID", -1);
      }
      else throw new Asn1MissingRequiredException ("addPosID");

      // encode addPosMode

      if (addPosMode != null) {
         buffer.getContext().eventDispatcher.startElement("addPosMode", -1);

         addPosMode.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("addPosMode", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
