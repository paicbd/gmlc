/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_REPORT;

import com.objsys.asn1j.runtime.*;

public class ResultCode extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_REPORTRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_REPORTRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ResultCode";
   }

   // Integer constants for switch-case
   public static final int _OUTOFRADIOCOVERAGE = 1;
   public static final int _NOPOSITION = 2;
   public static final int _NOMEASUREMENT = 3;
   public static final int _NOPOSITIONNOMEASUREMENT = 4;
   public static final int _OUTOFMEMORY = 5;
   public static final int _OUTOFMEMORYINTERMEDIATEREPORTING = 6;
   public static final int _OTHER = 7;

   // Singleton instances of ResultCode
   protected static final ResultCode _outofradiocoverage = new ResultCode(1);
   protected static final ResultCode _noposition = new ResultCode(2);
   protected static final ResultCode _nomeasurement = new ResultCode(3);
   protected static final ResultCode _nopositionnomeasurement = new ResultCode(4);
   protected static final ResultCode _outofmemory = new ResultCode(5);
   protected static final ResultCode _outofmemoryintermediatereporting = new ResultCode(6);
   protected static final ResultCode _other = new ResultCode(7);
   private static ResultCode __undefined = new ResultCode(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    */
   protected ResultCode (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for outofradiocoverage.
    */
   public static ResultCode outofradiocoverage() {
      return _outofradiocoverage;
   }

   /**
    * Singleton accessor method for noposition.
    */
   public static ResultCode noposition() {
      return _noposition;
   }

   /**
    * Singleton accessor method for nomeasurement.
    */
   public static ResultCode nomeasurement() {
      return _nomeasurement;
   }

   /**
    * Singleton accessor method for nopositionnomeasurement.
    */
   public static ResultCode nopositionnomeasurement() {
      return _nopositionnomeasurement;
   }

   /**
    * Singleton accessor method for outofmemory.
    */
   public static ResultCode outofmemory() {
      return _outofmemory;
   }

   /**
    * Singleton accessor method for outofmemoryintermediatereporting.
    */
   public static ResultCode outofmemoryintermediatereporting() {
      return _outofmemoryintermediatereporting;
   }

   /**
    * Singleton accessor method for other.
    */
   public static ResultCode other() {
      return _other;
   }

   /** Undefined value. */
   protected static ResultCode __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return ResultCode.valueOf( ResultCode.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static ResultCode valueOf (int _value)
   {
      switch ((int)_value) {
         case 1: return outofradiocoverage();
         case 2: return noposition();
         case 3: return nomeasurement();
         case 4: return nopositionnomeasurement();
         case 5: return outofmemory();
         case 6: return outofmemoryintermediatereporting();
         case 7: return other();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         return 0x7fffffff;
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (7);

         switch (ui) {
            case 0: ret =  1; break;
            case 1: ret =  2; break;
            case 2: ret =  3; break;
            case 3: ret =  4; break;
            case 4: ret =  5; break;
            case 5: ret =  6; break;
            case 6: ret =  7; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      boolean extbit = false;

      switch ((int)value) {
         case 1: ui = 0; /* outofradiocoverage */break;
         case 2: ui = 1; /* noposition */break;
         case 3: ui = 2; /* nomeasurement */break;
         case 4: ui = 3; /* nopositionnomeasurement */break;
         case 5: ui = 4; /* outofmemory */break;
         case 6: ui = 5; /* outofmemoryintermediatereporting */break;
         case 7: ui = 6; /* other */break;
         default:
            ui = (int) value;
            extbit = true;
      }

      buffer.encodeBit (extbit, "extbit");

      if (extbit) {
         buffer.encodeSmallNonNegWholeNumber (ui);
      }
      else {
         buffer.encodeConsWholeNumber (ui, 7);
      }
   }

}
