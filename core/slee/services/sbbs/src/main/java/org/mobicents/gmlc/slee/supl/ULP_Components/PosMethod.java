/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Components;

import com.objsys.asn1j.runtime.*;

public class PosMethod extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "PosMethod";
   }

   // Integer constants for switch-case
   public static final int _AGPSSETASSISTED = 0;
   public static final int _AGPSSETBASED = 1;
   public static final int _AGPSSETASSISTEDPREF = 2;
   public static final int _AGPSSETBASEDPREF = 3;
   public static final int _AUTONOMOUSGPS = 4;
   public static final int _AFLT = 5;
   public static final int _ECID = 6;
   public static final int _EOTD = 7;
   public static final int _OTDOA = 8;
   public static final int _NOPOSITION = 9;
   public static final int _VER2_HISTORICALDATARETRIEVAL = 10;
   public static final int _VER2_AGNSSSETASSISTED = 11;
   public static final int _VER2_AGNSSSETBASED = 12;
   public static final int _VER2_AGNSSSETASSISTEDPREF = 13;
   public static final int _VER2_AGNSSSETBASEDPREF = 14;
   public static final int _VER2_AUTONOMOUSGNSS = 15;
   public static final int _VER2_SESSIONINFOQUERY = 16;
   public static final int _VER2_MBS = 17;
   public static final int _VER2_NR_DL_TDOA = 18;
   public static final int _VER2_NR_DL_AOD = 19;
   public static final int _VER2_NR_MULTI_RTT = 20;
   public static final int _VER2_NR_DL_E_CID = 21;
   public static final int _VER2_NR_UL_TDOA = 22;
   public static final int _VER2_NR_UL_AOA = 23;

   // Singleton instances of PosMethod
   protected static final PosMethod _agpsSETassisted = new PosMethod(0);
   protected static final PosMethod _agpsSETbased = new PosMethod(1);
   protected static final PosMethod _agpsSETassistedpref = new PosMethod(2);
   protected static final PosMethod _agpsSETbasedpref = new PosMethod(3);
   protected static final PosMethod _autonomousGPS = new PosMethod(4);
   protected static final PosMethod _aflt = new PosMethod(5);
   protected static final PosMethod _ecid = new PosMethod(6);
   protected static final PosMethod _eotd = new PosMethod(7);
   protected static final PosMethod _otdoa = new PosMethod(8);
   protected static final PosMethod _noPosition = new PosMethod(9);
   protected static final PosMethod _ver2_historicalDataRetrieval = new PosMethod(10);
   protected static final PosMethod _ver2_agnssSETassisted = new PosMethod(11);
   protected static final PosMethod _ver2_agnssSETbased = new PosMethod(12);
   protected static final PosMethod _ver2_agnssSETassistedpref = new PosMethod(13);
   protected static final PosMethod _ver2_agnssSETbasedpref = new PosMethod(14);
   protected static final PosMethod _ver2_autonomousGNSS = new PosMethod(15);
   protected static final PosMethod _ver2_sessioninfoquery = new PosMethod(16);
   protected static final PosMethod _ver2_mbs = new PosMethod(17);
   protected static final PosMethod _ver2_NR_DL_TDOA = new PosMethod(18);
   protected static final PosMethod _ver2_NR_DL_AoD = new PosMethod(19);
   protected static final PosMethod _ver2_NR_Multi_RTT = new PosMethod(20);
   protected static final PosMethod _ver2_NR_DL_E_CID = new PosMethod(21);
   protected static final PosMethod _ver2_NR_UL_TDOA = new PosMethod(22);
   protected static final PosMethod _ver2_NR_UL_AoA = new PosMethod(23);
   private static PosMethod __undefined = new PosMethod(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    *   16
    *   17
    *   18
    *   19
    *   20
    *   21
    *   22
    *   23
    */
   protected PosMethod (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for agpsSETassisted.
    */
   public static PosMethod agpsSETassisted() {
      return _agpsSETassisted;
   }

   /**
    * Singleton accessor method for agpsSETbased.
    */
   public static PosMethod agpsSETbased() {
      return _agpsSETbased;
   }

   /**
    * Singleton accessor method for agpsSETassistedpref.
    */
   public static PosMethod agpsSETassistedpref() {
      return _agpsSETassistedpref;
   }

   /**
    * Singleton accessor method for agpsSETbasedpref.
    */
   public static PosMethod agpsSETbasedpref() {
      return _agpsSETbasedpref;
   }

   /**
    * Singleton accessor method for autonomousGPS.
    */
   public static PosMethod autonomousGPS() {
      return _autonomousGPS;
   }

   /**
    * Singleton accessor method for aflt.
    */
   public static PosMethod aflt() {
      return _aflt;
   }

   /**
    * Singleton accessor method for ecid.
    */
   public static PosMethod ecid() {
      return _ecid;
   }

   /**
    * Singleton accessor method for eotd.
    */
   public static PosMethod eotd() {
      return _eotd;
   }

   /**
    * Singleton accessor method for otdoa.
    */
   public static PosMethod otdoa() {
      return _otdoa;
   }

   /**
    * Singleton accessor method for noPosition.
    */
   public static PosMethod noPosition() {
      return _noPosition;
   }

   /**
    * Singleton accessor method for ver2_historicalDataRetrieval.
    */
   public static PosMethod ver2_historicalDataRetrieval() {
      return _ver2_historicalDataRetrieval;
   }

   /**
    * Singleton accessor method for ver2_agnssSETassisted.
    */
   public static PosMethod ver2_agnssSETassisted() {
      return _ver2_agnssSETassisted;
   }

   /**
    * Singleton accessor method for ver2_agnssSETbased.
    */
   public static PosMethod ver2_agnssSETbased() {
      return _ver2_agnssSETbased;
   }

   /**
    * Singleton accessor method for ver2_agnssSETassistedpref.
    */
   public static PosMethod ver2_agnssSETassistedpref() {
      return _ver2_agnssSETassistedpref;
   }

   /**
    * Singleton accessor method for ver2_agnssSETbasedpref.
    */
   public static PosMethod ver2_agnssSETbasedpref() {
      return _ver2_agnssSETbasedpref;
   }

   /**
    * Singleton accessor method for ver2_autonomousGNSS.
    */
   public static PosMethod ver2_autonomousGNSS() {
      return _ver2_autonomousGNSS;
   }

   /**
    * Singleton accessor method for ver2_sessioninfoquery.
    */
   public static PosMethod ver2_sessioninfoquery() {
      return _ver2_sessioninfoquery;
   }

   /**
    * Singleton accessor method for ver2_mbs.
    */
   public static PosMethod ver2_mbs() {
      return _ver2_mbs;
   }

   /**
    * Singleton accessor method for ver2_NR_DL_TDOA.
    */
   public static PosMethod ver2_NR_DL_TDOA() {
      return _ver2_NR_DL_TDOA;
   }

   /**
    * Singleton accessor method for ver2_NR_DL_AoD.
    */
   public static PosMethod ver2_NR_DL_AoD() {
      return _ver2_NR_DL_AoD;
   }

   /**
    * Singleton accessor method for ver2_NR_Multi_RTT.
    */
   public static PosMethod ver2_NR_Multi_RTT() {
      return _ver2_NR_Multi_RTT;
   }

   /**
    * Singleton accessor method for ver2_NR_DL_E_CID.
    */
   public static PosMethod ver2_NR_DL_E_CID() {
      return _ver2_NR_DL_E_CID;
   }

   /**
    * Singleton accessor method for ver2_NR_UL_TDOA.
    */
   public static PosMethod ver2_NR_UL_TDOA() {
      return _ver2_NR_UL_TDOA;
   }

   /**
    * Singleton accessor method for ver2_NR_UL_AoA.
    */
   public static PosMethod ver2_NR_UL_AoA() {
      return _ver2_NR_UL_AoA;
   }

   /** Undefined value. */
   protected static PosMethod __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return PosMethod.valueOf( PosMethod.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static PosMethod valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return agpsSETassisted();
         case 1: return agpsSETbased();
         case 2: return agpsSETassistedpref();
         case 3: return agpsSETbasedpref();
         case 4: return autonomousGPS();
         case 5: return aflt();
         case 6: return ecid();
         case 7: return eotd();
         case 8: return otdoa();
         case 9: return noPosition();
         case 10: return ver2_historicalDataRetrieval();
         case 11: return ver2_agnssSETassisted();
         case 12: return ver2_agnssSETbased();
         case 13: return ver2_agnssSETassistedpref();
         case 14: return ver2_agnssSETbasedpref();
         case 15: return ver2_autonomousGNSS();
         case 16: return ver2_sessioninfoquery();
         case 17: return ver2_mbs();
         case 18: return ver2_NR_DL_TDOA();
         case 19: return ver2_NR_DL_AoD();
         case 20: return ver2_NR_Multi_RTT();
         case 21: return ver2_NR_DL_E_CID();
         case 22: return ver2_NR_UL_TDOA();
         case 23: return ver2_NR_UL_AoA();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         switch (ui) {
            case 0: ret = 10; break;
            case 1: ret = 11; break;
            case 2: ret = 12; break;
            case 3: ret = 13; break;
            case 4: ret = 14; break;
            case 5: ret = 15; break;
            case 6: ret = 16; break;
            case 7: ret = 17; break;
            case 8: ret = 18; break;
            case 9: ret = 19; break;
            case 10: ret = 20; break;
            case 11: ret = 21; break;
            case 12: ret = 22; break;
            case 13: ret = 23; break;
            default: ret = 0x7fffffff; break;
         }
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (10);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            case 3: ret =  3; break;
            case 4: ret =  4; break;
            case 5: ret =  5; break;
            case 6: ret =  6; break;
            case 7: ret =  7; break;
            case 8: ret =  8; break;
            case 9: ret =  9; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      boolean extbit = false;

      switch ((int)value) {
         case 0: ui = 0; /* agpsSETassisted */break;
         case 1: ui = 1; /* agpsSETbased */break;
         case 2: ui = 2; /* agpsSETassistedpref */break;
         case 3: ui = 3; /* agpsSETbasedpref */break;
         case 4: ui = 4; /* autonomousGPS */break;
         case 5: ui = 5; /* aflt */break;
         case 6: ui = 6; /* ecid */break;
         case 7: ui = 7; /* eotd */break;
         case 8: ui = 8; /* otdoa */break;
         case 9: ui = 9; /* noPosition */break;
         case 10: ui = 0; /* ver2_historicalDataRetrieval */extbit = true; break;
         case 11: ui = 1; /* ver2_agnssSETassisted */extbit = true; break;
         case 12: ui = 2; /* ver2_agnssSETbased */extbit = true; break;
         case 13: ui = 3; /* ver2_agnssSETassistedpref */extbit = true; break;
         case 14: ui = 4; /* ver2_agnssSETbasedpref */extbit = true; break;
         case 15: ui = 5; /* ver2_autonomousGNSS */extbit = true; break;
         case 16: ui = 6; /* ver2_sessioninfoquery */extbit = true; break;
         case 17: ui = 7; /* ver2_mbs */extbit = true; break;
         case 18: ui = 8; /* ver2_NR_DL_TDOA */extbit = true; break;
         case 19: ui = 9; /* ver2_NR_DL_AoD */extbit = true; break;
         case 20: ui = 10; /* ver2_NR_Multi_RTT */extbit = true; break;
         case 21: ui = 11; /* ver2_NR_DL_E_CID */extbit = true; break;
         case 22: ui = 12; /* ver2_NR_UL_TDOA */extbit = true; break;
         case 23: ui = 13; /* ver2_NR_UL_AoA */extbit = true; break;
         default:
            ui = (int) value;
            extbit = true;
      }

      buffer.encodeBit (extbit, "extbit");

      if (extbit) {
         buffer.encodeSmallNonNegWholeNumber (ui);
      }
      else {
         buffer.encodeConsWholeNumber (ui, 10);
      }
   }

}
