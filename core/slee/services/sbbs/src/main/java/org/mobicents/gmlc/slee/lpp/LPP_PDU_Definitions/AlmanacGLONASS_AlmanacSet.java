/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class AlmanacGLONASS_AlmanacSet extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "AlmanacGLONASS-AlmanacSet";
   }

   protected Asn1Integer gloAlm_NA;
   protected Asn1Integer gloAlmnA;
   protected Asn1Integer gloAlmHA;
   protected Asn1Integer gloAlmLambdaA;
   protected Asn1Integer gloAlmtlambdaA;
   protected Asn1Integer gloAlmDeltaIa;
   protected Asn1Integer gloAlmDeltaTA;
   protected Asn1Integer gloAlmDeltaTdotA;
   protected Asn1Integer gloAlmEpsilonA;
   protected Asn1Integer gloAlmOmegaA;
   protected Asn1Integer gloAlmTauA;
   protected Asn1Integer gloAlmCA;
   protected Asn1BitString gloAlmMA;  // optional
   protected Asn1OpenExt extElem1;

   public AlmanacGLONASS_AlmanacSet () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AlmanacGLONASS_AlmanacSet (
      Asn1Integer gloAlm_NA_,
      Asn1Integer gloAlmnA_,
      Asn1Integer gloAlmHA_,
      Asn1Integer gloAlmLambdaA_,
      Asn1Integer gloAlmtlambdaA_,
      Asn1Integer gloAlmDeltaIa_,
      Asn1Integer gloAlmDeltaTA_,
      Asn1Integer gloAlmDeltaTdotA_,
      Asn1Integer gloAlmEpsilonA_,
      Asn1Integer gloAlmOmegaA_,
      Asn1Integer gloAlmTauA_,
      Asn1Integer gloAlmCA_,
      Asn1BitString gloAlmMA_
   ) throws Asn1Exception {
      super();
      setGloAlm_NA (gloAlm_NA_);
      setGloAlmnA (gloAlmnA_);
      setGloAlmHA (gloAlmHA_);
      setGloAlmLambdaA (gloAlmLambdaA_);
      setGloAlmtlambdaA (gloAlmtlambdaA_);
      setGloAlmDeltaIa (gloAlmDeltaIa_);
      setGloAlmDeltaTA (gloAlmDeltaTA_);
      setGloAlmDeltaTdotA (gloAlmDeltaTdotA_);
      setGloAlmEpsilonA (gloAlmEpsilonA_);
      setGloAlmOmegaA (gloAlmOmegaA_);
      setGloAlmTauA (gloAlmTauA_);
      setGloAlmCA (gloAlmCA_);
      setGloAlmMA (gloAlmMA_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public AlmanacGLONASS_AlmanacSet (
      Asn1Integer gloAlm_NA_,
      Asn1Integer gloAlmnA_,
      Asn1Integer gloAlmHA_,
      Asn1Integer gloAlmLambdaA_,
      Asn1Integer gloAlmtlambdaA_,
      Asn1Integer gloAlmDeltaIa_,
      Asn1Integer gloAlmDeltaTA_,
      Asn1Integer gloAlmDeltaTdotA_,
      Asn1Integer gloAlmEpsilonA_,
      Asn1Integer gloAlmOmegaA_,
      Asn1Integer gloAlmTauA_,
      Asn1Integer gloAlmCA_
   ) throws Asn1Exception {
      super();
      setGloAlm_NA (gloAlm_NA_);
      setGloAlmnA (gloAlmnA_);
      setGloAlmHA (gloAlmHA_);
      setGloAlmLambdaA (gloAlmLambdaA_);
      setGloAlmtlambdaA (gloAlmtlambdaA_);
      setGloAlmDeltaIa (gloAlmDeltaIa_);
      setGloAlmDeltaTA (gloAlmDeltaTA_);
      setGloAlmDeltaTdotA (gloAlmDeltaTdotA_);
      setGloAlmEpsilonA (gloAlmEpsilonA_);
      setGloAlmOmegaA (gloAlmOmegaA_);
      setGloAlmTauA (gloAlmTauA_);
      setGloAlmCA (gloAlmCA_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AlmanacGLONASS_AlmanacSet (long gloAlm_NA_,
      long gloAlmnA_,
      long gloAlmHA_,
      long gloAlmLambdaA_,
      long gloAlmtlambdaA_,
      long gloAlmDeltaIa_,
      long gloAlmDeltaTA_,
      long gloAlmDeltaTdotA_,
      long gloAlmEpsilonA_,
      long gloAlmOmegaA_,
      long gloAlmTauA_,
      long gloAlmCA_,
      Asn1BitString gloAlmMA_
   ) throws Asn1Exception {
      super();
      setGloAlm_NA (gloAlm_NA_);
      setGloAlmnA (gloAlmnA_);
      setGloAlmHA (gloAlmHA_);
      setGloAlmLambdaA (gloAlmLambdaA_);
      setGloAlmtlambdaA (gloAlmtlambdaA_);
      setGloAlmDeltaIa (gloAlmDeltaIa_);
      setGloAlmDeltaTA (gloAlmDeltaTA_);
      setGloAlmDeltaTdotA (gloAlmDeltaTdotA_);
      setGloAlmEpsilonA (gloAlmEpsilonA_);
      setGloAlmOmegaA (gloAlmOmegaA_);
      setGloAlmTauA (gloAlmTauA_);
      setGloAlmCA (gloAlmCA_);
      setGloAlmMA (gloAlmMA_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public AlmanacGLONASS_AlmanacSet (
      long gloAlm_NA_,
      long gloAlmnA_,
      long gloAlmHA_,
      long gloAlmLambdaA_,
      long gloAlmtlambdaA_,
      long gloAlmDeltaIa_,
      long gloAlmDeltaTA_,
      long gloAlmDeltaTdotA_,
      long gloAlmEpsilonA_,
      long gloAlmOmegaA_,
      long gloAlmTauA_,
      long gloAlmCA_
   ) throws Asn1Exception {
      super();
      setGloAlm_NA (gloAlm_NA_);
      setGloAlmnA (gloAlmnA_);
      setGloAlmHA (gloAlmHA_);
      setGloAlmLambdaA (gloAlmLambdaA_);
      setGloAlmtlambdaA (gloAlmtlambdaA_);
      setGloAlmDeltaIa (gloAlmDeltaIa_);
      setGloAlmDeltaTA (gloAlmDeltaTA_);
      setGloAlmDeltaTdotA (gloAlmDeltaTdotA_);
      setGloAlmEpsilonA (gloAlmEpsilonA_);
      setGloAlmOmegaA (gloAlmOmegaA_);
      setGloAlmTauA (gloAlmTauA_);
      setGloAlmCA (gloAlmCA_);
   }

   public void init () {
      gloAlm_NA = null;
      gloAlmnA = null;
      gloAlmHA = null;
      gloAlmLambdaA = null;
      gloAlmtlambdaA = null;
      gloAlmDeltaIa = null;
      gloAlmDeltaTA = null;
      gloAlmDeltaTdotA = null;
      gloAlmEpsilonA = null;
      gloAlmOmegaA = null;
      gloAlmTauA = null;
      gloAlmCA = null;
      gloAlmMA = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof AlmanacGLONASS_AlmanacSet) ) return false;

      AlmanacGLONASS_AlmanacSet rhs = (AlmanacGLONASS_AlmanacSet) obj;

      if (gloAlm_NA == null) {
         if (rhs.gloAlm_NA != null) return false;
      }
      else {
         if (!gloAlm_NA.equals(rhs.gloAlm_NA)) {
            return false;
         }
      }

      if (gloAlmnA == null) {
         if (rhs.gloAlmnA != null) return false;
      }
      else {
         if (!gloAlmnA.equals(rhs.gloAlmnA)) {
            return false;
         }
      }

      if (gloAlmHA == null) {
         if (rhs.gloAlmHA != null) return false;
      }
      else {
         if (!gloAlmHA.equals(rhs.gloAlmHA)) {
            return false;
         }
      }

      if (gloAlmLambdaA == null) {
         if (rhs.gloAlmLambdaA != null) return false;
      }
      else {
         if (!gloAlmLambdaA.equals(rhs.gloAlmLambdaA)) {
            return false;
         }
      }

      if (gloAlmtlambdaA == null) {
         if (rhs.gloAlmtlambdaA != null) return false;
      }
      else {
         if (!gloAlmtlambdaA.equals(rhs.gloAlmtlambdaA)) {
            return false;
         }
      }

      if (gloAlmDeltaIa == null) {
         if (rhs.gloAlmDeltaIa != null) return false;
      }
      else {
         if (!gloAlmDeltaIa.equals(rhs.gloAlmDeltaIa)) {
            return false;
         }
      }

      if (gloAlmDeltaTA == null) {
         if (rhs.gloAlmDeltaTA != null) return false;
      }
      else {
         if (!gloAlmDeltaTA.equals(rhs.gloAlmDeltaTA)) {
            return false;
         }
      }

      if (gloAlmDeltaTdotA == null) {
         if (rhs.gloAlmDeltaTdotA != null) return false;
      }
      else {
         if (!gloAlmDeltaTdotA.equals(rhs.gloAlmDeltaTdotA)) {
            return false;
         }
      }

      if (gloAlmEpsilonA == null) {
         if (rhs.gloAlmEpsilonA != null) return false;
      }
      else {
         if (!gloAlmEpsilonA.equals(rhs.gloAlmEpsilonA)) {
            return false;
         }
      }

      if (gloAlmOmegaA == null) {
         if (rhs.gloAlmOmegaA != null) return false;
      }
      else {
         if (!gloAlmOmegaA.equals(rhs.gloAlmOmegaA)) {
            return false;
         }
      }

      if (gloAlmTauA == null) {
         if (rhs.gloAlmTauA != null) return false;
      }
      else {
         if (!gloAlmTauA.equals(rhs.gloAlmTauA)) {
            return false;
         }
      }

      if (gloAlmCA == null) {
         if (rhs.gloAlmCA != null) return false;
      }
      else {
         if (!gloAlmCA.equals(rhs.gloAlmCA)) {
            return false;
         }
      }

      if (gloAlmMA == null) {
         if (rhs.gloAlmMA != null) return false;
      }
      else {
         if (!gloAlmMA.equals(rhs.gloAlmMA)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gloAlm_NA != null) __code = 31*__code + gloAlm_NA.hashCode();
      if (gloAlmnA != null) __code = 31*__code + gloAlmnA.hashCode();
      if (gloAlmHA != null) __code = 31*__code + gloAlmHA.hashCode();
      if (gloAlmLambdaA != null) __code = 31*__code + gloAlmLambdaA.hashCode();
      if (gloAlmtlambdaA != null) __code = 31*__code + gloAlmtlambdaA.hashCode();
      if (gloAlmDeltaIa != null) __code = 31*__code + gloAlmDeltaIa.hashCode();
      if (gloAlmDeltaTA != null) __code = 31*__code + gloAlmDeltaTA.hashCode();
      if (gloAlmDeltaTdotA != null) __code = 31*__code + gloAlmDeltaTdotA.hashCode();
      if (gloAlmEpsilonA != null) __code = 31*__code + gloAlmEpsilonA.hashCode();
      if (gloAlmOmegaA != null) __code = 31*__code + gloAlmOmegaA.hashCode();
      if (gloAlmTauA != null) __code = 31*__code + gloAlmTauA.hashCode();
      if (gloAlmCA != null) __code = 31*__code + gloAlmCA.hashCode();
      if (gloAlmMA != null) __code = 31*__code + gloAlmMA.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for GloAlm_NA
    */
   public Asn1Integer getGloAlm_NA () {
      return gloAlm_NA;
   }

   public void setGloAlm_NA (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 1461))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloAlm_NA = value;
   }

   public void setGloAlm_NA (long value) 
      throws Asn1Exception
   {
      setGloAlm_NA (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloAlmnA
    */
   public Asn1Integer getGloAlmnA () {
      return gloAlmnA;
   }

   public void setGloAlmnA (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 24))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloAlmnA = value;
   }

   public void setGloAlmnA (long value) 
      throws Asn1Exception
   {
      setGloAlmnA (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloAlmHA
    */
   public Asn1Integer getGloAlmHA () {
      return gloAlmHA;
   }

   public void setGloAlmHA (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 31))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloAlmHA = value;
   }

   public void setGloAlmHA (long value) 
      throws Asn1Exception
   {
      setGloAlmHA (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloAlmLambdaA
    */
   public Asn1Integer getGloAlmLambdaA () {
      return gloAlmLambdaA;
   }

   public void setGloAlmLambdaA (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1048576 && value.value <= 1048575))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloAlmLambdaA = value;
   }

   public void setGloAlmLambdaA (long value) 
      throws Asn1Exception
   {
      setGloAlmLambdaA (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloAlmtlambdaA
    */
   public Asn1Integer getGloAlmtlambdaA () {
      return gloAlmtlambdaA;
   }

   public void setGloAlmtlambdaA (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 2097151))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloAlmtlambdaA = value;
   }

   public void setGloAlmtlambdaA (long value) 
      throws Asn1Exception
   {
      setGloAlmtlambdaA (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloAlmDeltaIa
    */
   public Asn1Integer getGloAlmDeltaIa () {
      return gloAlmDeltaIa;
   }

   public void setGloAlmDeltaIa (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -131072 && value.value <= 131071))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloAlmDeltaIa = value;
   }

   public void setGloAlmDeltaIa (long value) 
      throws Asn1Exception
   {
      setGloAlmDeltaIa (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloAlmDeltaTA
    */
   public Asn1Integer getGloAlmDeltaTA () {
      return gloAlmDeltaTA;
   }

   public void setGloAlmDeltaTA (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -2097152 && value.value <= 2097151))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloAlmDeltaTA = value;
   }

   public void setGloAlmDeltaTA (long value) 
      throws Asn1Exception
   {
      setGloAlmDeltaTA (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloAlmDeltaTdotA
    */
   public Asn1Integer getGloAlmDeltaTdotA () {
      return gloAlmDeltaTdotA;
   }

   public void setGloAlmDeltaTdotA (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -64 && value.value <= 63))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloAlmDeltaTdotA = value;
   }

   public void setGloAlmDeltaTdotA (long value) 
      throws Asn1Exception
   {
      setGloAlmDeltaTdotA (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloAlmEpsilonA
    */
   public Asn1Integer getGloAlmEpsilonA () {
      return gloAlmEpsilonA;
   }

   public void setGloAlmEpsilonA (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloAlmEpsilonA = value;
   }

   public void setGloAlmEpsilonA (long value) 
      throws Asn1Exception
   {
      setGloAlmEpsilonA (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloAlmOmegaA
    */
   public Asn1Integer getGloAlmOmegaA () {
      return gloAlmOmegaA;
   }

   public void setGloAlmOmegaA (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloAlmOmegaA = value;
   }

   public void setGloAlmOmegaA (long value) 
      throws Asn1Exception
   {
      setGloAlmOmegaA (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloAlmTauA
    */
   public Asn1Integer getGloAlmTauA () {
      return gloAlmTauA;
   }

   public void setGloAlmTauA (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -512 && value.value <= 511))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloAlmTauA = value;
   }

   public void setGloAlmTauA (long value) 
      throws Asn1Exception
   {
      setGloAlmTauA (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloAlmCA
    */
   public Asn1Integer getGloAlmCA () {
      return gloAlmCA;
   }

   public void setGloAlmCA (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloAlmCA = value;
   }

   public void setGloAlmCA (long value) 
      throws Asn1Exception
   {
      setGloAlmCA (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloAlmMA
    */
   public Asn1BitString getGloAlmMA () {
      return gloAlmMA;
   }

   public void setGloAlmMA (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 2)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.gloAlmMA = value;
   }

   public boolean hasGloAlmMA () {
      return (gloAlmMA != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gloAlm_NA;
         case 1: return gloAlmnA;
         case 2: return gloAlmHA;
         case 3: return gloAlmLambdaA;
         case 4: return gloAlmtlambdaA;
         case 5: return gloAlmDeltaIa;
         case 6: return gloAlmDeltaTA;
         case 7: return gloAlmDeltaTdotA;
         case 8: return gloAlmEpsilonA;
         case 9: return gloAlmOmegaA;
         case 10: return gloAlmTauA;
         case 11: return gloAlmCA;
         case 12: return gloAlmMA;
         case 13: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gloAlm-NA";
         case 1: return "gloAlmnA";
         case 2: return "gloAlmHA";
         case 3: return "gloAlmLambdaA";
         case 4: return "gloAlmtlambdaA";
         case 5: return "gloAlmDeltaIa";
         case 6: return "gloAlmDeltaTA";
         case 7: return "gloAlmDeltaTdotA";
         case 8: return "gloAlmEpsilonA";
         case 9: return "gloAlmOmegaA";
         case 10: return "gloAlmTauA";
         case 11: return "gloAlmCA";
         case 12: return "gloAlmMA";
         case 13: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean gloAlmMAPresent = buffer.decodeBit ("gloAlmMAPresent");

      // decode gloAlm_NA

      buffer.getContext().eventDispatcher.startElement("gloAlm_NA", -1);

      gloAlm_NA = new Asn1Integer();
      gloAlm_NA.decode (buffer, 1, 1461);
      buffer.getContext().eventDispatcher.endElement("gloAlm_NA", -1);

      // decode gloAlmnA

      buffer.getContext().eventDispatcher.startElement("gloAlmnA", -1);

      gloAlmnA = new Asn1Integer();
      gloAlmnA.decode (buffer, 1, 24);
      buffer.getContext().eventDispatcher.endElement("gloAlmnA", -1);

      // decode gloAlmHA

      buffer.getContext().eventDispatcher.startElement("gloAlmHA", -1);

      gloAlmHA = new Asn1Integer();
      gloAlmHA.decode (buffer, 0, 31);
      buffer.getContext().eventDispatcher.endElement("gloAlmHA", -1);

      // decode gloAlmLambdaA

      buffer.getContext().eventDispatcher.startElement("gloAlmLambdaA", -1);

      gloAlmLambdaA = new Asn1Integer();
      gloAlmLambdaA.decode (buffer, -1048576, 1048575);
      buffer.getContext().eventDispatcher.endElement("gloAlmLambdaA", -1);

      // decode gloAlmtlambdaA

      buffer.getContext().eventDispatcher.startElement("gloAlmtlambdaA", -1);

      gloAlmtlambdaA = new Asn1Integer();
      gloAlmtlambdaA.decode (buffer, 0, 2097151);
      buffer.getContext().eventDispatcher.endElement("gloAlmtlambdaA", -1);

      // decode gloAlmDeltaIa

      buffer.getContext().eventDispatcher.startElement("gloAlmDeltaIa", -1);

      gloAlmDeltaIa = new Asn1Integer();
      gloAlmDeltaIa.decode (buffer, -131072, 131071);
      buffer.getContext().eventDispatcher.endElement("gloAlmDeltaIa", -1);

      // decode gloAlmDeltaTA

      buffer.getContext().eventDispatcher.startElement("gloAlmDeltaTA", -1);

      gloAlmDeltaTA = new Asn1Integer();
      gloAlmDeltaTA.decode (buffer, -2097152, 2097151);
      buffer.getContext().eventDispatcher.endElement("gloAlmDeltaTA", -1);

      // decode gloAlmDeltaTdotA

      buffer.getContext().eventDispatcher.startElement("gloAlmDeltaTdotA", -1);

      gloAlmDeltaTdotA = new Asn1Integer();
      gloAlmDeltaTdotA.decode (buffer, -64, 63);
      buffer.getContext().eventDispatcher.endElement("gloAlmDeltaTdotA", -1);

      // decode gloAlmEpsilonA

      buffer.getContext().eventDispatcher.startElement("gloAlmEpsilonA", -1);

      gloAlmEpsilonA = new Asn1Integer();
      gloAlmEpsilonA.decode (buffer, 0, 32767);
      buffer.getContext().eventDispatcher.endElement("gloAlmEpsilonA", -1);

      // decode gloAlmOmegaA

      buffer.getContext().eventDispatcher.startElement("gloAlmOmegaA", -1);

      gloAlmOmegaA = new Asn1Integer();
      gloAlmOmegaA.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("gloAlmOmegaA", -1);

      // decode gloAlmTauA

      buffer.getContext().eventDispatcher.startElement("gloAlmTauA", -1);

      gloAlmTauA = new Asn1Integer();
      gloAlmTauA.decode (buffer, -512, 511);
      buffer.getContext().eventDispatcher.endElement("gloAlmTauA", -1);

      // decode gloAlmCA

      buffer.getContext().eventDispatcher.startElement("gloAlmCA", -1);

      gloAlmCA = new Asn1Integer();
      gloAlmCA.decode (buffer, 0, 1);
      buffer.getContext().eventDispatcher.endElement("gloAlmCA", -1);

      // decode gloAlmMA

      if (gloAlmMAPresent) {
         buffer.getContext().eventDispatcher.startElement("gloAlmMA", -1);

         gloAlmMA = new Asn1BitString();
         gloAlmMA.decode (buffer, 2, 2);
         buffer.getContext().eventDispatcher.endElement("gloAlmMA", -1);
      }
      else {
         gloAlmMA = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((gloAlmMA != null), null);

      // encode gloAlm_NA

      if (gloAlm_NA != null) {
         buffer.getContext().eventDispatcher.startElement("gloAlm_NA", -1);

         gloAlm_NA.encode (buffer, 1, 1461);

         buffer.getContext().eventDispatcher.endElement("gloAlm_NA", -1);
      }
      else throw new Asn1MissingRequiredException ("gloAlm_NA");

      // encode gloAlmnA

      if (gloAlmnA != null) {
         buffer.getContext().eventDispatcher.startElement("gloAlmnA", -1);

         gloAlmnA.encode (buffer, 1, 24);

         buffer.getContext().eventDispatcher.endElement("gloAlmnA", -1);
      }
      else throw new Asn1MissingRequiredException ("gloAlmnA");

      // encode gloAlmHA

      if (gloAlmHA != null) {
         buffer.getContext().eventDispatcher.startElement("gloAlmHA", -1);

         gloAlmHA.encode (buffer, 0, 31);

         buffer.getContext().eventDispatcher.endElement("gloAlmHA", -1);
      }
      else throw new Asn1MissingRequiredException ("gloAlmHA");

      // encode gloAlmLambdaA

      if (gloAlmLambdaA != null) {
         buffer.getContext().eventDispatcher.startElement("gloAlmLambdaA", -1);

         gloAlmLambdaA.encode (buffer, -1048576, 1048575);

         buffer.getContext().eventDispatcher.endElement("gloAlmLambdaA", -1);
      }
      else throw new Asn1MissingRequiredException ("gloAlmLambdaA");

      // encode gloAlmtlambdaA

      if (gloAlmtlambdaA != null) {
         buffer.getContext().eventDispatcher.startElement("gloAlmtlambdaA", -1);

         gloAlmtlambdaA.encode (buffer, 0, 2097151);

         buffer.getContext().eventDispatcher.endElement("gloAlmtlambdaA", -1);
      }
      else throw new Asn1MissingRequiredException ("gloAlmtlambdaA");

      // encode gloAlmDeltaIa

      if (gloAlmDeltaIa != null) {
         buffer.getContext().eventDispatcher.startElement("gloAlmDeltaIa", -1);

         gloAlmDeltaIa.encode (buffer, -131072, 131071);

         buffer.getContext().eventDispatcher.endElement("gloAlmDeltaIa", -1);
      }
      else throw new Asn1MissingRequiredException ("gloAlmDeltaIa");

      // encode gloAlmDeltaTA

      if (gloAlmDeltaTA != null) {
         buffer.getContext().eventDispatcher.startElement("gloAlmDeltaTA", -1);

         gloAlmDeltaTA.encode (buffer, -2097152, 2097151);

         buffer.getContext().eventDispatcher.endElement("gloAlmDeltaTA", -1);
      }
      else throw new Asn1MissingRequiredException ("gloAlmDeltaTA");

      // encode gloAlmDeltaTdotA

      if (gloAlmDeltaTdotA != null) {
         buffer.getContext().eventDispatcher.startElement("gloAlmDeltaTdotA", -1);

         gloAlmDeltaTdotA.encode (buffer, -64, 63);

         buffer.getContext().eventDispatcher.endElement("gloAlmDeltaTdotA", -1);
      }
      else throw new Asn1MissingRequiredException ("gloAlmDeltaTdotA");

      // encode gloAlmEpsilonA

      if (gloAlmEpsilonA != null) {
         buffer.getContext().eventDispatcher.startElement("gloAlmEpsilonA", -1);

         gloAlmEpsilonA.encode (buffer, 0, 32767);

         buffer.getContext().eventDispatcher.endElement("gloAlmEpsilonA", -1);
      }
      else throw new Asn1MissingRequiredException ("gloAlmEpsilonA");

      // encode gloAlmOmegaA

      if (gloAlmOmegaA != null) {
         buffer.getContext().eventDispatcher.startElement("gloAlmOmegaA", -1);

         gloAlmOmegaA.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("gloAlmOmegaA", -1);
      }
      else throw new Asn1MissingRequiredException ("gloAlmOmegaA");

      // encode gloAlmTauA

      if (gloAlmTauA != null) {
         buffer.getContext().eventDispatcher.startElement("gloAlmTauA", -1);

         gloAlmTauA.encode (buffer, -512, 511);

         buffer.getContext().eventDispatcher.endElement("gloAlmTauA", -1);
      }
      else throw new Asn1MissingRequiredException ("gloAlmTauA");

      // encode gloAlmCA

      if (gloAlmCA != null) {
         buffer.getContext().eventDispatcher.startElement("gloAlmCA", -1);

         gloAlmCA.encode (buffer, 0, 1);

         buffer.getContext().eventDispatcher.endElement("gloAlmCA", -1);
      }
      else throw new Asn1MissingRequiredException ("gloAlmCA");

      // encode gloAlmMA

      if (gloAlmMA != null) {
         buffer.getContext().eventDispatcher.startElement("gloAlmMA", -1);

         gloAlmMA.encode (buffer, 2, 2);

         buffer.getContext().eventDispatcher.endElement("gloAlmMA", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
