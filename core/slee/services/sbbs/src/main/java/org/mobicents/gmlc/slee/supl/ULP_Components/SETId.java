/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Components;

import com.objsys.asn1j.runtime.*;

public class SETId extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SETId";
   }

   // Choice element identifier constants
   public final static byte _MSISDN = 1;
   public final static byte _MDN = 2;
   public final static byte _MIN = 3;
   public final static byte _IMSI = 4;
   public final static byte _NAI = 5;
   public final static byte _IPADDRESS = 6;
   public final static byte _VER2_IMEI = 7;
   public final static byte _EXTELEM1 = 8;

   public SETId () {
      super();
   }

   public SETId (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _MSISDN: return "msisdn";
      case _MDN: return "mdn";
      case _MIN: return "min";
      case _IMSI: return "imsi";
      case _NAI: return "nai";
      case _IPADDRESS: return "iPAddress";
      case _VER2_IMEI: return "ver2_imei";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for msisdn
    */
   public Asn1OctetString getMsisdn () {
      return (choiceID == _MSISDN) ? (Asn1OctetString)element : null;
   }
   public void setMsisdn (Asn1OctetString value) {
      setElement (_MSISDN, value);
   }
   public boolean isMsisdn () {
      return (choiceID == _MSISDN);
   }

   /**
    * Accessor/mutator methods for mdn
    */
   public Asn1OctetString getMdn () {
      return (choiceID == _MDN) ? (Asn1OctetString)element : null;
   }
   public void setMdn (Asn1OctetString value) {
      setElement (_MDN, value);
   }
   public boolean isMdn () {
      return (choiceID == _MDN);
   }

   /**
    * Accessor/mutator methods for min
    */
   public Asn1BitString getMin () {
      return (choiceID == _MIN) ? (Asn1BitString)element : null;
   }
   public void setMin (Asn1BitString value) {
      setElement (_MIN, value);
   }
   public boolean isMin () {
      return (choiceID == _MIN);
   }

   /**
    * Accessor/mutator methods for imsi
    */
   public Asn1OctetString getImsi () {
      return (choiceID == _IMSI) ? (Asn1OctetString)element : null;
   }
   public void setImsi (Asn1OctetString value) {
      setElement (_IMSI, value);
   }
   public boolean isImsi () {
      return (choiceID == _IMSI);
   }

   /**
    * Accessor/mutator methods for nai
    */
   public Asn1IA5String getNai () {
      return (choiceID == _NAI) ? (Asn1IA5String)element : null;
   }
   public void setNai (Asn1IA5String value) {
      setElement (_NAI, value);
   }
   public boolean isNai () {
      return (choiceID == _NAI);
   }

   /**
    * Accessor/mutator methods for iPAddress
    */
   public IPAddress getIPAddress () {
      return (choiceID == _IPADDRESS) ? (IPAddress)element : null;
   }
   public void setIPAddress (IPAddress value) {
      setElement (_IPADDRESS, value);
   }
   public boolean isIPAddress () {
      return (choiceID == _IPADDRESS);
   }

   /**
    * Accessor/mutator methods for ver2_imei
    */
   public Asn1OctetString getVer2_imei () {
      return (choiceID == _VER2_IMEI) ? (Asn1OctetString)element : null;
   }
   public void setVer2_imei (Asn1OctetString value) {
      setElement (_VER2_IMEI, value);
   }
   public boolean isVer2_imei () {
      return (choiceID == _VER2_IMEI);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (6, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // msisdn
            case 0: { 
               Asn1OctetString msisdn;
               element = msisdn = new Asn1OctetString();
               msisdn.decode (buffer, 8, 8);
               break;
            }

            // mdn
            case 1: { 
               Asn1OctetString mdn;
               element = mdn = new Asn1OctetString();
               mdn.decode (buffer, 8, 8);
               break;
            }

            // min
            case 2: { 
               Asn1BitString min;
               element = min = new Asn1BitString();
               min.decode (buffer, 34, 34);
               break;
            }

            // imsi
            case 3: { 
               Asn1OctetString imsi;
               element = imsi = new Asn1OctetString();
               imsi.decode (buffer, 8, 8);
               break;
            }

            // nai
            case 4: { 
               Asn1IA5String nai;
               element = nai = new Asn1IA5String();
               nai.decode (buffer, (Asn1CharSet)null, 1, 1000);
               break;
            }

            // iPAddress
            case 5: { 
               IPAddress iPAddress;
               element = iPAddress = new IPAddress();
               iPAddress.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 7;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // ver2_imei
            case 0: { 
               Asn1OctetString ver2_imei;
               element = ver2_imei = new Asn1OctetString();
               ver2_imei.decode (buffer, 8, 8);
               break;
            }

            // extElem1
            case 1: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 6);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 6, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // msisdn
            case _MSISDN:
               Asn1OctetString msisdn = (Asn1OctetString) element;
               msisdn.encode (buffer, 8, 8);
               break;

            // mdn
            case _MDN:
               Asn1OctetString mdn = (Asn1OctetString) element;
               mdn.encode (buffer, 8, 8);
               break;

            // min
            case _MIN:
               Asn1BitString min = (Asn1BitString) element;
               min.encode (buffer, 34, 34);
               break;

            // imsi
            case _IMSI:
               Asn1OctetString imsi = (Asn1OctetString) element;
               imsi.encode (buffer, 8, 8);
               break;

            // nai
            case _NAI:
               Asn1IA5String nai = (Asn1IA5String) element;
               nai.encode (buffer, (Asn1CharSet)null, 1, 1000);
               break;

            // iPAddress
            case _IPADDRESS:
               IPAddress iPAddress = (IPAddress) element;
               iPAddress.encode (buffer);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 7);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1PerEncodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());
         Asn1OpenType openType;

         switch (choiceID) {
            // ver2_imei
            case _VER2_IMEI:
               Asn1OctetString ver2_imei = (Asn1OctetString) element;
               ver2_imei.encode (buffer, 8, 8);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            default:
               openType = (Asn1OpenType)getElement();
         }

         buffer = savedBuffer;
         if (openType != null) {
            buffer.byteAlign();
            openType.encode (buffer);
         }
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
