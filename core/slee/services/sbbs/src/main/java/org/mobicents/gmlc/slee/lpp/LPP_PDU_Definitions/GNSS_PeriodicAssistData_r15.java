/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_PeriodicAssistData_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-PeriodicAssistData-r15";
   }

   protected GNSS_PeriodicControlParam_r15 gnss_RTK_PeriodicObservations_r15;  // optional
   protected GNSS_PeriodicControlParam_r15 glo_RTK_PeriodicBiasInformation_r15;  // optional
   protected GNSS_PeriodicControlParam_r15 gnss_RTK_MAC_PeriodicCorrectionDifferences_r15;  // optional
   protected GNSS_PeriodicControlParam_r15 gnss_RTK_PeriodicResiduals_r15;  // optional
   protected GNSS_PeriodicControlParam_r15 gnss_RTK_FKP_PeriodicGradients_r15;  // optional
   protected GNSS_PeriodicControlParam_r15 gnss_SSR_PeriodicOrbitCorrections_r15;  // optional
   protected GNSS_PeriodicControlParam_r15 gnss_SSR_PeriodicClockCorrections_r15;  // optional
   protected GNSS_PeriodicControlParam_r15 gnss_SSR_PeriodicCodeBias_r15;  // optional
   protected GNSS_PeriodicControlParam_r15 gnss_SSR_PeriodicURA_r16;  // optional
   protected GNSS_PeriodicControlParam_r15 gnss_SSR_PeriodicPhaseBias_r16;  // optional
   protected GNSS_PeriodicControlParam_r15 gnss_SSR_PeriodicSTEC_Correction_r16;  // optional
   protected GNSS_PeriodicControlParam_r15 gnss_SSR_PeriodicGriddedCorrection_r16;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_PeriodicAssistData_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_PeriodicAssistData_r15 (
      GNSS_PeriodicControlParam_r15 gnss_RTK_PeriodicObservations_r15_,
      GNSS_PeriodicControlParam_r15 glo_RTK_PeriodicBiasInformation_r15_,
      GNSS_PeriodicControlParam_r15 gnss_RTK_MAC_PeriodicCorrectionDifferences_r15_,
      GNSS_PeriodicControlParam_r15 gnss_RTK_PeriodicResiduals_r15_,
      GNSS_PeriodicControlParam_r15 gnss_RTK_FKP_PeriodicGradients_r15_,
      GNSS_PeriodicControlParam_r15 gnss_SSR_PeriodicOrbitCorrections_r15_,
      GNSS_PeriodicControlParam_r15 gnss_SSR_PeriodicClockCorrections_r15_,
      GNSS_PeriodicControlParam_r15 gnss_SSR_PeriodicCodeBias_r15_,
      GNSS_PeriodicControlParam_r15 gnss_SSR_PeriodicURA_r16_,
      GNSS_PeriodicControlParam_r15 gnss_SSR_PeriodicPhaseBias_r16_,
      GNSS_PeriodicControlParam_r15 gnss_SSR_PeriodicSTEC_Correction_r16_,
      GNSS_PeriodicControlParam_r15 gnss_SSR_PeriodicGriddedCorrection_r16_
   ) {
      super();
      setGnss_RTK_PeriodicObservations_r15 (gnss_RTK_PeriodicObservations_r15_);
      setGlo_RTK_PeriodicBiasInformation_r15 (glo_RTK_PeriodicBiasInformation_r15_);
      setGnss_RTK_MAC_PeriodicCorrectionDifferences_r15 (gnss_RTK_MAC_PeriodicCorrectionDifferences_r15_);
      setGnss_RTK_PeriodicResiduals_r15 (gnss_RTK_PeriodicResiduals_r15_);
      setGnss_RTK_FKP_PeriodicGradients_r15 (gnss_RTK_FKP_PeriodicGradients_r15_);
      setGnss_SSR_PeriodicOrbitCorrections_r15 (gnss_SSR_PeriodicOrbitCorrections_r15_);
      setGnss_SSR_PeriodicClockCorrections_r15 (gnss_SSR_PeriodicClockCorrections_r15_);
      setGnss_SSR_PeriodicCodeBias_r15 (gnss_SSR_PeriodicCodeBias_r15_);
      setGnss_SSR_PeriodicURA_r16 (gnss_SSR_PeriodicURA_r16_);
      setGnss_SSR_PeriodicPhaseBias_r16 (gnss_SSR_PeriodicPhaseBias_r16_);
      setGnss_SSR_PeriodicSTEC_Correction_r16 (gnss_SSR_PeriodicSTEC_Correction_r16_);
      setGnss_SSR_PeriodicGriddedCorrection_r16 (gnss_SSR_PeriodicGriddedCorrection_r16_);
   }

   public void init () {
      gnss_RTK_PeriodicObservations_r15 = null;
      glo_RTK_PeriodicBiasInformation_r15 = null;
      gnss_RTK_MAC_PeriodicCorrectionDifferences_r15 = null;
      gnss_RTK_PeriodicResiduals_r15 = null;
      gnss_RTK_FKP_PeriodicGradients_r15 = null;
      gnss_SSR_PeriodicOrbitCorrections_r15 = null;
      gnss_SSR_PeriodicClockCorrections_r15 = null;
      gnss_SSR_PeriodicCodeBias_r15 = null;
      gnss_SSR_PeriodicURA_r16 = null;
      gnss_SSR_PeriodicPhaseBias_r16 = null;
      gnss_SSR_PeriodicSTEC_Correction_r16 = null;
      gnss_SSR_PeriodicGriddedCorrection_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_PeriodicAssistData_r15) ) return false;

      GNSS_PeriodicAssistData_r15 rhs = (GNSS_PeriodicAssistData_r15) obj;

      if (gnss_RTK_PeriodicObservations_r15 == null) {
         if (rhs.gnss_RTK_PeriodicObservations_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_PeriodicObservations_r15.equals(rhs.gnss_RTK_PeriodicObservations_r15)) {
            return false;
         }
      }

      if (glo_RTK_PeriodicBiasInformation_r15 == null) {
         if (rhs.glo_RTK_PeriodicBiasInformation_r15 != null) return false;
      }
      else {
         if (!glo_RTK_PeriodicBiasInformation_r15.equals(rhs.glo_RTK_PeriodicBiasInformation_r15)) {
            return false;
         }
      }

      if (gnss_RTK_MAC_PeriodicCorrectionDifferences_r15 == null) {
         if (rhs.gnss_RTK_MAC_PeriodicCorrectionDifferences_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_MAC_PeriodicCorrectionDifferences_r15.equals(rhs.gnss_RTK_MAC_PeriodicCorrectionDifferences_r15)) {
            return false;
         }
      }

      if (gnss_RTK_PeriodicResiduals_r15 == null) {
         if (rhs.gnss_RTK_PeriodicResiduals_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_PeriodicResiduals_r15.equals(rhs.gnss_RTK_PeriodicResiduals_r15)) {
            return false;
         }
      }

      if (gnss_RTK_FKP_PeriodicGradients_r15 == null) {
         if (rhs.gnss_RTK_FKP_PeriodicGradients_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_FKP_PeriodicGradients_r15.equals(rhs.gnss_RTK_FKP_PeriodicGradients_r15)) {
            return false;
         }
      }

      if (gnss_SSR_PeriodicOrbitCorrections_r15 == null) {
         if (rhs.gnss_SSR_PeriodicOrbitCorrections_r15 != null) return false;
      }
      else {
         if (!gnss_SSR_PeriodicOrbitCorrections_r15.equals(rhs.gnss_SSR_PeriodicOrbitCorrections_r15)) {
            return false;
         }
      }

      if (gnss_SSR_PeriodicClockCorrections_r15 == null) {
         if (rhs.gnss_SSR_PeriodicClockCorrections_r15 != null) return false;
      }
      else {
         if (!gnss_SSR_PeriodicClockCorrections_r15.equals(rhs.gnss_SSR_PeriodicClockCorrections_r15)) {
            return false;
         }
      }

      if (gnss_SSR_PeriodicCodeBias_r15 == null) {
         if (rhs.gnss_SSR_PeriodicCodeBias_r15 != null) return false;
      }
      else {
         if (!gnss_SSR_PeriodicCodeBias_r15.equals(rhs.gnss_SSR_PeriodicCodeBias_r15)) {
            return false;
         }
      }

      if (gnss_SSR_PeriodicURA_r16 == null) {
         if (rhs.gnss_SSR_PeriodicURA_r16 != null) return false;
      }
      else {
         if (!gnss_SSR_PeriodicURA_r16.equals(rhs.gnss_SSR_PeriodicURA_r16)) {
            return false;
         }
      }

      if (gnss_SSR_PeriodicPhaseBias_r16 == null) {
         if (rhs.gnss_SSR_PeriodicPhaseBias_r16 != null) return false;
      }
      else {
         if (!gnss_SSR_PeriodicPhaseBias_r16.equals(rhs.gnss_SSR_PeriodicPhaseBias_r16)) {
            return false;
         }
      }

      if (gnss_SSR_PeriodicSTEC_Correction_r16 == null) {
         if (rhs.gnss_SSR_PeriodicSTEC_Correction_r16 != null) return false;
      }
      else {
         if (!gnss_SSR_PeriodicSTEC_Correction_r16.equals(rhs.gnss_SSR_PeriodicSTEC_Correction_r16)) {
            return false;
         }
      }

      if (gnss_SSR_PeriodicGriddedCorrection_r16 == null) {
         if (rhs.gnss_SSR_PeriodicGriddedCorrection_r16 != null) return false;
      }
      else {
         if (!gnss_SSR_PeriodicGriddedCorrection_r16.equals(rhs.gnss_SSR_PeriodicGriddedCorrection_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gnss_RTK_PeriodicObservations_r15 != null) __code = 31*__code + gnss_RTK_PeriodicObservations_r15.hashCode();
      if (glo_RTK_PeriodicBiasInformation_r15 != null) __code = 31*__code + glo_RTK_PeriodicBiasInformation_r15.hashCode();
      if (gnss_RTK_MAC_PeriodicCorrectionDifferences_r15 != null) __code = 31*__code + gnss_RTK_MAC_PeriodicCorrectionDifferences_r15.hashCode();
      if (gnss_RTK_PeriodicResiduals_r15 != null) __code = 31*__code + gnss_RTK_PeriodicResiduals_r15.hashCode();
      if (gnss_RTK_FKP_PeriodicGradients_r15 != null) __code = 31*__code + gnss_RTK_FKP_PeriodicGradients_r15.hashCode();
      if (gnss_SSR_PeriodicOrbitCorrections_r15 != null) __code = 31*__code + gnss_SSR_PeriodicOrbitCorrections_r15.hashCode();
      if (gnss_SSR_PeriodicClockCorrections_r15 != null) __code = 31*__code + gnss_SSR_PeriodicClockCorrections_r15.hashCode();
      if (gnss_SSR_PeriodicCodeBias_r15 != null) __code = 31*__code + gnss_SSR_PeriodicCodeBias_r15.hashCode();
      if (gnss_SSR_PeriodicURA_r16 != null) __code = 31*__code + gnss_SSR_PeriodicURA_r16.hashCode();
      if (gnss_SSR_PeriodicPhaseBias_r16 != null) __code = 31*__code + gnss_SSR_PeriodicPhaseBias_r16.hashCode();
      if (gnss_SSR_PeriodicSTEC_Correction_r16 != null) __code = 31*__code + gnss_SSR_PeriodicSTEC_Correction_r16.hashCode();
      if (gnss_SSR_PeriodicGriddedCorrection_r16 != null) __code = 31*__code + gnss_SSR_PeriodicGriddedCorrection_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_PeriodicObservations_r15
    */
   public GNSS_PeriodicControlParam_r15 getGnss_RTK_PeriodicObservations_r15 () {
      return gnss_RTK_PeriodicObservations_r15;
   }

   public void setGnss_RTK_PeriodicObservations_r15 (GNSS_PeriodicControlParam_r15 value) {
      this.gnss_RTK_PeriodicObservations_r15 = value;
   }

   public boolean hasGnss_RTK_PeriodicObservations_r15 () {
      return (gnss_RTK_PeriodicObservations_r15 != null);
   }

   /**
    * Accessor/mutator methods for Glo_RTK_PeriodicBiasInformation_r15
    */
   public GNSS_PeriodicControlParam_r15 getGlo_RTK_PeriodicBiasInformation_r15 () {
      return glo_RTK_PeriodicBiasInformation_r15;
   }

   public void setGlo_RTK_PeriodicBiasInformation_r15 (GNSS_PeriodicControlParam_r15 value) {
      this.glo_RTK_PeriodicBiasInformation_r15 = value;
   }

   public boolean hasGlo_RTK_PeriodicBiasInformation_r15 () {
      return (glo_RTK_PeriodicBiasInformation_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_MAC_PeriodicCorrectionDifferences_r15
    */
   public GNSS_PeriodicControlParam_r15 getGnss_RTK_MAC_PeriodicCorrectionDifferences_r15 () {
      return gnss_RTK_MAC_PeriodicCorrectionDifferences_r15;
   }

   public void setGnss_RTK_MAC_PeriodicCorrectionDifferences_r15 (GNSS_PeriodicControlParam_r15 value) {
      this.gnss_RTK_MAC_PeriodicCorrectionDifferences_r15 = value;
   }

   public boolean hasGnss_RTK_MAC_PeriodicCorrectionDifferences_r15 () {
      return (gnss_RTK_MAC_PeriodicCorrectionDifferences_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_PeriodicResiduals_r15
    */
   public GNSS_PeriodicControlParam_r15 getGnss_RTK_PeriodicResiduals_r15 () {
      return gnss_RTK_PeriodicResiduals_r15;
   }

   public void setGnss_RTK_PeriodicResiduals_r15 (GNSS_PeriodicControlParam_r15 value) {
      this.gnss_RTK_PeriodicResiduals_r15 = value;
   }

   public boolean hasGnss_RTK_PeriodicResiduals_r15 () {
      return (gnss_RTK_PeriodicResiduals_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_FKP_PeriodicGradients_r15
    */
   public GNSS_PeriodicControlParam_r15 getGnss_RTK_FKP_PeriodicGradients_r15 () {
      return gnss_RTK_FKP_PeriodicGradients_r15;
   }

   public void setGnss_RTK_FKP_PeriodicGradients_r15 (GNSS_PeriodicControlParam_r15 value) {
      this.gnss_RTK_FKP_PeriodicGradients_r15 = value;
   }

   public boolean hasGnss_RTK_FKP_PeriodicGradients_r15 () {
      return (gnss_RTK_FKP_PeriodicGradients_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_PeriodicOrbitCorrections_r15
    */
   public GNSS_PeriodicControlParam_r15 getGnss_SSR_PeriodicOrbitCorrections_r15 () {
      return gnss_SSR_PeriodicOrbitCorrections_r15;
   }

   public void setGnss_SSR_PeriodicOrbitCorrections_r15 (GNSS_PeriodicControlParam_r15 value) {
      this.gnss_SSR_PeriodicOrbitCorrections_r15 = value;
   }

   public boolean hasGnss_SSR_PeriodicOrbitCorrections_r15 () {
      return (gnss_SSR_PeriodicOrbitCorrections_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_PeriodicClockCorrections_r15
    */
   public GNSS_PeriodicControlParam_r15 getGnss_SSR_PeriodicClockCorrections_r15 () {
      return gnss_SSR_PeriodicClockCorrections_r15;
   }

   public void setGnss_SSR_PeriodicClockCorrections_r15 (GNSS_PeriodicControlParam_r15 value) {
      this.gnss_SSR_PeriodicClockCorrections_r15 = value;
   }

   public boolean hasGnss_SSR_PeriodicClockCorrections_r15 () {
      return (gnss_SSR_PeriodicClockCorrections_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_PeriodicCodeBias_r15
    */
   public GNSS_PeriodicControlParam_r15 getGnss_SSR_PeriodicCodeBias_r15 () {
      return gnss_SSR_PeriodicCodeBias_r15;
   }

   public void setGnss_SSR_PeriodicCodeBias_r15 (GNSS_PeriodicControlParam_r15 value) {
      this.gnss_SSR_PeriodicCodeBias_r15 = value;
   }

   public boolean hasGnss_SSR_PeriodicCodeBias_r15 () {
      return (gnss_SSR_PeriodicCodeBias_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_PeriodicURA_r16
    */
   public GNSS_PeriodicControlParam_r15 getGnss_SSR_PeriodicURA_r16 () {
      return gnss_SSR_PeriodicURA_r16;
   }

   public void setGnss_SSR_PeriodicURA_r16 (GNSS_PeriodicControlParam_r15 value) {
      this.gnss_SSR_PeriodicURA_r16 = value;
   }

   public boolean hasGnss_SSR_PeriodicURA_r16 () {
      return (gnss_SSR_PeriodicURA_r16 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_PeriodicPhaseBias_r16
    */
   public GNSS_PeriodicControlParam_r15 getGnss_SSR_PeriodicPhaseBias_r16 () {
      return gnss_SSR_PeriodicPhaseBias_r16;
   }

   public void setGnss_SSR_PeriodicPhaseBias_r16 (GNSS_PeriodicControlParam_r15 value) {
      this.gnss_SSR_PeriodicPhaseBias_r16 = value;
   }

   public boolean hasGnss_SSR_PeriodicPhaseBias_r16 () {
      return (gnss_SSR_PeriodicPhaseBias_r16 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_PeriodicSTEC_Correction_r16
    */
   public GNSS_PeriodicControlParam_r15 getGnss_SSR_PeriodicSTEC_Correction_r16 () {
      return gnss_SSR_PeriodicSTEC_Correction_r16;
   }

   public void setGnss_SSR_PeriodicSTEC_Correction_r16 (GNSS_PeriodicControlParam_r15 value) {
      this.gnss_SSR_PeriodicSTEC_Correction_r16 = value;
   }

   public boolean hasGnss_SSR_PeriodicSTEC_Correction_r16 () {
      return (gnss_SSR_PeriodicSTEC_Correction_r16 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_PeriodicGriddedCorrection_r16
    */
   public GNSS_PeriodicControlParam_r15 getGnss_SSR_PeriodicGriddedCorrection_r16 () {
      return gnss_SSR_PeriodicGriddedCorrection_r16;
   }

   public void setGnss_SSR_PeriodicGriddedCorrection_r16 (GNSS_PeriodicControlParam_r15 value) {
      this.gnss_SSR_PeriodicGriddedCorrection_r16 = value;
   }

   public boolean hasGnss_SSR_PeriodicGriddedCorrection_r16 () {
      return (gnss_SSR_PeriodicGriddedCorrection_r16 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 13; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gnss_RTK_PeriodicObservations_r15;
         case 1: return glo_RTK_PeriodicBiasInformation_r15;
         case 2: return gnss_RTK_MAC_PeriodicCorrectionDifferences_r15;
         case 3: return gnss_RTK_PeriodicResiduals_r15;
         case 4: return gnss_RTK_FKP_PeriodicGradients_r15;
         case 5: return gnss_SSR_PeriodicOrbitCorrections_r15;
         case 6: return gnss_SSR_PeriodicClockCorrections_r15;
         case 7: return gnss_SSR_PeriodicCodeBias_r15;
         case 8: return gnss_SSR_PeriodicURA_r16;
         case 9: return gnss_SSR_PeriodicPhaseBias_r16;
         case 10: return gnss_SSR_PeriodicSTEC_Correction_r16;
         case 11: return gnss_SSR_PeriodicGriddedCorrection_r16;
         case 12: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gnss-RTK-PeriodicObservations-r15";
         case 1: return "glo-RTK-PeriodicBiasInformation-r15";
         case 2: return "gnss-RTK-MAC-PeriodicCorrectionDifferences-r15";
         case 3: return "gnss-RTK-PeriodicResiduals-r15";
         case 4: return "gnss-RTK-FKP-PeriodicGradients-r15";
         case 5: return "gnss-SSR-PeriodicOrbitCorrections-r15";
         case 6: return "gnss-SSR-PeriodicClockCorrections-r15";
         case 7: return "gnss-SSR-PeriodicCodeBias-r15";
         case 8: return "gnss-SSR-PeriodicURA-r16";
         case 9: return "gnss-SSR-PeriodicPhaseBias-r16";
         case 10: return "gnss-SSR-PeriodicSTEC-Correction-r16";
         case 11: return "gnss-SSR-PeriodicGriddedCorrection-r16";
         case 12: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean gnss_RTK_PeriodicObservations_r15Present = buffer.decodeBit ("gnss_RTK_PeriodicObservations_r15Present");
      boolean glo_RTK_PeriodicBiasInformation_r15Present = buffer.decodeBit ("glo_RTK_PeriodicBiasInformation_r15Present");
      boolean gnss_RTK_MAC_PeriodicCorrectionDifferences_r15Present = buffer.decodeBit ("gnss_RTK_MAC_PeriodicCorrectionDifferences_r15Present");
      boolean gnss_RTK_PeriodicResiduals_r15Present = buffer.decodeBit ("gnss_RTK_PeriodicResiduals_r15Present");
      boolean gnss_RTK_FKP_PeriodicGradients_r15Present = buffer.decodeBit ("gnss_RTK_FKP_PeriodicGradients_r15Present");
      boolean gnss_SSR_PeriodicOrbitCorrections_r15Present = buffer.decodeBit ("gnss_SSR_PeriodicOrbitCorrections_r15Present");
      boolean gnss_SSR_PeriodicClockCorrections_r15Present = buffer.decodeBit ("gnss_SSR_PeriodicClockCorrections_r15Present");
      boolean gnss_SSR_PeriodicCodeBias_r15Present = buffer.decodeBit ("gnss_SSR_PeriodicCodeBias_r15Present");

      // decode gnss_RTK_PeriodicObservations_r15

      if (gnss_RTK_PeriodicObservations_r15Present) {
         buffer.getContext().eventDispatcher.startElement("gnss_RTK_PeriodicObservations_r15", -1);

         gnss_RTK_PeriodicObservations_r15 = new GNSS_PeriodicControlParam_r15();
         gnss_RTK_PeriodicObservations_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_RTK_PeriodicObservations_r15", -1);
      }
      else {
         gnss_RTK_PeriodicObservations_r15 = null;
      }

      // decode glo_RTK_PeriodicBiasInformation_r15

      if (glo_RTK_PeriodicBiasInformation_r15Present) {
         buffer.getContext().eventDispatcher.startElement("glo_RTK_PeriodicBiasInformation_r15", -1);

         glo_RTK_PeriodicBiasInformation_r15 = new GNSS_PeriodicControlParam_r15();
         glo_RTK_PeriodicBiasInformation_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("glo_RTK_PeriodicBiasInformation_r15", -1);
      }
      else {
         glo_RTK_PeriodicBiasInformation_r15 = null;
      }

      // decode gnss_RTK_MAC_PeriodicCorrectionDifferences_r15

      if (gnss_RTK_MAC_PeriodicCorrectionDifferences_r15Present) {
         buffer.getContext().eventDispatcher.startElement("gnss_RTK_MAC_PeriodicCorrectionDifferences_r15", -1);

         gnss_RTK_MAC_PeriodicCorrectionDifferences_r15 = new GNSS_PeriodicControlParam_r15();
         gnss_RTK_MAC_PeriodicCorrectionDifferences_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_RTK_MAC_PeriodicCorrectionDifferences_r15", -1);
      }
      else {
         gnss_RTK_MAC_PeriodicCorrectionDifferences_r15 = null;
      }

      // decode gnss_RTK_PeriodicResiduals_r15

      if (gnss_RTK_PeriodicResiduals_r15Present) {
         buffer.getContext().eventDispatcher.startElement("gnss_RTK_PeriodicResiduals_r15", -1);

         gnss_RTK_PeriodicResiduals_r15 = new GNSS_PeriodicControlParam_r15();
         gnss_RTK_PeriodicResiduals_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_RTK_PeriodicResiduals_r15", -1);
      }
      else {
         gnss_RTK_PeriodicResiduals_r15 = null;
      }

      // decode gnss_RTK_FKP_PeriodicGradients_r15

      if (gnss_RTK_FKP_PeriodicGradients_r15Present) {
         buffer.getContext().eventDispatcher.startElement("gnss_RTK_FKP_PeriodicGradients_r15", -1);

         gnss_RTK_FKP_PeriodicGradients_r15 = new GNSS_PeriodicControlParam_r15();
         gnss_RTK_FKP_PeriodicGradients_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_RTK_FKP_PeriodicGradients_r15", -1);
      }
      else {
         gnss_RTK_FKP_PeriodicGradients_r15 = null;
      }

      // decode gnss_SSR_PeriodicOrbitCorrections_r15

      if (gnss_SSR_PeriodicOrbitCorrections_r15Present) {
         buffer.getContext().eventDispatcher.startElement("gnss_SSR_PeriodicOrbitCorrections_r15", -1);

         gnss_SSR_PeriodicOrbitCorrections_r15 = new GNSS_PeriodicControlParam_r15();
         gnss_SSR_PeriodicOrbitCorrections_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_SSR_PeriodicOrbitCorrections_r15", -1);
      }
      else {
         gnss_SSR_PeriodicOrbitCorrections_r15 = null;
      }

      // decode gnss_SSR_PeriodicClockCorrections_r15

      if (gnss_SSR_PeriodicClockCorrections_r15Present) {
         buffer.getContext().eventDispatcher.startElement("gnss_SSR_PeriodicClockCorrections_r15", -1);

         gnss_SSR_PeriodicClockCorrections_r15 = new GNSS_PeriodicControlParam_r15();
         gnss_SSR_PeriodicClockCorrections_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_SSR_PeriodicClockCorrections_r15", -1);
      }
      else {
         gnss_SSR_PeriodicClockCorrections_r15 = null;
      }

      // decode gnss_SSR_PeriodicCodeBias_r15

      if (gnss_SSR_PeriodicCodeBias_r15Present) {
         buffer.getContext().eventDispatcher.startElement("gnss_SSR_PeriodicCodeBias_r15", -1);

         gnss_SSR_PeriodicCodeBias_r15 = new GNSS_PeriodicControlParam_r15();
         gnss_SSR_PeriodicCodeBias_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_SSR_PeriodicCodeBias_r15", -1);
      }
      else {
         gnss_SSR_PeriodicCodeBias_r15 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_PeriodicURA_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_PeriodicPhaseBias_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_PeriodicSTEC_Correction_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_PeriodicGriddedCorrection_r16Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode gnss_SSR_PeriodicURA_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_PeriodicURA_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_PeriodicURA_r16 = new GNSS_PeriodicControlParam_r15();
            gnss_SSR_PeriodicURA_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_PeriodicURA_r16", -1);

         }
         else {
            gnss_SSR_PeriodicURA_r16 = null;
         }

         // decode gnss_SSR_PeriodicPhaseBias_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_PeriodicPhaseBias_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_PeriodicPhaseBias_r16 = new GNSS_PeriodicControlParam_r15();
            gnss_SSR_PeriodicPhaseBias_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_PeriodicPhaseBias_r16", -1);

         }
         else {
            gnss_SSR_PeriodicPhaseBias_r16 = null;
         }

         // decode gnss_SSR_PeriodicSTEC_Correction_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_PeriodicSTEC_Correction_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_PeriodicSTEC_Correction_r16 = new GNSS_PeriodicControlParam_r15();
            gnss_SSR_PeriodicSTEC_Correction_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_PeriodicSTEC_Correction_r16", -1);

         }
         else {
            gnss_SSR_PeriodicSTEC_Correction_r16 = null;
         }

         // decode gnss_SSR_PeriodicGriddedCorrection_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_PeriodicGriddedCorrection_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_PeriodicGriddedCorrection_r16 = new GNSS_PeriodicControlParam_r15();
            gnss_SSR_PeriodicGriddedCorrection_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_PeriodicGriddedCorrection_r16", -1);

         }
         else {
            gnss_SSR_PeriodicGriddedCorrection_r16 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((gnss_SSR_PeriodicURA_r16 != null) ||
      (gnss_SSR_PeriodicPhaseBias_r16 != null) ||
      (gnss_SSR_PeriodicSTEC_Correction_r16 != null) ||
      (gnss_SSR_PeriodicGriddedCorrection_r16 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((gnss_RTK_PeriodicObservations_r15 != null), null);
      buffer.encodeBit ((glo_RTK_PeriodicBiasInformation_r15 != null), null);
      buffer.encodeBit ((gnss_RTK_MAC_PeriodicCorrectionDifferences_r15 != null), null);
      buffer.encodeBit ((gnss_RTK_PeriodicResiduals_r15 != null), null);
      buffer.encodeBit ((gnss_RTK_FKP_PeriodicGradients_r15 != null), null);
      buffer.encodeBit ((gnss_SSR_PeriodicOrbitCorrections_r15 != null), null);
      buffer.encodeBit ((gnss_SSR_PeriodicClockCorrections_r15 != null), null);
      buffer.encodeBit ((gnss_SSR_PeriodicCodeBias_r15 != null), null);

      // encode gnss_RTK_PeriodicObservations_r15

      if (gnss_RTK_PeriodicObservations_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_RTK_PeriodicObservations_r15", -1);

         gnss_RTK_PeriodicObservations_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_RTK_PeriodicObservations_r15", -1);
      }

      // encode glo_RTK_PeriodicBiasInformation_r15

      if (glo_RTK_PeriodicBiasInformation_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("glo_RTK_PeriodicBiasInformation_r15", -1);

         glo_RTK_PeriodicBiasInformation_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("glo_RTK_PeriodicBiasInformation_r15", -1);
      }

      // encode gnss_RTK_MAC_PeriodicCorrectionDifferences_r15

      if (gnss_RTK_MAC_PeriodicCorrectionDifferences_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_RTK_MAC_PeriodicCorrectionDifferences_r15", -1);

         gnss_RTK_MAC_PeriodicCorrectionDifferences_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_RTK_MAC_PeriodicCorrectionDifferences_r15", -1);
      }

      // encode gnss_RTK_PeriodicResiduals_r15

      if (gnss_RTK_PeriodicResiduals_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_RTK_PeriodicResiduals_r15", -1);

         gnss_RTK_PeriodicResiduals_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_RTK_PeriodicResiduals_r15", -1);
      }

      // encode gnss_RTK_FKP_PeriodicGradients_r15

      if (gnss_RTK_FKP_PeriodicGradients_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_RTK_FKP_PeriodicGradients_r15", -1);

         gnss_RTK_FKP_PeriodicGradients_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_RTK_FKP_PeriodicGradients_r15", -1);
      }

      // encode gnss_SSR_PeriodicOrbitCorrections_r15

      if (gnss_SSR_PeriodicOrbitCorrections_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_SSR_PeriodicOrbitCorrections_r15", -1);

         gnss_SSR_PeriodicOrbitCorrections_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_SSR_PeriodicOrbitCorrections_r15", -1);
      }

      // encode gnss_SSR_PeriodicClockCorrections_r15

      if (gnss_SSR_PeriodicClockCorrections_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_SSR_PeriodicClockCorrections_r15", -1);

         gnss_SSR_PeriodicClockCorrections_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_SSR_PeriodicClockCorrections_r15", -1);
      }

      // encode gnss_SSR_PeriodicCodeBias_r15

      if (gnss_SSR_PeriodicCodeBias_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_SSR_PeriodicCodeBias_r15", -1);

         gnss_SSR_PeriodicCodeBias_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_SSR_PeriodicCodeBias_r15", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 4;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((gnss_SSR_PeriodicURA_r16 != null), null);
         buffer.encodeBit ((gnss_SSR_PeriodicPhaseBias_r16 != null), null);
         buffer.encodeBit ((gnss_SSR_PeriodicSTEC_Correction_r16 != null), null);
         buffer.encodeBit ((gnss_SSR_PeriodicGriddedCorrection_r16 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // gnss_SSR_PeriodicURA_r16

         if (gnss_SSR_PeriodicURA_r16 != null) {
            buffer.reset();
            gnss_SSR_PeriodicURA_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_PeriodicURA_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_PeriodicURA_r16", -1);
         }

         // gnss_SSR_PeriodicPhaseBias_r16

         if (gnss_SSR_PeriodicPhaseBias_r16 != null) {
            buffer.reset();
            gnss_SSR_PeriodicPhaseBias_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_PeriodicPhaseBias_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_PeriodicPhaseBias_r16", -1);
         }

         // gnss_SSR_PeriodicSTEC_Correction_r16

         if (gnss_SSR_PeriodicSTEC_Correction_r16 != null) {
            buffer.reset();
            gnss_SSR_PeriodicSTEC_Correction_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_PeriodicSTEC_Correction_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_PeriodicSTEC_Correction_r16", -1);
         }

         // gnss_SSR_PeriodicGriddedCorrection_r16

         if (gnss_SSR_PeriodicGriddedCorrection_r16 != null) {
            buffer.reset();
            gnss_SSR_PeriodicGriddedCorrection_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_PeriodicGriddedCorrection_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_PeriodicGriddedCorrection_r16", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
