/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class StoredNavListInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "StoredNavListInfo";
   }

   protected Asn1Integer gnss_WeekOrDay;
   protected Asn1Integer gnss_Toe;
   protected Asn1Integer t_toeLimit;
   protected SatListRelatedDataList satListRelatedDataList;  // optional
   protected Asn1OpenExt extElem1;

   public StoredNavListInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public StoredNavListInfo (
      Asn1Integer gnss_WeekOrDay_,
      Asn1Integer gnss_Toe_,
      Asn1Integer t_toeLimit_,
      SatListRelatedDataList satListRelatedDataList_
   ) throws Asn1Exception {
      super();
      setGnss_WeekOrDay (gnss_WeekOrDay_);
      setGnss_Toe (gnss_Toe_);
      setT_toeLimit (t_toeLimit_);
      setSatListRelatedDataList (satListRelatedDataList_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public StoredNavListInfo (
      Asn1Integer gnss_WeekOrDay_,
      Asn1Integer gnss_Toe_,
      Asn1Integer t_toeLimit_
   ) throws Asn1Exception {
      super();
      setGnss_WeekOrDay (gnss_WeekOrDay_);
      setGnss_Toe (gnss_Toe_);
      setT_toeLimit (t_toeLimit_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public StoredNavListInfo (long gnss_WeekOrDay_,
      long gnss_Toe_,
      long t_toeLimit_,
      SatListRelatedDataList satListRelatedDataList_
   ) throws Asn1Exception {
      super();
      setGnss_WeekOrDay (gnss_WeekOrDay_);
      setGnss_Toe (gnss_Toe_);
      setT_toeLimit (t_toeLimit_);
      setSatListRelatedDataList (satListRelatedDataList_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public StoredNavListInfo (
      long gnss_WeekOrDay_,
      long gnss_Toe_,
      long t_toeLimit_
   ) throws Asn1Exception {
      super();
      setGnss_WeekOrDay (gnss_WeekOrDay_);
      setGnss_Toe (gnss_Toe_);
      setT_toeLimit (t_toeLimit_);
   }

   public void init () {
      gnss_WeekOrDay = null;
      gnss_Toe = null;
      t_toeLimit = null;
      satListRelatedDataList = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof StoredNavListInfo) ) return false;

      StoredNavListInfo rhs = (StoredNavListInfo) obj;

      if (gnss_WeekOrDay == null) {
         if (rhs.gnss_WeekOrDay != null) return false;
      }
      else {
         if (!gnss_WeekOrDay.equals(rhs.gnss_WeekOrDay)) {
            return false;
         }
      }

      if (gnss_Toe == null) {
         if (rhs.gnss_Toe != null) return false;
      }
      else {
         if (!gnss_Toe.equals(rhs.gnss_Toe)) {
            return false;
         }
      }

      if (t_toeLimit == null) {
         if (rhs.t_toeLimit != null) return false;
      }
      else {
         if (!t_toeLimit.equals(rhs.t_toeLimit)) {
            return false;
         }
      }

      if (satListRelatedDataList == null) {
         if (rhs.satListRelatedDataList != null) return false;
      }
      else {
         if (!satListRelatedDataList.equals(rhs.satListRelatedDataList)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gnss_WeekOrDay != null) __code = 31*__code + gnss_WeekOrDay.hashCode();
      if (gnss_Toe != null) __code = 31*__code + gnss_Toe.hashCode();
      if (t_toeLimit != null) __code = 31*__code + t_toeLimit.hashCode();
      if (satListRelatedDataList != null) __code = 31*__code + satListRelatedDataList.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Gnss_WeekOrDay
    */
   public Asn1Integer getGnss_WeekOrDay () {
      return gnss_WeekOrDay;
   }

   public void setGnss_WeekOrDay (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gnss_WeekOrDay = value;
   }

   public void setGnss_WeekOrDay (long value) 
      throws Asn1Exception
   {
      setGnss_WeekOrDay (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Gnss_Toe
    */
   public Asn1Integer getGnss_Toe () {
      return gnss_Toe;
   }

   public void setGnss_Toe (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gnss_Toe = value;
   }

   public void setGnss_Toe (long value) 
      throws Asn1Exception
   {
      setGnss_Toe (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for T_toeLimit
    */
   public Asn1Integer getT_toeLimit () {
      return t_toeLimit;
   }

   public void setT_toeLimit (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.t_toeLimit = value;
   }

   public void setT_toeLimit (long value) 
      throws Asn1Exception
   {
      setT_toeLimit (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SatListRelatedDataList
    */
   public SatListRelatedDataList getSatListRelatedDataList () {
      return satListRelatedDataList;
   }

   public void setSatListRelatedDataList (SatListRelatedDataList value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 64))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.satListRelatedDataList = value;
   }

   public boolean hasSatListRelatedDataList () {
      return (satListRelatedDataList != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gnss_WeekOrDay;
         case 1: return gnss_Toe;
         case 2: return t_toeLimit;
         case 3: return satListRelatedDataList;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gnss-WeekOrDay";
         case 1: return "gnss-Toe";
         case 2: return "t-toeLimit";
         case 3: return "satListRelatedDataList";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean satListRelatedDataListPresent = buffer.decodeBit ("satListRelatedDataListPresent");

      // decode gnss_WeekOrDay

      buffer.getContext().eventDispatcher.startElement("gnss_WeekOrDay", -1);

      gnss_WeekOrDay = new Asn1Integer();
      gnss_WeekOrDay.decode (buffer, 0, 4095);
      buffer.getContext().eventDispatcher.endElement("gnss_WeekOrDay", -1);

      // decode gnss_Toe

      buffer.getContext().eventDispatcher.startElement("gnss_Toe", -1);

      gnss_Toe = new Asn1Integer();
      gnss_Toe.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("gnss_Toe", -1);

      // decode t_toeLimit

      buffer.getContext().eventDispatcher.startElement("t_toeLimit", -1);

      t_toeLimit = new Asn1Integer();
      t_toeLimit.decode (buffer, 0, 15);
      buffer.getContext().eventDispatcher.endElement("t_toeLimit", -1);

      // decode satListRelatedDataList

      if (satListRelatedDataListPresent) {
         buffer.getContext().eventDispatcher.startElement("satListRelatedDataList", -1);

         satListRelatedDataList = new SatListRelatedDataList();
         satListRelatedDataList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("satListRelatedDataList", -1);
      }
      else {
         satListRelatedDataList = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((satListRelatedDataList != null), null);

      // encode gnss_WeekOrDay

      if (gnss_WeekOrDay != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_WeekOrDay", -1);

         gnss_WeekOrDay.encode (buffer, 0, 4095);

         buffer.getContext().eventDispatcher.endElement("gnss_WeekOrDay", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_WeekOrDay");

      // encode gnss_Toe

      if (gnss_Toe != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_Toe", -1);

         gnss_Toe.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("gnss_Toe", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_Toe");

      // encode t_toeLimit

      if (t_toeLimit != null) {
         buffer.getContext().eventDispatcher.startElement("t_toeLimit", -1);

         t_toeLimit.encode (buffer, 0, 15);

         buffer.getContext().eventDispatcher.endElement("t_toeLimit", -1);
      }
      else throw new Asn1MissingRequiredException ("t_toeLimit");

      // encode satListRelatedDataList

      if (satListRelatedDataList != null) {
         buffer.getContext().eventDispatcher.startElement("satListRelatedDataList", -1);

         satListRelatedDataList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("satListRelatedDataList", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
