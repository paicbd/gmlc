/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Version_2_message_extensions;

import com.objsys.asn1j.runtime.*;

public class BasicProtectionParams extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_Version_2_message_extensionsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_Version_2_message_extensionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "BasicProtectionParams";
   }

   protected Asn1OctetString keyIdentifier;
   protected Asn1Integer basicReplayCounter;
   protected Asn1BitString basicMAC;
   protected Asn1OpenExt extElem1;

   public BasicProtectionParams () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BasicProtectionParams (
      Asn1OctetString keyIdentifier_,
      Asn1Integer basicReplayCounter_,
      Asn1BitString basicMAC_
   ) throws Asn1Exception {
      super();
      setKeyIdentifier (keyIdentifier_);
      setBasicReplayCounter (basicReplayCounter_);
      setBasicMAC (basicMAC_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public BasicProtectionParams (byte[] keyIdentifier_,
      long basicReplayCounter_,
      Asn1BitString basicMAC_
   ) throws Asn1Exception {
      super();
      setKeyIdentifier (keyIdentifier_);
      setBasicReplayCounter (basicReplayCounter_);
      setBasicMAC (basicMAC_);
   }

   public void init () {
      keyIdentifier = null;
      basicReplayCounter = null;
      basicMAC = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof BasicProtectionParams) ) return false;

      BasicProtectionParams rhs = (BasicProtectionParams) obj;

      if (keyIdentifier == null) {
         if (rhs.keyIdentifier != null) return false;
      }
      else {
         if (!keyIdentifier.equals(rhs.keyIdentifier)) {
            return false;
         }
      }

      if (basicReplayCounter == null) {
         if (rhs.basicReplayCounter != null) return false;
      }
      else {
         if (!basicReplayCounter.equals(rhs.basicReplayCounter)) {
            return false;
         }
      }

      if (basicMAC == null) {
         if (rhs.basicMAC != null) return false;
      }
      else {
         if (!basicMAC.equals(rhs.basicMAC)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (keyIdentifier != null) __code = 31*__code + keyIdentifier.hashCode();
      if (basicReplayCounter != null) __code = 31*__code + basicReplayCounter.hashCode();
      if (basicMAC != null) __code = 31*__code + basicMAC.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for KeyIdentifier
    */
   public Asn1OctetString getKeyIdentifier () {
      return keyIdentifier;
   }

   public void setKeyIdentifier (Asn1OctetString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 8)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.keyIdentifier = value;
   }

   public void setKeyIdentifier (byte[] value) 
      throws Asn1Exception
   {
      setKeyIdentifier (new Asn1OctetString(value));
   }

   /**
    * Accessor/mutator methods for BasicReplayCounter
    */
   public Asn1Integer getBasicReplayCounter () {
      return basicReplayCounter;
   }

   public void setBasicReplayCounter (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.basicReplayCounter = value;
   }

   public void setBasicReplayCounter (long value) 
      throws Asn1Exception
   {
      setBasicReplayCounter (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for BasicMAC
    */
   public Asn1BitString getBasicMAC () {
      return basicMAC;
   }

   public void setBasicMAC (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 32)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.basicMAC = value;
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return keyIdentifier;
         case 1: return basicReplayCounter;
         case 2: return basicMAC;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "keyIdentifier";
         case 1: return "basicReplayCounter";
         case 2: return "basicMAC";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode keyIdentifier

      buffer.getContext().eventDispatcher.startElement("keyIdentifier", -1);

      keyIdentifier = new Asn1OctetString();
      keyIdentifier.decode (buffer, 8, 8);
      buffer.getContext().eventDispatcher.endElement("keyIdentifier", -1);

      // decode basicReplayCounter

      buffer.getContext().eventDispatcher.startElement("basicReplayCounter", -1);

      basicReplayCounter = new Asn1Integer();
      basicReplayCounter.decode (buffer, 0, 65535);
      buffer.getContext().eventDispatcher.endElement("basicReplayCounter", -1);

      // decode basicMAC

      buffer.getContext().eventDispatcher.startElement("basicMAC", -1);

      basicMAC = new Asn1BitString();
      basicMAC.decode (buffer, 32, 32);
      buffer.getContext().eventDispatcher.endElement("basicMAC", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode keyIdentifier

      if (keyIdentifier != null) {
         buffer.getContext().eventDispatcher.startElement("keyIdentifier", -1);

         keyIdentifier.encode (buffer, 8, 8);

         buffer.getContext().eventDispatcher.endElement("keyIdentifier", -1);
      }
      else throw new Asn1MissingRequiredException ("keyIdentifier");

      // encode basicReplayCounter

      if (basicReplayCounter != null) {
         buffer.getContext().eventDispatcher.startElement("basicReplayCounter", -1);

         basicReplayCounter.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("basicReplayCounter", -1);
      }
      else throw new Asn1MissingRequiredException ("basicReplayCounter");

      // encode basicMAC

      if (basicMAC != null) {
         buffer.getContext().eventDispatcher.startElement("basicMAC", -1);

         basicMAC.encode (buffer, 32, 32);

         buffer.getContext().eventDispatcher.endElement("basicMAC", -1);
      }
      else throw new Asn1MissingRequiredException ("basicMAC");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
