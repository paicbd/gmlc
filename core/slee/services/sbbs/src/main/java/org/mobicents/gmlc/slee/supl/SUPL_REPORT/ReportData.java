/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_REPORT;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.MultipleLocationIds;

public class ReportData extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_REPORTRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_REPORTRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ReportData";
   }

   protected PositionData positionData;  // optional
   protected MultipleLocationIds multipleLocationIds;  // optional
   protected ResultCode resultCode = null;  // optional
   protected TimeStamp timestamp;  // optional
   protected Asn1OpenExt extElem1;

   public ReportData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ReportData (
      PositionData positionData_,
      MultipleLocationIds multipleLocationIds_,
      ResultCode resultCode_,
      TimeStamp timestamp_
   ) throws Asn1Exception {
      super();
      setPositionData (positionData_);
      setMultipleLocationIds (multipleLocationIds_);
      setResultCode (resultCode_);
      setTimestamp (timestamp_);
   }

   public void init () {
      positionData = null;
      multipleLocationIds = null;
      resultCode = null;
      timestamp = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof ReportData) ) return false;

      ReportData rhs = (ReportData) obj;

      if (positionData == null) {
         if (rhs.positionData != null) return false;
      }
      else {
         if (!positionData.equals(rhs.positionData)) {
            return false;
         }
      }

      if (multipleLocationIds == null) {
         if (rhs.multipleLocationIds != null) return false;
      }
      else {
         if (!multipleLocationIds.equals(rhs.multipleLocationIds)) {
            return false;
         }
      }

      if (resultCode == null) {
         if (rhs.resultCode != null) return false;
      }
      else {
         if (!resultCode.equals(rhs.resultCode)) {
            return false;
         }
      }

      if (timestamp == null) {
         if (rhs.timestamp != null) return false;
      }
      else {
         if (!timestamp.equals(rhs.timestamp)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (positionData != null) __code = 31*__code + positionData.hashCode();
      if (multipleLocationIds != null) __code = 31*__code + multipleLocationIds.hashCode();
      if (resultCode != null) __code = 31*__code + resultCode.hashCode();
      if (timestamp != null) __code = 31*__code + timestamp.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for PositionData
    */
   public PositionData getPositionData () {
      return positionData;
   }

   public void setPositionData (PositionData value) {
      this.positionData = value;
   }

   public boolean hasPositionData () {
      return (positionData != null);
   }

   /**
    * Accessor/mutator methods for MultipleLocationIds
    */
   public MultipleLocationIds getMultipleLocationIds () {
      return multipleLocationIds;
   }

   public void setMultipleLocationIds (MultipleLocationIds value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 64))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.multipleLocationIds = value;
   }

   public boolean hasMultipleLocationIds () {
      return (multipleLocationIds != null);
   }

   /**
    * Accessor/mutator methods for ResultCode
    */
   public ResultCode getResultCode () {
      return resultCode;
   }

   public void setResultCode (ResultCode value) {
      this.resultCode = value;
   }

   public boolean hasResultCode () {
      return (resultCode != null);
   }

   /**
    * Accessor/mutator methods for Timestamp
    */
   public TimeStamp getTimestamp () {
      return timestamp;
   }

   public void setTimestamp (TimeStamp value) {
      this.timestamp = value;
   }

   public boolean hasTimestamp () {
      return (timestamp != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return positionData;
         case 1: return multipleLocationIds;
         case 2: return resultCode;
         case 3: return timestamp;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "positionData";
         case 1: return "multipleLocationIds";
         case 2: return "resultCode";
         case 3: return "timestamp";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean positionDataPresent = buffer.decodeBit ("positionDataPresent");
      boolean multipleLocationIdsPresent = buffer.decodeBit ("multipleLocationIdsPresent");
      boolean resultCodePresent = buffer.decodeBit ("resultCodePresent");
      boolean timestampPresent = buffer.decodeBit ("timestampPresent");

      // decode positionData

      if (positionDataPresent) {
         buffer.getContext().eventDispatcher.startElement("positionData", -1);

         positionData = new PositionData();
         positionData.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("positionData", -1);
      }
      else {
         positionData = null;
      }

      // decode multipleLocationIds

      if (multipleLocationIdsPresent) {
         buffer.getContext().eventDispatcher.startElement("multipleLocationIds", -1);

         multipleLocationIds = new MultipleLocationIds();
         multipleLocationIds.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("multipleLocationIds", -1);
      }
      else {
         multipleLocationIds = null;
      }

      // decode resultCode

      if (resultCodePresent) {
         buffer.getContext().eventDispatcher.startElement("resultCode", -1);

         int tval = ResultCode.decodeEnumValue (buffer);
         resultCode = ResultCode.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("resultCode", -1);
      }
      else {
         resultCode = null;
      }

      // decode timestamp

      if (timestampPresent) {
         buffer.getContext().eventDispatcher.startElement("timestamp", -1);

         timestamp = new TimeStamp();
         timestamp.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("timestamp", -1);
      }
      else {
         timestamp = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((positionData != null), null);
      buffer.encodeBit ((multipleLocationIds != null), null);
      buffer.encodeBit ((resultCode != null), null);
      buffer.encodeBit ((timestamp != null), null);

      // encode positionData

      if (positionData != null) {
         buffer.getContext().eventDispatcher.startElement("positionData", -1);

         positionData.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("positionData", -1);
      }

      // encode multipleLocationIds

      if (multipleLocationIds != null) {
         buffer.getContext().eventDispatcher.startElement("multipleLocationIds", -1);

         multipleLocationIds.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("multipleLocationIds", -1);
      }

      // encode resultCode

      if (resultCode != null) {
         buffer.getContext().eventDispatcher.startElement("resultCode", -1);

         resultCode.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("resultCode", -1);
      }

      // encode timestamp

      if (timestamp != null) {
         buffer.getContext().eventDispatcher.startElement("timestamp", -1);

         timestamp.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("timestamp", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
