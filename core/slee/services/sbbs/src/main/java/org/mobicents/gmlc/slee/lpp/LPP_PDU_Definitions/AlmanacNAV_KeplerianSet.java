/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class AlmanacNAV_KeplerianSet extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "AlmanacNAV-KeplerianSet";
   }

   protected SV_ID svID;
   protected Asn1Integer navAlmE;
   protected Asn1Integer navAlmDeltaI;
   protected Asn1Integer navAlmOMEGADOT;
   protected Asn1Integer navAlmSVHealth;
   protected Asn1Integer navAlmSqrtA;
   protected Asn1Integer navAlmOMEGAo;
   protected Asn1Integer navAlmOmega;
   protected Asn1Integer navAlmMo;
   protected Asn1Integer navAlmaf0;
   protected Asn1Integer navAlmaf1;
   protected Asn1OpenExt extElem1;

   public AlmanacNAV_KeplerianSet () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AlmanacNAV_KeplerianSet (
      SV_ID svID_,
      Asn1Integer navAlmE_,
      Asn1Integer navAlmDeltaI_,
      Asn1Integer navAlmOMEGADOT_,
      Asn1Integer navAlmSVHealth_,
      Asn1Integer navAlmSqrtA_,
      Asn1Integer navAlmOMEGAo_,
      Asn1Integer navAlmOmega_,
      Asn1Integer navAlmMo_,
      Asn1Integer navAlmaf0_,
      Asn1Integer navAlmaf1_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setNavAlmE (navAlmE_);
      setNavAlmDeltaI (navAlmDeltaI_);
      setNavAlmOMEGADOT (navAlmOMEGADOT_);
      setNavAlmSVHealth (navAlmSVHealth_);
      setNavAlmSqrtA (navAlmSqrtA_);
      setNavAlmOMEGAo (navAlmOMEGAo_);
      setNavAlmOmega (navAlmOmega_);
      setNavAlmMo (navAlmMo_);
      setNavAlmaf0 (navAlmaf0_);
      setNavAlmaf1 (navAlmaf1_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AlmanacNAV_KeplerianSet (SV_ID svID_,
      long navAlmE_,
      long navAlmDeltaI_,
      long navAlmOMEGADOT_,
      long navAlmSVHealth_,
      long navAlmSqrtA_,
      long navAlmOMEGAo_,
      long navAlmOmega_,
      long navAlmMo_,
      long navAlmaf0_,
      long navAlmaf1_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setNavAlmE (navAlmE_);
      setNavAlmDeltaI (navAlmDeltaI_);
      setNavAlmOMEGADOT (navAlmOMEGADOT_);
      setNavAlmSVHealth (navAlmSVHealth_);
      setNavAlmSqrtA (navAlmSqrtA_);
      setNavAlmOMEGAo (navAlmOMEGAo_);
      setNavAlmOmega (navAlmOmega_);
      setNavAlmMo (navAlmMo_);
      setNavAlmaf0 (navAlmaf0_);
      setNavAlmaf1 (navAlmaf1_);
   }

   public void init () {
      svID = null;
      navAlmE = null;
      navAlmDeltaI = null;
      navAlmOMEGADOT = null;
      navAlmSVHealth = null;
      navAlmSqrtA = null;
      navAlmOMEGAo = null;
      navAlmOmega = null;
      navAlmMo = null;
      navAlmaf0 = null;
      navAlmaf1 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof AlmanacNAV_KeplerianSet) ) return false;

      AlmanacNAV_KeplerianSet rhs = (AlmanacNAV_KeplerianSet) obj;

      if (svID == null) {
         if (rhs.svID != null) return false;
      }
      else {
         if (!svID.equals(rhs.svID)) {
            return false;
         }
      }

      if (navAlmE == null) {
         if (rhs.navAlmE != null) return false;
      }
      else {
         if (!navAlmE.equals(rhs.navAlmE)) {
            return false;
         }
      }

      if (navAlmDeltaI == null) {
         if (rhs.navAlmDeltaI != null) return false;
      }
      else {
         if (!navAlmDeltaI.equals(rhs.navAlmDeltaI)) {
            return false;
         }
      }

      if (navAlmOMEGADOT == null) {
         if (rhs.navAlmOMEGADOT != null) return false;
      }
      else {
         if (!navAlmOMEGADOT.equals(rhs.navAlmOMEGADOT)) {
            return false;
         }
      }

      if (navAlmSVHealth == null) {
         if (rhs.navAlmSVHealth != null) return false;
      }
      else {
         if (!navAlmSVHealth.equals(rhs.navAlmSVHealth)) {
            return false;
         }
      }

      if (navAlmSqrtA == null) {
         if (rhs.navAlmSqrtA != null) return false;
      }
      else {
         if (!navAlmSqrtA.equals(rhs.navAlmSqrtA)) {
            return false;
         }
      }

      if (navAlmOMEGAo == null) {
         if (rhs.navAlmOMEGAo != null) return false;
      }
      else {
         if (!navAlmOMEGAo.equals(rhs.navAlmOMEGAo)) {
            return false;
         }
      }

      if (navAlmOmega == null) {
         if (rhs.navAlmOmega != null) return false;
      }
      else {
         if (!navAlmOmega.equals(rhs.navAlmOmega)) {
            return false;
         }
      }

      if (navAlmMo == null) {
         if (rhs.navAlmMo != null) return false;
      }
      else {
         if (!navAlmMo.equals(rhs.navAlmMo)) {
            return false;
         }
      }

      if (navAlmaf0 == null) {
         if (rhs.navAlmaf0 != null) return false;
      }
      else {
         if (!navAlmaf0.equals(rhs.navAlmaf0)) {
            return false;
         }
      }

      if (navAlmaf1 == null) {
         if (rhs.navAlmaf1 != null) return false;
      }
      else {
         if (!navAlmaf1.equals(rhs.navAlmaf1)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (svID != null) __code = 31*__code + svID.hashCode();
      if (navAlmE != null) __code = 31*__code + navAlmE.hashCode();
      if (navAlmDeltaI != null) __code = 31*__code + navAlmDeltaI.hashCode();
      if (navAlmOMEGADOT != null) __code = 31*__code + navAlmOMEGADOT.hashCode();
      if (navAlmSVHealth != null) __code = 31*__code + navAlmSVHealth.hashCode();
      if (navAlmSqrtA != null) __code = 31*__code + navAlmSqrtA.hashCode();
      if (navAlmOMEGAo != null) __code = 31*__code + navAlmOMEGAo.hashCode();
      if (navAlmOmega != null) __code = 31*__code + navAlmOmega.hashCode();
      if (navAlmMo != null) __code = 31*__code + navAlmMo.hashCode();
      if (navAlmaf0 != null) __code = 31*__code + navAlmaf0.hashCode();
      if (navAlmaf1 != null) __code = 31*__code + navAlmaf1.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SvID
    */
   public SV_ID getSvID () {
      return svID;
   }

   public void setSvID (SV_ID value) {
      this.svID = value;
   }

   /**
    * Accessor/mutator methods for NavAlmE
    */
   public Asn1Integer getNavAlmE () {
      return navAlmE;
   }

   public void setNavAlmE (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navAlmE = value;
   }

   public void setNavAlmE (long value) 
      throws Asn1Exception
   {
      setNavAlmE (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavAlmDeltaI
    */
   public Asn1Integer getNavAlmDeltaI () {
      return navAlmDeltaI;
   }

   public void setNavAlmDeltaI (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navAlmDeltaI = value;
   }

   public void setNavAlmDeltaI (long value) 
      throws Asn1Exception
   {
      setNavAlmDeltaI (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavAlmOMEGADOT
    */
   public Asn1Integer getNavAlmOMEGADOT () {
      return navAlmOMEGADOT;
   }

   public void setNavAlmOMEGADOT (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navAlmOMEGADOT = value;
   }

   public void setNavAlmOMEGADOT (long value) 
      throws Asn1Exception
   {
      setNavAlmOMEGADOT (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavAlmSVHealth
    */
   public Asn1Integer getNavAlmSVHealth () {
      return navAlmSVHealth;
   }

   public void setNavAlmSVHealth (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navAlmSVHealth = value;
   }

   public void setNavAlmSVHealth (long value) 
      throws Asn1Exception
   {
      setNavAlmSVHealth (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavAlmSqrtA
    */
   public Asn1Integer getNavAlmSqrtA () {
      return navAlmSqrtA;
   }

   public void setNavAlmSqrtA (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 16777215))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navAlmSqrtA = value;
   }

   public void setNavAlmSqrtA (long value) 
      throws Asn1Exception
   {
      setNavAlmSqrtA (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavAlmOMEGAo
    */
   public Asn1Integer getNavAlmOMEGAo () {
      return navAlmOMEGAo;
   }

   public void setNavAlmOMEGAo (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8388608 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navAlmOMEGAo = value;
   }

   public void setNavAlmOMEGAo (long value) 
      throws Asn1Exception
   {
      setNavAlmOMEGAo (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavAlmOmega
    */
   public Asn1Integer getNavAlmOmega () {
      return navAlmOmega;
   }

   public void setNavAlmOmega (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8388608 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navAlmOmega = value;
   }

   public void setNavAlmOmega (long value) 
      throws Asn1Exception
   {
      setNavAlmOmega (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavAlmMo
    */
   public Asn1Integer getNavAlmMo () {
      return navAlmMo;
   }

   public void setNavAlmMo (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8388608 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navAlmMo = value;
   }

   public void setNavAlmMo (long value) 
      throws Asn1Exception
   {
      setNavAlmMo (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavAlmaf0
    */
   public Asn1Integer getNavAlmaf0 () {
      return navAlmaf0;
   }

   public void setNavAlmaf0 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1024 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navAlmaf0 = value;
   }

   public void setNavAlmaf0 (long value) 
      throws Asn1Exception
   {
      setNavAlmaf0 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavAlmaf1
    */
   public Asn1Integer getNavAlmaf1 () {
      return navAlmaf1;
   }

   public void setNavAlmaf1 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1024 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navAlmaf1 = value;
   }

   public void setNavAlmaf1 (long value) 
      throws Asn1Exception
   {
      setNavAlmaf1 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 12; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return svID;
         case 1: return navAlmE;
         case 2: return navAlmDeltaI;
         case 3: return navAlmOMEGADOT;
         case 4: return navAlmSVHealth;
         case 5: return navAlmSqrtA;
         case 6: return navAlmOMEGAo;
         case 7: return navAlmOmega;
         case 8: return navAlmMo;
         case 9: return navAlmaf0;
         case 10: return navAlmaf1;
         case 11: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "svID";
         case 1: return "navAlmE";
         case 2: return "navAlmDeltaI";
         case 3: return "navAlmOMEGADOT";
         case 4: return "navAlmSVHealth";
         case 5: return "navAlmSqrtA";
         case 6: return "navAlmOMEGAo";
         case 7: return "navAlmOmega";
         case 8: return "navAlmMo";
         case 9: return "navAlmaf0";
         case 10: return "navAlmaf1";
         case 11: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode svID

      buffer.getContext().eventDispatcher.startElement("svID", -1);

      svID = new SV_ID();
      svID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("svID", -1);

      // decode navAlmE

      buffer.getContext().eventDispatcher.startElement("navAlmE", -1);

      navAlmE = new Asn1Integer();
      navAlmE.decode (buffer, 0, 65535);
      buffer.getContext().eventDispatcher.endElement("navAlmE", -1);

      // decode navAlmDeltaI

      buffer.getContext().eventDispatcher.startElement("navAlmDeltaI", -1);

      navAlmDeltaI = new Asn1Integer();
      navAlmDeltaI.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("navAlmDeltaI", -1);

      // decode navAlmOMEGADOT

      buffer.getContext().eventDispatcher.startElement("navAlmOMEGADOT", -1);

      navAlmOMEGADOT = new Asn1Integer();
      navAlmOMEGADOT.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("navAlmOMEGADOT", -1);

      // decode navAlmSVHealth

      buffer.getContext().eventDispatcher.startElement("navAlmSVHealth", -1);

      navAlmSVHealth = new Asn1Integer();
      navAlmSVHealth.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("navAlmSVHealth", -1);

      // decode navAlmSqrtA

      buffer.getContext().eventDispatcher.startElement("navAlmSqrtA", -1);

      navAlmSqrtA = new Asn1Integer();
      navAlmSqrtA.decode (buffer, 0, 16777215);
      buffer.getContext().eventDispatcher.endElement("navAlmSqrtA", -1);

      // decode navAlmOMEGAo

      buffer.getContext().eventDispatcher.startElement("navAlmOMEGAo", -1);

      navAlmOMEGAo = new Asn1Integer();
      navAlmOMEGAo.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("navAlmOMEGAo", -1);

      // decode navAlmOmega

      buffer.getContext().eventDispatcher.startElement("navAlmOmega", -1);

      navAlmOmega = new Asn1Integer();
      navAlmOmega.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("navAlmOmega", -1);

      // decode navAlmMo

      buffer.getContext().eventDispatcher.startElement("navAlmMo", -1);

      navAlmMo = new Asn1Integer();
      navAlmMo.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("navAlmMo", -1);

      // decode navAlmaf0

      buffer.getContext().eventDispatcher.startElement("navAlmaf0", -1);

      navAlmaf0 = new Asn1Integer();
      navAlmaf0.decode (buffer, -1024, 1023);
      buffer.getContext().eventDispatcher.endElement("navAlmaf0", -1);

      // decode navAlmaf1

      buffer.getContext().eventDispatcher.startElement("navAlmaf1", -1);

      navAlmaf1 = new Asn1Integer();
      navAlmaf1.decode (buffer, -1024, 1023);
      buffer.getContext().eventDispatcher.endElement("navAlmaf1", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode svID

      if (svID != null) {
         buffer.getContext().eventDispatcher.startElement("svID", -1);

         svID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("svID", -1);
      }
      else throw new Asn1MissingRequiredException ("svID");

      // encode navAlmE

      if (navAlmE != null) {
         buffer.getContext().eventDispatcher.startElement("navAlmE", -1);

         navAlmE.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("navAlmE", -1);
      }
      else throw new Asn1MissingRequiredException ("navAlmE");

      // encode navAlmDeltaI

      if (navAlmDeltaI != null) {
         buffer.getContext().eventDispatcher.startElement("navAlmDeltaI", -1);

         navAlmDeltaI.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("navAlmDeltaI", -1);
      }
      else throw new Asn1MissingRequiredException ("navAlmDeltaI");

      // encode navAlmOMEGADOT

      if (navAlmOMEGADOT != null) {
         buffer.getContext().eventDispatcher.startElement("navAlmOMEGADOT", -1);

         navAlmOMEGADOT.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("navAlmOMEGADOT", -1);
      }
      else throw new Asn1MissingRequiredException ("navAlmOMEGADOT");

      // encode navAlmSVHealth

      if (navAlmSVHealth != null) {
         buffer.getContext().eventDispatcher.startElement("navAlmSVHealth", -1);

         navAlmSVHealth.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("navAlmSVHealth", -1);
      }
      else throw new Asn1MissingRequiredException ("navAlmSVHealth");

      // encode navAlmSqrtA

      if (navAlmSqrtA != null) {
         buffer.getContext().eventDispatcher.startElement("navAlmSqrtA", -1);

         navAlmSqrtA.encode (buffer, 0, 16777215);

         buffer.getContext().eventDispatcher.endElement("navAlmSqrtA", -1);
      }
      else throw new Asn1MissingRequiredException ("navAlmSqrtA");

      // encode navAlmOMEGAo

      if (navAlmOMEGAo != null) {
         buffer.getContext().eventDispatcher.startElement("navAlmOMEGAo", -1);

         navAlmOMEGAo.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("navAlmOMEGAo", -1);
      }
      else throw new Asn1MissingRequiredException ("navAlmOMEGAo");

      // encode navAlmOmega

      if (navAlmOmega != null) {
         buffer.getContext().eventDispatcher.startElement("navAlmOmega", -1);

         navAlmOmega.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("navAlmOmega", -1);
      }
      else throw new Asn1MissingRequiredException ("navAlmOmega");

      // encode navAlmMo

      if (navAlmMo != null) {
         buffer.getContext().eventDispatcher.startElement("navAlmMo", -1);

         navAlmMo.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("navAlmMo", -1);
      }
      else throw new Asn1MissingRequiredException ("navAlmMo");

      // encode navAlmaf0

      if (navAlmaf0 != null) {
         buffer.getContext().eventDispatcher.startElement("navAlmaf0", -1);

         navAlmaf0.encode (buffer, -1024, 1023);

         buffer.getContext().eventDispatcher.endElement("navAlmaf0", -1);
      }
      else throw new Asn1MissingRequiredException ("navAlmaf0");

      // encode navAlmaf1

      if (navAlmaf1 != null) {
         buffer.getContext().eventDispatcher.startElement("navAlmaf1", -1);

         navAlmaf1.encode (buffer, -1024, 1023);

         buffer.getContext().eventDispatcher.endElement("navAlmaf1", -1);
      }
      else throw new Asn1MissingRequiredException ("navAlmaf1");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
