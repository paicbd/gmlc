/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_TRIGGERED_START;

import com.objsys.asn1j.runtime.*;

public class RepeatedReportingParams extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_TRIGGERED_STARTRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_TRIGGERED_STARTRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "RepeatedReportingParams";
   }

   protected Asn1Integer minimumIntervalTime;
   protected Asn1Integer maximumNumberOfReports;
   protected Asn1OpenExt extElem1;

   public RepeatedReportingParams () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RepeatedReportingParams (
      Asn1Integer minimumIntervalTime_,
      Asn1Integer maximumNumberOfReports_
   ) throws Asn1Exception {
      super();
      setMinimumIntervalTime (minimumIntervalTime_);
      setMaximumNumberOfReports (maximumNumberOfReports_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RepeatedReportingParams (long minimumIntervalTime_,
      long maximumNumberOfReports_
   ) throws Asn1Exception {
      super();
      setMinimumIntervalTime (minimumIntervalTime_);
      setMaximumNumberOfReports (maximumNumberOfReports_);
   }

   public void init () {
      minimumIntervalTime = null;
      maximumNumberOfReports = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof RepeatedReportingParams) ) return false;

      RepeatedReportingParams rhs = (RepeatedReportingParams) obj;

      if (minimumIntervalTime == null) {
         if (rhs.minimumIntervalTime != null) return false;
      }
      else {
         if (!minimumIntervalTime.equals(rhs.minimumIntervalTime)) {
            return false;
         }
      }

      if (maximumNumberOfReports == null) {
         if (rhs.maximumNumberOfReports != null) return false;
      }
      else {
         if (!maximumNumberOfReports.equals(rhs.maximumNumberOfReports)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (minimumIntervalTime != null) __code = 31*__code + minimumIntervalTime.hashCode();
      if (maximumNumberOfReports != null) __code = 31*__code + maximumNumberOfReports.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for MinimumIntervalTime
    */
   public Asn1Integer getMinimumIntervalTime () {
      return minimumIntervalTime;
   }

   public void setMinimumIntervalTime (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 604800))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.minimumIntervalTime = value;
   }

   public void setMinimumIntervalTime (long value) 
      throws Asn1Exception
   {
      setMinimumIntervalTime (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for MaximumNumberOfReports
    */
   public Asn1Integer getMaximumNumberOfReports () {
      return maximumNumberOfReports;
   }

   public void setMaximumNumberOfReports (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 1024))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.maximumNumberOfReports = value;
   }

   public void setMaximumNumberOfReports (long value) 
      throws Asn1Exception
   {
      setMaximumNumberOfReports (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return minimumIntervalTime;
         case 1: return maximumNumberOfReports;
         case 2: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "minimumIntervalTime";
         case 1: return "maximumNumberOfReports";
         case 2: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode minimumIntervalTime

      buffer.getContext().eventDispatcher.startElement("minimumIntervalTime", -1);

      minimumIntervalTime = new Asn1Integer();
      minimumIntervalTime.decode (buffer, 1, 604800);
      buffer.getContext().eventDispatcher.endElement("minimumIntervalTime", -1);

      // decode maximumNumberOfReports

      buffer.getContext().eventDispatcher.startElement("maximumNumberOfReports", -1);

      maximumNumberOfReports = new Asn1Integer();
      maximumNumberOfReports.decode (buffer, 1, 1024);
      buffer.getContext().eventDispatcher.endElement("maximumNumberOfReports", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode minimumIntervalTime

      if (minimumIntervalTime != null) {
         buffer.getContext().eventDispatcher.startElement("minimumIntervalTime", -1);

         minimumIntervalTime.encode (buffer, 1, 604800);

         buffer.getContext().eventDispatcher.endElement("minimumIntervalTime", -1);
      }
      else throw new Asn1MissingRequiredException ("minimumIntervalTime");

      // encode maximumNumberOfReports

      if (maximumNumberOfReports != null) {
         buffer.getContext().eventDispatcher.startElement("maximumNumberOfReports", -1);

         maximumNumberOfReports.encode (buffer, 1, 1024);

         buffer.getContext().eventDispatcher.endElement("maximumNumberOfReports", -1);
      }
      else throw new Asn1MissingRequiredException ("maximumNumberOfReports");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
