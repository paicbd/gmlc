/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_TRIGGERED_START;

import com.objsys.asn1j.runtime.*;

public class AreaId extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_TRIGGERED_STARTRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_TRIGGERED_STARTRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "AreaId";
   }

   // Choice element identifier constants
   public final static byte _GSMAREAID = 1;
   public final static byte _WCDMAAREAID = 2;
   public final static byte _CDMAAREAID = 3;
   public final static byte _HRPDAREAID = 4;
   public final static byte _UMBAREAID = 5;
   public final static byte _LTEAREAID = 6;
   public final static byte _WLANAREAID = 7;
   public final static byte _WIMAXAREAID = 8;
   public final static byte _NRAREAID = 9;
   public final static byte _EXTELEM1 = 10;

   public AreaId () {
      super();
   }

   public AreaId (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _GSMAREAID: return "gSMAreaId";
      case _WCDMAAREAID: return "wCDMAAreaId";
      case _CDMAAREAID: return "cDMAAreaId";
      case _HRPDAREAID: return "hRPDAreaId";
      case _UMBAREAID: return "uMBAreaId";
      case _LTEAREAID: return "lTEAreaId";
      case _WLANAREAID: return "wLANAreaId";
      case _WIMAXAREAID: return "wiMAXAreaId";
      case _NRAREAID: return "nRAreaId";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for gSMAreaId
    */
   public GSMAreaId getGSMAreaId () {
      return (choiceID == _GSMAREAID) ? (GSMAreaId)element : null;
   }
   public void setGSMAreaId (GSMAreaId value) {
      setElement (_GSMAREAID, value);
   }
   public boolean isGSMAreaId () {
      return (choiceID == _GSMAREAID);
   }

   /**
    * Accessor/mutator methods for wCDMAAreaId
    */
   public WCDMAAreaId getWCDMAAreaId () {
      return (choiceID == _WCDMAAREAID) ? (WCDMAAreaId)element : null;
   }
   public void setWCDMAAreaId (WCDMAAreaId value) {
      setElement (_WCDMAAREAID, value);
   }
   public boolean isWCDMAAreaId () {
      return (choiceID == _WCDMAAREAID);
   }

   /**
    * Accessor/mutator methods for cDMAAreaId
    */
   public CDMAAreaId getCDMAAreaId () {
      return (choiceID == _CDMAAREAID) ? (CDMAAreaId)element : null;
   }
   public void setCDMAAreaId (CDMAAreaId value) {
      setElement (_CDMAAREAID, value);
   }
   public boolean isCDMAAreaId () {
      return (choiceID == _CDMAAREAID);
   }

   /**
    * Accessor/mutator methods for hRPDAreaId
    */
   public HRPDAreaId getHRPDAreaId () {
      return (choiceID == _HRPDAREAID) ? (HRPDAreaId)element : null;
   }
   public void setHRPDAreaId (HRPDAreaId value) {
      setElement (_HRPDAREAID, value);
   }
   public boolean isHRPDAreaId () {
      return (choiceID == _HRPDAREAID);
   }

   /**
    * Accessor/mutator methods for uMBAreaId
    */
   public UMBAreaId getUMBAreaId () {
      return (choiceID == _UMBAREAID) ? (UMBAreaId)element : null;
   }
   public void setUMBAreaId (UMBAreaId value) {
      setElement (_UMBAREAID, value);
   }
   public boolean isUMBAreaId () {
      return (choiceID == _UMBAREAID);
   }

   /**
    * Accessor/mutator methods for lTEAreaId
    */
   public LTEAreaId getLTEAreaId () {
      return (choiceID == _LTEAREAID) ? (LTEAreaId)element : null;
   }
   public void setLTEAreaId (LTEAreaId value) {
      setElement (_LTEAREAID, value);
   }
   public boolean isLTEAreaId () {
      return (choiceID == _LTEAREAID);
   }

   /**
    * Accessor/mutator methods for wLANAreaId
    */
   public WLANAreaId getWLANAreaId () {
      return (choiceID == _WLANAREAID) ? (WLANAreaId)element : null;
   }
   public void setWLANAreaId (WLANAreaId value) {
      setElement (_WLANAREAID, value);
   }
   public boolean isWLANAreaId () {
      return (choiceID == _WLANAREAID);
   }

   /**
    * Accessor/mutator methods for wiMAXAreaId
    */
   public WimaxAreaId getWiMAXAreaId () {
      return (choiceID == _WIMAXAREAID) ? (WimaxAreaId)element : null;
   }
   public void setWiMAXAreaId (WimaxAreaId value) {
      setElement (_WIMAXAREAID, value);
   }
   public boolean isWiMAXAreaId () {
      return (choiceID == _WIMAXAREAID);
   }

   /**
    * Accessor/mutator methods for nRAreaId
    */
   public NRAreaId getNRAreaId () {
      return (choiceID == _NRAREAID) ? (NRAreaId)element : null;
   }
   public void setNRAreaId (NRAreaId value) {
      setElement (_NRAREAID, value);
   }
   public boolean isNRAreaId () {
      return (choiceID == _NRAREAID);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (8, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // gSMAreaId
            case 0: { 
               GSMAreaId gSMAreaId;
               element = gSMAreaId = new GSMAreaId();
               gSMAreaId.decode (buffer);
               break;
            }

            // wCDMAAreaId
            case 1: { 
               WCDMAAreaId wCDMAAreaId;
               element = wCDMAAreaId = new WCDMAAreaId();
               wCDMAAreaId.decode (buffer);
               break;
            }

            // cDMAAreaId
            case 2: { 
               CDMAAreaId cDMAAreaId;
               element = cDMAAreaId = new CDMAAreaId();
               cDMAAreaId.decode (buffer);
               break;
            }

            // hRPDAreaId
            case 3: { 
               HRPDAreaId hRPDAreaId;
               element = hRPDAreaId = new HRPDAreaId();
               hRPDAreaId.decode (buffer);
               break;
            }

            // uMBAreaId
            case 4: { 
               UMBAreaId uMBAreaId;
               element = uMBAreaId = new UMBAreaId();
               uMBAreaId.decode (buffer);
               break;
            }

            // lTEAreaId
            case 5: { 
               LTEAreaId lTEAreaId;
               element = lTEAreaId = new LTEAreaId();
               lTEAreaId.decode (buffer);
               break;
            }

            // wLANAreaId
            case 6: { 
               WLANAreaId wLANAreaId;
               element = wLANAreaId = new WLANAreaId();
               wLANAreaId.decode (buffer);
               break;
            }

            // wiMAXAreaId
            case 7: { 
               WimaxAreaId wiMAXAreaId;
               element = wiMAXAreaId = new WimaxAreaId();
               wiMAXAreaId.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 9;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // nRAreaId
            case 0: { 
               NRAreaId nRAreaId;
               element = nRAreaId = new NRAreaId();
               nRAreaId.decode (buffer);
               break;
            }

            // extElem1
            case 1: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 8);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 8, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // gSMAreaId
            case _GSMAREAID:
               GSMAreaId gSMAreaId = (GSMAreaId) element;
               gSMAreaId.encode (buffer);
               break;

            // wCDMAAreaId
            case _WCDMAAREAID:
               WCDMAAreaId wCDMAAreaId = (WCDMAAreaId) element;
               wCDMAAreaId.encode (buffer);
               break;

            // cDMAAreaId
            case _CDMAAREAID:
               CDMAAreaId cDMAAreaId = (CDMAAreaId) element;
               cDMAAreaId.encode (buffer);
               break;

            // hRPDAreaId
            case _HRPDAREAID:
               HRPDAreaId hRPDAreaId = (HRPDAreaId) element;
               hRPDAreaId.encode (buffer);
               break;

            // uMBAreaId
            case _UMBAREAID:
               UMBAreaId uMBAreaId = (UMBAreaId) element;
               uMBAreaId.encode (buffer);
               break;

            // lTEAreaId
            case _LTEAREAID:
               LTEAreaId lTEAreaId = (LTEAreaId) element;
               lTEAreaId.encode (buffer);
               break;

            // wLANAreaId
            case _WLANAREAID:
               WLANAreaId wLANAreaId = (WLANAreaId) element;
               wLANAreaId.encode (buffer);
               break;

            // wiMAXAreaId
            case _WIMAXAREAID:
               WimaxAreaId wiMAXAreaId = (WimaxAreaId) element;
               wiMAXAreaId.encode (buffer);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 9);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1PerEncodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());
         Asn1OpenType openType;

         switch (choiceID) {
            // nRAreaId
            case _NRAREAID:
               NRAreaId nRAreaId = (NRAreaId) element;
               nRAreaId.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            default:
               openType = (Asn1OpenType)getElement();
         }

         buffer = savedBuffer;
         if (openType != null) {
            buffer.byteAlign();
            openType.encode (buffer);
         }
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
