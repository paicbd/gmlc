/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Version_2_parameter_extensions;

import com.objsys.asn1j.runtime.*;

public class GANSSPositioningMethodTypes extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_Version_2_parameter_extensionsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_Version_2_parameter_extensionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GANSSPositioningMethodTypes";
   }

   protected Asn1Boolean setAssisted;
   protected Asn1Boolean setBased;
   protected Asn1Boolean autonomous;
   protected Asn1OpenExt extElem1;

   public GANSSPositioningMethodTypes () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GANSSPositioningMethodTypes (
      Asn1Boolean setAssisted_,
      Asn1Boolean setBased_,
      Asn1Boolean autonomous_
   ) {
      super();
      setSetAssisted (setAssisted_);
      setSetBased (setBased_);
      setAutonomous (autonomous_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GANSSPositioningMethodTypes (boolean setAssisted_,
      boolean setBased_,
      boolean autonomous_
   ) {
      super();
      setSetAssisted (setAssisted_);
      setSetBased (setBased_);
      setAutonomous (autonomous_);
   }

   public void init () {
      setAssisted = null;
      setBased = null;
      autonomous = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GANSSPositioningMethodTypes) ) return false;

      GANSSPositioningMethodTypes rhs = (GANSSPositioningMethodTypes) obj;

      if (setAssisted == null) {
         if (rhs.setAssisted != null) return false;
      }
      else {
         if (!setAssisted.equals(rhs.setAssisted)) {
            return false;
         }
      }

      if (setBased == null) {
         if (rhs.setBased != null) return false;
      }
      else {
         if (!setBased.equals(rhs.setBased)) {
            return false;
         }
      }

      if (autonomous == null) {
         if (rhs.autonomous != null) return false;
      }
      else {
         if (!autonomous.equals(rhs.autonomous)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (setAssisted != null) __code = 31*__code + setAssisted.hashCode();
      if (setBased != null) __code = 31*__code + setBased.hashCode();
      if (autonomous != null) __code = 31*__code + autonomous.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SetAssisted
    */
   public Asn1Boolean getSetAssisted () {
      return setAssisted;
   }

   public void setSetAssisted (Asn1Boolean value) {
      this.setAssisted = value;
   }

   public void setSetAssisted (boolean value) {
      setSetAssisted (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for SetBased
    */
   public Asn1Boolean getSetBased () {
      return setBased;
   }

   public void setSetBased (Asn1Boolean value) {
      this.setBased = value;
   }

   public void setSetBased (boolean value) {
      setSetBased (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Autonomous
    */
   public Asn1Boolean getAutonomous () {
      return autonomous;
   }

   public void setAutonomous (Asn1Boolean value) {
      this.autonomous = value;
   }

   public void setAutonomous (boolean value) {
      setAutonomous (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return setAssisted;
         case 1: return setBased;
         case 2: return autonomous;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "setAssisted";
         case 1: return "setBased";
         case 2: return "autonomous";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode setAssisted

      buffer.getContext().eventDispatcher.startElement("setAssisted", -1);

      setAssisted = new Asn1Boolean();
      setAssisted.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("setAssisted", -1);

      // decode setBased

      buffer.getContext().eventDispatcher.startElement("setBased", -1);

      setBased = new Asn1Boolean();
      setBased.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("setBased", -1);

      // decode autonomous

      buffer.getContext().eventDispatcher.startElement("autonomous", -1);

      autonomous = new Asn1Boolean();
      autonomous.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("autonomous", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode setAssisted

      if (setAssisted != null) {
         buffer.getContext().eventDispatcher.startElement("setAssisted", -1);

         setAssisted.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("setAssisted", -1);
      }
      else throw new Asn1MissingRequiredException ("setAssisted");

      // encode setBased

      if (setBased != null) {
         buffer.getContext().eventDispatcher.startElement("setBased", -1);

         setBased.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("setBased", -1);
      }
      else throw new Asn1MissingRequiredException ("setBased");

      // encode autonomous

      if (autonomous != null) {
         buffer.getContext().eventDispatcher.startElement("autonomous", -1);

         autonomous.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("autonomous", -1);
      }
      else throw new Asn1MissingRequiredException ("autonomous");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
