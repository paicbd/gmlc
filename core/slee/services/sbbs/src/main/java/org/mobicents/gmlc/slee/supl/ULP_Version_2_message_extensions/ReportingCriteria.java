/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Version_2_message_extensions;

import com.objsys.asn1j.runtime.*;

public class ReportingCriteria extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_Version_2_message_extensionsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_Version_2_message_extensionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ReportingCriteria";
   }

   protected TimeWindow timeWindow;  // optional
   protected Asn1Integer maxNumberofReports;  // optional
   protected Asn1Integer minTimeInterval;  // optional
   protected Asn1OpenExt extElem1;

   public ReportingCriteria () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ReportingCriteria (
      TimeWindow timeWindow_,
      Asn1Integer maxNumberofReports_,
      Asn1Integer minTimeInterval_
   ) throws Asn1Exception {
      super();
      setTimeWindow (timeWindow_);
      setMaxNumberofReports (maxNumberofReports_);
      setMinTimeInterval (minTimeInterval_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ReportingCriteria (TimeWindow timeWindow_,
      long maxNumberofReports_,
      long minTimeInterval_
   ) throws Asn1Exception {
      super();
      setTimeWindow (timeWindow_);
      setMaxNumberofReports (maxNumberofReports_);
      setMinTimeInterval (minTimeInterval_);
   }

   public void init () {
      timeWindow = null;
      maxNumberofReports = null;
      minTimeInterval = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof ReportingCriteria) ) return false;

      ReportingCriteria rhs = (ReportingCriteria) obj;

      if (timeWindow == null) {
         if (rhs.timeWindow != null) return false;
      }
      else {
         if (!timeWindow.equals(rhs.timeWindow)) {
            return false;
         }
      }

      if (maxNumberofReports == null) {
         if (rhs.maxNumberofReports != null) return false;
      }
      else {
         if (!maxNumberofReports.equals(rhs.maxNumberofReports)) {
            return false;
         }
      }

      if (minTimeInterval == null) {
         if (rhs.minTimeInterval != null) return false;
      }
      else {
         if (!minTimeInterval.equals(rhs.minTimeInterval)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (timeWindow != null) __code = 31*__code + timeWindow.hashCode();
      if (maxNumberofReports != null) __code = 31*__code + maxNumberofReports.hashCode();
      if (minTimeInterval != null) __code = 31*__code + minTimeInterval.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for TimeWindow
    */
   public TimeWindow getTimeWindow () {
      return timeWindow;
   }

   public void setTimeWindow (TimeWindow value) {
      this.timeWindow = value;
   }

   public boolean hasTimeWindow () {
      return (timeWindow != null);
   }

   /**
    * Accessor/mutator methods for MaxNumberofReports
    */
   public Asn1Integer getMaxNumberofReports () {
      return maxNumberofReports;
   }

   public void setMaxNumberofReports (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 65536))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.maxNumberofReports = value;
   }

   public void setMaxNumberofReports (long value) 
      throws Asn1Exception
   {
      setMaxNumberofReports (new Asn1Integer(value));
   }
   public boolean hasMaxNumberofReports () {
      return (maxNumberofReports != null);
   }

   /**
    * Accessor/mutator methods for MinTimeInterval
    */
   public Asn1Integer getMinTimeInterval () {
      return minTimeInterval;
   }

   public void setMinTimeInterval (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 86400))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.minTimeInterval = value;
   }

   public void setMinTimeInterval (long value) 
      throws Asn1Exception
   {
      setMinTimeInterval (new Asn1Integer(value));
   }
   public boolean hasMinTimeInterval () {
      return (minTimeInterval != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return timeWindow;
         case 1: return maxNumberofReports;
         case 2: return minTimeInterval;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "timeWindow";
         case 1: return "maxNumberofReports";
         case 2: return "minTimeInterval";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean timeWindowPresent = buffer.decodeBit ("timeWindowPresent");
      boolean maxNumberofReportsPresent = buffer.decodeBit ("maxNumberofReportsPresent");
      boolean minTimeIntervalPresent = buffer.decodeBit ("minTimeIntervalPresent");

      // decode timeWindow

      if (timeWindowPresent) {
         buffer.getContext().eventDispatcher.startElement("timeWindow", -1);

         timeWindow = new TimeWindow();
         timeWindow.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("timeWindow", -1);
      }
      else {
         timeWindow = null;
      }

      // decode maxNumberofReports

      if (maxNumberofReportsPresent) {
         buffer.getContext().eventDispatcher.startElement("maxNumberofReports", -1);

         maxNumberofReports = new Asn1Integer();
         maxNumberofReports.decode (buffer, 1, 65536);
         buffer.getContext().eventDispatcher.endElement("maxNumberofReports", -1);
      }
      else {
         maxNumberofReports = null;
      }

      // decode minTimeInterval

      if (minTimeIntervalPresent) {
         buffer.getContext().eventDispatcher.startElement("minTimeInterval", -1);

         minTimeInterval = new Asn1Integer();
         minTimeInterval.decode (buffer, 1, 86400);
         buffer.getContext().eventDispatcher.endElement("minTimeInterval", -1);
      }
      else {
         minTimeInterval = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((timeWindow != null), null);
      buffer.encodeBit ((maxNumberofReports != null), null);
      buffer.encodeBit ((minTimeInterval != null), null);

      // encode timeWindow

      if (timeWindow != null) {
         buffer.getContext().eventDispatcher.startElement("timeWindow", -1);

         timeWindow.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("timeWindow", -1);
      }

      // encode maxNumberofReports

      if (maxNumberofReports != null) {
         buffer.getContext().eventDispatcher.startElement("maxNumberofReports", -1);

         maxNumberofReports.encode (buffer, 1, 65536);

         buffer.getContext().eventDispatcher.endElement("maxNumberofReports", -1);
      }

      // encode minTimeInterval

      if (minTimeInterval != null) {
         buffer.getContext().eventDispatcher.startElement("minTimeInterval", -1);

         minTimeInterval.encode (buffer, 1, 86400);

         buffer.getContext().eventDispatcher.endElement("minTimeInterval", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
