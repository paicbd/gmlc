/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_SystemTime extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-SystemTime";
   }

   protected GNSS_ID gnss_TimeID;
   protected Asn1Integer gnss_DayNumber;
   protected Asn1Integer gnss_TimeOfDay;
   protected Asn1Integer gnss_TimeOfDayFrac_msec;  // optional
   protected Asn1BitString notificationOfLeapSecond;  // optional
   protected GPS_TOW_Assist gps_TOW_Assist;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_SystemTime () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_SystemTime (
      GNSS_ID gnss_TimeID_,
      Asn1Integer gnss_DayNumber_,
      Asn1Integer gnss_TimeOfDay_,
      Asn1Integer gnss_TimeOfDayFrac_msec_,
      Asn1BitString notificationOfLeapSecond_,
      GPS_TOW_Assist gps_TOW_Assist_
   ) throws Asn1Exception {
      super();
      setGnss_TimeID (gnss_TimeID_);
      setGnss_DayNumber (gnss_DayNumber_);
      setGnss_TimeOfDay (gnss_TimeOfDay_);
      setGnss_TimeOfDayFrac_msec (gnss_TimeOfDayFrac_msec_);
      setNotificationOfLeapSecond (notificationOfLeapSecond_);
      setGps_TOW_Assist (gps_TOW_Assist_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GNSS_SystemTime (
      GNSS_ID gnss_TimeID_,
      Asn1Integer gnss_DayNumber_,
      Asn1Integer gnss_TimeOfDay_
   ) throws Asn1Exception {
      super();
      setGnss_TimeID (gnss_TimeID_);
      setGnss_DayNumber (gnss_DayNumber_);
      setGnss_TimeOfDay (gnss_TimeOfDay_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GNSS_SystemTime (GNSS_ID gnss_TimeID_,
      long gnss_DayNumber_,
      long gnss_TimeOfDay_,
      long gnss_TimeOfDayFrac_msec_,
      Asn1BitString notificationOfLeapSecond_,
      GPS_TOW_Assist gps_TOW_Assist_
   ) throws Asn1Exception {
      super();
      setGnss_TimeID (gnss_TimeID_);
      setGnss_DayNumber (gnss_DayNumber_);
      setGnss_TimeOfDay (gnss_TimeOfDay_);
      setGnss_TimeOfDayFrac_msec (gnss_TimeOfDayFrac_msec_);
      setNotificationOfLeapSecond (notificationOfLeapSecond_);
      setGps_TOW_Assist (gps_TOW_Assist_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public GNSS_SystemTime (
      GNSS_ID gnss_TimeID_,
      long gnss_DayNumber_,
      long gnss_TimeOfDay_
   ) throws Asn1Exception {
      super();
      setGnss_TimeID (gnss_TimeID_);
      setGnss_DayNumber (gnss_DayNumber_);
      setGnss_TimeOfDay (gnss_TimeOfDay_);
   }

   public void init () {
      gnss_TimeID = null;
      gnss_DayNumber = null;
      gnss_TimeOfDay = null;
      gnss_TimeOfDayFrac_msec = null;
      notificationOfLeapSecond = null;
      gps_TOW_Assist = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_SystemTime) ) return false;

      GNSS_SystemTime rhs = (GNSS_SystemTime) obj;

      if (gnss_TimeID == null) {
         if (rhs.gnss_TimeID != null) return false;
      }
      else {
         if (!gnss_TimeID.equals(rhs.gnss_TimeID)) {
            return false;
         }
      }

      if (gnss_DayNumber == null) {
         if (rhs.gnss_DayNumber != null) return false;
      }
      else {
         if (!gnss_DayNumber.equals(rhs.gnss_DayNumber)) {
            return false;
         }
      }

      if (gnss_TimeOfDay == null) {
         if (rhs.gnss_TimeOfDay != null) return false;
      }
      else {
         if (!gnss_TimeOfDay.equals(rhs.gnss_TimeOfDay)) {
            return false;
         }
      }

      if (gnss_TimeOfDayFrac_msec == null) {
         if (rhs.gnss_TimeOfDayFrac_msec != null) return false;
      }
      else {
         if (!gnss_TimeOfDayFrac_msec.equals(rhs.gnss_TimeOfDayFrac_msec)) {
            return false;
         }
      }

      if (notificationOfLeapSecond == null) {
         if (rhs.notificationOfLeapSecond != null) return false;
      }
      else {
         if (!notificationOfLeapSecond.equals(rhs.notificationOfLeapSecond)) {
            return false;
         }
      }

      if (gps_TOW_Assist == null) {
         if (rhs.gps_TOW_Assist != null) return false;
      }
      else {
         if (!gps_TOW_Assist.equals(rhs.gps_TOW_Assist)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gnss_TimeID != null) __code = 31*__code + gnss_TimeID.hashCode();
      if (gnss_DayNumber != null) __code = 31*__code + gnss_DayNumber.hashCode();
      if (gnss_TimeOfDay != null) __code = 31*__code + gnss_TimeOfDay.hashCode();
      if (gnss_TimeOfDayFrac_msec != null) __code = 31*__code + gnss_TimeOfDayFrac_msec.hashCode();
      if (notificationOfLeapSecond != null) __code = 31*__code + notificationOfLeapSecond.hashCode();
      if (gps_TOW_Assist != null) __code = 31*__code + gps_TOW_Assist.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Gnss_TimeID
    */
   public GNSS_ID getGnss_TimeID () {
      return gnss_TimeID;
   }

   public void setGnss_TimeID (GNSS_ID value) {
      this.gnss_TimeID = value;
   }

   /**
    * Accessor/mutator methods for Gnss_DayNumber
    */
   public Asn1Integer getGnss_DayNumber () {
      return gnss_DayNumber;
   }

   public void setGnss_DayNumber (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gnss_DayNumber = value;
   }

   public void setGnss_DayNumber (long value) 
      throws Asn1Exception
   {
      setGnss_DayNumber (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Gnss_TimeOfDay
    */
   public Asn1Integer getGnss_TimeOfDay () {
      return gnss_TimeOfDay;
   }

   public void setGnss_TimeOfDay (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 86399))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gnss_TimeOfDay = value;
   }

   public void setGnss_TimeOfDay (long value) 
      throws Asn1Exception
   {
      setGnss_TimeOfDay (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Gnss_TimeOfDayFrac_msec
    */
   public Asn1Integer getGnss_TimeOfDayFrac_msec () {
      return gnss_TimeOfDayFrac_msec;
   }

   public void setGnss_TimeOfDayFrac_msec (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 999))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gnss_TimeOfDayFrac_msec = value;
   }

   public void setGnss_TimeOfDayFrac_msec (long value) 
      throws Asn1Exception
   {
      setGnss_TimeOfDayFrac_msec (new Asn1Integer(value));
   }
   public boolean hasGnss_TimeOfDayFrac_msec () {
      return (gnss_TimeOfDayFrac_msec != null);
   }

   /**
    * Accessor/mutator methods for NotificationOfLeapSecond
    */
   public Asn1BitString getNotificationOfLeapSecond () {
      return notificationOfLeapSecond;
   }

   public void setNotificationOfLeapSecond (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 2)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.notificationOfLeapSecond = value;
   }

   public boolean hasNotificationOfLeapSecond () {
      return (notificationOfLeapSecond != null);
   }

   /**
    * Accessor/mutator methods for Gps_TOW_Assist
    */
   public GPS_TOW_Assist getGps_TOW_Assist () {
      return gps_TOW_Assist;
   }

   public void setGps_TOW_Assist (GPS_TOW_Assist value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 64))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.gps_TOW_Assist = value;
   }

   public boolean hasGps_TOW_Assist () {
      return (gps_TOW_Assist != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gnss_TimeID;
         case 1: return gnss_DayNumber;
         case 2: return gnss_TimeOfDay;
         case 3: return gnss_TimeOfDayFrac_msec;
         case 4: return notificationOfLeapSecond;
         case 5: return gps_TOW_Assist;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gnss-TimeID";
         case 1: return "gnss-DayNumber";
         case 2: return "gnss-TimeOfDay";
         case 3: return "gnss-TimeOfDayFrac-msec";
         case 4: return "notificationOfLeapSecond";
         case 5: return "gps-TOW-Assist";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean gnss_TimeOfDayFrac_msecPresent = buffer.decodeBit ("gnss_TimeOfDayFrac_msecPresent");
      boolean notificationOfLeapSecondPresent = buffer.decodeBit ("notificationOfLeapSecondPresent");
      boolean gps_TOW_AssistPresent = buffer.decodeBit ("gps_TOW_AssistPresent");

      // decode gnss_TimeID

      buffer.getContext().eventDispatcher.startElement("gnss_TimeID", -1);

      gnss_TimeID = new GNSS_ID();
      gnss_TimeID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("gnss_TimeID", -1);

      // decode gnss_DayNumber

      buffer.getContext().eventDispatcher.startElement("gnss_DayNumber", -1);

      gnss_DayNumber = new Asn1Integer();
      gnss_DayNumber.decode (buffer, 0, 32767);
      buffer.getContext().eventDispatcher.endElement("gnss_DayNumber", -1);

      // decode gnss_TimeOfDay

      buffer.getContext().eventDispatcher.startElement("gnss_TimeOfDay", -1);

      gnss_TimeOfDay = new Asn1Integer();
      gnss_TimeOfDay.decode (buffer, 0, 86399);
      buffer.getContext().eventDispatcher.endElement("gnss_TimeOfDay", -1);

      // decode gnss_TimeOfDayFrac_msec

      if (gnss_TimeOfDayFrac_msecPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_TimeOfDayFrac_msec", -1);

         gnss_TimeOfDayFrac_msec = new Asn1Integer();
         gnss_TimeOfDayFrac_msec.decode (buffer, 0, 999);
         buffer.getContext().eventDispatcher.endElement("gnss_TimeOfDayFrac_msec", -1);
      }
      else {
         gnss_TimeOfDayFrac_msec = null;
      }

      // decode notificationOfLeapSecond

      if (notificationOfLeapSecondPresent) {
         buffer.getContext().eventDispatcher.startElement("notificationOfLeapSecond", -1);

         notificationOfLeapSecond = new Asn1BitString();
         notificationOfLeapSecond.decode (buffer, 2, 2);
         buffer.getContext().eventDispatcher.endElement("notificationOfLeapSecond", -1);
      }
      else {
         notificationOfLeapSecond = null;
      }

      // decode gps_TOW_Assist

      if (gps_TOW_AssistPresent) {
         buffer.getContext().eventDispatcher.startElement("gps_TOW_Assist", -1);

         gps_TOW_Assist = new GPS_TOW_Assist();
         gps_TOW_Assist.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gps_TOW_Assist", -1);
      }
      else {
         gps_TOW_Assist = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((gnss_TimeOfDayFrac_msec != null), null);
      buffer.encodeBit ((notificationOfLeapSecond != null), null);
      buffer.encodeBit ((gps_TOW_Assist != null), null);

      // encode gnss_TimeID

      if (gnss_TimeID != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_TimeID", -1);

         gnss_TimeID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_TimeID", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_TimeID");

      // encode gnss_DayNumber

      if (gnss_DayNumber != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_DayNumber", -1);

         gnss_DayNumber.encode (buffer, 0, 32767);

         buffer.getContext().eventDispatcher.endElement("gnss_DayNumber", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_DayNumber");

      // encode gnss_TimeOfDay

      if (gnss_TimeOfDay != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_TimeOfDay", -1);

         gnss_TimeOfDay.encode (buffer, 0, 86399);

         buffer.getContext().eventDispatcher.endElement("gnss_TimeOfDay", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_TimeOfDay");

      // encode gnss_TimeOfDayFrac_msec

      if (gnss_TimeOfDayFrac_msec != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_TimeOfDayFrac_msec", -1);

         gnss_TimeOfDayFrac_msec.encode (buffer, 0, 999);

         buffer.getContext().eventDispatcher.endElement("gnss_TimeOfDayFrac_msec", -1);
      }

      // encode notificationOfLeapSecond

      if (notificationOfLeapSecond != null) {
         buffer.getContext().eventDispatcher.startElement("notificationOfLeapSecond", -1);

         notificationOfLeapSecond.encode (buffer, 2, 2);

         buffer.getContext().eventDispatcher.endElement("notificationOfLeapSecond", -1);
      }

      // encode gps_TOW_Assist

      if (gps_TOW_Assist != null) {
         buffer.getContext().eventDispatcher.startElement("gps_TOW_Assist", -1);

         gps_TOW_Assist.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gps_TOW_Assist", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
