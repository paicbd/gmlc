/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class Ellipsoid_PointWithUncertaintyCircle extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Ellipsoid-PointWithUncertaintyCircle";
   }

   protected Ellipsoid_PointWithUncertaintyCircle_latitudeSign latitudeSign = null;
   protected Asn1Integer degreesLatitude;
   protected Asn1Integer degreesLongitude;
   protected Asn1Integer uncertainty;

   public Ellipsoid_PointWithUncertaintyCircle () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Ellipsoid_PointWithUncertaintyCircle (
      Ellipsoid_PointWithUncertaintyCircle_latitudeSign latitudeSign_,
      Asn1Integer degreesLatitude_,
      Asn1Integer degreesLongitude_,
      Asn1Integer uncertainty_
   ) throws Asn1Exception {
      super();
      setLatitudeSign (latitudeSign_);
      setDegreesLatitude (degreesLatitude_);
      setDegreesLongitude (degreesLongitude_);
      setUncertainty (uncertainty_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Ellipsoid_PointWithUncertaintyCircle (Ellipsoid_PointWithUncertaintyCircle_latitudeSign latitudeSign_,
      long degreesLatitude_,
      long degreesLongitude_,
      long uncertainty_
   ) throws Asn1Exception {
      super();
      setLatitudeSign (latitudeSign_);
      setDegreesLatitude (degreesLatitude_);
      setDegreesLongitude (degreesLongitude_);
      setUncertainty (uncertainty_);
   }

   public void init () {
      latitudeSign = null;
      degreesLatitude = null;
      degreesLongitude = null;
      uncertainty = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Ellipsoid_PointWithUncertaintyCircle) ) return false;

      Ellipsoid_PointWithUncertaintyCircle rhs = (Ellipsoid_PointWithUncertaintyCircle) obj;

      if (latitudeSign == null) {
         if (rhs.latitudeSign != null) return false;
      }
      else {
         if (!latitudeSign.equals(rhs.latitudeSign)) {
            return false;
         }
      }

      if (degreesLatitude == null) {
         if (rhs.degreesLatitude != null) return false;
      }
      else {
         if (!degreesLatitude.equals(rhs.degreesLatitude)) {
            return false;
         }
      }

      if (degreesLongitude == null) {
         if (rhs.degreesLongitude != null) return false;
      }
      else {
         if (!degreesLongitude.equals(rhs.degreesLongitude)) {
            return false;
         }
      }

      if (uncertainty == null) {
         if (rhs.uncertainty != null) return false;
      }
      else {
         if (!uncertainty.equals(rhs.uncertainty)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (latitudeSign != null) __code = 31*__code + latitudeSign.hashCode();
      if (degreesLatitude != null) __code = 31*__code + degreesLatitude.hashCode();
      if (degreesLongitude != null) __code = 31*__code + degreesLongitude.hashCode();
      if (uncertainty != null) __code = 31*__code + uncertainty.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for LatitudeSign
    */
   public Ellipsoid_PointWithUncertaintyCircle_latitudeSign getLatitudeSign () {
      return latitudeSign;
   }

   public void setLatitudeSign (Ellipsoid_PointWithUncertaintyCircle_latitudeSign value) {
      this.latitudeSign = value;
   }

   /**
    * Accessor/mutator methods for DegreesLatitude
    */
   public Asn1Integer getDegreesLatitude () {
      return degreesLatitude;
   }

   public void setDegreesLatitude (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.degreesLatitude = value;
   }

   public void setDegreesLatitude (long value) 
      throws Asn1Exception
   {
      setDegreesLatitude (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for DegreesLongitude
    */
   public Asn1Integer getDegreesLongitude () {
      return degreesLongitude;
   }

   public void setDegreesLongitude (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8388608 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.degreesLongitude = value;
   }

   public void setDegreesLongitude (long value) 
      throws Asn1Exception
   {
      setDegreesLongitude (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Uncertainty
    */
   public Asn1Integer getUncertainty () {
      return uncertainty;
   }

   public void setUncertainty (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.uncertainty = value;
   }

   public void setUncertainty (long value) 
      throws Asn1Exception
   {
      setUncertainty (new Asn1Integer(value));
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return latitudeSign;
         case 1: return degreesLatitude;
         case 2: return degreesLongitude;
         case 3: return uncertainty;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "latitudeSign";
         case 1: return "degreesLatitude";
         case 2: return "degreesLongitude";
         case 3: return "uncertainty";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode latitudeSign

      buffer.getContext().eventDispatcher.startElement("latitudeSign", -1);

      {
         int tval = Ellipsoid_PointWithUncertaintyCircle_latitudeSign.decodeEnumValue (buffer);
         latitudeSign = Ellipsoid_PointWithUncertaintyCircle_latitudeSign.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("latitudeSign", -1);

      // decode degreesLatitude

      buffer.getContext().eventDispatcher.startElement("degreesLatitude", -1);

      degreesLatitude = new Asn1Integer();
      degreesLatitude.decode (buffer, 0, 8388607);
      buffer.getContext().eventDispatcher.endElement("degreesLatitude", -1);

      // decode degreesLongitude

      buffer.getContext().eventDispatcher.startElement("degreesLongitude", -1);

      degreesLongitude = new Asn1Integer();
      degreesLongitude.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("degreesLongitude", -1);

      // decode uncertainty

      buffer.getContext().eventDispatcher.startElement("uncertainty", -1);

      uncertainty = new Asn1Integer();
      uncertainty.decode (buffer, 0, 127);
      buffer.getContext().eventDispatcher.endElement("uncertainty", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode latitudeSign

      if (latitudeSign != null) {
         buffer.getContext().eventDispatcher.startElement("latitudeSign", -1);

         latitudeSign.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("latitudeSign", -1);
      }
      else throw new Asn1MissingRequiredException ("latitudeSign");

      // encode degreesLatitude

      if (degreesLatitude != null) {
         buffer.getContext().eventDispatcher.startElement("degreesLatitude", -1);

         degreesLatitude.encode (buffer, 0, 8388607);

         buffer.getContext().eventDispatcher.endElement("degreesLatitude", -1);
      }
      else throw new Asn1MissingRequiredException ("degreesLatitude");

      // encode degreesLongitude

      if (degreesLongitude != null) {
         buffer.getContext().eventDispatcher.startElement("degreesLongitude", -1);

         degreesLongitude.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("degreesLongitude", -1);
      }
      else throw new Asn1MissingRequiredException ("degreesLongitude");

      // encode uncertainty

      if (uncertainty != null) {
         buffer.getContext().eventDispatcher.startElement("uncertainty", -1);

         uncertainty.encode (buffer, 0, 127);

         buffer.getContext().eventDispatcher.endElement("uncertainty", -1);
      }
      else throw new Asn1MissingRequiredException ("uncertainty");

   }

}
