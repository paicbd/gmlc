/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_EarthOrientationParameters extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-EarthOrientationParameters";
   }

   protected Asn1Integer teop;
   protected Asn1Integer pmX;
   protected Asn1Integer pmXdot;
   protected Asn1Integer pmY;
   protected Asn1Integer pmYdot;
   protected Asn1Integer deltaUT1;
   protected Asn1Integer deltaUT1dot;
   protected Asn1OpenExt extElem1;

   public GNSS_EarthOrientationParameters () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_EarthOrientationParameters (
      Asn1Integer teop_,
      Asn1Integer pmX_,
      Asn1Integer pmXdot_,
      Asn1Integer pmY_,
      Asn1Integer pmYdot_,
      Asn1Integer deltaUT1_,
      Asn1Integer deltaUT1dot_
   ) throws Asn1Exception {
      super();
      setTeop (teop_);
      setPmX (pmX_);
      setPmXdot (pmXdot_);
      setPmY (pmY_);
      setPmYdot (pmYdot_);
      setDeltaUT1 (deltaUT1_);
      setDeltaUT1dot (deltaUT1dot_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GNSS_EarthOrientationParameters (long teop_,
      long pmX_,
      long pmXdot_,
      long pmY_,
      long pmYdot_,
      long deltaUT1_,
      long deltaUT1dot_
   ) throws Asn1Exception {
      super();
      setTeop (teop_);
      setPmX (pmX_);
      setPmXdot (pmXdot_);
      setPmY (pmY_);
      setPmYdot (pmYdot_);
      setDeltaUT1 (deltaUT1_);
      setDeltaUT1dot (deltaUT1dot_);
   }

   public void init () {
      teop = null;
      pmX = null;
      pmXdot = null;
      pmY = null;
      pmYdot = null;
      deltaUT1 = null;
      deltaUT1dot = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_EarthOrientationParameters) ) return false;

      GNSS_EarthOrientationParameters rhs = (GNSS_EarthOrientationParameters) obj;

      if (teop == null) {
         if (rhs.teop != null) return false;
      }
      else {
         if (!teop.equals(rhs.teop)) {
            return false;
         }
      }

      if (pmX == null) {
         if (rhs.pmX != null) return false;
      }
      else {
         if (!pmX.equals(rhs.pmX)) {
            return false;
         }
      }

      if (pmXdot == null) {
         if (rhs.pmXdot != null) return false;
      }
      else {
         if (!pmXdot.equals(rhs.pmXdot)) {
            return false;
         }
      }

      if (pmY == null) {
         if (rhs.pmY != null) return false;
      }
      else {
         if (!pmY.equals(rhs.pmY)) {
            return false;
         }
      }

      if (pmYdot == null) {
         if (rhs.pmYdot != null) return false;
      }
      else {
         if (!pmYdot.equals(rhs.pmYdot)) {
            return false;
         }
      }

      if (deltaUT1 == null) {
         if (rhs.deltaUT1 != null) return false;
      }
      else {
         if (!deltaUT1.equals(rhs.deltaUT1)) {
            return false;
         }
      }

      if (deltaUT1dot == null) {
         if (rhs.deltaUT1dot != null) return false;
      }
      else {
         if (!deltaUT1dot.equals(rhs.deltaUT1dot)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (teop != null) __code = 31*__code + teop.hashCode();
      if (pmX != null) __code = 31*__code + pmX.hashCode();
      if (pmXdot != null) __code = 31*__code + pmXdot.hashCode();
      if (pmY != null) __code = 31*__code + pmY.hashCode();
      if (pmYdot != null) __code = 31*__code + pmYdot.hashCode();
      if (deltaUT1 != null) __code = 31*__code + deltaUT1.hashCode();
      if (deltaUT1dot != null) __code = 31*__code + deltaUT1dot.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Teop
    */
   public Asn1Integer getTeop () {
      return teop;
   }

   public void setTeop (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.teop = value;
   }

   public void setTeop (long value) 
      throws Asn1Exception
   {
      setTeop (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for PmX
    */
   public Asn1Integer getPmX () {
      return pmX;
   }

   public void setPmX (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1048576 && value.value <= 1048575))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.pmX = value;
   }

   public void setPmX (long value) 
      throws Asn1Exception
   {
      setPmX (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for PmXdot
    */
   public Asn1Integer getPmXdot () {
      return pmXdot;
   }

   public void setPmXdot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -16384 && value.value <= 16383))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.pmXdot = value;
   }

   public void setPmXdot (long value) 
      throws Asn1Exception
   {
      setPmXdot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for PmY
    */
   public Asn1Integer getPmY () {
      return pmY;
   }

   public void setPmY (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1048576 && value.value <= 1048575))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.pmY = value;
   }

   public void setPmY (long value) 
      throws Asn1Exception
   {
      setPmY (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for PmYdot
    */
   public Asn1Integer getPmYdot () {
      return pmYdot;
   }

   public void setPmYdot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -16384 && value.value <= 16383))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.pmYdot = value;
   }

   public void setPmYdot (long value) 
      throws Asn1Exception
   {
      setPmYdot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for DeltaUT1
    */
   public Asn1Integer getDeltaUT1 () {
      return deltaUT1;
   }

   public void setDeltaUT1 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1073741824 && value.value <= 1073741823))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.deltaUT1 = value;
   }

   public void setDeltaUT1 (long value) 
      throws Asn1Exception
   {
      setDeltaUT1 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for DeltaUT1dot
    */
   public Asn1Integer getDeltaUT1dot () {
      return deltaUT1dot;
   }

   public void setDeltaUT1dot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -262144 && value.value <= 262143))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.deltaUT1dot = value;
   }

   public void setDeltaUT1dot (long value) 
      throws Asn1Exception
   {
      setDeltaUT1dot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return teop;
         case 1: return pmX;
         case 2: return pmXdot;
         case 3: return pmY;
         case 4: return pmYdot;
         case 5: return deltaUT1;
         case 6: return deltaUT1dot;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "teop";
         case 1: return "pmX";
         case 2: return "pmXdot";
         case 3: return "pmY";
         case 4: return "pmYdot";
         case 5: return "deltaUT1";
         case 6: return "deltaUT1dot";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode teop

      buffer.getContext().eventDispatcher.startElement("teop", -1);

      teop = new Asn1Integer();
      teop.decode (buffer, 0, 65535);
      buffer.getContext().eventDispatcher.endElement("teop", -1);

      // decode pmX

      buffer.getContext().eventDispatcher.startElement("pmX", -1);

      pmX = new Asn1Integer();
      pmX.decode (buffer, -1048576, 1048575);
      buffer.getContext().eventDispatcher.endElement("pmX", -1);

      // decode pmXdot

      buffer.getContext().eventDispatcher.startElement("pmXdot", -1);

      pmXdot = new Asn1Integer();
      pmXdot.decode (buffer, -16384, 16383);
      buffer.getContext().eventDispatcher.endElement("pmXdot", -1);

      // decode pmY

      buffer.getContext().eventDispatcher.startElement("pmY", -1);

      pmY = new Asn1Integer();
      pmY.decode (buffer, -1048576, 1048575);
      buffer.getContext().eventDispatcher.endElement("pmY", -1);

      // decode pmYdot

      buffer.getContext().eventDispatcher.startElement("pmYdot", -1);

      pmYdot = new Asn1Integer();
      pmYdot.decode (buffer, -16384, 16383);
      buffer.getContext().eventDispatcher.endElement("pmYdot", -1);

      // decode deltaUT1

      buffer.getContext().eventDispatcher.startElement("deltaUT1", -1);

      deltaUT1 = new Asn1Integer();
      deltaUT1.decode (buffer, -1073741824, 1073741823);
      buffer.getContext().eventDispatcher.endElement("deltaUT1", -1);

      // decode deltaUT1dot

      buffer.getContext().eventDispatcher.startElement("deltaUT1dot", -1);

      deltaUT1dot = new Asn1Integer();
      deltaUT1dot.decode (buffer, -262144, 262143);
      buffer.getContext().eventDispatcher.endElement("deltaUT1dot", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode teop

      if (teop != null) {
         buffer.getContext().eventDispatcher.startElement("teop", -1);

         teop.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("teop", -1);
      }
      else throw new Asn1MissingRequiredException ("teop");

      // encode pmX

      if (pmX != null) {
         buffer.getContext().eventDispatcher.startElement("pmX", -1);

         pmX.encode (buffer, -1048576, 1048575);

         buffer.getContext().eventDispatcher.endElement("pmX", -1);
      }
      else throw new Asn1MissingRequiredException ("pmX");

      // encode pmXdot

      if (pmXdot != null) {
         buffer.getContext().eventDispatcher.startElement("pmXdot", -1);

         pmXdot.encode (buffer, -16384, 16383);

         buffer.getContext().eventDispatcher.endElement("pmXdot", -1);
      }
      else throw new Asn1MissingRequiredException ("pmXdot");

      // encode pmY

      if (pmY != null) {
         buffer.getContext().eventDispatcher.startElement("pmY", -1);

         pmY.encode (buffer, -1048576, 1048575);

         buffer.getContext().eventDispatcher.endElement("pmY", -1);
      }
      else throw new Asn1MissingRequiredException ("pmY");

      // encode pmYdot

      if (pmYdot != null) {
         buffer.getContext().eventDispatcher.startElement("pmYdot", -1);

         pmYdot.encode (buffer, -16384, 16383);

         buffer.getContext().eventDispatcher.endElement("pmYdot", -1);
      }
      else throw new Asn1MissingRequiredException ("pmYdot");

      // encode deltaUT1

      if (deltaUT1 != null) {
         buffer.getContext().eventDispatcher.startElement("deltaUT1", -1);

         deltaUT1.encode (buffer, -1073741824, 1073741823);

         buffer.getContext().eventDispatcher.endElement("deltaUT1", -1);
      }
      else throw new Asn1MissingRequiredException ("deltaUT1");

      // encode deltaUT1dot

      if (deltaUT1dot != null) {
         buffer.getContext().eventDispatcher.startElement("deltaUT1dot", -1);

         deltaUT1dot.encode (buffer, -262144, 262143);

         buffer.getContext().eventDispatcher.endElement("deltaUT1dot", -1);
      }
      else throw new Asn1MissingRequiredException ("deltaUT1dot");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
