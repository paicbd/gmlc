/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_TRIGGERED_START;

import com.objsys.asn1j.runtime.*;

public class AreaEventParams extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_TRIGGERED_STARTRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_TRIGGERED_STARTRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "AreaEventParams";
   }

   protected AreaEventType areaEventType = null;
   protected Asn1Boolean locationEstimate;
   protected RepeatedReportingParams repeatedReportingParams;  // optional
   protected Asn1Integer startTime;  // optional
   protected Asn1Integer stopTime;  // optional
   protected GeographicTargetAreaList geographicTargetAreaList;  // optional
   protected AreaEventParams_areaIdLists areaIdLists;  // optional
   protected Asn1OpenExt extElem1;

   public AreaEventParams () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AreaEventParams (
      AreaEventType areaEventType_,
      Asn1Boolean locationEstimate_,
      RepeatedReportingParams repeatedReportingParams_,
      Asn1Integer startTime_,
      Asn1Integer stopTime_,
      GeographicTargetAreaList geographicTargetAreaList_,
      AreaEventParams_areaIdLists areaIdLists_
   ) throws Asn1Exception {
      super();
      setAreaEventType (areaEventType_);
      setLocationEstimate (locationEstimate_);
      setRepeatedReportingParams (repeatedReportingParams_);
      setStartTime (startTime_);
      setStopTime (stopTime_);
      setGeographicTargetAreaList (geographicTargetAreaList_);
      setAreaIdLists (areaIdLists_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public AreaEventParams (
      AreaEventType areaEventType_,
      Asn1Boolean locationEstimate_
   ) throws Asn1Exception {
      super();
      setAreaEventType (areaEventType_);
      setLocationEstimate (locationEstimate_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AreaEventParams (AreaEventType areaEventType_,
      boolean locationEstimate_,
      RepeatedReportingParams repeatedReportingParams_,
      long startTime_,
      long stopTime_,
      GeographicTargetAreaList geographicTargetAreaList_,
      AreaEventParams_areaIdLists areaIdLists_
   ) throws Asn1Exception {
      super();
      setAreaEventType (areaEventType_);
      setLocationEstimate (locationEstimate_);
      setRepeatedReportingParams (repeatedReportingParams_);
      setStartTime (startTime_);
      setStopTime (stopTime_);
      setGeographicTargetAreaList (geographicTargetAreaList_);
      setAreaIdLists (areaIdLists_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public AreaEventParams (
      AreaEventType areaEventType_,
      boolean locationEstimate_
   ) throws Asn1Exception {
      super();
      setAreaEventType (areaEventType_);
      setLocationEstimate (locationEstimate_);
   }

   public void init () {
      areaEventType = null;
      locationEstimate = null;
      repeatedReportingParams = null;
      startTime = null;
      stopTime = null;
      geographicTargetAreaList = null;
      areaIdLists = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof AreaEventParams) ) return false;

      AreaEventParams rhs = (AreaEventParams) obj;

      if (areaEventType == null) {
         if (rhs.areaEventType != null) return false;
      }
      else {
         if (!areaEventType.equals(rhs.areaEventType)) {
            return false;
         }
      }

      if (locationEstimate == null) {
         if (rhs.locationEstimate != null) return false;
      }
      else {
         if (!locationEstimate.equals(rhs.locationEstimate)) {
            return false;
         }
      }

      if (repeatedReportingParams == null) {
         if (rhs.repeatedReportingParams != null) return false;
      }
      else {
         if (!repeatedReportingParams.equals(rhs.repeatedReportingParams)) {
            return false;
         }
      }

      if (startTime == null) {
         if (rhs.startTime != null) return false;
      }
      else {
         if (!startTime.equals(rhs.startTime)) {
            return false;
         }
      }

      if (stopTime == null) {
         if (rhs.stopTime != null) return false;
      }
      else {
         if (!stopTime.equals(rhs.stopTime)) {
            return false;
         }
      }

      if (geographicTargetAreaList == null) {
         if (rhs.geographicTargetAreaList != null) return false;
      }
      else {
         if (!geographicTargetAreaList.equals(rhs.geographicTargetAreaList)) {
            return false;
         }
      }

      if (areaIdLists == null) {
         if (rhs.areaIdLists != null) return false;
      }
      else {
         if (!areaIdLists.equals(rhs.areaIdLists)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (areaEventType != null) __code = 31*__code + areaEventType.hashCode();
      if (locationEstimate != null) __code = 31*__code + locationEstimate.hashCode();
      if (repeatedReportingParams != null) __code = 31*__code + repeatedReportingParams.hashCode();
      if (startTime != null) __code = 31*__code + startTime.hashCode();
      if (stopTime != null) __code = 31*__code + stopTime.hashCode();
      if (geographicTargetAreaList != null) __code = 31*__code + geographicTargetAreaList.hashCode();
      if (areaIdLists != null) __code = 31*__code + areaIdLists.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for AreaEventType
    */
   public AreaEventType getAreaEventType () {
      return areaEventType;
   }

   public void setAreaEventType (AreaEventType value) {
      this.areaEventType = value;
   }

   /**
    * Accessor/mutator methods for LocationEstimate
    */
   public Asn1Boolean getLocationEstimate () {
      return locationEstimate;
   }

   public void setLocationEstimate (Asn1Boolean value) {
      this.locationEstimate = value;
   }

   public void setLocationEstimate (boolean value) {
      setLocationEstimate (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for RepeatedReportingParams
    */
   public RepeatedReportingParams getRepeatedReportingParams () {
      return repeatedReportingParams;
   }

   public void setRepeatedReportingParams (RepeatedReportingParams value) {
      this.repeatedReportingParams = value;
   }

   public boolean hasRepeatedReportingParams () {
      return (repeatedReportingParams != null);
   }

   /**
    * Accessor/mutator methods for StartTime
    */
   public Asn1Integer getStartTime () {
      return startTime;
   }

   public void setStartTime (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 2678400))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.startTime = value;
   }

   public void setStartTime (long value) 
      throws Asn1Exception
   {
      setStartTime (new Asn1Integer(value));
   }
   public boolean hasStartTime () {
      return (startTime != null);
   }

   /**
    * Accessor/mutator methods for StopTime
    */
   public Asn1Integer getStopTime () {
      return stopTime;
   }

   public void setStopTime (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 11318399))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.stopTime = value;
   }

   public void setStopTime (long value) 
      throws Asn1Exception
   {
      setStopTime (new Asn1Integer(value));
   }
   public boolean hasStopTime () {
      return (stopTime != null);
   }

   /**
    * Accessor/mutator methods for GeographicTargetAreaList
    */
   public GeographicTargetAreaList getGeographicTargetAreaList () {
      return geographicTargetAreaList;
   }

   public void setGeographicTargetAreaList (GeographicTargetAreaList value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 32))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.geographicTargetAreaList = value;
   }

   public boolean hasGeographicTargetAreaList () {
      return (geographicTargetAreaList != null);
   }

   /**
    * Accessor/mutator methods for AreaIdLists
    */
   public AreaEventParams_areaIdLists getAreaIdLists () {
      return areaIdLists;
   }

   public void setAreaIdLists (AreaEventParams_areaIdLists value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 32))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.areaIdLists = value;
   }

   public boolean hasAreaIdLists () {
      return (areaIdLists != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return areaEventType;
         case 1: return locationEstimate;
         case 2: return repeatedReportingParams;
         case 3: return startTime;
         case 4: return stopTime;
         case 5: return geographicTargetAreaList;
         case 6: return areaIdLists;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "areaEventType";
         case 1: return "locationEstimate";
         case 2: return "repeatedReportingParams";
         case 3: return "startTime";
         case 4: return "stopTime";
         case 5: return "geographicTargetAreaList";
         case 6: return "areaIdLists";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean repeatedReportingParamsPresent = buffer.decodeBit ("repeatedReportingParamsPresent");
      boolean startTimePresent = buffer.decodeBit ("startTimePresent");
      boolean stopTimePresent = buffer.decodeBit ("stopTimePresent");
      boolean geographicTargetAreaListPresent = buffer.decodeBit ("geographicTargetAreaListPresent");
      boolean areaIdListsPresent = buffer.decodeBit ("areaIdListsPresent");

      // decode areaEventType

      buffer.getContext().eventDispatcher.startElement("areaEventType", -1);

      {
         int tval = AreaEventType.decodeEnumValue (buffer);
         areaEventType = AreaEventType.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("areaEventType", -1);

      // decode locationEstimate

      buffer.getContext().eventDispatcher.startElement("locationEstimate", -1);

      locationEstimate = new Asn1Boolean();
      locationEstimate.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("locationEstimate", -1);

      // decode repeatedReportingParams

      if (repeatedReportingParamsPresent) {
         buffer.getContext().eventDispatcher.startElement("repeatedReportingParams", -1);

         repeatedReportingParams = new RepeatedReportingParams();
         repeatedReportingParams.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("repeatedReportingParams", -1);
      }
      else {
         repeatedReportingParams = null;
      }

      // decode startTime

      if (startTimePresent) {
         buffer.getContext().eventDispatcher.startElement("startTime", -1);

         startTime = new Asn1Integer();
         startTime.decode (buffer, 0, 2678400);
         buffer.getContext().eventDispatcher.endElement("startTime", -1);
      }
      else {
         startTime = null;
      }

      // decode stopTime

      if (stopTimePresent) {
         buffer.getContext().eventDispatcher.startElement("stopTime", -1);

         stopTime = new Asn1Integer();
         stopTime.decode (buffer, 0, 11318399);
         buffer.getContext().eventDispatcher.endElement("stopTime", -1);
      }
      else {
         stopTime = null;
      }

      // decode geographicTargetAreaList

      if (geographicTargetAreaListPresent) {
         buffer.getContext().eventDispatcher.startElement("geographicTargetAreaList", -1);

         geographicTargetAreaList = new GeographicTargetAreaList();
         geographicTargetAreaList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("geographicTargetAreaList", -1);
      }
      else {
         geographicTargetAreaList = null;
      }

      // decode areaIdLists

      if (areaIdListsPresent) {
         buffer.getContext().eventDispatcher.startElement("areaIdLists", -1);

         areaIdLists = new AreaEventParams_areaIdLists();
         areaIdLists.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("areaIdLists", -1);
      }
      else {
         areaIdLists = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((repeatedReportingParams != null), null);
      buffer.encodeBit ((startTime != null), null);
      buffer.encodeBit ((stopTime != null), null);
      buffer.encodeBit ((geographicTargetAreaList != null), null);
      buffer.encodeBit ((areaIdLists != null), null);

      // encode areaEventType

      if (areaEventType != null) {
         buffer.getContext().eventDispatcher.startElement("areaEventType", -1);

         areaEventType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("areaEventType", -1);
      }
      else throw new Asn1MissingRequiredException ("areaEventType");

      // encode locationEstimate

      if (locationEstimate != null) {
         buffer.getContext().eventDispatcher.startElement("locationEstimate", -1);

         locationEstimate.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("locationEstimate", -1);
      }
      else throw new Asn1MissingRequiredException ("locationEstimate");

      // encode repeatedReportingParams

      if (repeatedReportingParams != null) {
         buffer.getContext().eventDispatcher.startElement("repeatedReportingParams", -1);

         repeatedReportingParams.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("repeatedReportingParams", -1);
      }

      // encode startTime

      if (startTime != null) {
         buffer.getContext().eventDispatcher.startElement("startTime", -1);

         startTime.encode (buffer, 0, 2678400);

         buffer.getContext().eventDispatcher.endElement("startTime", -1);
      }

      // encode stopTime

      if (stopTime != null) {
         buffer.getContext().eventDispatcher.startElement("stopTime", -1);

         stopTime.encode (buffer, 0, 11318399);

         buffer.getContext().eventDispatcher.endElement("stopTime", -1);
      }

      // encode geographicTargetAreaList

      if (geographicTargetAreaList != null) {
         buffer.getContext().eventDispatcher.startElement("geographicTargetAreaList", -1);

         geographicTargetAreaList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("geographicTargetAreaList", -1);
      }

      // encode areaIdLists

      if (areaIdLists != null) {
         buffer.getContext().eventDispatcher.startElement("areaIdLists", -1);

         areaIdLists.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("areaIdLists", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
