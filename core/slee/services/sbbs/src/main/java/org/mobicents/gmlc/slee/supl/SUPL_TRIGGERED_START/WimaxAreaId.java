/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_TRIGGERED_START;

import com.objsys.asn1j.runtime.*;

public class WimaxAreaId extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_TRIGGERED_STARTRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_TRIGGERED_STARTRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "WimaxAreaId";
   }

   protected Asn1BitString bsID_MSB;  // optional
   protected Asn1BitString bsID_LSB;

   public WimaxAreaId () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public WimaxAreaId (
      Asn1BitString bsID_MSB_,
      Asn1BitString bsID_LSB_
   ) throws Asn1Exception {
      super();
      setBsID_MSB (bsID_MSB_);
      setBsID_LSB (bsID_LSB_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public WimaxAreaId (
      Asn1BitString bsID_LSB_
   ) throws Asn1Exception {
      super();
      setBsID_LSB (bsID_LSB_);
   }

   public void init () {
      bsID_MSB = null;
      bsID_LSB = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof WimaxAreaId) ) return false;

      WimaxAreaId rhs = (WimaxAreaId) obj;

      if (bsID_MSB == null) {
         if (rhs.bsID_MSB != null) return false;
      }
      else {
         if (!bsID_MSB.equals(rhs.bsID_MSB)) {
            return false;
         }
      }

      if (bsID_LSB == null) {
         if (rhs.bsID_LSB != null) return false;
      }
      else {
         if (!bsID_LSB.equals(rhs.bsID_LSB)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (bsID_MSB != null) __code = 31*__code + bsID_MSB.hashCode();
      if (bsID_LSB != null) __code = 31*__code + bsID_LSB.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for BsID_MSB
    */
   public Asn1BitString getBsID_MSB () {
      return bsID_MSB;
   }

   public void setBsID_MSB (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 24)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.bsID_MSB = value;
   }

   public boolean hasBsID_MSB () {
      return (bsID_MSB != null);
   }

   /**
    * Accessor/mutator methods for BsID_LSB
    */
   public Asn1BitString getBsID_LSB () {
      return bsID_LSB;
   }

   public void setBsID_LSB (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 24)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.bsID_LSB = value;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return bsID_MSB;
         case 1: return bsID_LSB;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "bsID-MSB";
         case 1: return "bsID-LSB";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean bsID_MSBPresent = buffer.decodeBit ("bsID_MSBPresent");

      // decode bsID_MSB

      if (bsID_MSBPresent) {
         buffer.getContext().eventDispatcher.startElement("bsID_MSB", -1);

         bsID_MSB = new Asn1BitString();
         bsID_MSB.decode (buffer, 24, 24);
         buffer.getContext().eventDispatcher.endElement("bsID_MSB", -1);
      }
      else {
         bsID_MSB = null;
      }

      // decode bsID_LSB

      buffer.getContext().eventDispatcher.startElement("bsID_LSB", -1);

      bsID_LSB = new Asn1BitString();
      bsID_LSB.decode (buffer, 24, 24);
      buffer.getContext().eventDispatcher.endElement("bsID_LSB", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((bsID_MSB != null), null);

      // encode bsID_MSB

      if (bsID_MSB != null) {
         buffer.getContext().eventDispatcher.startElement("bsID_MSB", -1);

         bsID_MSB.encode (buffer, 24, 24);

         buffer.getContext().eventDispatcher.endElement("bsID_MSB", -1);
      }

      // encode bsID_LSB

      if (bsID_LSB != null) {
         buffer.getContext().eventDispatcher.startElement("bsID_LSB", -1);

         bsID_LSB.encode (buffer, 24, 24);

         buffer.getContext().eventDispatcher.endElement("bsID_LSB", -1);
      }
      else throw new Asn1MissingRequiredException ("bsID_LSB");

   }

}
