/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class BatchRepCap extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "BatchRepCap";
   }

   protected Asn1Boolean report_position;
   protected Asn1Boolean report_measurements;
   protected Asn1Integer max_num_positions;  // optional
   protected Asn1Integer max_num_measurements;  // optional
   protected Asn1OpenExt extElem1;

   public BatchRepCap () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BatchRepCap (
      Asn1Boolean report_position_,
      Asn1Boolean report_measurements_,
      Asn1Integer max_num_positions_,
      Asn1Integer max_num_measurements_
   ) throws Asn1Exception {
      super();
      setReport_position (report_position_);
      setReport_measurements (report_measurements_);
      setMax_num_positions (max_num_positions_);
      setMax_num_measurements (max_num_measurements_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public BatchRepCap (
      Asn1Boolean report_position_,
      Asn1Boolean report_measurements_
   ) throws Asn1Exception {
      super();
      setReport_position (report_position_);
      setReport_measurements (report_measurements_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public BatchRepCap (boolean report_position_,
      boolean report_measurements_,
      long max_num_positions_,
      long max_num_measurements_
   ) throws Asn1Exception {
      super();
      setReport_position (report_position_);
      setReport_measurements (report_measurements_);
      setMax_num_positions (max_num_positions_);
      setMax_num_measurements (max_num_measurements_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public BatchRepCap (
      boolean report_position_,
      boolean report_measurements_
   ) throws Asn1Exception {
      super();
      setReport_position (report_position_);
      setReport_measurements (report_measurements_);
   }

   public void init () {
      report_position = null;
      report_measurements = null;
      max_num_positions = null;
      max_num_measurements = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof BatchRepCap) ) return false;

      BatchRepCap rhs = (BatchRepCap) obj;

      if (report_position == null) {
         if (rhs.report_position != null) return false;
      }
      else {
         if (!report_position.equals(rhs.report_position)) {
            return false;
         }
      }

      if (report_measurements == null) {
         if (rhs.report_measurements != null) return false;
      }
      else {
         if (!report_measurements.equals(rhs.report_measurements)) {
            return false;
         }
      }

      if (max_num_positions == null) {
         if (rhs.max_num_positions != null) return false;
      }
      else {
         if (!max_num_positions.equals(rhs.max_num_positions)) {
            return false;
         }
      }

      if (max_num_measurements == null) {
         if (rhs.max_num_measurements != null) return false;
      }
      else {
         if (!max_num_measurements.equals(rhs.max_num_measurements)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (report_position != null) __code = 31*__code + report_position.hashCode();
      if (report_measurements != null) __code = 31*__code + report_measurements.hashCode();
      if (max_num_positions != null) __code = 31*__code + max_num_positions.hashCode();
      if (max_num_measurements != null) __code = 31*__code + max_num_measurements.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Report_position
    */
   public Asn1Boolean getReport_position () {
      return report_position;
   }

   public void setReport_position (Asn1Boolean value) {
      this.report_position = value;
   }

   public void setReport_position (boolean value) {
      setReport_position (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Report_measurements
    */
   public Asn1Boolean getReport_measurements () {
      return report_measurements;
   }

   public void setReport_measurements (Asn1Boolean value) {
      this.report_measurements = value;
   }

   public void setReport_measurements (boolean value) {
      setReport_measurements (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Max_num_positions
    */
   public Asn1Integer getMax_num_positions () {
      return max_num_positions;
   }

   public void setMax_num_positions (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 1024))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.max_num_positions = value;
   }

   public void setMax_num_positions (long value) 
      throws Asn1Exception
   {
      setMax_num_positions (new Asn1Integer(value));
   }
   public boolean hasMax_num_positions () {
      return (max_num_positions != null);
   }

   /**
    * Accessor/mutator methods for Max_num_measurements
    */
   public Asn1Integer getMax_num_measurements () {
      return max_num_measurements;
   }

   public void setMax_num_measurements (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 1024))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.max_num_measurements = value;
   }

   public void setMax_num_measurements (long value) 
      throws Asn1Exception
   {
      setMax_num_measurements (new Asn1Integer(value));
   }
   public boolean hasMax_num_measurements () {
      return (max_num_measurements != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return report_position;
         case 1: return report_measurements;
         case 2: return max_num_positions;
         case 3: return max_num_measurements;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "report-position";
         case 1: return "report-measurements";
         case 2: return "max-num-positions";
         case 3: return "max-num-measurements";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean max_num_positionsPresent = buffer.decodeBit ("max_num_positionsPresent");
      boolean max_num_measurementsPresent = buffer.decodeBit ("max_num_measurementsPresent");

      // decode report_position

      buffer.getContext().eventDispatcher.startElement("report_position", -1);

      report_position = new Asn1Boolean();
      report_position.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("report_position", -1);

      // decode report_measurements

      buffer.getContext().eventDispatcher.startElement("report_measurements", -1);

      report_measurements = new Asn1Boolean();
      report_measurements.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("report_measurements", -1);

      // decode max_num_positions

      if (max_num_positionsPresent) {
         buffer.getContext().eventDispatcher.startElement("max_num_positions", -1);

         max_num_positions = new Asn1Integer();
         max_num_positions.decode (buffer, 1, 1024);
         buffer.getContext().eventDispatcher.endElement("max_num_positions", -1);
      }
      else {
         max_num_positions = null;
      }

      // decode max_num_measurements

      if (max_num_measurementsPresent) {
         buffer.getContext().eventDispatcher.startElement("max_num_measurements", -1);

         max_num_measurements = new Asn1Integer();
         max_num_measurements.decode (buffer, 1, 1024);
         buffer.getContext().eventDispatcher.endElement("max_num_measurements", -1);
      }
      else {
         max_num_measurements = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((max_num_positions != null), null);
      buffer.encodeBit ((max_num_measurements != null), null);

      // encode report_position

      if (report_position != null) {
         buffer.getContext().eventDispatcher.startElement("report_position", -1);

         report_position.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("report_position", -1);
      }
      else throw new Asn1MissingRequiredException ("report_position");

      // encode report_measurements

      if (report_measurements != null) {
         buffer.getContext().eventDispatcher.startElement("report_measurements", -1);

         report_measurements.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("report_measurements", -1);
      }
      else throw new Asn1MissingRequiredException ("report_measurements");

      // encode max_num_positions

      if (max_num_positions != null) {
         buffer.getContext().eventDispatcher.startElement("max_num_positions", -1);

         max_num_positions.encode (buffer, 1, 1024);

         buffer.getContext().eventDispatcher.endElement("max_num_positions", -1);
      }

      // encode max_num_measurements

      if (max_num_measurements != null) {
         buffer.getContext().eventDispatcher.startElement("max_num_measurements", -1);

         max_num_measurements.encode (buffer, 1, 1024);

         buffer.getContext().eventDispatcher.endElement("max_num_measurements", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
