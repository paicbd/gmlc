/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Version_2_message_extensions;

import com.objsys.asn1j.runtime.*;

public class AMF_Identifier extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_Version_2_message_extensionsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_Version_2_message_extensionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "AMF-Identifier";
   }

   protected Asn1BitString amf_Region_ID;
   protected Asn1BitString amf_Set_ID;
   protected Asn1BitString amf_Pointer;

   public AMF_Identifier () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AMF_Identifier (
      Asn1BitString amf_Region_ID_,
      Asn1BitString amf_Set_ID_,
      Asn1BitString amf_Pointer_
   ) throws Asn1Exception {
      super();
      setAmf_Region_ID (amf_Region_ID_);
      setAmf_Set_ID (amf_Set_ID_);
      setAmf_Pointer (amf_Pointer_);
   }

   public void init () {
      amf_Region_ID = null;
      amf_Set_ID = null;
      amf_Pointer = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof AMF_Identifier) ) return false;

      AMF_Identifier rhs = (AMF_Identifier) obj;

      if (amf_Region_ID == null) {
         if (rhs.amf_Region_ID != null) return false;
      }
      else {
         if (!amf_Region_ID.equals(rhs.amf_Region_ID)) {
            return false;
         }
      }

      if (amf_Set_ID == null) {
         if (rhs.amf_Set_ID != null) return false;
      }
      else {
         if (!amf_Set_ID.equals(rhs.amf_Set_ID)) {
            return false;
         }
      }

      if (amf_Pointer == null) {
         if (rhs.amf_Pointer != null) return false;
      }
      else {
         if (!amf_Pointer.equals(rhs.amf_Pointer)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (amf_Region_ID != null) __code = 31*__code + amf_Region_ID.hashCode();
      if (amf_Set_ID != null) __code = 31*__code + amf_Set_ID.hashCode();
      if (amf_Pointer != null) __code = 31*__code + amf_Pointer.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Amf_Region_ID
    */
   public Asn1BitString getAmf_Region_ID () {
      return amf_Region_ID;
   }

   public void setAmf_Region_ID (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 8)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.amf_Region_ID = value;
   }

   /**
    * Accessor/mutator methods for Amf_Set_ID
    */
   public Asn1BitString getAmf_Set_ID () {
      return amf_Set_ID;
   }

   public void setAmf_Set_ID (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 10)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.amf_Set_ID = value;
   }

   /**
    * Accessor/mutator methods for Amf_Pointer
    */
   public Asn1BitString getAmf_Pointer () {
      return amf_Pointer;
   }

   public void setAmf_Pointer (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 6)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.amf_Pointer = value;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return amf_Region_ID;
         case 1: return amf_Set_ID;
         case 2: return amf_Pointer;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "amf-Region-ID";
         case 1: return "amf-Set-ID";
         case 2: return "amf-Pointer";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode amf_Region_ID

      buffer.getContext().eventDispatcher.startElement("amf_Region_ID", -1);

      amf_Region_ID = new Asn1BitString();
      amf_Region_ID.decode (buffer, 8, 8);
      buffer.getContext().eventDispatcher.endElement("amf_Region_ID", -1);

      // decode amf_Set_ID

      buffer.getContext().eventDispatcher.startElement("amf_Set_ID", -1);

      amf_Set_ID = new Asn1BitString();
      amf_Set_ID.decode (buffer, 10, 10);
      buffer.getContext().eventDispatcher.endElement("amf_Set_ID", -1);

      // decode amf_Pointer

      buffer.getContext().eventDispatcher.startElement("amf_Pointer", -1);

      amf_Pointer = new Asn1BitString();
      amf_Pointer.decode (buffer, 6, 6);
      buffer.getContext().eventDispatcher.endElement("amf_Pointer", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode amf_Region_ID

      if (amf_Region_ID != null) {
         buffer.getContext().eventDispatcher.startElement("amf_Region_ID", -1);

         amf_Region_ID.encode (buffer, 8, 8);

         buffer.getContext().eventDispatcher.endElement("amf_Region_ID", -1);
      }
      else throw new Asn1MissingRequiredException ("amf_Region_ID");

      // encode amf_Set_ID

      if (amf_Set_ID != null) {
         buffer.getContext().eventDispatcher.startElement("amf_Set_ID", -1);

         amf_Set_ID.encode (buffer, 10, 10);

         buffer.getContext().eventDispatcher.endElement("amf_Set_ID", -1);
      }
      else throw new Asn1MissingRequiredException ("amf_Set_ID");

      // encode amf_Pointer

      if (amf_Pointer != null) {
         buffer.getContext().eventDispatcher.startElement("amf_Pointer", -1);

         amf_Pointer.encode (buffer, 6, 6);

         buffer.getContext().eventDispatcher.endElement("amf_Pointer", -1);
      }
      else throw new Asn1MissingRequiredException ("amf_Pointer");

   }

}
