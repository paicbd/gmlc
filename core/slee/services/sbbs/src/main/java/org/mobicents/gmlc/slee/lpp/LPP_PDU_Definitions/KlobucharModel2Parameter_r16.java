/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class KlobucharModel2Parameter_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "KlobucharModel2Parameter-r16";
   }

   protected Asn1Integer alfa1_r16;
   protected Asn1Integer alfa2_r16;
   protected Asn1Integer alfa3_r16;
   protected Asn1Integer alfa4_r16;
   protected Asn1Integer alfa5_r16;
   protected Asn1Integer alfa6_r16;
   protected Asn1Integer alfa7_r16;
   protected Asn1Integer alfa8_r16;
   protected Asn1Integer alfa9_r16;
   protected Asn1OpenExt extElem1;

   public KlobucharModel2Parameter_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public KlobucharModel2Parameter_r16 (
      Asn1Integer alfa1_r16_,
      Asn1Integer alfa2_r16_,
      Asn1Integer alfa3_r16_,
      Asn1Integer alfa4_r16_,
      Asn1Integer alfa5_r16_,
      Asn1Integer alfa6_r16_,
      Asn1Integer alfa7_r16_,
      Asn1Integer alfa8_r16_,
      Asn1Integer alfa9_r16_
   ) throws Asn1Exception {
      super();
      setAlfa1_r16 (alfa1_r16_);
      setAlfa2_r16 (alfa2_r16_);
      setAlfa3_r16 (alfa3_r16_);
      setAlfa4_r16 (alfa4_r16_);
      setAlfa5_r16 (alfa5_r16_);
      setAlfa6_r16 (alfa6_r16_);
      setAlfa7_r16 (alfa7_r16_);
      setAlfa8_r16 (alfa8_r16_);
      setAlfa9_r16 (alfa9_r16_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public KlobucharModel2Parameter_r16 (long alfa1_r16_,
      long alfa2_r16_,
      long alfa3_r16_,
      long alfa4_r16_,
      long alfa5_r16_,
      long alfa6_r16_,
      long alfa7_r16_,
      long alfa8_r16_,
      long alfa9_r16_
   ) throws Asn1Exception {
      super();
      setAlfa1_r16 (alfa1_r16_);
      setAlfa2_r16 (alfa2_r16_);
      setAlfa3_r16 (alfa3_r16_);
      setAlfa4_r16 (alfa4_r16_);
      setAlfa5_r16 (alfa5_r16_);
      setAlfa6_r16 (alfa6_r16_);
      setAlfa7_r16 (alfa7_r16_);
      setAlfa8_r16 (alfa8_r16_);
      setAlfa9_r16 (alfa9_r16_);
   }

   public void init () {
      alfa1_r16 = null;
      alfa2_r16 = null;
      alfa3_r16 = null;
      alfa4_r16 = null;
      alfa5_r16 = null;
      alfa6_r16 = null;
      alfa7_r16 = null;
      alfa8_r16 = null;
      alfa9_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof KlobucharModel2Parameter_r16) ) return false;

      KlobucharModel2Parameter_r16 rhs = (KlobucharModel2Parameter_r16) obj;

      if (alfa1_r16 == null) {
         if (rhs.alfa1_r16 != null) return false;
      }
      else {
         if (!alfa1_r16.equals(rhs.alfa1_r16)) {
            return false;
         }
      }

      if (alfa2_r16 == null) {
         if (rhs.alfa2_r16 != null) return false;
      }
      else {
         if (!alfa2_r16.equals(rhs.alfa2_r16)) {
            return false;
         }
      }

      if (alfa3_r16 == null) {
         if (rhs.alfa3_r16 != null) return false;
      }
      else {
         if (!alfa3_r16.equals(rhs.alfa3_r16)) {
            return false;
         }
      }

      if (alfa4_r16 == null) {
         if (rhs.alfa4_r16 != null) return false;
      }
      else {
         if (!alfa4_r16.equals(rhs.alfa4_r16)) {
            return false;
         }
      }

      if (alfa5_r16 == null) {
         if (rhs.alfa5_r16 != null) return false;
      }
      else {
         if (!alfa5_r16.equals(rhs.alfa5_r16)) {
            return false;
         }
      }

      if (alfa6_r16 == null) {
         if (rhs.alfa6_r16 != null) return false;
      }
      else {
         if (!alfa6_r16.equals(rhs.alfa6_r16)) {
            return false;
         }
      }

      if (alfa7_r16 == null) {
         if (rhs.alfa7_r16 != null) return false;
      }
      else {
         if (!alfa7_r16.equals(rhs.alfa7_r16)) {
            return false;
         }
      }

      if (alfa8_r16 == null) {
         if (rhs.alfa8_r16 != null) return false;
      }
      else {
         if (!alfa8_r16.equals(rhs.alfa8_r16)) {
            return false;
         }
      }

      if (alfa9_r16 == null) {
         if (rhs.alfa9_r16 != null) return false;
      }
      else {
         if (!alfa9_r16.equals(rhs.alfa9_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (alfa1_r16 != null) __code = 31*__code + alfa1_r16.hashCode();
      if (alfa2_r16 != null) __code = 31*__code + alfa2_r16.hashCode();
      if (alfa3_r16 != null) __code = 31*__code + alfa3_r16.hashCode();
      if (alfa4_r16 != null) __code = 31*__code + alfa4_r16.hashCode();
      if (alfa5_r16 != null) __code = 31*__code + alfa5_r16.hashCode();
      if (alfa6_r16 != null) __code = 31*__code + alfa6_r16.hashCode();
      if (alfa7_r16 != null) __code = 31*__code + alfa7_r16.hashCode();
      if (alfa8_r16 != null) __code = 31*__code + alfa8_r16.hashCode();
      if (alfa9_r16 != null) __code = 31*__code + alfa9_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Alfa1_r16
    */
   public Asn1Integer getAlfa1_r16 () {
      return alfa1_r16;
   }

   public void setAlfa1_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.alfa1_r16 = value;
   }

   public void setAlfa1_r16 (long value) 
      throws Asn1Exception
   {
      setAlfa1_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Alfa2_r16
    */
   public Asn1Integer getAlfa2_r16 () {
      return alfa2_r16;
   }

   public void setAlfa2_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.alfa2_r16 = value;
   }

   public void setAlfa2_r16 (long value) 
      throws Asn1Exception
   {
      setAlfa2_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Alfa3_r16
    */
   public Asn1Integer getAlfa3_r16 () {
      return alfa3_r16;
   }

   public void setAlfa3_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.alfa3_r16 = value;
   }

   public void setAlfa3_r16 (long value) 
      throws Asn1Exception
   {
      setAlfa3_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Alfa4_r16
    */
   public Asn1Integer getAlfa4_r16 () {
      return alfa4_r16;
   }

   public void setAlfa4_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.alfa4_r16 = value;
   }

   public void setAlfa4_r16 (long value) 
      throws Asn1Exception
   {
      setAlfa4_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Alfa5_r16
    */
   public Asn1Integer getAlfa5_r16 () {
      return alfa5_r16;
   }

   public void setAlfa5_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.alfa5_r16 = value;
   }

   public void setAlfa5_r16 (long value) 
      throws Asn1Exception
   {
      setAlfa5_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Alfa6_r16
    */
   public Asn1Integer getAlfa6_r16 () {
      return alfa6_r16;
   }

   public void setAlfa6_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.alfa6_r16 = value;
   }

   public void setAlfa6_r16 (long value) 
      throws Asn1Exception
   {
      setAlfa6_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Alfa7_r16
    */
   public Asn1Integer getAlfa7_r16 () {
      return alfa7_r16;
   }

   public void setAlfa7_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.alfa7_r16 = value;
   }

   public void setAlfa7_r16 (long value) 
      throws Asn1Exception
   {
      setAlfa7_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Alfa8_r16
    */
   public Asn1Integer getAlfa8_r16 () {
      return alfa8_r16;
   }

   public void setAlfa8_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.alfa8_r16 = value;
   }

   public void setAlfa8_r16 (long value) 
      throws Asn1Exception
   {
      setAlfa8_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Alfa9_r16
    */
   public Asn1Integer getAlfa9_r16 () {
      return alfa9_r16;
   }

   public void setAlfa9_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.alfa9_r16 = value;
   }

   public void setAlfa9_r16 (long value) 
      throws Asn1Exception
   {
      setAlfa9_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return alfa1_r16;
         case 1: return alfa2_r16;
         case 2: return alfa3_r16;
         case 3: return alfa4_r16;
         case 4: return alfa5_r16;
         case 5: return alfa6_r16;
         case 6: return alfa7_r16;
         case 7: return alfa8_r16;
         case 8: return alfa9_r16;
         case 9: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "alfa1-r16";
         case 1: return "alfa2-r16";
         case 2: return "alfa3-r16";
         case 3: return "alfa4-r16";
         case 4: return "alfa5-r16";
         case 5: return "alfa6-r16";
         case 6: return "alfa7-r16";
         case 7: return "alfa8-r16";
         case 8: return "alfa9-r16";
         case 9: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode alfa1_r16

      buffer.getContext().eventDispatcher.startElement("alfa1_r16", -1);

      alfa1_r16 = new Asn1Integer();
      alfa1_r16.decode (buffer, 0, 1023);
      buffer.getContext().eventDispatcher.endElement("alfa1_r16", -1);

      // decode alfa2_r16

      buffer.getContext().eventDispatcher.startElement("alfa2_r16", -1);

      alfa2_r16 = new Asn1Integer();
      alfa2_r16.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("alfa2_r16", -1);

      // decode alfa3_r16

      buffer.getContext().eventDispatcher.startElement("alfa3_r16", -1);

      alfa3_r16 = new Asn1Integer();
      alfa3_r16.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("alfa3_r16", -1);

      // decode alfa4_r16

      buffer.getContext().eventDispatcher.startElement("alfa4_r16", -1);

      alfa4_r16 = new Asn1Integer();
      alfa4_r16.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("alfa4_r16", -1);

      // decode alfa5_r16

      buffer.getContext().eventDispatcher.startElement("alfa5_r16", -1);

      alfa5_r16 = new Asn1Integer();
      alfa5_r16.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("alfa5_r16", -1);

      // decode alfa6_r16

      buffer.getContext().eventDispatcher.startElement("alfa6_r16", -1);

      alfa6_r16 = new Asn1Integer();
      alfa6_r16.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("alfa6_r16", -1);

      // decode alfa7_r16

      buffer.getContext().eventDispatcher.startElement("alfa7_r16", -1);

      alfa7_r16 = new Asn1Integer();
      alfa7_r16.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("alfa7_r16", -1);

      // decode alfa8_r16

      buffer.getContext().eventDispatcher.startElement("alfa8_r16", -1);

      alfa8_r16 = new Asn1Integer();
      alfa8_r16.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("alfa8_r16", -1);

      // decode alfa9_r16

      buffer.getContext().eventDispatcher.startElement("alfa9_r16", -1);

      alfa9_r16 = new Asn1Integer();
      alfa9_r16.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("alfa9_r16", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode alfa1_r16

      if (alfa1_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("alfa1_r16", -1);

         alfa1_r16.encode (buffer, 0, 1023);

         buffer.getContext().eventDispatcher.endElement("alfa1_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("alfa1_r16");

      // encode alfa2_r16

      if (alfa2_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("alfa2_r16", -1);

         alfa2_r16.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("alfa2_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("alfa2_r16");

      // encode alfa3_r16

      if (alfa3_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("alfa3_r16", -1);

         alfa3_r16.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("alfa3_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("alfa3_r16");

      // encode alfa4_r16

      if (alfa4_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("alfa4_r16", -1);

         alfa4_r16.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("alfa4_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("alfa4_r16");

      // encode alfa5_r16

      if (alfa5_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("alfa5_r16", -1);

         alfa5_r16.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("alfa5_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("alfa5_r16");

      // encode alfa6_r16

      if (alfa6_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("alfa6_r16", -1);

         alfa6_r16.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("alfa6_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("alfa6_r16");

      // encode alfa7_r16

      if (alfa7_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("alfa7_r16", -1);

         alfa7_r16.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("alfa7_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("alfa7_r16");

      // encode alfa8_r16

      if (alfa8_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("alfa8_r16", -1);

         alfa8_r16.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("alfa8_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("alfa8_r16");

      // encode alfa9_r16

      if (alfa9_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("alfa9_r16", -1);

         alfa9_r16.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("alfa9_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("alfa9_r16");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
