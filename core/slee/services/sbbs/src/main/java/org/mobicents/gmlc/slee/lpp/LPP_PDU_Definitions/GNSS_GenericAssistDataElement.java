/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_GenericAssistDataElement extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-GenericAssistDataElement";
   }

   protected GNSS_ID gnss_ID;
   protected SBAS_ID sbas_ID;  // optional
   protected GNSS_TimeModelList gnss_TimeModels;  // optional
   protected GNSS_DifferentialCorrections gnss_DifferentialCorrections;  // optional
   protected GNSS_NavigationModel gnss_NavigationModel;  // optional
   protected GNSS_RealTimeIntegrity gnss_RealTimeIntegrity;  // optional
   protected GNSS_DataBitAssistance gnss_DataBitAssistance;  // optional
   protected GNSS_AcquisitionAssistance gnss_AcquisitionAssistance;  // optional
   protected GNSS_Almanac gnss_Almanac;  // optional
   protected GNSS_UTC_Model gnss_UTC_Model;  // optional
   protected GNSS_AuxiliaryInformation gnss_AuxiliaryInformation;  // optional
   protected BDS_DifferentialCorrections_r12 bds_DifferentialCorrections_r12;  // optional
   protected BDS_GridModelParameter_r12 bds_GridModel_r12;  // optional
   protected GNSS_RTK_Observations_r15 gnss_RTK_Observations_r15;  // optional
   protected GLO_RTK_BiasInformation_r15 glo_RTK_BiasInformation_r15;  // optional
   protected GNSS_RTK_MAC_CorrectionDifferences_r15 gnss_RTK_MAC_CorrectionDifferences_r15;  // optional
   protected GNSS_RTK_Residuals_r15 gnss_RTK_Residuals_r15;  // optional
   protected GNSS_RTK_FKP_Gradients_r15 gnss_RTK_FKP_Gradients_r15;  // optional
   protected GNSS_SSR_OrbitCorrections_r15 gnss_SSR_OrbitCorrections_r15;  // optional
   protected GNSS_SSR_ClockCorrections_r15 gnss_SSR_ClockCorrections_r15;  // optional
   protected GNSS_SSR_CodeBias_r15 gnss_SSR_CodeBias_r15;  // optional
   protected GNSS_SSR_URA_r16 gnss_SSR_URA_r16;  // optional
   protected GNSS_SSR_PhaseBias_r16 gnss_SSR_PhaseBias_r16;  // optional
   protected GNSS_SSR_STEC_Correction_r16 gnss_SSR_STEC_Correction_r16;  // optional
   protected GNSS_SSR_GriddedCorrection_r16 gnss_SSR_GriddedCorrection_r16;  // optional
   protected NavIC_DifferentialCorrections_r16 navic_DifferentialCorrections_r16;  // optional
   protected NavIC_GridModelParameter_r16 navic_GridModel_r16;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_GenericAssistDataElement () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_GenericAssistDataElement (
      GNSS_ID gnss_ID_,
      SBAS_ID sbas_ID_,
      GNSS_TimeModelList gnss_TimeModels_,
      GNSS_DifferentialCorrections gnss_DifferentialCorrections_,
      GNSS_NavigationModel gnss_NavigationModel_,
      GNSS_RealTimeIntegrity gnss_RealTimeIntegrity_,
      GNSS_DataBitAssistance gnss_DataBitAssistance_,
      GNSS_AcquisitionAssistance gnss_AcquisitionAssistance_,
      GNSS_Almanac gnss_Almanac_,
      GNSS_UTC_Model gnss_UTC_Model_,
      GNSS_AuxiliaryInformation gnss_AuxiliaryInformation_,
      BDS_DifferentialCorrections_r12 bds_DifferentialCorrections_r12_,
      BDS_GridModelParameter_r12 bds_GridModel_r12_,
      GNSS_RTK_Observations_r15 gnss_RTK_Observations_r15_,
      GLO_RTK_BiasInformation_r15 glo_RTK_BiasInformation_r15_,
      GNSS_RTK_MAC_CorrectionDifferences_r15 gnss_RTK_MAC_CorrectionDifferences_r15_,
      GNSS_RTK_Residuals_r15 gnss_RTK_Residuals_r15_,
      GNSS_RTK_FKP_Gradients_r15 gnss_RTK_FKP_Gradients_r15_,
      GNSS_SSR_OrbitCorrections_r15 gnss_SSR_OrbitCorrections_r15_,
      GNSS_SSR_ClockCorrections_r15 gnss_SSR_ClockCorrections_r15_,
      GNSS_SSR_CodeBias_r15 gnss_SSR_CodeBias_r15_,
      GNSS_SSR_URA_r16 gnss_SSR_URA_r16_,
      GNSS_SSR_PhaseBias_r16 gnss_SSR_PhaseBias_r16_,
      GNSS_SSR_STEC_Correction_r16 gnss_SSR_STEC_Correction_r16_,
      GNSS_SSR_GriddedCorrection_r16 gnss_SSR_GriddedCorrection_r16_,
      NavIC_DifferentialCorrections_r16 navic_DifferentialCorrections_r16_,
      NavIC_GridModelParameter_r16 navic_GridModel_r16_
   ) throws Asn1Exception {
      super();
      setGnss_ID (gnss_ID_);
      setSbas_ID (sbas_ID_);
      setGnss_TimeModels (gnss_TimeModels_);
      setGnss_DifferentialCorrections (gnss_DifferentialCorrections_);
      setGnss_NavigationModel (gnss_NavigationModel_);
      setGnss_RealTimeIntegrity (gnss_RealTimeIntegrity_);
      setGnss_DataBitAssistance (gnss_DataBitAssistance_);
      setGnss_AcquisitionAssistance (gnss_AcquisitionAssistance_);
      setGnss_Almanac (gnss_Almanac_);
      setGnss_UTC_Model (gnss_UTC_Model_);
      setGnss_AuxiliaryInformation (gnss_AuxiliaryInformation_);
      setBds_DifferentialCorrections_r12 (bds_DifferentialCorrections_r12_);
      setBds_GridModel_r12 (bds_GridModel_r12_);
      setGnss_RTK_Observations_r15 (gnss_RTK_Observations_r15_);
      setGlo_RTK_BiasInformation_r15 (glo_RTK_BiasInformation_r15_);
      setGnss_RTK_MAC_CorrectionDifferences_r15 (gnss_RTK_MAC_CorrectionDifferences_r15_);
      setGnss_RTK_Residuals_r15 (gnss_RTK_Residuals_r15_);
      setGnss_RTK_FKP_Gradients_r15 (gnss_RTK_FKP_Gradients_r15_);
      setGnss_SSR_OrbitCorrections_r15 (gnss_SSR_OrbitCorrections_r15_);
      setGnss_SSR_ClockCorrections_r15 (gnss_SSR_ClockCorrections_r15_);
      setGnss_SSR_CodeBias_r15 (gnss_SSR_CodeBias_r15_);
      setGnss_SSR_URA_r16 (gnss_SSR_URA_r16_);
      setGnss_SSR_PhaseBias_r16 (gnss_SSR_PhaseBias_r16_);
      setGnss_SSR_STEC_Correction_r16 (gnss_SSR_STEC_Correction_r16_);
      setGnss_SSR_GriddedCorrection_r16 (gnss_SSR_GriddedCorrection_r16_);
      setNavic_DifferentialCorrections_r16 (navic_DifferentialCorrections_r16_);
      setNavic_GridModel_r16 (navic_GridModel_r16_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GNSS_GenericAssistDataElement (
      GNSS_ID gnss_ID_
   ) throws Asn1Exception {
      super();
      setGnss_ID (gnss_ID_);
   }

   public void init () {
      gnss_ID = null;
      sbas_ID = null;
      gnss_TimeModels = null;
      gnss_DifferentialCorrections = null;
      gnss_NavigationModel = null;
      gnss_RealTimeIntegrity = null;
      gnss_DataBitAssistance = null;
      gnss_AcquisitionAssistance = null;
      gnss_Almanac = null;
      gnss_UTC_Model = null;
      gnss_AuxiliaryInformation = null;
      bds_DifferentialCorrections_r12 = null;
      bds_GridModel_r12 = null;
      gnss_RTK_Observations_r15 = null;
      glo_RTK_BiasInformation_r15 = null;
      gnss_RTK_MAC_CorrectionDifferences_r15 = null;
      gnss_RTK_Residuals_r15 = null;
      gnss_RTK_FKP_Gradients_r15 = null;
      gnss_SSR_OrbitCorrections_r15 = null;
      gnss_SSR_ClockCorrections_r15 = null;
      gnss_SSR_CodeBias_r15 = null;
      gnss_SSR_URA_r16 = null;
      gnss_SSR_PhaseBias_r16 = null;
      gnss_SSR_STEC_Correction_r16 = null;
      gnss_SSR_GriddedCorrection_r16 = null;
      navic_DifferentialCorrections_r16 = null;
      navic_GridModel_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_GenericAssistDataElement) ) return false;

      GNSS_GenericAssistDataElement rhs = (GNSS_GenericAssistDataElement) obj;

      if (gnss_ID == null) {
         if (rhs.gnss_ID != null) return false;
      }
      else {
         if (!gnss_ID.equals(rhs.gnss_ID)) {
            return false;
         }
      }

      if (sbas_ID == null) {
         if (rhs.sbas_ID != null) return false;
      }
      else {
         if (!sbas_ID.equals(rhs.sbas_ID)) {
            return false;
         }
      }

      if (gnss_TimeModels == null) {
         if (rhs.gnss_TimeModels != null) return false;
      }
      else {
         if (!gnss_TimeModels.equals(rhs.gnss_TimeModels)) {
            return false;
         }
      }

      if (gnss_DifferentialCorrections == null) {
         if (rhs.gnss_DifferentialCorrections != null) return false;
      }
      else {
         if (!gnss_DifferentialCorrections.equals(rhs.gnss_DifferentialCorrections)) {
            return false;
         }
      }

      if (gnss_NavigationModel == null) {
         if (rhs.gnss_NavigationModel != null) return false;
      }
      else {
         if (!gnss_NavigationModel.equals(rhs.gnss_NavigationModel)) {
            return false;
         }
      }

      if (gnss_RealTimeIntegrity == null) {
         if (rhs.gnss_RealTimeIntegrity != null) return false;
      }
      else {
         if (!gnss_RealTimeIntegrity.equals(rhs.gnss_RealTimeIntegrity)) {
            return false;
         }
      }

      if (gnss_DataBitAssistance == null) {
         if (rhs.gnss_DataBitAssistance != null) return false;
      }
      else {
         if (!gnss_DataBitAssistance.equals(rhs.gnss_DataBitAssistance)) {
            return false;
         }
      }

      if (gnss_AcquisitionAssistance == null) {
         if (rhs.gnss_AcquisitionAssistance != null) return false;
      }
      else {
         if (!gnss_AcquisitionAssistance.equals(rhs.gnss_AcquisitionAssistance)) {
            return false;
         }
      }

      if (gnss_Almanac == null) {
         if (rhs.gnss_Almanac != null) return false;
      }
      else {
         if (!gnss_Almanac.equals(rhs.gnss_Almanac)) {
            return false;
         }
      }

      if (gnss_UTC_Model == null) {
         if (rhs.gnss_UTC_Model != null) return false;
      }
      else {
         if (!gnss_UTC_Model.equals(rhs.gnss_UTC_Model)) {
            return false;
         }
      }

      if (gnss_AuxiliaryInformation == null) {
         if (rhs.gnss_AuxiliaryInformation != null) return false;
      }
      else {
         if (!gnss_AuxiliaryInformation.equals(rhs.gnss_AuxiliaryInformation)) {
            return false;
         }
      }

      if (bds_DifferentialCorrections_r12 == null) {
         if (rhs.bds_DifferentialCorrections_r12 != null) return false;
      }
      else {
         if (!bds_DifferentialCorrections_r12.equals(rhs.bds_DifferentialCorrections_r12)) {
            return false;
         }
      }

      if (bds_GridModel_r12 == null) {
         if (rhs.bds_GridModel_r12 != null) return false;
      }
      else {
         if (!bds_GridModel_r12.equals(rhs.bds_GridModel_r12)) {
            return false;
         }
      }

      if (gnss_RTK_Observations_r15 == null) {
         if (rhs.gnss_RTK_Observations_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_Observations_r15.equals(rhs.gnss_RTK_Observations_r15)) {
            return false;
         }
      }

      if (glo_RTK_BiasInformation_r15 == null) {
         if (rhs.glo_RTK_BiasInformation_r15 != null) return false;
      }
      else {
         if (!glo_RTK_BiasInformation_r15.equals(rhs.glo_RTK_BiasInformation_r15)) {
            return false;
         }
      }

      if (gnss_RTK_MAC_CorrectionDifferences_r15 == null) {
         if (rhs.gnss_RTK_MAC_CorrectionDifferences_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_MAC_CorrectionDifferences_r15.equals(rhs.gnss_RTK_MAC_CorrectionDifferences_r15)) {
            return false;
         }
      }

      if (gnss_RTK_Residuals_r15 == null) {
         if (rhs.gnss_RTK_Residuals_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_Residuals_r15.equals(rhs.gnss_RTK_Residuals_r15)) {
            return false;
         }
      }

      if (gnss_RTK_FKP_Gradients_r15 == null) {
         if (rhs.gnss_RTK_FKP_Gradients_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_FKP_Gradients_r15.equals(rhs.gnss_RTK_FKP_Gradients_r15)) {
            return false;
         }
      }

      if (gnss_SSR_OrbitCorrections_r15 == null) {
         if (rhs.gnss_SSR_OrbitCorrections_r15 != null) return false;
      }
      else {
         if (!gnss_SSR_OrbitCorrections_r15.equals(rhs.gnss_SSR_OrbitCorrections_r15)) {
            return false;
         }
      }

      if (gnss_SSR_ClockCorrections_r15 == null) {
         if (rhs.gnss_SSR_ClockCorrections_r15 != null) return false;
      }
      else {
         if (!gnss_SSR_ClockCorrections_r15.equals(rhs.gnss_SSR_ClockCorrections_r15)) {
            return false;
         }
      }

      if (gnss_SSR_CodeBias_r15 == null) {
         if (rhs.gnss_SSR_CodeBias_r15 != null) return false;
      }
      else {
         if (!gnss_SSR_CodeBias_r15.equals(rhs.gnss_SSR_CodeBias_r15)) {
            return false;
         }
      }

      if (gnss_SSR_URA_r16 == null) {
         if (rhs.gnss_SSR_URA_r16 != null) return false;
      }
      else {
         if (!gnss_SSR_URA_r16.equals(rhs.gnss_SSR_URA_r16)) {
            return false;
         }
      }

      if (gnss_SSR_PhaseBias_r16 == null) {
         if (rhs.gnss_SSR_PhaseBias_r16 != null) return false;
      }
      else {
         if (!gnss_SSR_PhaseBias_r16.equals(rhs.gnss_SSR_PhaseBias_r16)) {
            return false;
         }
      }

      if (gnss_SSR_STEC_Correction_r16 == null) {
         if (rhs.gnss_SSR_STEC_Correction_r16 != null) return false;
      }
      else {
         if (!gnss_SSR_STEC_Correction_r16.equals(rhs.gnss_SSR_STEC_Correction_r16)) {
            return false;
         }
      }

      if (gnss_SSR_GriddedCorrection_r16 == null) {
         if (rhs.gnss_SSR_GriddedCorrection_r16 != null) return false;
      }
      else {
         if (!gnss_SSR_GriddedCorrection_r16.equals(rhs.gnss_SSR_GriddedCorrection_r16)) {
            return false;
         }
      }

      if (navic_DifferentialCorrections_r16 == null) {
         if (rhs.navic_DifferentialCorrections_r16 != null) return false;
      }
      else {
         if (!navic_DifferentialCorrections_r16.equals(rhs.navic_DifferentialCorrections_r16)) {
            return false;
         }
      }

      if (navic_GridModel_r16 == null) {
         if (rhs.navic_GridModel_r16 != null) return false;
      }
      else {
         if (!navic_GridModel_r16.equals(rhs.navic_GridModel_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gnss_ID != null) __code = 31*__code + gnss_ID.hashCode();
      if (sbas_ID != null) __code = 31*__code + sbas_ID.hashCode();
      if (gnss_TimeModels != null) __code = 31*__code + gnss_TimeModels.hashCode();
      if (gnss_DifferentialCorrections != null) __code = 31*__code + gnss_DifferentialCorrections.hashCode();
      if (gnss_NavigationModel != null) __code = 31*__code + gnss_NavigationModel.hashCode();
      if (gnss_RealTimeIntegrity != null) __code = 31*__code + gnss_RealTimeIntegrity.hashCode();
      if (gnss_DataBitAssistance != null) __code = 31*__code + gnss_DataBitAssistance.hashCode();
      if (gnss_AcquisitionAssistance != null) __code = 31*__code + gnss_AcquisitionAssistance.hashCode();
      if (gnss_Almanac != null) __code = 31*__code + gnss_Almanac.hashCode();
      if (gnss_UTC_Model != null) __code = 31*__code + gnss_UTC_Model.hashCode();
      if (gnss_AuxiliaryInformation != null) __code = 31*__code + gnss_AuxiliaryInformation.hashCode();
      if (bds_DifferentialCorrections_r12 != null) __code = 31*__code + bds_DifferentialCorrections_r12.hashCode();
      if (bds_GridModel_r12 != null) __code = 31*__code + bds_GridModel_r12.hashCode();
      if (gnss_RTK_Observations_r15 != null) __code = 31*__code + gnss_RTK_Observations_r15.hashCode();
      if (glo_RTK_BiasInformation_r15 != null) __code = 31*__code + glo_RTK_BiasInformation_r15.hashCode();
      if (gnss_RTK_MAC_CorrectionDifferences_r15 != null) __code = 31*__code + gnss_RTK_MAC_CorrectionDifferences_r15.hashCode();
      if (gnss_RTK_Residuals_r15 != null) __code = 31*__code + gnss_RTK_Residuals_r15.hashCode();
      if (gnss_RTK_FKP_Gradients_r15 != null) __code = 31*__code + gnss_RTK_FKP_Gradients_r15.hashCode();
      if (gnss_SSR_OrbitCorrections_r15 != null) __code = 31*__code + gnss_SSR_OrbitCorrections_r15.hashCode();
      if (gnss_SSR_ClockCorrections_r15 != null) __code = 31*__code + gnss_SSR_ClockCorrections_r15.hashCode();
      if (gnss_SSR_CodeBias_r15 != null) __code = 31*__code + gnss_SSR_CodeBias_r15.hashCode();
      if (gnss_SSR_URA_r16 != null) __code = 31*__code + gnss_SSR_URA_r16.hashCode();
      if (gnss_SSR_PhaseBias_r16 != null) __code = 31*__code + gnss_SSR_PhaseBias_r16.hashCode();
      if (gnss_SSR_STEC_Correction_r16 != null) __code = 31*__code + gnss_SSR_STEC_Correction_r16.hashCode();
      if (gnss_SSR_GriddedCorrection_r16 != null) __code = 31*__code + gnss_SSR_GriddedCorrection_r16.hashCode();
      if (navic_DifferentialCorrections_r16 != null) __code = 31*__code + navic_DifferentialCorrections_r16.hashCode();
      if (navic_GridModel_r16 != null) __code = 31*__code + navic_GridModel_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Gnss_ID
    */
   public GNSS_ID getGnss_ID () {
      return gnss_ID;
   }

   public void setGnss_ID (GNSS_ID value) {
      this.gnss_ID = value;
   }

   /**
    * Accessor/mutator methods for Sbas_ID
    */
   public SBAS_ID getSbas_ID () {
      return sbas_ID;
   }

   public void setSbas_ID (SBAS_ID value) {
      this.sbas_ID = value;
   }

   public boolean hasSbas_ID () {
      return (sbas_ID != null);
   }

   /**
    * Accessor/mutator methods for Gnss_TimeModels
    */
   public GNSS_TimeModelList getGnss_TimeModels () {
      return gnss_TimeModels;
   }

   public void setGnss_TimeModels (GNSS_TimeModelList value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 15))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.gnss_TimeModels = value;
   }

   public boolean hasGnss_TimeModels () {
      return (gnss_TimeModels != null);
   }

   /**
    * Accessor/mutator methods for Gnss_DifferentialCorrections
    */
   public GNSS_DifferentialCorrections getGnss_DifferentialCorrections () {
      return gnss_DifferentialCorrections;
   }

   public void setGnss_DifferentialCorrections (GNSS_DifferentialCorrections value) {
      this.gnss_DifferentialCorrections = value;
   }

   public boolean hasGnss_DifferentialCorrections () {
      return (gnss_DifferentialCorrections != null);
   }

   /**
    * Accessor/mutator methods for Gnss_NavigationModel
    */
   public GNSS_NavigationModel getGnss_NavigationModel () {
      return gnss_NavigationModel;
   }

   public void setGnss_NavigationModel (GNSS_NavigationModel value) {
      this.gnss_NavigationModel = value;
   }

   public boolean hasGnss_NavigationModel () {
      return (gnss_NavigationModel != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RealTimeIntegrity
    */
   public GNSS_RealTimeIntegrity getGnss_RealTimeIntegrity () {
      return gnss_RealTimeIntegrity;
   }

   public void setGnss_RealTimeIntegrity (GNSS_RealTimeIntegrity value) {
      this.gnss_RealTimeIntegrity = value;
   }

   public boolean hasGnss_RealTimeIntegrity () {
      return (gnss_RealTimeIntegrity != null);
   }

   /**
    * Accessor/mutator methods for Gnss_DataBitAssistance
    */
   public GNSS_DataBitAssistance getGnss_DataBitAssistance () {
      return gnss_DataBitAssistance;
   }

   public void setGnss_DataBitAssistance (GNSS_DataBitAssistance value) {
      this.gnss_DataBitAssistance = value;
   }

   public boolean hasGnss_DataBitAssistance () {
      return (gnss_DataBitAssistance != null);
   }

   /**
    * Accessor/mutator methods for Gnss_AcquisitionAssistance
    */
   public GNSS_AcquisitionAssistance getGnss_AcquisitionAssistance () {
      return gnss_AcquisitionAssistance;
   }

   public void setGnss_AcquisitionAssistance (GNSS_AcquisitionAssistance value) {
      this.gnss_AcquisitionAssistance = value;
   }

   public boolean hasGnss_AcquisitionAssistance () {
      return (gnss_AcquisitionAssistance != null);
   }

   /**
    * Accessor/mutator methods for Gnss_Almanac
    */
   public GNSS_Almanac getGnss_Almanac () {
      return gnss_Almanac;
   }

   public void setGnss_Almanac (GNSS_Almanac value) {
      this.gnss_Almanac = value;
   }

   public boolean hasGnss_Almanac () {
      return (gnss_Almanac != null);
   }

   /**
    * Accessor/mutator methods for Gnss_UTC_Model
    */
   public GNSS_UTC_Model getGnss_UTC_Model () {
      return gnss_UTC_Model;
   }

   public void setGnss_UTC_Model (GNSS_UTC_Model value) {
      this.gnss_UTC_Model = value;
   }

   public boolean hasGnss_UTC_Model () {
      return (gnss_UTC_Model != null);
   }

   /**
    * Accessor/mutator methods for Gnss_AuxiliaryInformation
    */
   public GNSS_AuxiliaryInformation getGnss_AuxiliaryInformation () {
      return gnss_AuxiliaryInformation;
   }

   public void setGnss_AuxiliaryInformation (GNSS_AuxiliaryInformation value) {
      this.gnss_AuxiliaryInformation = value;
   }

   public boolean hasGnss_AuxiliaryInformation () {
      return (gnss_AuxiliaryInformation != null);
   }

   /**
    * Accessor/mutator methods for Bds_DifferentialCorrections_r12
    */
   public BDS_DifferentialCorrections_r12 getBds_DifferentialCorrections_r12 () {
      return bds_DifferentialCorrections_r12;
   }

   public void setBds_DifferentialCorrections_r12 (BDS_DifferentialCorrections_r12 value) {
      this.bds_DifferentialCorrections_r12 = value;
   }

   public boolean hasBds_DifferentialCorrections_r12 () {
      return (bds_DifferentialCorrections_r12 != null);
   }

   /**
    * Accessor/mutator methods for Bds_GridModel_r12
    */
   public BDS_GridModelParameter_r12 getBds_GridModel_r12 () {
      return bds_GridModel_r12;
   }

   public void setBds_GridModel_r12 (BDS_GridModelParameter_r12 value) {
      this.bds_GridModel_r12 = value;
   }

   public boolean hasBds_GridModel_r12 () {
      return (bds_GridModel_r12 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_Observations_r15
    */
   public GNSS_RTK_Observations_r15 getGnss_RTK_Observations_r15 () {
      return gnss_RTK_Observations_r15;
   }

   public void setGnss_RTK_Observations_r15 (GNSS_RTK_Observations_r15 value) {
      this.gnss_RTK_Observations_r15 = value;
   }

   public boolean hasGnss_RTK_Observations_r15 () {
      return (gnss_RTK_Observations_r15 != null);
   }

   /**
    * Accessor/mutator methods for Glo_RTK_BiasInformation_r15
    */
   public GLO_RTK_BiasInformation_r15 getGlo_RTK_BiasInformation_r15 () {
      return glo_RTK_BiasInformation_r15;
   }

   public void setGlo_RTK_BiasInformation_r15 (GLO_RTK_BiasInformation_r15 value) {
      this.glo_RTK_BiasInformation_r15 = value;
   }

   public boolean hasGlo_RTK_BiasInformation_r15 () {
      return (glo_RTK_BiasInformation_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_MAC_CorrectionDifferences_r15
    */
   public GNSS_RTK_MAC_CorrectionDifferences_r15 getGnss_RTK_MAC_CorrectionDifferences_r15 () {
      return gnss_RTK_MAC_CorrectionDifferences_r15;
   }

   public void setGnss_RTK_MAC_CorrectionDifferences_r15 (GNSS_RTK_MAC_CorrectionDifferences_r15 value) {
      this.gnss_RTK_MAC_CorrectionDifferences_r15 = value;
   }

   public boolean hasGnss_RTK_MAC_CorrectionDifferences_r15 () {
      return (gnss_RTK_MAC_CorrectionDifferences_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_Residuals_r15
    */
   public GNSS_RTK_Residuals_r15 getGnss_RTK_Residuals_r15 () {
      return gnss_RTK_Residuals_r15;
   }

   public void setGnss_RTK_Residuals_r15 (GNSS_RTK_Residuals_r15 value) {
      this.gnss_RTK_Residuals_r15 = value;
   }

   public boolean hasGnss_RTK_Residuals_r15 () {
      return (gnss_RTK_Residuals_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_FKP_Gradients_r15
    */
   public GNSS_RTK_FKP_Gradients_r15 getGnss_RTK_FKP_Gradients_r15 () {
      return gnss_RTK_FKP_Gradients_r15;
   }

   public void setGnss_RTK_FKP_Gradients_r15 (GNSS_RTK_FKP_Gradients_r15 value) {
      this.gnss_RTK_FKP_Gradients_r15 = value;
   }

   public boolean hasGnss_RTK_FKP_Gradients_r15 () {
      return (gnss_RTK_FKP_Gradients_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_OrbitCorrections_r15
    */
   public GNSS_SSR_OrbitCorrections_r15 getGnss_SSR_OrbitCorrections_r15 () {
      return gnss_SSR_OrbitCorrections_r15;
   }

   public void setGnss_SSR_OrbitCorrections_r15 (GNSS_SSR_OrbitCorrections_r15 value) {
      this.gnss_SSR_OrbitCorrections_r15 = value;
   }

   public boolean hasGnss_SSR_OrbitCorrections_r15 () {
      return (gnss_SSR_OrbitCorrections_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_ClockCorrections_r15
    */
   public GNSS_SSR_ClockCorrections_r15 getGnss_SSR_ClockCorrections_r15 () {
      return gnss_SSR_ClockCorrections_r15;
   }

   public void setGnss_SSR_ClockCorrections_r15 (GNSS_SSR_ClockCorrections_r15 value) {
      this.gnss_SSR_ClockCorrections_r15 = value;
   }

   public boolean hasGnss_SSR_ClockCorrections_r15 () {
      return (gnss_SSR_ClockCorrections_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_CodeBias_r15
    */
   public GNSS_SSR_CodeBias_r15 getGnss_SSR_CodeBias_r15 () {
      return gnss_SSR_CodeBias_r15;
   }

   public void setGnss_SSR_CodeBias_r15 (GNSS_SSR_CodeBias_r15 value) {
      this.gnss_SSR_CodeBias_r15 = value;
   }

   public boolean hasGnss_SSR_CodeBias_r15 () {
      return (gnss_SSR_CodeBias_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_URA_r16
    */
   public GNSS_SSR_URA_r16 getGnss_SSR_URA_r16 () {
      return gnss_SSR_URA_r16;
   }

   public void setGnss_SSR_URA_r16 (GNSS_SSR_URA_r16 value) {
      this.gnss_SSR_URA_r16 = value;
   }

   public boolean hasGnss_SSR_URA_r16 () {
      return (gnss_SSR_URA_r16 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_PhaseBias_r16
    */
   public GNSS_SSR_PhaseBias_r16 getGnss_SSR_PhaseBias_r16 () {
      return gnss_SSR_PhaseBias_r16;
   }

   public void setGnss_SSR_PhaseBias_r16 (GNSS_SSR_PhaseBias_r16 value) {
      this.gnss_SSR_PhaseBias_r16 = value;
   }

   public boolean hasGnss_SSR_PhaseBias_r16 () {
      return (gnss_SSR_PhaseBias_r16 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_STEC_Correction_r16
    */
   public GNSS_SSR_STEC_Correction_r16 getGnss_SSR_STEC_Correction_r16 () {
      return gnss_SSR_STEC_Correction_r16;
   }

   public void setGnss_SSR_STEC_Correction_r16 (GNSS_SSR_STEC_Correction_r16 value) {
      this.gnss_SSR_STEC_Correction_r16 = value;
   }

   public boolean hasGnss_SSR_STEC_Correction_r16 () {
      return (gnss_SSR_STEC_Correction_r16 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_GriddedCorrection_r16
    */
   public GNSS_SSR_GriddedCorrection_r16 getGnss_SSR_GriddedCorrection_r16 () {
      return gnss_SSR_GriddedCorrection_r16;
   }

   public void setGnss_SSR_GriddedCorrection_r16 (GNSS_SSR_GriddedCorrection_r16 value) {
      this.gnss_SSR_GriddedCorrection_r16 = value;
   }

   public boolean hasGnss_SSR_GriddedCorrection_r16 () {
      return (gnss_SSR_GriddedCorrection_r16 != null);
   }

   /**
    * Accessor/mutator methods for Navic_DifferentialCorrections_r16
    */
   public NavIC_DifferentialCorrections_r16 getNavic_DifferentialCorrections_r16 () {
      return navic_DifferentialCorrections_r16;
   }

   public void setNavic_DifferentialCorrections_r16 (NavIC_DifferentialCorrections_r16 value) {
      this.navic_DifferentialCorrections_r16 = value;
   }

   public boolean hasNavic_DifferentialCorrections_r16 () {
      return (navic_DifferentialCorrections_r16 != null);
   }

   /**
    * Accessor/mutator methods for Navic_GridModel_r16
    */
   public NavIC_GridModelParameter_r16 getNavic_GridModel_r16 () {
      return navic_GridModel_r16;
   }

   public void setNavic_GridModel_r16 (NavIC_GridModelParameter_r16 value) {
      this.navic_GridModel_r16 = value;
   }

   public boolean hasNavic_GridModel_r16 () {
      return (navic_GridModel_r16 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 28; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gnss_ID;
         case 1: return sbas_ID;
         case 2: return gnss_TimeModels;
         case 3: return gnss_DifferentialCorrections;
         case 4: return gnss_NavigationModel;
         case 5: return gnss_RealTimeIntegrity;
         case 6: return gnss_DataBitAssistance;
         case 7: return gnss_AcquisitionAssistance;
         case 8: return gnss_Almanac;
         case 9: return gnss_UTC_Model;
         case 10: return gnss_AuxiliaryInformation;
         case 11: return bds_DifferentialCorrections_r12;
         case 12: return bds_GridModel_r12;
         case 13: return gnss_RTK_Observations_r15;
         case 14: return glo_RTK_BiasInformation_r15;
         case 15: return gnss_RTK_MAC_CorrectionDifferences_r15;
         case 16: return gnss_RTK_Residuals_r15;
         case 17: return gnss_RTK_FKP_Gradients_r15;
         case 18: return gnss_SSR_OrbitCorrections_r15;
         case 19: return gnss_SSR_ClockCorrections_r15;
         case 20: return gnss_SSR_CodeBias_r15;
         case 21: return gnss_SSR_URA_r16;
         case 22: return gnss_SSR_PhaseBias_r16;
         case 23: return gnss_SSR_STEC_Correction_r16;
         case 24: return gnss_SSR_GriddedCorrection_r16;
         case 25: return navic_DifferentialCorrections_r16;
         case 26: return navic_GridModel_r16;
         case 27: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gnss-ID";
         case 1: return "sbas-ID";
         case 2: return "gnss-TimeModels";
         case 3: return "gnss-DifferentialCorrections";
         case 4: return "gnss-NavigationModel";
         case 5: return "gnss-RealTimeIntegrity";
         case 6: return "gnss-DataBitAssistance";
         case 7: return "gnss-AcquisitionAssistance";
         case 8: return "gnss-Almanac";
         case 9: return "gnss-UTC-Model";
         case 10: return "gnss-AuxiliaryInformation";
         case 11: return "bds-DifferentialCorrections-r12";
         case 12: return "bds-GridModel-r12";
         case 13: return "gnss-RTK-Observations-r15";
         case 14: return "glo-RTK-BiasInformation-r15";
         case 15: return "gnss-RTK-MAC-CorrectionDifferences-r15";
         case 16: return "gnss-RTK-Residuals-r15";
         case 17: return "gnss-RTK-FKP-Gradients-r15";
         case 18: return "gnss-SSR-OrbitCorrections-r15";
         case 19: return "gnss-SSR-ClockCorrections-r15";
         case 20: return "gnss-SSR-CodeBias-r15";
         case 21: return "gnss-SSR-URA-r16";
         case 22: return "gnss-SSR-PhaseBias-r16";
         case 23: return "gnss-SSR-STEC-Correction-r16";
         case 24: return "gnss-SSR-GriddedCorrection-r16";
         case 25: return "navic-DifferentialCorrections-r16";
         case 26: return "navic-GridModel-r16";
         case 27: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean sbas_IDPresent = buffer.decodeBit ("sbas_IDPresent");
      boolean gnss_TimeModelsPresent = buffer.decodeBit ("gnss_TimeModelsPresent");
      boolean gnss_DifferentialCorrectionsPresent = buffer.decodeBit ("gnss_DifferentialCorrectionsPresent");
      boolean gnss_NavigationModelPresent = buffer.decodeBit ("gnss_NavigationModelPresent");
      boolean gnss_RealTimeIntegrityPresent = buffer.decodeBit ("gnss_RealTimeIntegrityPresent");
      boolean gnss_DataBitAssistancePresent = buffer.decodeBit ("gnss_DataBitAssistancePresent");
      boolean gnss_AcquisitionAssistancePresent = buffer.decodeBit ("gnss_AcquisitionAssistancePresent");
      boolean gnss_AlmanacPresent = buffer.decodeBit ("gnss_AlmanacPresent");
      boolean gnss_UTC_ModelPresent = buffer.decodeBit ("gnss_UTC_ModelPresent");
      boolean gnss_AuxiliaryInformationPresent = buffer.decodeBit ("gnss_AuxiliaryInformationPresent");

      // decode gnss_ID

      buffer.getContext().eventDispatcher.startElement("gnss_ID", -1);

      gnss_ID = new GNSS_ID();
      gnss_ID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("gnss_ID", -1);

      // decode sbas_ID

      if (sbas_IDPresent) {
         buffer.getContext().eventDispatcher.startElement("sbas_ID", -1);

         sbas_ID = new SBAS_ID();
         sbas_ID.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sbas_ID", -1);
      }
      else {
         sbas_ID = null;
      }

      // decode gnss_TimeModels

      if (gnss_TimeModelsPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_TimeModels", -1);

         gnss_TimeModels = new GNSS_TimeModelList();
         gnss_TimeModels.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_TimeModels", -1);
      }
      else {
         gnss_TimeModels = null;
      }

      // decode gnss_DifferentialCorrections

      if (gnss_DifferentialCorrectionsPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_DifferentialCorrections", -1);

         gnss_DifferentialCorrections = new GNSS_DifferentialCorrections();
         gnss_DifferentialCorrections.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_DifferentialCorrections", -1);
      }
      else {
         gnss_DifferentialCorrections = null;
      }

      // decode gnss_NavigationModel

      if (gnss_NavigationModelPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_NavigationModel", -1);

         gnss_NavigationModel = new GNSS_NavigationModel();
         gnss_NavigationModel.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_NavigationModel", -1);
      }
      else {
         gnss_NavigationModel = null;
      }

      // decode gnss_RealTimeIntegrity

      if (gnss_RealTimeIntegrityPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_RealTimeIntegrity", -1);

         gnss_RealTimeIntegrity = new GNSS_RealTimeIntegrity();
         gnss_RealTimeIntegrity.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_RealTimeIntegrity", -1);
      }
      else {
         gnss_RealTimeIntegrity = null;
      }

      // decode gnss_DataBitAssistance

      if (gnss_DataBitAssistancePresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_DataBitAssistance", -1);

         gnss_DataBitAssistance = new GNSS_DataBitAssistance();
         gnss_DataBitAssistance.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_DataBitAssistance", -1);
      }
      else {
         gnss_DataBitAssistance = null;
      }

      // decode gnss_AcquisitionAssistance

      if (gnss_AcquisitionAssistancePresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_AcquisitionAssistance", -1);

         gnss_AcquisitionAssistance = new GNSS_AcquisitionAssistance();
         gnss_AcquisitionAssistance.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_AcquisitionAssistance", -1);
      }
      else {
         gnss_AcquisitionAssistance = null;
      }

      // decode gnss_Almanac

      if (gnss_AlmanacPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_Almanac", -1);

         gnss_Almanac = new GNSS_Almanac();
         gnss_Almanac.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_Almanac", -1);
      }
      else {
         gnss_Almanac = null;
      }

      // decode gnss_UTC_Model

      if (gnss_UTC_ModelPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_UTC_Model", -1);

         gnss_UTC_Model = new GNSS_UTC_Model();
         gnss_UTC_Model.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_UTC_Model", -1);
      }
      else {
         gnss_UTC_Model = null;
      }

      // decode gnss_AuxiliaryInformation

      if (gnss_AuxiliaryInformationPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_AuxiliaryInformation", -1);

         gnss_AuxiliaryInformation = new GNSS_AuxiliaryInformation();
         gnss_AuxiliaryInformation.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_AuxiliaryInformation", -1);
      }
      else {
         gnss_AuxiliaryInformation = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("bds_DifferentialCorrections_r12Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("bds_GridModel_r12Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_RTK_Observations_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("glo_RTK_BiasInformation_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_RTK_MAC_CorrectionDifferences_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_RTK_Residuals_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_RTK_FKP_Gradients_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_OrbitCorrections_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_ClockCorrections_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_CodeBias_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_URA_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_PhaseBias_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_STEC_Correction_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_GriddedCorrection_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("navic_DifferentialCorrections_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("navic_GridModel_r16Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode bds_DifferentialCorrections_r12

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("bds_DifferentialCorrections_r12", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            bds_DifferentialCorrections_r12 = new BDS_DifferentialCorrections_r12();
            bds_DifferentialCorrections_r12.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("bds_DifferentialCorrections_r12", -1);

         }
         else {
            bds_DifferentialCorrections_r12 = null;
         }

         // decode bds_GridModel_r12

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("bds_GridModel_r12", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            bds_GridModel_r12 = new BDS_GridModelParameter_r12();
            bds_GridModel_r12.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("bds_GridModel_r12", -1);

         }
         else {
            bds_GridModel_r12 = null;
         }

         // decode gnss_RTK_Observations_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_Observations_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_RTK_Observations_r15 = new GNSS_RTK_Observations_r15();
            gnss_RTK_Observations_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_RTK_Observations_r15", -1);

         }
         else {
            gnss_RTK_Observations_r15 = null;
         }

         // decode glo_RTK_BiasInformation_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("glo_RTK_BiasInformation_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            glo_RTK_BiasInformation_r15 = new GLO_RTK_BiasInformation_r15();
            glo_RTK_BiasInformation_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("glo_RTK_BiasInformation_r15", -1);

         }
         else {
            glo_RTK_BiasInformation_r15 = null;
         }

         // decode gnss_RTK_MAC_CorrectionDifferences_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_MAC_CorrectionDifferences_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_RTK_MAC_CorrectionDifferences_r15 = new GNSS_RTK_MAC_CorrectionDifferences_r15();
            gnss_RTK_MAC_CorrectionDifferences_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_RTK_MAC_CorrectionDifferences_r15", -1);

         }
         else {
            gnss_RTK_MAC_CorrectionDifferences_r15 = null;
         }

         // decode gnss_RTK_Residuals_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_Residuals_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_RTK_Residuals_r15 = new GNSS_RTK_Residuals_r15();
            gnss_RTK_Residuals_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_RTK_Residuals_r15", -1);

         }
         else {
            gnss_RTK_Residuals_r15 = null;
         }

         // decode gnss_RTK_FKP_Gradients_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_FKP_Gradients_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_RTK_FKP_Gradients_r15 = new GNSS_RTK_FKP_Gradients_r15();
            gnss_RTK_FKP_Gradients_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_RTK_FKP_Gradients_r15", -1);

         }
         else {
            gnss_RTK_FKP_Gradients_r15 = null;
         }

         // decode gnss_SSR_OrbitCorrections_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_OrbitCorrections_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_OrbitCorrections_r15 = new GNSS_SSR_OrbitCorrections_r15();
            gnss_SSR_OrbitCorrections_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_OrbitCorrections_r15", -1);

         }
         else {
            gnss_SSR_OrbitCorrections_r15 = null;
         }

         // decode gnss_SSR_ClockCorrections_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_ClockCorrections_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_ClockCorrections_r15 = new GNSS_SSR_ClockCorrections_r15();
            gnss_SSR_ClockCorrections_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_ClockCorrections_r15", -1);

         }
         else {
            gnss_SSR_ClockCorrections_r15 = null;
         }

         // decode gnss_SSR_CodeBias_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_CodeBias_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_CodeBias_r15 = new GNSS_SSR_CodeBias_r15();
            gnss_SSR_CodeBias_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_CodeBias_r15", -1);

         }
         else {
            gnss_SSR_CodeBias_r15 = null;
         }

         // decode gnss_SSR_URA_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_URA_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_URA_r16 = new GNSS_SSR_URA_r16();
            gnss_SSR_URA_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_URA_r16", -1);

         }
         else {
            gnss_SSR_URA_r16 = null;
         }

         // decode gnss_SSR_PhaseBias_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_PhaseBias_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_PhaseBias_r16 = new GNSS_SSR_PhaseBias_r16();
            gnss_SSR_PhaseBias_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_PhaseBias_r16", -1);

         }
         else {
            gnss_SSR_PhaseBias_r16 = null;
         }

         // decode gnss_SSR_STEC_Correction_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_STEC_Correction_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_STEC_Correction_r16 = new GNSS_SSR_STEC_Correction_r16();
            gnss_SSR_STEC_Correction_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_STEC_Correction_r16", -1);

         }
         else {
            gnss_SSR_STEC_Correction_r16 = null;
         }

         // decode gnss_SSR_GriddedCorrection_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_GriddedCorrection_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_GriddedCorrection_r16 = new GNSS_SSR_GriddedCorrection_r16();
            gnss_SSR_GriddedCorrection_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_GriddedCorrection_r16", -1);

         }
         else {
            gnss_SSR_GriddedCorrection_r16 = null;
         }

         // decode navic_DifferentialCorrections_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("navic_DifferentialCorrections_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            navic_DifferentialCorrections_r16 = new NavIC_DifferentialCorrections_r16();
            navic_DifferentialCorrections_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("navic_DifferentialCorrections_r16", -1);

         }
         else {
            navic_DifferentialCorrections_r16 = null;
         }

         // decode navic_GridModel_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("navic_GridModel_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            navic_GridModel_r16 = new NavIC_GridModelParameter_r16();
            navic_GridModel_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("navic_GridModel_r16", -1);

         }
         else {
            navic_GridModel_r16 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((bds_DifferentialCorrections_r12 != null) ||
      (bds_GridModel_r12 != null) ||
      (gnss_RTK_Observations_r15 != null) ||
      (glo_RTK_BiasInformation_r15 != null) ||
      (gnss_RTK_MAC_CorrectionDifferences_r15 != null) ||
      (gnss_RTK_Residuals_r15 != null) ||
      (gnss_RTK_FKP_Gradients_r15 != null) ||
      (gnss_SSR_OrbitCorrections_r15 != null) ||
      (gnss_SSR_ClockCorrections_r15 != null) ||
      (gnss_SSR_CodeBias_r15 != null) ||
      (gnss_SSR_URA_r16 != null) ||
      (gnss_SSR_PhaseBias_r16 != null) ||
      (gnss_SSR_STEC_Correction_r16 != null) ||
      (gnss_SSR_GriddedCorrection_r16 != null) ||
      (navic_DifferentialCorrections_r16 != null) ||
      (navic_GridModel_r16 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((sbas_ID != null), null);
      buffer.encodeBit ((gnss_TimeModels != null), null);
      buffer.encodeBit ((gnss_DifferentialCorrections != null), null);
      buffer.encodeBit ((gnss_NavigationModel != null), null);
      buffer.encodeBit ((gnss_RealTimeIntegrity != null), null);
      buffer.encodeBit ((gnss_DataBitAssistance != null), null);
      buffer.encodeBit ((gnss_AcquisitionAssistance != null), null);
      buffer.encodeBit ((gnss_Almanac != null), null);
      buffer.encodeBit ((gnss_UTC_Model != null), null);
      buffer.encodeBit ((gnss_AuxiliaryInformation != null), null);

      // encode gnss_ID

      if (gnss_ID != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_ID", -1);

         gnss_ID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_ID", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_ID");

      // encode sbas_ID

      if (sbas_ID != null) {
         buffer.getContext().eventDispatcher.startElement("sbas_ID", -1);

         sbas_ID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sbas_ID", -1);
      }

      // encode gnss_TimeModels

      if (gnss_TimeModels != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_TimeModels", -1);

         gnss_TimeModels.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_TimeModels", -1);
      }

      // encode gnss_DifferentialCorrections

      if (gnss_DifferentialCorrections != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_DifferentialCorrections", -1);

         gnss_DifferentialCorrections.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_DifferentialCorrections", -1);
      }

      // encode gnss_NavigationModel

      if (gnss_NavigationModel != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_NavigationModel", -1);

         gnss_NavigationModel.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_NavigationModel", -1);
      }

      // encode gnss_RealTimeIntegrity

      if (gnss_RealTimeIntegrity != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_RealTimeIntegrity", -1);

         gnss_RealTimeIntegrity.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_RealTimeIntegrity", -1);
      }

      // encode gnss_DataBitAssistance

      if (gnss_DataBitAssistance != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_DataBitAssistance", -1);

         gnss_DataBitAssistance.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_DataBitAssistance", -1);
      }

      // encode gnss_AcquisitionAssistance

      if (gnss_AcquisitionAssistance != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_AcquisitionAssistance", -1);

         gnss_AcquisitionAssistance.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_AcquisitionAssistance", -1);
      }

      // encode gnss_Almanac

      if (gnss_Almanac != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_Almanac", -1);

         gnss_Almanac.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_Almanac", -1);
      }

      // encode gnss_UTC_Model

      if (gnss_UTC_Model != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_UTC_Model", -1);

         gnss_UTC_Model.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_UTC_Model", -1);
      }

      // encode gnss_AuxiliaryInformation

      if (gnss_AuxiliaryInformation != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_AuxiliaryInformation", -1);

         gnss_AuxiliaryInformation.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_AuxiliaryInformation", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 16;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((bds_DifferentialCorrections_r12 != null), null);
         buffer.encodeBit ((bds_GridModel_r12 != null), null);
         buffer.encodeBit ((gnss_RTK_Observations_r15 != null), null);
         buffer.encodeBit ((glo_RTK_BiasInformation_r15 != null), null);
         buffer.encodeBit ((gnss_RTK_MAC_CorrectionDifferences_r15 != null), null);
         buffer.encodeBit ((gnss_RTK_Residuals_r15 != null), null);
         buffer.encodeBit ((gnss_RTK_FKP_Gradients_r15 != null), null);
         buffer.encodeBit ((gnss_SSR_OrbitCorrections_r15 != null), null);
         buffer.encodeBit ((gnss_SSR_ClockCorrections_r15 != null), null);
         buffer.encodeBit ((gnss_SSR_CodeBias_r15 != null), null);
         buffer.encodeBit ((gnss_SSR_URA_r16 != null), null);
         buffer.encodeBit ((gnss_SSR_PhaseBias_r16 != null), null);
         buffer.encodeBit ((gnss_SSR_STEC_Correction_r16 != null), null);
         buffer.encodeBit ((gnss_SSR_GriddedCorrection_r16 != null), null);
         buffer.encodeBit ((navic_DifferentialCorrections_r16 != null), null);
         buffer.encodeBit ((navic_GridModel_r16 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // bds_DifferentialCorrections_r12

         if (bds_DifferentialCorrections_r12 != null) {
            buffer.reset();
            bds_DifferentialCorrections_r12.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("bds_DifferentialCorrections_r12", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("bds_DifferentialCorrections_r12", -1);
         }

         // bds_GridModel_r12

         if (bds_GridModel_r12 != null) {
            buffer.reset();
            bds_GridModel_r12.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("bds_GridModel_r12", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("bds_GridModel_r12", -1);
         }

         // gnss_RTK_Observations_r15

         if (gnss_RTK_Observations_r15 != null) {
            buffer.reset();
            gnss_RTK_Observations_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_Observations_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_RTK_Observations_r15", -1);
         }

         // glo_RTK_BiasInformation_r15

         if (glo_RTK_BiasInformation_r15 != null) {
            buffer.reset();
            glo_RTK_BiasInformation_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("glo_RTK_BiasInformation_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("glo_RTK_BiasInformation_r15", -1);
         }

         // gnss_RTK_MAC_CorrectionDifferences_r15

         if (gnss_RTK_MAC_CorrectionDifferences_r15 != null) {
            buffer.reset();
            gnss_RTK_MAC_CorrectionDifferences_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_MAC_CorrectionDifferences_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_RTK_MAC_CorrectionDifferences_r15", -1);
         }

         // gnss_RTK_Residuals_r15

         if (gnss_RTK_Residuals_r15 != null) {
            buffer.reset();
            gnss_RTK_Residuals_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_Residuals_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_RTK_Residuals_r15", -1);
         }

         // gnss_RTK_FKP_Gradients_r15

         if (gnss_RTK_FKP_Gradients_r15 != null) {
            buffer.reset();
            gnss_RTK_FKP_Gradients_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_FKP_Gradients_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_RTK_FKP_Gradients_r15", -1);
         }

         // gnss_SSR_OrbitCorrections_r15

         if (gnss_SSR_OrbitCorrections_r15 != null) {
            buffer.reset();
            gnss_SSR_OrbitCorrections_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_OrbitCorrections_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_OrbitCorrections_r15", -1);
         }

         // gnss_SSR_ClockCorrections_r15

         if (gnss_SSR_ClockCorrections_r15 != null) {
            buffer.reset();
            gnss_SSR_ClockCorrections_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_ClockCorrections_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_ClockCorrections_r15", -1);
         }

         // gnss_SSR_CodeBias_r15

         if (gnss_SSR_CodeBias_r15 != null) {
            buffer.reset();
            gnss_SSR_CodeBias_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_CodeBias_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_CodeBias_r15", -1);
         }

         // gnss_SSR_URA_r16

         if (gnss_SSR_URA_r16 != null) {
            buffer.reset();
            gnss_SSR_URA_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_URA_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_URA_r16", -1);
         }

         // gnss_SSR_PhaseBias_r16

         if (gnss_SSR_PhaseBias_r16 != null) {
            buffer.reset();
            gnss_SSR_PhaseBias_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_PhaseBias_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_PhaseBias_r16", -1);
         }

         // gnss_SSR_STEC_Correction_r16

         if (gnss_SSR_STEC_Correction_r16 != null) {
            buffer.reset();
            gnss_SSR_STEC_Correction_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_STEC_Correction_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_STEC_Correction_r16", -1);
         }

         // gnss_SSR_GriddedCorrection_r16

         if (gnss_SSR_GriddedCorrection_r16 != null) {
            buffer.reset();
            gnss_SSR_GriddedCorrection_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_GriddedCorrection_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_GriddedCorrection_r16", -1);
         }

         // navic_DifferentialCorrections_r16

         if (navic_DifferentialCorrections_r16 != null) {
            buffer.reset();
            navic_DifferentialCorrections_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("navic_DifferentialCorrections_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("navic_DifferentialCorrections_r16", -1);
         }

         // navic_GridModel_r16

         if (navic_GridModel_r16 != null) {
            buffer.reset();
            navic_GridModel_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("navic_GridModel_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("navic_GridModel_r16", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
