/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class GNSSPosTechnology extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSSPosTechnology";
   }

   protected Asn1Boolean gps;
   protected Asn1Boolean galileo;
   protected Asn1Boolean sbas;
   protected Asn1Boolean modernized_gps;
   protected Asn1Boolean qzss;
   protected Asn1Boolean glonass;
   protected Asn1Boolean bds;  // optional
   protected Asn1Boolean rtk_osr;  // optional
   protected Asn1OpenExt extElem1;

   public GNSSPosTechnology () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSSPosTechnology (
      Asn1Boolean gps_,
      Asn1Boolean galileo_,
      Asn1Boolean sbas_,
      Asn1Boolean modernized_gps_,
      Asn1Boolean qzss_,
      Asn1Boolean glonass_,
      Asn1Boolean bds_,
      Asn1Boolean rtk_osr_
   ) {
      super();
      setGps (gps_);
      setGalileo (galileo_);
      setSbas (sbas_);
      setModernized_gps (modernized_gps_);
      setQzss (qzss_);
      setGlonass (glonass_);
      setBds (bds_);
      setRtk_osr (rtk_osr_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GNSSPosTechnology (
      Asn1Boolean gps_,
      Asn1Boolean galileo_,
      Asn1Boolean sbas_,
      Asn1Boolean modernized_gps_,
      Asn1Boolean qzss_,
      Asn1Boolean glonass_
   ) {
      super();
      setGps (gps_);
      setGalileo (galileo_);
      setSbas (sbas_);
      setModernized_gps (modernized_gps_);
      setQzss (qzss_);
      setGlonass (glonass_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GNSSPosTechnology (boolean gps_,
      boolean galileo_,
      boolean sbas_,
      boolean modernized_gps_,
      boolean qzss_,
      boolean glonass_,
      boolean bds_,
      boolean rtk_osr_
   ) {
      super();
      setGps (gps_);
      setGalileo (galileo_);
      setSbas (sbas_);
      setModernized_gps (modernized_gps_);
      setQzss (qzss_);
      setGlonass (glonass_);
      setBds (bds_);
      setRtk_osr (rtk_osr_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public GNSSPosTechnology (
      boolean gps_,
      boolean galileo_,
      boolean sbas_,
      boolean modernized_gps_,
      boolean qzss_,
      boolean glonass_
   ) {
      super();
      setGps (gps_);
      setGalileo (galileo_);
      setSbas (sbas_);
      setModernized_gps (modernized_gps_);
      setQzss (qzss_);
      setGlonass (glonass_);
   }

   public void init () {
      gps = null;
      galileo = null;
      sbas = null;
      modernized_gps = null;
      qzss = null;
      glonass = null;
      bds = null;
      rtk_osr = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSSPosTechnology) ) return false;

      GNSSPosTechnology rhs = (GNSSPosTechnology) obj;

      if (gps == null) {
         if (rhs.gps != null) return false;
      }
      else {
         if (!gps.equals(rhs.gps)) {
            return false;
         }
      }

      if (galileo == null) {
         if (rhs.galileo != null) return false;
      }
      else {
         if (!galileo.equals(rhs.galileo)) {
            return false;
         }
      }

      if (sbas == null) {
         if (rhs.sbas != null) return false;
      }
      else {
         if (!sbas.equals(rhs.sbas)) {
            return false;
         }
      }

      if (modernized_gps == null) {
         if (rhs.modernized_gps != null) return false;
      }
      else {
         if (!modernized_gps.equals(rhs.modernized_gps)) {
            return false;
         }
      }

      if (qzss == null) {
         if (rhs.qzss != null) return false;
      }
      else {
         if (!qzss.equals(rhs.qzss)) {
            return false;
         }
      }

      if (glonass == null) {
         if (rhs.glonass != null) return false;
      }
      else {
         if (!glonass.equals(rhs.glonass)) {
            return false;
         }
      }

      if (bds == null) {
         if (rhs.bds != null) return false;
      }
      else {
         if (!bds.equals(rhs.bds)) {
            return false;
         }
      }

      if (rtk_osr == null) {
         if (rhs.rtk_osr != null) return false;
      }
      else {
         if (!rtk_osr.equals(rhs.rtk_osr)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gps != null) __code = 31*__code + gps.hashCode();
      if (galileo != null) __code = 31*__code + galileo.hashCode();
      if (sbas != null) __code = 31*__code + sbas.hashCode();
      if (modernized_gps != null) __code = 31*__code + modernized_gps.hashCode();
      if (qzss != null) __code = 31*__code + qzss.hashCode();
      if (glonass != null) __code = 31*__code + glonass.hashCode();
      if (bds != null) __code = 31*__code + bds.hashCode();
      if (rtk_osr != null) __code = 31*__code + rtk_osr.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Gps
    */
   public Asn1Boolean getGps () {
      return gps;
   }

   public void setGps (Asn1Boolean value) {
      this.gps = value;
   }

   public void setGps (boolean value) {
      setGps (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Galileo
    */
   public Asn1Boolean getGalileo () {
      return galileo;
   }

   public void setGalileo (Asn1Boolean value) {
      this.galileo = value;
   }

   public void setGalileo (boolean value) {
      setGalileo (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Sbas
    */
   public Asn1Boolean getSbas () {
      return sbas;
   }

   public void setSbas (Asn1Boolean value) {
      this.sbas = value;
   }

   public void setSbas (boolean value) {
      setSbas (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Modernized_gps
    */
   public Asn1Boolean getModernized_gps () {
      return modernized_gps;
   }

   public void setModernized_gps (Asn1Boolean value) {
      this.modernized_gps = value;
   }

   public void setModernized_gps (boolean value) {
      setModernized_gps (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Qzss
    */
   public Asn1Boolean getQzss () {
      return qzss;
   }

   public void setQzss (Asn1Boolean value) {
      this.qzss = value;
   }

   public void setQzss (boolean value) {
      setQzss (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Glonass
    */
   public Asn1Boolean getGlonass () {
      return glonass;
   }

   public void setGlonass (Asn1Boolean value) {
      this.glonass = value;
   }

   public void setGlonass (boolean value) {
      setGlonass (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Bds
    */
   public Asn1Boolean getBds () {
      return bds;
   }

   public void setBds (Asn1Boolean value) {
      this.bds = value;
   }

   public void setBds (boolean value) {
      setBds (new Asn1Boolean(value));
   }
   public boolean hasBds () {
      return (bds != null);
   }

   /**
    * Accessor/mutator methods for Rtk_osr
    */
   public Asn1Boolean getRtk_osr () {
      return rtk_osr;
   }

   public void setRtk_osr (Asn1Boolean value) {
      this.rtk_osr = value;
   }

   public void setRtk_osr (boolean value) {
      setRtk_osr (new Asn1Boolean(value));
   }
   public boolean hasRtk_osr () {
      return (rtk_osr != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gps;
         case 1: return galileo;
         case 2: return sbas;
         case 3: return modernized_gps;
         case 4: return qzss;
         case 5: return glonass;
         case 6: return bds;
         case 7: return rtk_osr;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gps";
         case 1: return "galileo";
         case 2: return "sbas";
         case 3: return "modernized-gps";
         case 4: return "qzss";
         case 5: return "glonass";
         case 6: return "bds";
         case 7: return "rtk-osr";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode gps

      buffer.getContext().eventDispatcher.startElement("gps", -1);

      gps = new Asn1Boolean();
      gps.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("gps", -1);

      // decode galileo

      buffer.getContext().eventDispatcher.startElement("galileo", -1);

      galileo = new Asn1Boolean();
      galileo.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("galileo", -1);

      // decode sbas

      buffer.getContext().eventDispatcher.startElement("sbas", -1);

      sbas = new Asn1Boolean();
      sbas.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sbas", -1);

      // decode modernized_gps

      buffer.getContext().eventDispatcher.startElement("modernized_gps", -1);

      modernized_gps = new Asn1Boolean();
      modernized_gps.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("modernized_gps", -1);

      // decode qzss

      buffer.getContext().eventDispatcher.startElement("qzss", -1);

      qzss = new Asn1Boolean();
      qzss.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("qzss", -1);

      // decode glonass

      buffer.getContext().eventDispatcher.startElement("glonass", -1);

      glonass = new Asn1Boolean();
      glonass.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("glonass", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("bdsPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("rtk_osrPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode bds

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("bds", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            bds = new Asn1Boolean();
            bds.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("bds", -1);

         }
         else {
            bds = null;
         }

         // decode rtk_osr

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("rtk_osr", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            rtk_osr = new Asn1Boolean();
            rtk_osr.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("rtk_osr", -1);

         }
         else {
            rtk_osr = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((bds != null) ||
      (rtk_osr != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode gps

      if (gps != null) {
         buffer.getContext().eventDispatcher.startElement("gps", -1);

         gps.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gps", -1);
      }
      else throw new Asn1MissingRequiredException ("gps");

      // encode galileo

      if (galileo != null) {
         buffer.getContext().eventDispatcher.startElement("galileo", -1);

         galileo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("galileo", -1);
      }
      else throw new Asn1MissingRequiredException ("galileo");

      // encode sbas

      if (sbas != null) {
         buffer.getContext().eventDispatcher.startElement("sbas", -1);

         sbas.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sbas", -1);
      }
      else throw new Asn1MissingRequiredException ("sbas");

      // encode modernized_gps

      if (modernized_gps != null) {
         buffer.getContext().eventDispatcher.startElement("modernized_gps", -1);

         modernized_gps.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("modernized_gps", -1);
      }
      else throw new Asn1MissingRequiredException ("modernized_gps");

      // encode qzss

      if (qzss != null) {
         buffer.getContext().eventDispatcher.startElement("qzss", -1);

         qzss.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("qzss", -1);
      }
      else throw new Asn1MissingRequiredException ("qzss");

      // encode glonass

      if (glonass != null) {
         buffer.getContext().eventDispatcher.startElement("glonass", -1);

         glonass.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("glonass", -1);
      }
      else throw new Asn1MissingRequiredException ("glonass");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 2;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((bds != null), null);
         buffer.encodeBit ((rtk_osr != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // bds

         if (bds != null) {
            buffer.reset();
            bds.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("bds", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("bds", -1);
         }

         // rtk_osr

         if (rtk_osr != null) {
            buffer.reset();
            rtk_osr.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("rtk_osr", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("rtk_osr", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
