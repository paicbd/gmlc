/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NAV_ClockModel extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "NAV-ClockModel";
   }

   protected Asn1Integer navToc;
   protected Asn1Integer navaf2;
   protected Asn1Integer navaf1;
   protected Asn1Integer navaf0;
   protected Asn1Integer navTgd;
   protected Asn1OpenExt extElem1;

   public NAV_ClockModel () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NAV_ClockModel (
      Asn1Integer navToc_,
      Asn1Integer navaf2_,
      Asn1Integer navaf1_,
      Asn1Integer navaf0_,
      Asn1Integer navTgd_
   ) throws Asn1Exception {
      super();
      setNavToc (navToc_);
      setNavaf2 (navaf2_);
      setNavaf1 (navaf1_);
      setNavaf0 (navaf0_);
      setNavTgd (navTgd_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NAV_ClockModel (long navToc_,
      long navaf2_,
      long navaf1_,
      long navaf0_,
      long navTgd_
   ) throws Asn1Exception {
      super();
      setNavToc (navToc_);
      setNavaf2 (navaf2_);
      setNavaf1 (navaf1_);
      setNavaf0 (navaf0_);
      setNavTgd (navTgd_);
   }

   public void init () {
      navToc = null;
      navaf2 = null;
      navaf1 = null;
      navaf0 = null;
      navTgd = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof NAV_ClockModel) ) return false;

      NAV_ClockModel rhs = (NAV_ClockModel) obj;

      if (navToc == null) {
         if (rhs.navToc != null) return false;
      }
      else {
         if (!navToc.equals(rhs.navToc)) {
            return false;
         }
      }

      if (navaf2 == null) {
         if (rhs.navaf2 != null) return false;
      }
      else {
         if (!navaf2.equals(rhs.navaf2)) {
            return false;
         }
      }

      if (navaf1 == null) {
         if (rhs.navaf1 != null) return false;
      }
      else {
         if (!navaf1.equals(rhs.navaf1)) {
            return false;
         }
      }

      if (navaf0 == null) {
         if (rhs.navaf0 != null) return false;
      }
      else {
         if (!navaf0.equals(rhs.navaf0)) {
            return false;
         }
      }

      if (navTgd == null) {
         if (rhs.navTgd != null) return false;
      }
      else {
         if (!navTgd.equals(rhs.navTgd)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (navToc != null) __code = 31*__code + navToc.hashCode();
      if (navaf2 != null) __code = 31*__code + navaf2.hashCode();
      if (navaf1 != null) __code = 31*__code + navaf1.hashCode();
      if (navaf0 != null) __code = 31*__code + navaf0.hashCode();
      if (navTgd != null) __code = 31*__code + navTgd.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for NavToc
    */
   public Asn1Integer getNavToc () {
      return navToc;
   }

   public void setNavToc (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 37799))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navToc = value;
   }

   public void setNavToc (long value) 
      throws Asn1Exception
   {
      setNavToc (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navaf2
    */
   public Asn1Integer getNavaf2 () {
      return navaf2;
   }

   public void setNavaf2 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navaf2 = value;
   }

   public void setNavaf2 (long value) 
      throws Asn1Exception
   {
      setNavaf2 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navaf1
    */
   public Asn1Integer getNavaf1 () {
      return navaf1;
   }

   public void setNavaf1 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navaf1 = value;
   }

   public void setNavaf1 (long value) 
      throws Asn1Exception
   {
      setNavaf1 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navaf0
    */
   public Asn1Integer getNavaf0 () {
      return navaf0;
   }

   public void setNavaf0 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -2097152 && value.value <= 2097151))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navaf0 = value;
   }

   public void setNavaf0 (long value) 
      throws Asn1Exception
   {
      setNavaf0 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NavTgd
    */
   public Asn1Integer getNavTgd () {
      return navTgd;
   }

   public void setNavTgd (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navTgd = value;
   }

   public void setNavTgd (long value) 
      throws Asn1Exception
   {
      setNavTgd (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return navToc;
         case 1: return navaf2;
         case 2: return navaf1;
         case 3: return navaf0;
         case 4: return navTgd;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "navToc";
         case 1: return "navaf2";
         case 2: return "navaf1";
         case 3: return "navaf0";
         case 4: return "navTgd";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode navToc

      buffer.getContext().eventDispatcher.startElement("navToc", -1);

      navToc = new Asn1Integer();
      navToc.decode (buffer, 0, 37799);
      buffer.getContext().eventDispatcher.endElement("navToc", -1);

      // decode navaf2

      buffer.getContext().eventDispatcher.startElement("navaf2", -1);

      navaf2 = new Asn1Integer();
      navaf2.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("navaf2", -1);

      // decode navaf1

      buffer.getContext().eventDispatcher.startElement("navaf1", -1);

      navaf1 = new Asn1Integer();
      navaf1.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("navaf1", -1);

      // decode navaf0

      buffer.getContext().eventDispatcher.startElement("navaf0", -1);

      navaf0 = new Asn1Integer();
      navaf0.decode (buffer, -2097152, 2097151);
      buffer.getContext().eventDispatcher.endElement("navaf0", -1);

      // decode navTgd

      buffer.getContext().eventDispatcher.startElement("navTgd", -1);

      navTgd = new Asn1Integer();
      navTgd.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("navTgd", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode navToc

      if (navToc != null) {
         buffer.getContext().eventDispatcher.startElement("navToc", -1);

         navToc.encode (buffer, 0, 37799);

         buffer.getContext().eventDispatcher.endElement("navToc", -1);
      }
      else throw new Asn1MissingRequiredException ("navToc");

      // encode navaf2

      if (navaf2 != null) {
         buffer.getContext().eventDispatcher.startElement("navaf2", -1);

         navaf2.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("navaf2", -1);
      }
      else throw new Asn1MissingRequiredException ("navaf2");

      // encode navaf1

      if (navaf1 != null) {
         buffer.getContext().eventDispatcher.startElement("navaf1", -1);

         navaf1.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("navaf1", -1);
      }
      else throw new Asn1MissingRequiredException ("navaf1");

      // encode navaf0

      if (navaf0 != null) {
         buffer.getContext().eventDispatcher.startElement("navaf0", -1);

         navaf0.encode (buffer, -2097152, 2097151);

         buffer.getContext().eventDispatcher.endElement("navaf0", -1);
      }
      else throw new Asn1MissingRequiredException ("navaf0");

      // encode navTgd

      if (navTgd != null) {
         buffer.getContext().eventDispatcher.startElement("navTgd", -1);

         navTgd.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("navTgd", -1);
      }
      else throw new Asn1MissingRequiredException ("navTgd");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
