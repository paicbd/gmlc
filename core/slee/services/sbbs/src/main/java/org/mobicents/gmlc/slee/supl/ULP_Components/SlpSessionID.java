/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Components;

import com.objsys.asn1j.runtime.*;

public class SlpSessionID extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SlpSessionID";
   }

   protected Asn1OctetString sessionID;
   protected SLPAddress slpId;

   public SlpSessionID () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SlpSessionID (
      Asn1OctetString sessionID_,
      SLPAddress slpId_
   ) throws Asn1Exception {
      super();
      setSessionID (sessionID_);
      setSlpId (slpId_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SlpSessionID (byte[] sessionID_,
      SLPAddress slpId_
   ) throws Asn1Exception {
      super();
      setSessionID (sessionID_);
      setSlpId (slpId_);
   }

   public void init () {
      sessionID = null;
      slpId = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof SlpSessionID) ) return false;

      SlpSessionID rhs = (SlpSessionID) obj;

      if (sessionID == null) {
         if (rhs.sessionID != null) return false;
      }
      else {
         if (!sessionID.equals(rhs.sessionID)) {
            return false;
         }
      }

      if (slpId == null) {
         if (rhs.slpId != null) return false;
      }
      else {
         if (!slpId.equals(rhs.slpId)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (sessionID != null) __code = 31*__code + sessionID.hashCode();
      if (slpId != null) __code = 31*__code + slpId.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SessionID
    */
   public Asn1OctetString getSessionID () {
      return sessionID;
   }

   public void setSessionID (Asn1OctetString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 4)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.sessionID = value;
   }

   public void setSessionID (byte[] value) 
      throws Asn1Exception
   {
      setSessionID (new Asn1OctetString(value));
   }

   /**
    * Accessor/mutator methods for SlpId
    */
   public SLPAddress getSlpId () {
      return slpId;
   }

   public void setSlpId (SLPAddress value) {
      this.slpId = value;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sessionID;
         case 1: return slpId;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sessionID";
         case 1: return "slpId";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode sessionID

      buffer.getContext().eventDispatcher.startElement("sessionID", -1);

      sessionID = new Asn1OctetString();
      sessionID.decode (buffer, 4, 4);
      buffer.getContext().eventDispatcher.endElement("sessionID", -1);

      // decode slpId

      buffer.getContext().eventDispatcher.startElement("slpId", -1);

      slpId = new SLPAddress();
      slpId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("slpId", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode sessionID

      if (sessionID != null) {
         buffer.getContext().eventDispatcher.startElement("sessionID", -1);

         sessionID.encode (buffer, 4, 4);

         buffer.getContext().eventDispatcher.endElement("sessionID", -1);
      }
      else throw new Asn1MissingRequiredException ("sessionID");

      // encode slpId

      if (slpId != null) {
         buffer.getContext().eventDispatcher.startElement("slpId", -1);

         slpId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("slpId", -1);
      }
      else throw new Asn1MissingRequiredException ("slpId");

   }

}
