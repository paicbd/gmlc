/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NR_SSB_Config_r16_ssb_PositionsInBurst_r16 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _SHORTBITMAP_R16 = 1;
   public final static byte _MEDIUMBITMAP_R16 = 2;
   public final static byte _LONGBITMAP_R16 = 3;

   public NR_SSB_Config_r16_ssb_PositionsInBurst_r16 () {
      super();
   }

   public NR_SSB_Config_r16_ssb_PositionsInBurst_r16 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _SHORTBITMAP_R16: return "shortBitmap_r16";
      case _MEDIUMBITMAP_R16: return "mediumBitmap_r16";
      case _LONGBITMAP_R16: return "longBitmap_r16";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for shortBitmap_r16
    */
   public Asn1BitString getShortBitmap_r16 () {
      return (choiceID == _SHORTBITMAP_R16) ? (Asn1BitString)element : null;
   }
   public void setShortBitmap_r16 (Asn1BitString value) {
      setElement (_SHORTBITMAP_R16, value);
   }
   public boolean isShortBitmap_r16 () {
      return (choiceID == _SHORTBITMAP_R16);
   }

   /**
    * Accessor/mutator methods for mediumBitmap_r16
    */
   public Asn1BitString getMediumBitmap_r16 () {
      return (choiceID == _MEDIUMBITMAP_R16) ? (Asn1BitString)element : null;
   }
   public void setMediumBitmap_r16 (Asn1BitString value) {
      setElement (_MEDIUMBITMAP_R16, value);
   }
   public boolean isMediumBitmap_r16 () {
      return (choiceID == _MEDIUMBITMAP_R16);
   }

   /**
    * Accessor/mutator methods for longBitmap_r16
    */
   public Asn1BitString getLongBitmap_r16 () {
      return (choiceID == _LONGBITMAP_R16) ? (Asn1BitString)element : null;
   }
   public void setLongBitmap_r16 (Asn1BitString value) {
      setElement (_LONGBITMAP_R16, value);
   }
   public boolean isLongBitmap_r16 () {
      return (choiceID == _LONGBITMAP_R16);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (3, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // shortBitmap_r16
         case 0: { 
            Asn1BitString shortBitmap_r16;
            element = shortBitmap_r16 = new Asn1BitString();
            shortBitmap_r16.decode (buffer, 4, 4);
            break;
         }

         // mediumBitmap_r16
         case 1: { 
            Asn1BitString mediumBitmap_r16;
            element = mediumBitmap_r16 = new Asn1BitString();
            mediumBitmap_r16.decode (buffer, 8, 8);
            break;
         }

         // longBitmap_r16
         case 2: { 
            Asn1BitString longBitmap_r16;
            element = longBitmap_r16 = new Asn1BitString();
            longBitmap_r16.decode (buffer, 64, 64);
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // Encode choice index value

      buffer.encodeConsWholeNumber (choiceID - 1, 3, "index");

      buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

      switch (choiceID) {
         // shortBitmap_r16
         case _SHORTBITMAP_R16:
            Asn1BitString shortBitmap_r16 = (Asn1BitString) element;
            shortBitmap_r16.encode (buffer, 4, 4);
            break;

         // mediumBitmap_r16
         case _MEDIUMBITMAP_R16:
            Asn1BitString mediumBitmap_r16 = (Asn1BitString) element;
            mediumBitmap_r16.encode (buffer, 8, 8);
            break;

         // longBitmap_r16
         case _LONGBITMAP_R16:
            Asn1BitString longBitmap_r16 = (Asn1BitString) element;
            longBitmap_r16.encode (buffer, 64, 64);
            break;

         default:
         throw new Asn1InvalidChoiceOptionException();
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
