/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class LPP_Message extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "LPP-Message";
   }

   protected LPP_TransactionID transactionID;  // optional
   protected Asn1Boolean endTransaction;
   protected SequenceNumber sequenceNumber;  // optional
   protected Acknowledgement acknowledgement;  // optional
   protected LPP_MessageBody lpp_MessageBody;  // optional

   public LPP_Message () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public LPP_Message (
      LPP_TransactionID transactionID_,
      Asn1Boolean endTransaction_,
      SequenceNumber sequenceNumber_,
      Acknowledgement acknowledgement_,
      LPP_MessageBody lpp_MessageBody_
   ) throws Asn1Exception {
      super();
      setTransactionID (transactionID_);
      setEndTransaction (endTransaction_);
      setSequenceNumber (sequenceNumber_);
      setAcknowledgement (acknowledgement_);
      setLpp_MessageBody (lpp_MessageBody_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public LPP_Message (
      Asn1Boolean endTransaction_
   ) throws Asn1Exception {
      super();
      setEndTransaction (endTransaction_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public LPP_Message (LPP_TransactionID transactionID_,
      boolean endTransaction_,
      long sequenceNumber_,
      Acknowledgement acknowledgement_,
      LPP_MessageBody lpp_MessageBody_
   ) throws Asn1Exception {
      super();
      setTransactionID (transactionID_);
      setEndTransaction (endTransaction_);
      setSequenceNumber (sequenceNumber_);
      setAcknowledgement (acknowledgement_);
      setLpp_MessageBody (lpp_MessageBody_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public LPP_Message (
      boolean endTransaction_
   ) throws Asn1Exception {
      super();
      setEndTransaction (endTransaction_);
   }

   public void init () {
      transactionID = null;
      endTransaction = null;
      sequenceNumber = null;
      acknowledgement = null;
      lpp_MessageBody = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof LPP_Message) ) return false;

      LPP_Message rhs = (LPP_Message) obj;

      if (transactionID == null) {
         if (rhs.transactionID != null) return false;
      }
      else {
         if (!transactionID.equals(rhs.transactionID)) {
            return false;
         }
      }

      if (endTransaction == null) {
         if (rhs.endTransaction != null) return false;
      }
      else {
         if (!endTransaction.equals(rhs.endTransaction)) {
            return false;
         }
      }

      if (sequenceNumber == null) {
         if (rhs.sequenceNumber != null) return false;
      }
      else {
         if (!sequenceNumber.equals(rhs.sequenceNumber)) {
            return false;
         }
      }

      if (acknowledgement == null) {
         if (rhs.acknowledgement != null) return false;
      }
      else {
         if (!acknowledgement.equals(rhs.acknowledgement)) {
            return false;
         }
      }

      if (lpp_MessageBody == null) {
         if (rhs.lpp_MessageBody != null) return false;
      }
      else {
         if (!lpp_MessageBody.equals(rhs.lpp_MessageBody)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (transactionID != null) __code = 31*__code + transactionID.hashCode();
      if (endTransaction != null) __code = 31*__code + endTransaction.hashCode();
      if (sequenceNumber != null) __code = 31*__code + sequenceNumber.hashCode();
      if (acknowledgement != null) __code = 31*__code + acknowledgement.hashCode();
      if (lpp_MessageBody != null) __code = 31*__code + lpp_MessageBody.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for TransactionID
    */
   public LPP_TransactionID getTransactionID () {
      return transactionID;
   }

   public void setTransactionID (LPP_TransactionID value) {
      this.transactionID = value;
   }

   public boolean hasTransactionID () {
      return (transactionID != null);
   }

   /**
    * Accessor/mutator methods for EndTransaction
    */
   public Asn1Boolean getEndTransaction () {
      return endTransaction;
   }

   public void setEndTransaction (Asn1Boolean value) {
      this.endTransaction = value;
   }

   public void setEndTransaction (boolean value) {
      setEndTransaction (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for SequenceNumber
    */
   public SequenceNumber getSequenceNumber () {
      return sequenceNumber;
   }

   public void setSequenceNumber (SequenceNumber value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sequenceNumber = value;
   }

   public void setSequenceNumber (long value) 
      throws Asn1Exception
   {
      setSequenceNumber (new SequenceNumber(value));
   }
   public boolean hasSequenceNumber () {
      return (sequenceNumber != null);
   }

   /**
    * Accessor/mutator methods for Acknowledgement
    */
   public Acknowledgement getAcknowledgement () {
      return acknowledgement;
   }

   public void setAcknowledgement (Acknowledgement value) {
      this.acknowledgement = value;
   }

   public boolean hasAcknowledgement () {
      return (acknowledgement != null);
   }

   /**
    * Accessor/mutator methods for Lpp_MessageBody
    */
   public LPP_MessageBody getLpp_MessageBody () {
      return lpp_MessageBody;
   }

   public void setLpp_MessageBody (LPP_MessageBody value) {
      this.lpp_MessageBody = value;
   }

   public boolean hasLpp_MessageBody () {
      return (lpp_MessageBody != null);
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return transactionID;
         case 1: return endTransaction;
         case 2: return sequenceNumber;
         case 3: return acknowledgement;
         case 4: return lpp_MessageBody;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "transactionID";
         case 1: return "endTransaction";
         case 2: return "sequenceNumber";
         case 3: return "acknowledgement";
         case 4: return "lpp-MessageBody";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean transactionIDPresent = buffer.decodeBit ("transactionIDPresent");
      boolean sequenceNumberPresent = buffer.decodeBit ("sequenceNumberPresent");
      boolean acknowledgementPresent = buffer.decodeBit ("acknowledgementPresent");
      boolean lpp_MessageBodyPresent = buffer.decodeBit ("lpp_MessageBodyPresent");

      // decode transactionID

      if (transactionIDPresent) {
         buffer.getContext().eventDispatcher.startElement("transactionID", -1);

         transactionID = new LPP_TransactionID();
         transactionID.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("transactionID", -1);
      }
      else {
         transactionID = null;
      }

      // decode endTransaction

      buffer.getContext().eventDispatcher.startElement("endTransaction", -1);

      endTransaction = new Asn1Boolean();
      endTransaction.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("endTransaction", -1);

      // decode sequenceNumber

      if (sequenceNumberPresent) {
         buffer.getContext().eventDispatcher.startElement("sequenceNumber", -1);

         sequenceNumber = new SequenceNumber();
         sequenceNumber.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sequenceNumber", -1);
      }
      else {
         sequenceNumber = null;
      }

      // decode acknowledgement

      if (acknowledgementPresent) {
         buffer.getContext().eventDispatcher.startElement("acknowledgement", -1);

         acknowledgement = new Acknowledgement();
         acknowledgement.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("acknowledgement", -1);
      }
      else {
         acknowledgement = null;
      }

      // decode lpp_MessageBody

      if (lpp_MessageBodyPresent) {
         buffer.getContext().eventDispatcher.startElement("lpp_MessageBody", -1);

         lpp_MessageBody = new LPP_MessageBody();
         lpp_MessageBody.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("lpp_MessageBody", -1);
      }
      else {
         lpp_MessageBody = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((transactionID != null), null);
      buffer.encodeBit ((sequenceNumber != null), null);
      buffer.encodeBit ((acknowledgement != null), null);
      buffer.encodeBit ((lpp_MessageBody != null), null);

      // encode transactionID

      if (transactionID != null) {
         buffer.getContext().eventDispatcher.startElement("transactionID", -1);

         transactionID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("transactionID", -1);
      }

      // encode endTransaction

      if (endTransaction != null) {
         buffer.getContext().eventDispatcher.startElement("endTransaction", -1);

         endTransaction.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("endTransaction", -1);
      }
      else throw new Asn1MissingRequiredException ("endTransaction");

      // encode sequenceNumber

      if (sequenceNumber != null) {
         buffer.getContext().eventDispatcher.startElement("sequenceNumber", -1);

         sequenceNumber.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sequenceNumber", -1);
      }

      // encode acknowledgement

      if (acknowledgement != null) {
         buffer.getContext().eventDispatcher.startElement("acknowledgement", -1);

         acknowledgement.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("acknowledgement", -1);
      }

      // encode lpp_MessageBody

      if (lpp_MessageBody != null) {
         buffer.getContext().eventDispatcher.startElement("lpp_MessageBody", -1);

         lpp_MessageBody.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("lpp_MessageBody", -1);
      }

   }

}
