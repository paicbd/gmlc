/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_Almanac extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-Almanac";
   }

   protected Asn1Integer weekNumber;  // optional
   protected Asn1Integer toa;  // optional
   protected Asn1Integer ioda;  // optional
   protected Asn1Boolean completeAlmanacProvided;
   protected GNSS_AlmanacList gnss_AlmanacList;
   protected Asn1Integer toa_ext_v1240;  // optional
   protected Asn1Integer ioda_ext_v1240;  // optional
   protected Asn1Integer weekNumber_ext_r16;  // optional
   protected Asn1Integer toa_ext2_r16;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_Almanac () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_Almanac (
      Asn1Integer weekNumber_,
      Asn1Integer toa_,
      Asn1Integer ioda_,
      Asn1Boolean completeAlmanacProvided_,
      GNSS_AlmanacList gnss_AlmanacList_,
      Asn1Integer toa_ext_v1240_,
      Asn1Integer ioda_ext_v1240_,
      Asn1Integer weekNumber_ext_r16_,
      Asn1Integer toa_ext2_r16_
   ) throws Asn1Exception {
      super();
      setWeekNumber (weekNumber_);
      setToa (toa_);
      setIoda (ioda_);
      setCompleteAlmanacProvided (completeAlmanacProvided_);
      setGnss_AlmanacList (gnss_AlmanacList_);
      setToa_ext_v1240 (toa_ext_v1240_);
      setIoda_ext_v1240 (ioda_ext_v1240_);
      setWeekNumber_ext_r16 (weekNumber_ext_r16_);
      setToa_ext2_r16 (toa_ext2_r16_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GNSS_Almanac (
      Asn1Boolean completeAlmanacProvided_,
      GNSS_AlmanacList gnss_AlmanacList_
   ) throws Asn1Exception {
      super();
      setCompleteAlmanacProvided (completeAlmanacProvided_);
      setGnss_AlmanacList (gnss_AlmanacList_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GNSS_Almanac (long weekNumber_,
      long toa_,
      long ioda_,
      boolean completeAlmanacProvided_,
      GNSS_AlmanacList gnss_AlmanacList_,
      long toa_ext_v1240_,
      long ioda_ext_v1240_,
      long weekNumber_ext_r16_,
      long toa_ext2_r16_
   ) throws Asn1Exception {
      super();
      setWeekNumber (weekNumber_);
      setToa (toa_);
      setIoda (ioda_);
      setCompleteAlmanacProvided (completeAlmanacProvided_);
      setGnss_AlmanacList (gnss_AlmanacList_);
      setToa_ext_v1240 (toa_ext_v1240_);
      setIoda_ext_v1240 (ioda_ext_v1240_);
      setWeekNumber_ext_r16 (weekNumber_ext_r16_);
      setToa_ext2_r16 (toa_ext2_r16_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public GNSS_Almanac (
      boolean completeAlmanacProvided_,
      GNSS_AlmanacList gnss_AlmanacList_
   ) throws Asn1Exception {
      super();
      setCompleteAlmanacProvided (completeAlmanacProvided_);
      setGnss_AlmanacList (gnss_AlmanacList_);
   }

   public void init () {
      weekNumber = null;
      toa = null;
      ioda = null;
      completeAlmanacProvided = null;
      gnss_AlmanacList = null;
      toa_ext_v1240 = null;
      ioda_ext_v1240 = null;
      weekNumber_ext_r16 = null;
      toa_ext2_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_Almanac) ) return false;

      GNSS_Almanac rhs = (GNSS_Almanac) obj;

      if (weekNumber == null) {
         if (rhs.weekNumber != null) return false;
      }
      else {
         if (!weekNumber.equals(rhs.weekNumber)) {
            return false;
         }
      }

      if (toa == null) {
         if (rhs.toa != null) return false;
      }
      else {
         if (!toa.equals(rhs.toa)) {
            return false;
         }
      }

      if (ioda == null) {
         if (rhs.ioda != null) return false;
      }
      else {
         if (!ioda.equals(rhs.ioda)) {
            return false;
         }
      }

      if (completeAlmanacProvided == null) {
         if (rhs.completeAlmanacProvided != null) return false;
      }
      else {
         if (!completeAlmanacProvided.equals(rhs.completeAlmanacProvided)) {
            return false;
         }
      }

      if (gnss_AlmanacList == null) {
         if (rhs.gnss_AlmanacList != null) return false;
      }
      else {
         if (!gnss_AlmanacList.equals(rhs.gnss_AlmanacList)) {
            return false;
         }
      }

      if (toa_ext_v1240 == null) {
         if (rhs.toa_ext_v1240 != null) return false;
      }
      else {
         if (!toa_ext_v1240.equals(rhs.toa_ext_v1240)) {
            return false;
         }
      }

      if (ioda_ext_v1240 == null) {
         if (rhs.ioda_ext_v1240 != null) return false;
      }
      else {
         if (!ioda_ext_v1240.equals(rhs.ioda_ext_v1240)) {
            return false;
         }
      }

      if (weekNumber_ext_r16 == null) {
         if (rhs.weekNumber_ext_r16 != null) return false;
      }
      else {
         if (!weekNumber_ext_r16.equals(rhs.weekNumber_ext_r16)) {
            return false;
         }
      }

      if (toa_ext2_r16 == null) {
         if (rhs.toa_ext2_r16 != null) return false;
      }
      else {
         if (!toa_ext2_r16.equals(rhs.toa_ext2_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (weekNumber != null) __code = 31*__code + weekNumber.hashCode();
      if (toa != null) __code = 31*__code + toa.hashCode();
      if (ioda != null) __code = 31*__code + ioda.hashCode();
      if (completeAlmanacProvided != null) __code = 31*__code + completeAlmanacProvided.hashCode();
      if (gnss_AlmanacList != null) __code = 31*__code + gnss_AlmanacList.hashCode();
      if (toa_ext_v1240 != null) __code = 31*__code + toa_ext_v1240.hashCode();
      if (ioda_ext_v1240 != null) __code = 31*__code + ioda_ext_v1240.hashCode();
      if (weekNumber_ext_r16 != null) __code = 31*__code + weekNumber_ext_r16.hashCode();
      if (toa_ext2_r16 != null) __code = 31*__code + toa_ext2_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for WeekNumber
    */
   public Asn1Integer getWeekNumber () {
      return weekNumber;
   }

   public void setWeekNumber (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.weekNumber = value;
   }

   public void setWeekNumber (long value) 
      throws Asn1Exception
   {
      setWeekNumber (new Asn1Integer(value));
   }
   public boolean hasWeekNumber () {
      return (weekNumber != null);
   }

   /**
    * Accessor/mutator methods for Toa
    */
   public Asn1Integer getToa () {
      return toa;
   }

   public void setToa (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.toa = value;
   }

   public void setToa (long value) 
      throws Asn1Exception
   {
      setToa (new Asn1Integer(value));
   }
   public boolean hasToa () {
      return (toa != null);
   }

   /**
    * Accessor/mutator methods for Ioda
    */
   public Asn1Integer getIoda () {
      return ioda;
   }

   public void setIoda (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 3))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.ioda = value;
   }

   public void setIoda (long value) 
      throws Asn1Exception
   {
      setIoda (new Asn1Integer(value));
   }
   public boolean hasIoda () {
      return (ioda != null);
   }

   /**
    * Accessor/mutator methods for CompleteAlmanacProvided
    */
   public Asn1Boolean getCompleteAlmanacProvided () {
      return completeAlmanacProvided;
   }

   public void setCompleteAlmanacProvided (Asn1Boolean value) {
      this.completeAlmanacProvided = value;
   }

   public void setCompleteAlmanacProvided (boolean value) {
      setCompleteAlmanacProvided (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Gnss_AlmanacList
    */
   public GNSS_AlmanacList getGnss_AlmanacList () {
      return gnss_AlmanacList;
   }

   public void setGnss_AlmanacList (GNSS_AlmanacList value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 64))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.gnss_AlmanacList = value;
   }

   /**
    * Accessor/mutator methods for Toa_ext_v1240
    */
   public Asn1Integer getToa_ext_v1240 () {
      return toa_ext_v1240;
   }

   public void setToa_ext_v1240 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 256 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.toa_ext_v1240 = value;
   }

   public void setToa_ext_v1240 (long value) 
      throws Asn1Exception
   {
      setToa_ext_v1240 (new Asn1Integer(value));
   }
   public boolean hasToa_ext_v1240 () {
      return (toa_ext_v1240 != null);
   }

   /**
    * Accessor/mutator methods for Ioda_ext_v1240
    */
   public Asn1Integer getIoda_ext_v1240 () {
      return ioda_ext_v1240;
   }

   public void setIoda_ext_v1240 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 4 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.ioda_ext_v1240 = value;
   }

   public void setIoda_ext_v1240 (long value) 
      throws Asn1Exception
   {
      setIoda_ext_v1240 (new Asn1Integer(value));
   }
   public boolean hasIoda_ext_v1240 () {
      return (ioda_ext_v1240 != null);
   }

   /**
    * Accessor/mutator methods for WeekNumber_ext_r16
    */
   public Asn1Integer getWeekNumber_ext_r16 () {
      return weekNumber_ext_r16;
   }

   public void setWeekNumber_ext_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 256 && value.value <= 8191))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.weekNumber_ext_r16 = value;
   }

   public void setWeekNumber_ext_r16 (long value) 
      throws Asn1Exception
   {
      setWeekNumber_ext_r16 (new Asn1Integer(value));
   }
   public boolean hasWeekNumber_ext_r16 () {
      return (weekNumber_ext_r16 != null);
   }

   /**
    * Accessor/mutator methods for Toa_ext2_r16
    */
   public Asn1Integer getToa_ext2_r16 () {
      return toa_ext2_r16;
   }

   public void setToa_ext2_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 256 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.toa_ext2_r16 = value;
   }

   public void setToa_ext2_r16 (long value) 
      throws Asn1Exception
   {
      setToa_ext2_r16 (new Asn1Integer(value));
   }
   public boolean hasToa_ext2_r16 () {
      return (toa_ext2_r16 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return weekNumber;
         case 1: return toa;
         case 2: return ioda;
         case 3: return completeAlmanacProvided;
         case 4: return gnss_AlmanacList;
         case 5: return toa_ext_v1240;
         case 6: return ioda_ext_v1240;
         case 7: return weekNumber_ext_r16;
         case 8: return toa_ext2_r16;
         case 9: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "weekNumber";
         case 1: return "toa";
         case 2: return "ioda";
         case 3: return "completeAlmanacProvided";
         case 4: return "gnss-AlmanacList";
         case 5: return "toa-ext-v1240";
         case 6: return "ioda-ext-v1240";
         case 7: return "weekNumber-ext-r16";
         case 8: return "toa-ext2-r16";
         case 9: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean weekNumberPresent = buffer.decodeBit ("weekNumberPresent");
      boolean toaPresent = buffer.decodeBit ("toaPresent");
      boolean iodaPresent = buffer.decodeBit ("iodaPresent");

      // decode weekNumber

      if (weekNumberPresent) {
         buffer.getContext().eventDispatcher.startElement("weekNumber", -1);

         weekNumber = new Asn1Integer();
         weekNumber.decode (buffer, 0, 255);
         buffer.getContext().eventDispatcher.endElement("weekNumber", -1);
      }
      else {
         weekNumber = null;
      }

      // decode toa

      if (toaPresent) {
         buffer.getContext().eventDispatcher.startElement("toa", -1);

         toa = new Asn1Integer();
         toa.decode (buffer, 0, 255);
         buffer.getContext().eventDispatcher.endElement("toa", -1);
      }
      else {
         toa = null;
      }

      // decode ioda

      if (iodaPresent) {
         buffer.getContext().eventDispatcher.startElement("ioda", -1);

         ioda = new Asn1Integer();
         ioda.decode (buffer, 0, 3);
         buffer.getContext().eventDispatcher.endElement("ioda", -1);
      }
      else {
         ioda = null;
      }

      // decode completeAlmanacProvided

      buffer.getContext().eventDispatcher.startElement("completeAlmanacProvided", -1);

      completeAlmanacProvided = new Asn1Boolean();
      completeAlmanacProvided.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("completeAlmanacProvided", -1);

      // decode gnss_AlmanacList

      buffer.getContext().eventDispatcher.startElement("gnss_AlmanacList", -1);

      gnss_AlmanacList = new GNSS_AlmanacList();
      gnss_AlmanacList.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("gnss_AlmanacList", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("toa_ext_v1240Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("ioda_ext_v1240Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("weekNumber_ext_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("toa_ext2_r16Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode toa_ext_v1240

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("toa_ext_v1240", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            toa_ext_v1240 = new Asn1Integer();
            toa_ext_v1240.decode (buffer, 256, 1023);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("toa_ext_v1240", -1);

         }
         else {
            toa_ext_v1240 = null;
         }

         // decode ioda_ext_v1240

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("ioda_ext_v1240", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            ioda_ext_v1240 = new Asn1Integer();
            ioda_ext_v1240.decode (buffer, 4, 15);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("ioda_ext_v1240", -1);

         }
         else {
            ioda_ext_v1240 = null;
         }

         // decode weekNumber_ext_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("weekNumber_ext_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            weekNumber_ext_r16 = new Asn1Integer();
            weekNumber_ext_r16.decode (buffer, 256, 8191);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("weekNumber_ext_r16", -1);

         }
         else {
            weekNumber_ext_r16 = null;
         }

         // decode toa_ext2_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("toa_ext2_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            toa_ext2_r16 = new Asn1Integer();
            toa_ext2_r16.decode (buffer, 256, 65535);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("toa_ext2_r16", -1);

         }
         else {
            toa_ext2_r16 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((toa_ext_v1240 != null) ||
      (ioda_ext_v1240 != null) ||
      (weekNumber_ext_r16 != null) ||
      (toa_ext2_r16 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((weekNumber != null), null);
      buffer.encodeBit ((toa != null), null);
      buffer.encodeBit ((ioda != null), null);

      // encode weekNumber

      if (weekNumber != null) {
         buffer.getContext().eventDispatcher.startElement("weekNumber", -1);

         weekNumber.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("weekNumber", -1);
      }

      // encode toa

      if (toa != null) {
         buffer.getContext().eventDispatcher.startElement("toa", -1);

         toa.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("toa", -1);
      }

      // encode ioda

      if (ioda != null) {
         buffer.getContext().eventDispatcher.startElement("ioda", -1);

         ioda.encode (buffer, 0, 3);

         buffer.getContext().eventDispatcher.endElement("ioda", -1);
      }

      // encode completeAlmanacProvided

      if (completeAlmanacProvided != null) {
         buffer.getContext().eventDispatcher.startElement("completeAlmanacProvided", -1);

         completeAlmanacProvided.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("completeAlmanacProvided", -1);
      }
      else throw new Asn1MissingRequiredException ("completeAlmanacProvided");

      // encode gnss_AlmanacList

      if (gnss_AlmanacList != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_AlmanacList", -1);

         gnss_AlmanacList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_AlmanacList", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_AlmanacList");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 4;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((toa_ext_v1240 != null), null);
         buffer.encodeBit ((ioda_ext_v1240 != null), null);
         buffer.encodeBit ((weekNumber_ext_r16 != null), null);
         buffer.encodeBit ((toa_ext2_r16 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // toa_ext_v1240

         if (toa_ext_v1240 != null) {
            buffer.reset();
            toa_ext_v1240.encode (buffer, 256, 1023);
            buffer.getContext().eventDispatcher.startElement("toa_ext_v1240", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("toa_ext_v1240", -1);
         }

         // ioda_ext_v1240

         if (ioda_ext_v1240 != null) {
            buffer.reset();
            ioda_ext_v1240.encode (buffer, 4, 15);
            buffer.getContext().eventDispatcher.startElement("ioda_ext_v1240", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("ioda_ext_v1240", -1);
         }

         // weekNumber_ext_r16

         if (weekNumber_ext_r16 != null) {
            buffer.reset();
            weekNumber_ext_r16.encode (buffer, 256, 8191);
            buffer.getContext().eventDispatcher.startElement("weekNumber_ext_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("weekNumber_ext_r16", -1);
         }

         // toa_ext2_r16

         if (toa_ext2_r16 != null) {
            buffer.reset();
            toa_ext2_r16.encode (buffer, 256, 65535);
            buffer.getContext().eventDispatcher.startElement("toa_ext2_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("toa_ext2_r16", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
