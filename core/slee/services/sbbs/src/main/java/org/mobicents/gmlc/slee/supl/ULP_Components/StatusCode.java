/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Components;

import com.objsys.asn1j.runtime.*;

public class StatusCode extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "StatusCode";
   }

   // Integer constants for switch-case
   public static final int _UNSPECIFIED = 0;
   public static final int _SYSTEMFAILURE = 1;
   public static final int _UNEXPECTEDMESSAGE = 2;
   public static final int _PROTOCOLERROR = 3;
   public static final int _DATAMISSING = 4;
   public static final int _UNEXPECTEDDATAVALUE = 5;
   public static final int _POSMETHODFAILURE = 6;
   public static final int _POSMETHODMISMATCH = 7;
   public static final int _POSPROTOCOLMISMATCH = 8;
   public static final int _TARGETSETNOTREACHABLE = 9;
   public static final int _VERSIONNOTSUPPORTED = 10;
   public static final int _RESOURCESHORTAGE = 11;
   public static final int _INVALIDSESSIONID = 12;
   public static final int _NONPROXYMODENOTSUPPORTED = 13;
   public static final int _PROXYMODENOTSUPPORTED = 14;
   public static final int _POSITIONINGNOTPERMITTED = 15;
   public static final int _AUTHNETFAILURE = 16;
   public static final int _AUTHSUPLINITFAILURE = 17;
   public static final int _VER2_INCOMPATIBLEPROTECTIONLEVEL = 18;
   public static final int _VER2_SERVICENOTSUPPORTED = 19;
   public static final int _VER2_INSUFFICIENTINTERVAL = 20;
   public static final int _VER2_NOSUPLCOVERAGE = 21;
   public static final int _CONSENTDENIEDBYUSER = 100;
   public static final int _CONSENTGRANTEDBYUSER = 101;
   public static final int _VER2_SESSIONSTOPPED = 102;
   public static final int _VER2_APPIDDENIED = 103;

   // Singleton instances of StatusCode
   protected static final StatusCode _unspecified = new StatusCode(0);
   protected static final StatusCode _systemFailure = new StatusCode(1);
   protected static final StatusCode _unexpectedMessage = new StatusCode(2);
   protected static final StatusCode _protocolError = new StatusCode(3);
   protected static final StatusCode _dataMissing = new StatusCode(4);
   protected static final StatusCode _unexpectedDataValue = new StatusCode(5);
   protected static final StatusCode _posMethodFailure = new StatusCode(6);
   protected static final StatusCode _posMethodMismatch = new StatusCode(7);
   protected static final StatusCode _posProtocolMismatch = new StatusCode(8);
   protected static final StatusCode _targetSETnotReachable = new StatusCode(9);
   protected static final StatusCode _versionNotSupported = new StatusCode(10);
   protected static final StatusCode _resourceShortage = new StatusCode(11);
   protected static final StatusCode _invalidSessionId = new StatusCode(12);
   protected static final StatusCode _nonProxyModeNotSupported = new StatusCode(13);
   protected static final StatusCode _proxyModeNotSupported = new StatusCode(14);
   protected static final StatusCode _positioningNotPermitted = new StatusCode(15);
   protected static final StatusCode _authNetFailure = new StatusCode(16);
   protected static final StatusCode _authSuplinitFailure = new StatusCode(17);
   protected static final StatusCode _ver2_incompatibleProtectionLevel = new StatusCode(18);
   protected static final StatusCode _ver2_serviceNotSupported = new StatusCode(19);
   protected static final StatusCode _ver2_insufficientInterval = new StatusCode(20);
   protected static final StatusCode _ver2_noSUPLCoverage = new StatusCode(21);
   protected static final StatusCode _consentDeniedByUser = new StatusCode(100);
   protected static final StatusCode _consentGrantedByUser = new StatusCode(101);
   protected static final StatusCode _ver2_sessionStopped = new StatusCode(102);
   protected static final StatusCode _ver2_appIdDenied = new StatusCode(103);
   private static StatusCode __undefined = new StatusCode(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    *   16
    *   17
    *   18
    *   19
    *   20
    *   21
    *   100
    *   101
    *   102
    *   103
    */
   protected StatusCode (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for unspecified.
    */
   public static StatusCode unspecified() {
      return _unspecified;
   }

   /**
    * Singleton accessor method for systemFailure.
    */
   public static StatusCode systemFailure() {
      return _systemFailure;
   }

   /**
    * Singleton accessor method for unexpectedMessage.
    */
   public static StatusCode unexpectedMessage() {
      return _unexpectedMessage;
   }

   /**
    * Singleton accessor method for protocolError.
    */
   public static StatusCode protocolError() {
      return _protocolError;
   }

   /**
    * Singleton accessor method for dataMissing.
    */
   public static StatusCode dataMissing() {
      return _dataMissing;
   }

   /**
    * Singleton accessor method for unexpectedDataValue.
    */
   public static StatusCode unexpectedDataValue() {
      return _unexpectedDataValue;
   }

   /**
    * Singleton accessor method for posMethodFailure.
    */
   public static StatusCode posMethodFailure() {
      return _posMethodFailure;
   }

   /**
    * Singleton accessor method for posMethodMismatch.
    */
   public static StatusCode posMethodMismatch() {
      return _posMethodMismatch;
   }

   /**
    * Singleton accessor method for posProtocolMismatch.
    */
   public static StatusCode posProtocolMismatch() {
      return _posProtocolMismatch;
   }

   /**
    * Singleton accessor method for targetSETnotReachable.
    */
   public static StatusCode targetSETnotReachable() {
      return _targetSETnotReachable;
   }

   /**
    * Singleton accessor method for versionNotSupported.
    */
   public static StatusCode versionNotSupported() {
      return _versionNotSupported;
   }

   /**
    * Singleton accessor method for resourceShortage.
    */
   public static StatusCode resourceShortage() {
      return _resourceShortage;
   }

   /**
    * Singleton accessor method for invalidSessionId.
    */
   public static StatusCode invalidSessionId() {
      return _invalidSessionId;
   }

   /**
    * Singleton accessor method for nonProxyModeNotSupported.
    */
   public static StatusCode nonProxyModeNotSupported() {
      return _nonProxyModeNotSupported;
   }

   /**
    * Singleton accessor method for proxyModeNotSupported.
    */
   public static StatusCode proxyModeNotSupported() {
      return _proxyModeNotSupported;
   }

   /**
    * Singleton accessor method for positioningNotPermitted.
    */
   public static StatusCode positioningNotPermitted() {
      return _positioningNotPermitted;
   }

   /**
    * Singleton accessor method for authNetFailure.
    */
   public static StatusCode authNetFailure() {
      return _authNetFailure;
   }

   /**
    * Singleton accessor method for authSuplinitFailure.
    */
   public static StatusCode authSuplinitFailure() {
      return _authSuplinitFailure;
   }

   /**
    * Singleton accessor method for ver2_incompatibleProtectionLevel.
    */
   public static StatusCode ver2_incompatibleProtectionLevel() {
      return _ver2_incompatibleProtectionLevel;
   }

   /**
    * Singleton accessor method for ver2_serviceNotSupported.
    */
   public static StatusCode ver2_serviceNotSupported() {
      return _ver2_serviceNotSupported;
   }

   /**
    * Singleton accessor method for ver2_insufficientInterval.
    */
   public static StatusCode ver2_insufficientInterval() {
      return _ver2_insufficientInterval;
   }

   /**
    * Singleton accessor method for ver2_noSUPLCoverage.
    */
   public static StatusCode ver2_noSUPLCoverage() {
      return _ver2_noSUPLCoverage;
   }

   /**
    * Singleton accessor method for consentDeniedByUser.
    */
   public static StatusCode consentDeniedByUser() {
      return _consentDeniedByUser;
   }

   /**
    * Singleton accessor method for consentGrantedByUser.
    */
   public static StatusCode consentGrantedByUser() {
      return _consentGrantedByUser;
   }

   /**
    * Singleton accessor method for ver2_sessionStopped.
    */
   public static StatusCode ver2_sessionStopped() {
      return _ver2_sessionStopped;
   }

   /**
    * Singleton accessor method for ver2_appIdDenied.
    */
   public static StatusCode ver2_appIdDenied() {
      return _ver2_appIdDenied;
   }

   /** Undefined value. */
   protected static StatusCode __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return StatusCode.valueOf( StatusCode.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static StatusCode valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return unspecified();
         case 1: return systemFailure();
         case 2: return unexpectedMessage();
         case 3: return protocolError();
         case 4: return dataMissing();
         case 5: return unexpectedDataValue();
         case 6: return posMethodFailure();
         case 7: return posMethodMismatch();
         case 8: return posProtocolMismatch();
         case 9: return targetSETnotReachable();
         case 10: return versionNotSupported();
         case 11: return resourceShortage();
         case 12: return invalidSessionId();
         case 13: return nonProxyModeNotSupported();
         case 14: return proxyModeNotSupported();
         case 15: return positioningNotPermitted();
         case 16: return authNetFailure();
         case 17: return authSuplinitFailure();
         case 18: return ver2_incompatibleProtectionLevel();
         case 19: return ver2_serviceNotSupported();
         case 20: return ver2_insufficientInterval();
         case 21: return ver2_noSUPLCoverage();
         case 100: return consentDeniedByUser();
         case 101: return consentGrantedByUser();
         case 102: return ver2_sessionStopped();
         case 103: return ver2_appIdDenied();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         switch (ui) {
            case 0: ret = 18; break;
            case 1: ret = 19; break;
            case 2: ret = 20; break;
            case 3: ret = 21; break;
            case 4: ret = 102; break;
            case 5: ret = 103; break;
            default: ret = 0x7fffffff; break;
         }
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (20);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            case 3: ret =  3; break;
            case 4: ret =  4; break;
            case 5: ret =  5; break;
            case 6: ret =  6; break;
            case 7: ret =  7; break;
            case 8: ret =  8; break;
            case 9: ret =  9; break;
            case 10: ret =  10; break;
            case 11: ret =  11; break;
            case 12: ret =  12; break;
            case 13: ret =  13; break;
            case 14: ret =  14; break;
            case 15: ret =  15; break;
            case 16: ret =  16; break;
            case 17: ret =  17; break;
            case 18: ret =  100; break;
            case 19: ret =  101; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      boolean extbit = false;

      switch ((int)value) {
         case 0: ui = 0; /* unspecified */break;
         case 1: ui = 1; /* systemFailure */break;
         case 2: ui = 2; /* unexpectedMessage */break;
         case 3: ui = 3; /* protocolError */break;
         case 4: ui = 4; /* dataMissing */break;
         case 5: ui = 5; /* unexpectedDataValue */break;
         case 6: ui = 6; /* posMethodFailure */break;
         case 7: ui = 7; /* posMethodMismatch */break;
         case 8: ui = 8; /* posProtocolMismatch */break;
         case 9: ui = 9; /* targetSETnotReachable */break;
         case 10: ui = 10; /* versionNotSupported */break;
         case 11: ui = 11; /* resourceShortage */break;
         case 12: ui = 12; /* invalidSessionId */break;
         case 13: ui = 13; /* nonProxyModeNotSupported */break;
         case 14: ui = 14; /* proxyModeNotSupported */break;
         case 15: ui = 15; /* positioningNotPermitted */break;
         case 16: ui = 16; /* authNetFailure */break;
         case 17: ui = 17; /* authSuplinitFailure */break;
         case 18: ui = 0; /* ver2_incompatibleProtectionLevel */extbit = true; break;
         case 19: ui = 1; /* ver2_serviceNotSupported */extbit = true; break;
         case 20: ui = 2; /* ver2_insufficientInterval */extbit = true; break;
         case 21: ui = 3; /* ver2_noSUPLCoverage */extbit = true; break;
         case 100: ui = 18; /* consentDeniedByUser */break;
         case 101: ui = 19; /* consentGrantedByUser */break;
         case 102: ui = 4; /* ver2_sessionStopped */extbit = true; break;
         case 103: ui = 5; /* ver2_appIdDenied */extbit = true; break;
         default:
            ui = (int) value;
            extbit = true;
      }

      buffer.encodeBit (extbit, "extbit");

      if (extbit) {
         buffer.encodeSmallNonNegWholeNumber (ui);
      }
      else {
         buffer.encodeConsWholeNumber (ui, 20);
      }
   }

}
