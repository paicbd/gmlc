/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_TimeModelElement extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-TimeModelElement";
   }

   protected Asn1Integer gnss_TimeModelRefTime;
   protected Asn1Integer tA0;
   protected Asn1Integer tA1;  // optional
   protected Asn1Integer tA2;  // optional
   protected Asn1Integer gnss_TO_ID;
   protected Asn1Integer weekNumber;  // optional
   protected Asn1Integer deltaT;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_TimeModelElement () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_TimeModelElement (
      Asn1Integer gnss_TimeModelRefTime_,
      Asn1Integer tA0_,
      Asn1Integer tA1_,
      Asn1Integer tA2_,
      Asn1Integer gnss_TO_ID_,
      Asn1Integer weekNumber_,
      Asn1Integer deltaT_
   ) throws Asn1Exception {
      super();
      setGnss_TimeModelRefTime (gnss_TimeModelRefTime_);
      setTA0 (tA0_);
      setTA1 (tA1_);
      setTA2 (tA2_);
      setGnss_TO_ID (gnss_TO_ID_);
      setWeekNumber (weekNumber_);
      setDeltaT (deltaT_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GNSS_TimeModelElement (
      Asn1Integer gnss_TimeModelRefTime_,
      Asn1Integer tA0_,
      Asn1Integer gnss_TO_ID_
   ) throws Asn1Exception {
      super();
      setGnss_TimeModelRefTime (gnss_TimeModelRefTime_);
      setTA0 (tA0_);
      setGnss_TO_ID (gnss_TO_ID_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GNSS_TimeModelElement (long gnss_TimeModelRefTime_,
      long tA0_,
      long tA1_,
      long tA2_,
      long gnss_TO_ID_,
      long weekNumber_,
      long deltaT_
   ) throws Asn1Exception {
      super();
      setGnss_TimeModelRefTime (gnss_TimeModelRefTime_);
      setTA0 (tA0_);
      setTA1 (tA1_);
      setTA2 (tA2_);
      setGnss_TO_ID (gnss_TO_ID_);
      setWeekNumber (weekNumber_);
      setDeltaT (deltaT_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public GNSS_TimeModelElement (
      long gnss_TimeModelRefTime_,
      long tA0_,
      long gnss_TO_ID_
   ) throws Asn1Exception {
      super();
      setGnss_TimeModelRefTime (gnss_TimeModelRefTime_);
      setTA0 (tA0_);
      setGnss_TO_ID (gnss_TO_ID_);
   }

   public void init () {
      gnss_TimeModelRefTime = null;
      tA0 = null;
      tA1 = null;
      tA2 = null;
      gnss_TO_ID = null;
      weekNumber = null;
      deltaT = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_TimeModelElement) ) return false;

      GNSS_TimeModelElement rhs = (GNSS_TimeModelElement) obj;

      if (gnss_TimeModelRefTime == null) {
         if (rhs.gnss_TimeModelRefTime != null) return false;
      }
      else {
         if (!gnss_TimeModelRefTime.equals(rhs.gnss_TimeModelRefTime)) {
            return false;
         }
      }

      if (tA0 == null) {
         if (rhs.tA0 != null) return false;
      }
      else {
         if (!tA0.equals(rhs.tA0)) {
            return false;
         }
      }

      if (tA1 == null) {
         if (rhs.tA1 != null) return false;
      }
      else {
         if (!tA1.equals(rhs.tA1)) {
            return false;
         }
      }

      if (tA2 == null) {
         if (rhs.tA2 != null) return false;
      }
      else {
         if (!tA2.equals(rhs.tA2)) {
            return false;
         }
      }

      if (gnss_TO_ID == null) {
         if (rhs.gnss_TO_ID != null) return false;
      }
      else {
         if (!gnss_TO_ID.equals(rhs.gnss_TO_ID)) {
            return false;
         }
      }

      if (weekNumber == null) {
         if (rhs.weekNumber != null) return false;
      }
      else {
         if (!weekNumber.equals(rhs.weekNumber)) {
            return false;
         }
      }

      if (deltaT == null) {
         if (rhs.deltaT != null) return false;
      }
      else {
         if (!deltaT.equals(rhs.deltaT)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gnss_TimeModelRefTime != null) __code = 31*__code + gnss_TimeModelRefTime.hashCode();
      if (tA0 != null) __code = 31*__code + tA0.hashCode();
      if (tA1 != null) __code = 31*__code + tA1.hashCode();
      if (tA2 != null) __code = 31*__code + tA2.hashCode();
      if (gnss_TO_ID != null) __code = 31*__code + gnss_TO_ID.hashCode();
      if (weekNumber != null) __code = 31*__code + weekNumber.hashCode();
      if (deltaT != null) __code = 31*__code + deltaT.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Gnss_TimeModelRefTime
    */
   public Asn1Integer getGnss_TimeModelRefTime () {
      return gnss_TimeModelRefTime;
   }

   public void setGnss_TimeModelRefTime (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gnss_TimeModelRefTime = value;
   }

   public void setGnss_TimeModelRefTime (long value) 
      throws Asn1Exception
   {
      setGnss_TimeModelRefTime (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for TA0
    */
   public Asn1Integer getTA0 () {
      return tA0;
   }

   public void setTA0 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -67108864 && value.value <= 67108863))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.tA0 = value;
   }

   public void setTA0 (long value) 
      throws Asn1Exception
   {
      setTA0 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for TA1
    */
   public Asn1Integer getTA1 () {
      return tA1;
   }

   public void setTA1 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -4096 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.tA1 = value;
   }

   public void setTA1 (long value) 
      throws Asn1Exception
   {
      setTA1 (new Asn1Integer(value));
   }
   public boolean hasTA1 () {
      return (tA1 != null);
   }

   /**
    * Accessor/mutator methods for TA2
    */
   public Asn1Integer getTA2 () {
      return tA2;
   }

   public void setTA2 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -64 && value.value <= 63))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.tA2 = value;
   }

   public void setTA2 (long value) 
      throws Asn1Exception
   {
      setTA2 (new Asn1Integer(value));
   }
   public boolean hasTA2 () {
      return (tA2 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_TO_ID
    */
   public Asn1Integer getGnss_TO_ID () {
      return gnss_TO_ID;
   }

   public void setGnss_TO_ID (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gnss_TO_ID = value;
   }

   public void setGnss_TO_ID (long value) 
      throws Asn1Exception
   {
      setGnss_TO_ID (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for WeekNumber
    */
   public Asn1Integer getWeekNumber () {
      return weekNumber;
   }

   public void setWeekNumber (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 8191))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.weekNumber = value;
   }

   public void setWeekNumber (long value) 
      throws Asn1Exception
   {
      setWeekNumber (new Asn1Integer(value));
   }
   public boolean hasWeekNumber () {
      return (weekNumber != null);
   }

   /**
    * Accessor/mutator methods for DeltaT
    */
   public Asn1Integer getDeltaT () {
      return deltaT;
   }

   public void setDeltaT (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.deltaT = value;
   }

   public void setDeltaT (long value) 
      throws Asn1Exception
   {
      setDeltaT (new Asn1Integer(value));
   }
   public boolean hasDeltaT () {
      return (deltaT != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gnss_TimeModelRefTime;
         case 1: return tA0;
         case 2: return tA1;
         case 3: return tA2;
         case 4: return gnss_TO_ID;
         case 5: return weekNumber;
         case 6: return deltaT;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gnss-TimeModelRefTime";
         case 1: return "tA0";
         case 2: return "tA1";
         case 3: return "tA2";
         case 4: return "gnss-TO-ID";
         case 5: return "weekNumber";
         case 6: return "deltaT";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean tA1Present = buffer.decodeBit ("tA1Present");
      boolean tA2Present = buffer.decodeBit ("tA2Present");
      boolean weekNumberPresent = buffer.decodeBit ("weekNumberPresent");
      boolean deltaTPresent = buffer.decodeBit ("deltaTPresent");

      // decode gnss_TimeModelRefTime

      buffer.getContext().eventDispatcher.startElement("gnss_TimeModelRefTime", -1);

      gnss_TimeModelRefTime = new Asn1Integer();
      gnss_TimeModelRefTime.decode (buffer, 0, 65535);
      buffer.getContext().eventDispatcher.endElement("gnss_TimeModelRefTime", -1);

      // decode tA0

      buffer.getContext().eventDispatcher.startElement("tA0", -1);

      tA0 = new Asn1Integer();
      tA0.decode (buffer, -67108864, 67108863);
      buffer.getContext().eventDispatcher.endElement("tA0", -1);

      // decode tA1

      if (tA1Present) {
         buffer.getContext().eventDispatcher.startElement("tA1", -1);

         tA1 = new Asn1Integer();
         tA1.decode (buffer, -4096, 4095);
         buffer.getContext().eventDispatcher.endElement("tA1", -1);
      }
      else {
         tA1 = null;
      }

      // decode tA2

      if (tA2Present) {
         buffer.getContext().eventDispatcher.startElement("tA2", -1);

         tA2 = new Asn1Integer();
         tA2.decode (buffer, -64, 63);
         buffer.getContext().eventDispatcher.endElement("tA2", -1);
      }
      else {
         tA2 = null;
      }

      // decode gnss_TO_ID

      buffer.getContext().eventDispatcher.startElement("gnss_TO_ID", -1);

      gnss_TO_ID = new Asn1Integer();
      gnss_TO_ID.decode (buffer, 1, 15);
      buffer.getContext().eventDispatcher.endElement("gnss_TO_ID", -1);

      // decode weekNumber

      if (weekNumberPresent) {
         buffer.getContext().eventDispatcher.startElement("weekNumber", -1);

         weekNumber = new Asn1Integer();
         weekNumber.decode (buffer, 0, 8191);
         buffer.getContext().eventDispatcher.endElement("weekNumber", -1);
      }
      else {
         weekNumber = null;
      }

      // decode deltaT

      if (deltaTPresent) {
         buffer.getContext().eventDispatcher.startElement("deltaT", -1);

         deltaT = new Asn1Integer();
         deltaT.decode (buffer, -128, 127);
         buffer.getContext().eventDispatcher.endElement("deltaT", -1);
      }
      else {
         deltaT = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((tA1 != null), null);
      buffer.encodeBit ((tA2 != null), null);
      buffer.encodeBit ((weekNumber != null), null);
      buffer.encodeBit ((deltaT != null), null);

      // encode gnss_TimeModelRefTime

      if (gnss_TimeModelRefTime != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_TimeModelRefTime", -1);

         gnss_TimeModelRefTime.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("gnss_TimeModelRefTime", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_TimeModelRefTime");

      // encode tA0

      if (tA0 != null) {
         buffer.getContext().eventDispatcher.startElement("tA0", -1);

         tA0.encode (buffer, -67108864, 67108863);

         buffer.getContext().eventDispatcher.endElement("tA0", -1);
      }
      else throw new Asn1MissingRequiredException ("tA0");

      // encode tA1

      if (tA1 != null) {
         buffer.getContext().eventDispatcher.startElement("tA1", -1);

         tA1.encode (buffer, -4096, 4095);

         buffer.getContext().eventDispatcher.endElement("tA1", -1);
      }

      // encode tA2

      if (tA2 != null) {
         buffer.getContext().eventDispatcher.startElement("tA2", -1);

         tA2.encode (buffer, -64, 63);

         buffer.getContext().eventDispatcher.endElement("tA2", -1);
      }

      // encode gnss_TO_ID

      if (gnss_TO_ID != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_TO_ID", -1);

         gnss_TO_ID.encode (buffer, 1, 15);

         buffer.getContext().eventDispatcher.endElement("gnss_TO_ID", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_TO_ID");

      // encode weekNumber

      if (weekNumber != null) {
         buffer.getContext().eventDispatcher.startElement("weekNumber", -1);

         weekNumber.encode (buffer, 0, 8191);

         buffer.getContext().eventDispatcher.endElement("weekNumber", -1);
      }

      // encode deltaT

      if (deltaT != null) {
         buffer.getContext().eventDispatcher.startElement("deltaT", -1);

         deltaT.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("deltaT", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
