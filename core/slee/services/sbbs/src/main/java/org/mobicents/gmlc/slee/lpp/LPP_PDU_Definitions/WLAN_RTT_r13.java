/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class WLAN_RTT_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "WLAN-RTT-r13";
   }

   protected Asn1Integer rttValue_r13;
   protected WLAN_RTT_r13_rttUnits_r13 rttUnits_r13 = null;
   protected Asn1Integer rttAccuracy_r13;  // optional
   protected Asn1OpenExt extElem1;

   public WLAN_RTT_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public WLAN_RTT_r13 (
      Asn1Integer rttValue_r13_,
      WLAN_RTT_r13_rttUnits_r13 rttUnits_r13_,
      Asn1Integer rttAccuracy_r13_
   ) throws Asn1Exception {
      super();
      setRttValue_r13 (rttValue_r13_);
      setRttUnits_r13 (rttUnits_r13_);
      setRttAccuracy_r13 (rttAccuracy_r13_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public WLAN_RTT_r13 (
      Asn1Integer rttValue_r13_,
      WLAN_RTT_r13_rttUnits_r13 rttUnits_r13_
   ) throws Asn1Exception {
      super();
      setRttValue_r13 (rttValue_r13_);
      setRttUnits_r13 (rttUnits_r13_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public WLAN_RTT_r13 (long rttValue_r13_,
      WLAN_RTT_r13_rttUnits_r13 rttUnits_r13_,
      long rttAccuracy_r13_
   ) throws Asn1Exception {
      super();
      setRttValue_r13 (rttValue_r13_);
      setRttUnits_r13 (rttUnits_r13_);
      setRttAccuracy_r13 (rttAccuracy_r13_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public WLAN_RTT_r13 (
      long rttValue_r13_,
      WLAN_RTT_r13_rttUnits_r13 rttUnits_r13_
   ) throws Asn1Exception {
      super();
      setRttValue_r13 (rttValue_r13_);
      setRttUnits_r13 (rttUnits_r13_);
   }

   public void init () {
      rttValue_r13 = null;
      rttUnits_r13 = null;
      rttAccuracy_r13 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof WLAN_RTT_r13) ) return false;

      WLAN_RTT_r13 rhs = (WLAN_RTT_r13) obj;

      if (rttValue_r13 == null) {
         if (rhs.rttValue_r13 != null) return false;
      }
      else {
         if (!rttValue_r13.equals(rhs.rttValue_r13)) {
            return false;
         }
      }

      if (rttUnits_r13 == null) {
         if (rhs.rttUnits_r13 != null) return false;
      }
      else {
         if (!rttUnits_r13.equals(rhs.rttUnits_r13)) {
            return false;
         }
      }

      if (rttAccuracy_r13 == null) {
         if (rhs.rttAccuracy_r13 != null) return false;
      }
      else {
         if (!rttAccuracy_r13.equals(rhs.rttAccuracy_r13)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (rttValue_r13 != null) __code = 31*__code + rttValue_r13.hashCode();
      if (rttUnits_r13 != null) __code = 31*__code + rttUnits_r13.hashCode();
      if (rttAccuracy_r13 != null) __code = 31*__code + rttAccuracy_r13.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for RttValue_r13
    */
   public Asn1Integer getRttValue_r13 () {
      return rttValue_r13;
   }

   public void setRttValue_r13 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 16777215))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.rttValue_r13 = value;
   }

   public void setRttValue_r13 (long value) 
      throws Asn1Exception
   {
      setRttValue_r13 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for RttUnits_r13
    */
   public WLAN_RTT_r13_rttUnits_r13 getRttUnits_r13 () {
      return rttUnits_r13;
   }

   public void setRttUnits_r13 (WLAN_RTT_r13_rttUnits_r13 value) {
      this.rttUnits_r13 = value;
   }

   /**
    * Accessor/mutator methods for RttAccuracy_r13
    */
   public Asn1Integer getRttAccuracy_r13 () {
      return rttAccuracy_r13;
   }

   public void setRttAccuracy_r13 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.rttAccuracy_r13 = value;
   }

   public void setRttAccuracy_r13 (long value) 
      throws Asn1Exception
   {
      setRttAccuracy_r13 (new Asn1Integer(value));
   }
   public boolean hasRttAccuracy_r13 () {
      return (rttAccuracy_r13 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rttValue_r13;
         case 1: return rttUnits_r13;
         case 2: return rttAccuracy_r13;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rttValue-r13";
         case 1: return "rttUnits-r13";
         case 2: return "rttAccuracy-r13";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean rttAccuracy_r13Present = buffer.decodeBit ("rttAccuracy_r13Present");

      // decode rttValue_r13

      buffer.getContext().eventDispatcher.startElement("rttValue_r13", -1);

      rttValue_r13 = new Asn1Integer();
      rttValue_r13.decode (buffer, 0, 16777215);
      buffer.getContext().eventDispatcher.endElement("rttValue_r13", -1);

      // decode rttUnits_r13

      buffer.getContext().eventDispatcher.startElement("rttUnits_r13", -1);

      {
         int tval = WLAN_RTT_r13_rttUnits_r13.decodeEnumValue (buffer);
         rttUnits_r13 = WLAN_RTT_r13_rttUnits_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("rttUnits_r13", -1);

      // decode rttAccuracy_r13

      if (rttAccuracy_r13Present) {
         buffer.getContext().eventDispatcher.startElement("rttAccuracy_r13", -1);

         rttAccuracy_r13 = new Asn1Integer();
         rttAccuracy_r13.decode (buffer, 0, 255);
         buffer.getContext().eventDispatcher.endElement("rttAccuracy_r13", -1);
      }
      else {
         rttAccuracy_r13 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((rttAccuracy_r13 != null), null);

      // encode rttValue_r13

      if (rttValue_r13 != null) {
         buffer.getContext().eventDispatcher.startElement("rttValue_r13", -1);

         rttValue_r13.encode (buffer, 0, 16777215);

         buffer.getContext().eventDispatcher.endElement("rttValue_r13", -1);
      }
      else throw new Asn1MissingRequiredException ("rttValue_r13");

      // encode rttUnits_r13

      if (rttUnits_r13 != null) {
         buffer.getContext().eventDispatcher.startElement("rttUnits_r13", -1);

         rttUnits_r13.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rttUnits_r13", -1);
      }
      else throw new Asn1MissingRequiredException ("rttUnits_r13");

      // encode rttAccuracy_r13

      if (rttAccuracy_r13 != null) {
         buffer.getContext().eventDispatcher.startElement("rttAccuracy_r13", -1);

         rttAccuracy_r13.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("rttAccuracy_r13", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
