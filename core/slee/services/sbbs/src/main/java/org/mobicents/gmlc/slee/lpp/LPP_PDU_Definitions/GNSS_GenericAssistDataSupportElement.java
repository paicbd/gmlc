/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_GenericAssistDataSupportElement extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-GenericAssistDataSupportElement";
   }

   protected GNSS_ID gnss_ID;
   protected SBAS_ID sbas_ID;  // optional
   protected GNSS_TimeModelListSupport gnss_TimeModelsSupport;  // optional
   protected GNSS_DifferentialCorrectionsSupport gnss_DifferentialCorrectionsSupport;  // optional
   protected GNSS_NavigationModelSupport gnss_NavigationModelSupport;  // optional
   protected GNSS_RealTimeIntegritySupport gnss_RealTimeIntegritySupport;  // optional
   protected GNSS_DataBitAssistanceSupport gnss_DataBitAssistanceSupport;  // optional
   protected GNSS_AcquisitionAssistanceSupport gnss_AcquisitionAssistanceSupport;  // optional
   protected GNSS_AlmanacSupport gnss_AlmanacSupport;  // optional
   protected GNSS_UTC_ModelSupport gnss_UTC_ModelSupport;  // optional
   protected GNSS_AuxiliaryInformationSupport gnss_AuxiliaryInformationSupport;  // optional
   protected BDS_DifferentialCorrectionsSupport_r12 bds_DifferentialCorrectionsSupport_r12;  // optional
   protected BDS_GridModelSupport_r12 bds_GridModelSupport_r12;  // optional
   protected GNSS_RTK_ObservationsSupport_r15 gnss_RTK_ObservationsSupport_r15;  // optional
   protected GLO_RTK_BiasInformationSupport_r15 glo_RTK_BiasInformationSupport_r15;  // optional
   protected GNSS_RTK_MAC_CorrectionDifferencesSupport_r15 gnss_RTK_MAC_CorrectionDifferencesSupport_r15;  // optional
   protected GNSS_RTK_ResidualsSupport_r15 gnss_RTK_ResidualsSupport_r15;  // optional
   protected GNSS_RTK_FKP_GradientsSupport_r15 gnss_RTK_FKP_GradientsSupport_r15;  // optional
   protected GNSS_SSR_OrbitCorrectionsSupport_r15 gnss_SSR_OrbitCorrectionsSupport_r15;  // optional
   protected GNSS_SSR_ClockCorrectionsSupport_r15 gnss_SSR_ClockCorrectionsSupport_r15;  // optional
   protected GNSS_SSR_CodeBiasSupport_r15 gnss_SSR_CodeBiasSupport_r15;  // optional
   protected GNSS_SSR_URA_Support_r16 gnss_SSR_URA_Support_r16;  // optional
   protected GNSS_SSR_PhaseBiasSupport_r16 gnss_SSR_PhaseBiasSupport_r16;  // optional
   protected GNSS_SSR_STEC_CorrectionSupport_r16 gnss_SSR_STEC_CorrectionSupport_r16;  // optional
   protected GNSS_SSR_GriddedCorrectionSupport_r16 gnss_SSR_GriddedCorrectionSupport_r16;  // optional
   protected NavIC_DifferentialCorrectionsSupport_r16 navic_DifferentialCorrectionsSupport_r16;  // optional
   protected NavIC_GridModelSupport_r16 navic_GridModelSupport_r16;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_GenericAssistDataSupportElement () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_GenericAssistDataSupportElement (
      GNSS_ID gnss_ID_,
      SBAS_ID sbas_ID_,
      GNSS_TimeModelListSupport gnss_TimeModelsSupport_,
      GNSS_DifferentialCorrectionsSupport gnss_DifferentialCorrectionsSupport_,
      GNSS_NavigationModelSupport gnss_NavigationModelSupport_,
      GNSS_RealTimeIntegritySupport gnss_RealTimeIntegritySupport_,
      GNSS_DataBitAssistanceSupport gnss_DataBitAssistanceSupport_,
      GNSS_AcquisitionAssistanceSupport gnss_AcquisitionAssistanceSupport_,
      GNSS_AlmanacSupport gnss_AlmanacSupport_,
      GNSS_UTC_ModelSupport gnss_UTC_ModelSupport_,
      GNSS_AuxiliaryInformationSupport gnss_AuxiliaryInformationSupport_,
      BDS_DifferentialCorrectionsSupport_r12 bds_DifferentialCorrectionsSupport_r12_,
      BDS_GridModelSupport_r12 bds_GridModelSupport_r12_,
      GNSS_RTK_ObservationsSupport_r15 gnss_RTK_ObservationsSupport_r15_,
      GLO_RTK_BiasInformationSupport_r15 glo_RTK_BiasInformationSupport_r15_,
      GNSS_RTK_MAC_CorrectionDifferencesSupport_r15 gnss_RTK_MAC_CorrectionDifferencesSupport_r15_,
      GNSS_RTK_ResidualsSupport_r15 gnss_RTK_ResidualsSupport_r15_,
      GNSS_RTK_FKP_GradientsSupport_r15 gnss_RTK_FKP_GradientsSupport_r15_,
      GNSS_SSR_OrbitCorrectionsSupport_r15 gnss_SSR_OrbitCorrectionsSupport_r15_,
      GNSS_SSR_ClockCorrectionsSupport_r15 gnss_SSR_ClockCorrectionsSupport_r15_,
      GNSS_SSR_CodeBiasSupport_r15 gnss_SSR_CodeBiasSupport_r15_,
      GNSS_SSR_URA_Support_r16 gnss_SSR_URA_Support_r16_,
      GNSS_SSR_PhaseBiasSupport_r16 gnss_SSR_PhaseBiasSupport_r16_,
      GNSS_SSR_STEC_CorrectionSupport_r16 gnss_SSR_STEC_CorrectionSupport_r16_,
      GNSS_SSR_GriddedCorrectionSupport_r16 gnss_SSR_GriddedCorrectionSupport_r16_,
      NavIC_DifferentialCorrectionsSupport_r16 navic_DifferentialCorrectionsSupport_r16_,
      NavIC_GridModelSupport_r16 navic_GridModelSupport_r16_
   ) {
      super();
      setGnss_ID (gnss_ID_);
      setSbas_ID (sbas_ID_);
      setGnss_TimeModelsSupport (gnss_TimeModelsSupport_);
      setGnss_DifferentialCorrectionsSupport (gnss_DifferentialCorrectionsSupport_);
      setGnss_NavigationModelSupport (gnss_NavigationModelSupport_);
      setGnss_RealTimeIntegritySupport (gnss_RealTimeIntegritySupport_);
      setGnss_DataBitAssistanceSupport (gnss_DataBitAssistanceSupport_);
      setGnss_AcquisitionAssistanceSupport (gnss_AcquisitionAssistanceSupport_);
      setGnss_AlmanacSupport (gnss_AlmanacSupport_);
      setGnss_UTC_ModelSupport (gnss_UTC_ModelSupport_);
      setGnss_AuxiliaryInformationSupport (gnss_AuxiliaryInformationSupport_);
      setBds_DifferentialCorrectionsSupport_r12 (bds_DifferentialCorrectionsSupport_r12_);
      setBds_GridModelSupport_r12 (bds_GridModelSupport_r12_);
      setGnss_RTK_ObservationsSupport_r15 (gnss_RTK_ObservationsSupport_r15_);
      setGlo_RTK_BiasInformationSupport_r15 (glo_RTK_BiasInformationSupport_r15_);
      setGnss_RTK_MAC_CorrectionDifferencesSupport_r15 (gnss_RTK_MAC_CorrectionDifferencesSupport_r15_);
      setGnss_RTK_ResidualsSupport_r15 (gnss_RTK_ResidualsSupport_r15_);
      setGnss_RTK_FKP_GradientsSupport_r15 (gnss_RTK_FKP_GradientsSupport_r15_);
      setGnss_SSR_OrbitCorrectionsSupport_r15 (gnss_SSR_OrbitCorrectionsSupport_r15_);
      setGnss_SSR_ClockCorrectionsSupport_r15 (gnss_SSR_ClockCorrectionsSupport_r15_);
      setGnss_SSR_CodeBiasSupport_r15 (gnss_SSR_CodeBiasSupport_r15_);
      setGnss_SSR_URA_Support_r16 (gnss_SSR_URA_Support_r16_);
      setGnss_SSR_PhaseBiasSupport_r16 (gnss_SSR_PhaseBiasSupport_r16_);
      setGnss_SSR_STEC_CorrectionSupport_r16 (gnss_SSR_STEC_CorrectionSupport_r16_);
      setGnss_SSR_GriddedCorrectionSupport_r16 (gnss_SSR_GriddedCorrectionSupport_r16_);
      setNavic_DifferentialCorrectionsSupport_r16 (navic_DifferentialCorrectionsSupport_r16_);
      setNavic_GridModelSupport_r16 (navic_GridModelSupport_r16_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GNSS_GenericAssistDataSupportElement (
      GNSS_ID gnss_ID_
   ) {
      super();
      setGnss_ID (gnss_ID_);
   }

   public void init () {
      gnss_ID = null;
      sbas_ID = null;
      gnss_TimeModelsSupport = null;
      gnss_DifferentialCorrectionsSupport = null;
      gnss_NavigationModelSupport = null;
      gnss_RealTimeIntegritySupport = null;
      gnss_DataBitAssistanceSupport = null;
      gnss_AcquisitionAssistanceSupport = null;
      gnss_AlmanacSupport = null;
      gnss_UTC_ModelSupport = null;
      gnss_AuxiliaryInformationSupport = null;
      bds_DifferentialCorrectionsSupport_r12 = null;
      bds_GridModelSupport_r12 = null;
      gnss_RTK_ObservationsSupport_r15 = null;
      glo_RTK_BiasInformationSupport_r15 = null;
      gnss_RTK_MAC_CorrectionDifferencesSupport_r15 = null;
      gnss_RTK_ResidualsSupport_r15 = null;
      gnss_RTK_FKP_GradientsSupport_r15 = null;
      gnss_SSR_OrbitCorrectionsSupport_r15 = null;
      gnss_SSR_ClockCorrectionsSupport_r15 = null;
      gnss_SSR_CodeBiasSupport_r15 = null;
      gnss_SSR_URA_Support_r16 = null;
      gnss_SSR_PhaseBiasSupport_r16 = null;
      gnss_SSR_STEC_CorrectionSupport_r16 = null;
      gnss_SSR_GriddedCorrectionSupport_r16 = null;
      navic_DifferentialCorrectionsSupport_r16 = null;
      navic_GridModelSupport_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_GenericAssistDataSupportElement) ) return false;

      GNSS_GenericAssistDataSupportElement rhs = (GNSS_GenericAssistDataSupportElement) obj;

      if (gnss_ID == null) {
         if (rhs.gnss_ID != null) return false;
      }
      else {
         if (!gnss_ID.equals(rhs.gnss_ID)) {
            return false;
         }
      }

      if (sbas_ID == null) {
         if (rhs.sbas_ID != null) return false;
      }
      else {
         if (!sbas_ID.equals(rhs.sbas_ID)) {
            return false;
         }
      }

      if (gnss_TimeModelsSupport == null) {
         if (rhs.gnss_TimeModelsSupport != null) return false;
      }
      else {
         if (!gnss_TimeModelsSupport.equals(rhs.gnss_TimeModelsSupport)) {
            return false;
         }
      }

      if (gnss_DifferentialCorrectionsSupport == null) {
         if (rhs.gnss_DifferentialCorrectionsSupport != null) return false;
      }
      else {
         if (!gnss_DifferentialCorrectionsSupport.equals(rhs.gnss_DifferentialCorrectionsSupport)) {
            return false;
         }
      }

      if (gnss_NavigationModelSupport == null) {
         if (rhs.gnss_NavigationModelSupport != null) return false;
      }
      else {
         if (!gnss_NavigationModelSupport.equals(rhs.gnss_NavigationModelSupport)) {
            return false;
         }
      }

      if (gnss_RealTimeIntegritySupport == null) {
         if (rhs.gnss_RealTimeIntegritySupport != null) return false;
      }
      else {
         if (!gnss_RealTimeIntegritySupport.equals(rhs.gnss_RealTimeIntegritySupport)) {
            return false;
         }
      }

      if (gnss_DataBitAssistanceSupport == null) {
         if (rhs.gnss_DataBitAssistanceSupport != null) return false;
      }
      else {
         if (!gnss_DataBitAssistanceSupport.equals(rhs.gnss_DataBitAssistanceSupport)) {
            return false;
         }
      }

      if (gnss_AcquisitionAssistanceSupport == null) {
         if (rhs.gnss_AcquisitionAssistanceSupport != null) return false;
      }
      else {
         if (!gnss_AcquisitionAssistanceSupport.equals(rhs.gnss_AcquisitionAssistanceSupport)) {
            return false;
         }
      }

      if (gnss_AlmanacSupport == null) {
         if (rhs.gnss_AlmanacSupport != null) return false;
      }
      else {
         if (!gnss_AlmanacSupport.equals(rhs.gnss_AlmanacSupport)) {
            return false;
         }
      }

      if (gnss_UTC_ModelSupport == null) {
         if (rhs.gnss_UTC_ModelSupport != null) return false;
      }
      else {
         if (!gnss_UTC_ModelSupport.equals(rhs.gnss_UTC_ModelSupport)) {
            return false;
         }
      }

      if (gnss_AuxiliaryInformationSupport == null) {
         if (rhs.gnss_AuxiliaryInformationSupport != null) return false;
      }
      else {
         if (!gnss_AuxiliaryInformationSupport.equals(rhs.gnss_AuxiliaryInformationSupport)) {
            return false;
         }
      }

      if (bds_DifferentialCorrectionsSupport_r12 == null) {
         if (rhs.bds_DifferentialCorrectionsSupport_r12 != null) return false;
      }
      else {
         if (!bds_DifferentialCorrectionsSupport_r12.equals(rhs.bds_DifferentialCorrectionsSupport_r12)) {
            return false;
         }
      }

      if (bds_GridModelSupport_r12 == null) {
         if (rhs.bds_GridModelSupport_r12 != null) return false;
      }
      else {
         if (!bds_GridModelSupport_r12.equals(rhs.bds_GridModelSupport_r12)) {
            return false;
         }
      }

      if (gnss_RTK_ObservationsSupport_r15 == null) {
         if (rhs.gnss_RTK_ObservationsSupport_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_ObservationsSupport_r15.equals(rhs.gnss_RTK_ObservationsSupport_r15)) {
            return false;
         }
      }

      if (glo_RTK_BiasInformationSupport_r15 == null) {
         if (rhs.glo_RTK_BiasInformationSupport_r15 != null) return false;
      }
      else {
         if (!glo_RTK_BiasInformationSupport_r15.equals(rhs.glo_RTK_BiasInformationSupport_r15)) {
            return false;
         }
      }

      if (gnss_RTK_MAC_CorrectionDifferencesSupport_r15 == null) {
         if (rhs.gnss_RTK_MAC_CorrectionDifferencesSupport_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_MAC_CorrectionDifferencesSupport_r15.equals(rhs.gnss_RTK_MAC_CorrectionDifferencesSupport_r15)) {
            return false;
         }
      }

      if (gnss_RTK_ResidualsSupport_r15 == null) {
         if (rhs.gnss_RTK_ResidualsSupport_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_ResidualsSupport_r15.equals(rhs.gnss_RTK_ResidualsSupport_r15)) {
            return false;
         }
      }

      if (gnss_RTK_FKP_GradientsSupport_r15 == null) {
         if (rhs.gnss_RTK_FKP_GradientsSupport_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_FKP_GradientsSupport_r15.equals(rhs.gnss_RTK_FKP_GradientsSupport_r15)) {
            return false;
         }
      }

      if (gnss_SSR_OrbitCorrectionsSupport_r15 == null) {
         if (rhs.gnss_SSR_OrbitCorrectionsSupport_r15 != null) return false;
      }
      else {
         if (!gnss_SSR_OrbitCorrectionsSupport_r15.equals(rhs.gnss_SSR_OrbitCorrectionsSupport_r15)) {
            return false;
         }
      }

      if (gnss_SSR_ClockCorrectionsSupport_r15 == null) {
         if (rhs.gnss_SSR_ClockCorrectionsSupport_r15 != null) return false;
      }
      else {
         if (!gnss_SSR_ClockCorrectionsSupport_r15.equals(rhs.gnss_SSR_ClockCorrectionsSupport_r15)) {
            return false;
         }
      }

      if (gnss_SSR_CodeBiasSupport_r15 == null) {
         if (rhs.gnss_SSR_CodeBiasSupport_r15 != null) return false;
      }
      else {
         if (!gnss_SSR_CodeBiasSupport_r15.equals(rhs.gnss_SSR_CodeBiasSupport_r15)) {
            return false;
         }
      }

      if (gnss_SSR_URA_Support_r16 == null) {
         if (rhs.gnss_SSR_URA_Support_r16 != null) return false;
      }
      else {
         if (!gnss_SSR_URA_Support_r16.equals(rhs.gnss_SSR_URA_Support_r16)) {
            return false;
         }
      }

      if (gnss_SSR_PhaseBiasSupport_r16 == null) {
         if (rhs.gnss_SSR_PhaseBiasSupport_r16 != null) return false;
      }
      else {
         if (!gnss_SSR_PhaseBiasSupport_r16.equals(rhs.gnss_SSR_PhaseBiasSupport_r16)) {
            return false;
         }
      }

      if (gnss_SSR_STEC_CorrectionSupport_r16 == null) {
         if (rhs.gnss_SSR_STEC_CorrectionSupport_r16 != null) return false;
      }
      else {
         if (!gnss_SSR_STEC_CorrectionSupport_r16.equals(rhs.gnss_SSR_STEC_CorrectionSupport_r16)) {
            return false;
         }
      }

      if (gnss_SSR_GriddedCorrectionSupport_r16 == null) {
         if (rhs.gnss_SSR_GriddedCorrectionSupport_r16 != null) return false;
      }
      else {
         if (!gnss_SSR_GriddedCorrectionSupport_r16.equals(rhs.gnss_SSR_GriddedCorrectionSupport_r16)) {
            return false;
         }
      }

      if (navic_DifferentialCorrectionsSupport_r16 == null) {
         if (rhs.navic_DifferentialCorrectionsSupport_r16 != null) return false;
      }
      else {
         if (!navic_DifferentialCorrectionsSupport_r16.equals(rhs.navic_DifferentialCorrectionsSupport_r16)) {
            return false;
         }
      }

      if (navic_GridModelSupport_r16 == null) {
         if (rhs.navic_GridModelSupport_r16 != null) return false;
      }
      else {
         if (!navic_GridModelSupport_r16.equals(rhs.navic_GridModelSupport_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gnss_ID != null) __code = 31*__code + gnss_ID.hashCode();
      if (sbas_ID != null) __code = 31*__code + sbas_ID.hashCode();
      if (gnss_TimeModelsSupport != null) __code = 31*__code + gnss_TimeModelsSupport.hashCode();
      if (gnss_DifferentialCorrectionsSupport != null) __code = 31*__code + gnss_DifferentialCorrectionsSupport.hashCode();
      if (gnss_NavigationModelSupport != null) __code = 31*__code + gnss_NavigationModelSupport.hashCode();
      if (gnss_RealTimeIntegritySupport != null) __code = 31*__code + gnss_RealTimeIntegritySupport.hashCode();
      if (gnss_DataBitAssistanceSupport != null) __code = 31*__code + gnss_DataBitAssistanceSupport.hashCode();
      if (gnss_AcquisitionAssistanceSupport != null) __code = 31*__code + gnss_AcquisitionAssistanceSupport.hashCode();
      if (gnss_AlmanacSupport != null) __code = 31*__code + gnss_AlmanacSupport.hashCode();
      if (gnss_UTC_ModelSupport != null) __code = 31*__code + gnss_UTC_ModelSupport.hashCode();
      if (gnss_AuxiliaryInformationSupport != null) __code = 31*__code + gnss_AuxiliaryInformationSupport.hashCode();
      if (bds_DifferentialCorrectionsSupport_r12 != null) __code = 31*__code + bds_DifferentialCorrectionsSupport_r12.hashCode();
      if (bds_GridModelSupport_r12 != null) __code = 31*__code + bds_GridModelSupport_r12.hashCode();
      if (gnss_RTK_ObservationsSupport_r15 != null) __code = 31*__code + gnss_RTK_ObservationsSupport_r15.hashCode();
      if (glo_RTK_BiasInformationSupport_r15 != null) __code = 31*__code + glo_RTK_BiasInformationSupport_r15.hashCode();
      if (gnss_RTK_MAC_CorrectionDifferencesSupport_r15 != null) __code = 31*__code + gnss_RTK_MAC_CorrectionDifferencesSupport_r15.hashCode();
      if (gnss_RTK_ResidualsSupport_r15 != null) __code = 31*__code + gnss_RTK_ResidualsSupport_r15.hashCode();
      if (gnss_RTK_FKP_GradientsSupport_r15 != null) __code = 31*__code + gnss_RTK_FKP_GradientsSupport_r15.hashCode();
      if (gnss_SSR_OrbitCorrectionsSupport_r15 != null) __code = 31*__code + gnss_SSR_OrbitCorrectionsSupport_r15.hashCode();
      if (gnss_SSR_ClockCorrectionsSupport_r15 != null) __code = 31*__code + gnss_SSR_ClockCorrectionsSupport_r15.hashCode();
      if (gnss_SSR_CodeBiasSupport_r15 != null) __code = 31*__code + gnss_SSR_CodeBiasSupport_r15.hashCode();
      if (gnss_SSR_URA_Support_r16 != null) __code = 31*__code + gnss_SSR_URA_Support_r16.hashCode();
      if (gnss_SSR_PhaseBiasSupport_r16 != null) __code = 31*__code + gnss_SSR_PhaseBiasSupport_r16.hashCode();
      if (gnss_SSR_STEC_CorrectionSupport_r16 != null) __code = 31*__code + gnss_SSR_STEC_CorrectionSupport_r16.hashCode();
      if (gnss_SSR_GriddedCorrectionSupport_r16 != null) __code = 31*__code + gnss_SSR_GriddedCorrectionSupport_r16.hashCode();
      if (navic_DifferentialCorrectionsSupport_r16 != null) __code = 31*__code + navic_DifferentialCorrectionsSupport_r16.hashCode();
      if (navic_GridModelSupport_r16 != null) __code = 31*__code + navic_GridModelSupport_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Gnss_ID
    */
   public GNSS_ID getGnss_ID () {
      return gnss_ID;
   }

   public void setGnss_ID (GNSS_ID value) {
      this.gnss_ID = value;
   }

   /**
    * Accessor/mutator methods for Sbas_ID
    */
   public SBAS_ID getSbas_ID () {
      return sbas_ID;
   }

   public void setSbas_ID (SBAS_ID value) {
      this.sbas_ID = value;
   }

   public boolean hasSbas_ID () {
      return (sbas_ID != null);
   }

   /**
    * Accessor/mutator methods for Gnss_TimeModelsSupport
    */
   public GNSS_TimeModelListSupport getGnss_TimeModelsSupport () {
      return gnss_TimeModelsSupport;
   }

   public void setGnss_TimeModelsSupport (GNSS_TimeModelListSupport value) {
      this.gnss_TimeModelsSupport = value;
   }

   public boolean hasGnss_TimeModelsSupport () {
      return (gnss_TimeModelsSupport != null);
   }

   /**
    * Accessor/mutator methods for Gnss_DifferentialCorrectionsSupport
    */
   public GNSS_DifferentialCorrectionsSupport getGnss_DifferentialCorrectionsSupport () {
      return gnss_DifferentialCorrectionsSupport;
   }

   public void setGnss_DifferentialCorrectionsSupport (GNSS_DifferentialCorrectionsSupport value) {
      this.gnss_DifferentialCorrectionsSupport = value;
   }

   public boolean hasGnss_DifferentialCorrectionsSupport () {
      return (gnss_DifferentialCorrectionsSupport != null);
   }

   /**
    * Accessor/mutator methods for Gnss_NavigationModelSupport
    */
   public GNSS_NavigationModelSupport getGnss_NavigationModelSupport () {
      return gnss_NavigationModelSupport;
   }

   public void setGnss_NavigationModelSupport (GNSS_NavigationModelSupport value) {
      this.gnss_NavigationModelSupport = value;
   }

   public boolean hasGnss_NavigationModelSupport () {
      return (gnss_NavigationModelSupport != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RealTimeIntegritySupport
    */
   public GNSS_RealTimeIntegritySupport getGnss_RealTimeIntegritySupport () {
      return gnss_RealTimeIntegritySupport;
   }

   public void setGnss_RealTimeIntegritySupport (GNSS_RealTimeIntegritySupport value) {
      this.gnss_RealTimeIntegritySupport = value;
   }

   public boolean hasGnss_RealTimeIntegritySupport () {
      return (gnss_RealTimeIntegritySupport != null);
   }

   /**
    * Accessor/mutator methods for Gnss_DataBitAssistanceSupport
    */
   public GNSS_DataBitAssistanceSupport getGnss_DataBitAssistanceSupport () {
      return gnss_DataBitAssistanceSupport;
   }

   public void setGnss_DataBitAssistanceSupport (GNSS_DataBitAssistanceSupport value) {
      this.gnss_DataBitAssistanceSupport = value;
   }

   public boolean hasGnss_DataBitAssistanceSupport () {
      return (gnss_DataBitAssistanceSupport != null);
   }

   /**
    * Accessor/mutator methods for Gnss_AcquisitionAssistanceSupport
    */
   public GNSS_AcquisitionAssistanceSupport getGnss_AcquisitionAssistanceSupport () {
      return gnss_AcquisitionAssistanceSupport;
   }

   public void setGnss_AcquisitionAssistanceSupport (GNSS_AcquisitionAssistanceSupport value) {
      this.gnss_AcquisitionAssistanceSupport = value;
   }

   public boolean hasGnss_AcquisitionAssistanceSupport () {
      return (gnss_AcquisitionAssistanceSupport != null);
   }

   /**
    * Accessor/mutator methods for Gnss_AlmanacSupport
    */
   public GNSS_AlmanacSupport getGnss_AlmanacSupport () {
      return gnss_AlmanacSupport;
   }

   public void setGnss_AlmanacSupport (GNSS_AlmanacSupport value) {
      this.gnss_AlmanacSupport = value;
   }

   public boolean hasGnss_AlmanacSupport () {
      return (gnss_AlmanacSupport != null);
   }

   /**
    * Accessor/mutator methods for Gnss_UTC_ModelSupport
    */
   public GNSS_UTC_ModelSupport getGnss_UTC_ModelSupport () {
      return gnss_UTC_ModelSupport;
   }

   public void setGnss_UTC_ModelSupport (GNSS_UTC_ModelSupport value) {
      this.gnss_UTC_ModelSupport = value;
   }

   public boolean hasGnss_UTC_ModelSupport () {
      return (gnss_UTC_ModelSupport != null);
   }

   /**
    * Accessor/mutator methods for Gnss_AuxiliaryInformationSupport
    */
   public GNSS_AuxiliaryInformationSupport getGnss_AuxiliaryInformationSupport () {
      return gnss_AuxiliaryInformationSupport;
   }

   public void setGnss_AuxiliaryInformationSupport (GNSS_AuxiliaryInformationSupport value) {
      this.gnss_AuxiliaryInformationSupport = value;
   }

   public boolean hasGnss_AuxiliaryInformationSupport () {
      return (gnss_AuxiliaryInformationSupport != null);
   }

   /**
    * Accessor/mutator methods for Bds_DifferentialCorrectionsSupport_r12
    */
   public BDS_DifferentialCorrectionsSupport_r12 getBds_DifferentialCorrectionsSupport_r12 () {
      return bds_DifferentialCorrectionsSupport_r12;
   }

   public void setBds_DifferentialCorrectionsSupport_r12 (BDS_DifferentialCorrectionsSupport_r12 value) {
      this.bds_DifferentialCorrectionsSupport_r12 = value;
   }

   public boolean hasBds_DifferentialCorrectionsSupport_r12 () {
      return (bds_DifferentialCorrectionsSupport_r12 != null);
   }

   /**
    * Accessor/mutator methods for Bds_GridModelSupport_r12
    */
   public BDS_GridModelSupport_r12 getBds_GridModelSupport_r12 () {
      return bds_GridModelSupport_r12;
   }

   public void setBds_GridModelSupport_r12 (BDS_GridModelSupport_r12 value) {
      this.bds_GridModelSupport_r12 = value;
   }

   public boolean hasBds_GridModelSupport_r12 () {
      return (bds_GridModelSupport_r12 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_ObservationsSupport_r15
    */
   public GNSS_RTK_ObservationsSupport_r15 getGnss_RTK_ObservationsSupport_r15 () {
      return gnss_RTK_ObservationsSupport_r15;
   }

   public void setGnss_RTK_ObservationsSupport_r15 (GNSS_RTK_ObservationsSupport_r15 value) {
      this.gnss_RTK_ObservationsSupport_r15 = value;
   }

   public boolean hasGnss_RTK_ObservationsSupport_r15 () {
      return (gnss_RTK_ObservationsSupport_r15 != null);
   }

   /**
    * Accessor/mutator methods for Glo_RTK_BiasInformationSupport_r15
    */
   public GLO_RTK_BiasInformationSupport_r15 getGlo_RTK_BiasInformationSupport_r15 () {
      return glo_RTK_BiasInformationSupport_r15;
   }

   public void setGlo_RTK_BiasInformationSupport_r15 (GLO_RTK_BiasInformationSupport_r15 value) {
      this.glo_RTK_BiasInformationSupport_r15 = value;
   }

   public boolean hasGlo_RTK_BiasInformationSupport_r15 () {
      return (glo_RTK_BiasInformationSupport_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_MAC_CorrectionDifferencesSupport_r15
    */
   public GNSS_RTK_MAC_CorrectionDifferencesSupport_r15 getGnss_RTK_MAC_CorrectionDifferencesSupport_r15 () {
      return gnss_RTK_MAC_CorrectionDifferencesSupport_r15;
   }

   public void setGnss_RTK_MAC_CorrectionDifferencesSupport_r15 (GNSS_RTK_MAC_CorrectionDifferencesSupport_r15 value) {
      this.gnss_RTK_MAC_CorrectionDifferencesSupport_r15 = value;
   }

   public boolean hasGnss_RTK_MAC_CorrectionDifferencesSupport_r15 () {
      return (gnss_RTK_MAC_CorrectionDifferencesSupport_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_ResidualsSupport_r15
    */
   public GNSS_RTK_ResidualsSupport_r15 getGnss_RTK_ResidualsSupport_r15 () {
      return gnss_RTK_ResidualsSupport_r15;
   }

   public void setGnss_RTK_ResidualsSupport_r15 (GNSS_RTK_ResidualsSupport_r15 value) {
      this.gnss_RTK_ResidualsSupport_r15 = value;
   }

   public boolean hasGnss_RTK_ResidualsSupport_r15 () {
      return (gnss_RTK_ResidualsSupport_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_FKP_GradientsSupport_r15
    */
   public GNSS_RTK_FKP_GradientsSupport_r15 getGnss_RTK_FKP_GradientsSupport_r15 () {
      return gnss_RTK_FKP_GradientsSupport_r15;
   }

   public void setGnss_RTK_FKP_GradientsSupport_r15 (GNSS_RTK_FKP_GradientsSupport_r15 value) {
      this.gnss_RTK_FKP_GradientsSupport_r15 = value;
   }

   public boolean hasGnss_RTK_FKP_GradientsSupport_r15 () {
      return (gnss_RTK_FKP_GradientsSupport_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_OrbitCorrectionsSupport_r15
    */
   public GNSS_SSR_OrbitCorrectionsSupport_r15 getGnss_SSR_OrbitCorrectionsSupport_r15 () {
      return gnss_SSR_OrbitCorrectionsSupport_r15;
   }

   public void setGnss_SSR_OrbitCorrectionsSupport_r15 (GNSS_SSR_OrbitCorrectionsSupport_r15 value) {
      this.gnss_SSR_OrbitCorrectionsSupport_r15 = value;
   }

   public boolean hasGnss_SSR_OrbitCorrectionsSupport_r15 () {
      return (gnss_SSR_OrbitCorrectionsSupport_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_ClockCorrectionsSupport_r15
    */
   public GNSS_SSR_ClockCorrectionsSupport_r15 getGnss_SSR_ClockCorrectionsSupport_r15 () {
      return gnss_SSR_ClockCorrectionsSupport_r15;
   }

   public void setGnss_SSR_ClockCorrectionsSupport_r15 (GNSS_SSR_ClockCorrectionsSupport_r15 value) {
      this.gnss_SSR_ClockCorrectionsSupport_r15 = value;
   }

   public boolean hasGnss_SSR_ClockCorrectionsSupport_r15 () {
      return (gnss_SSR_ClockCorrectionsSupport_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_CodeBiasSupport_r15
    */
   public GNSS_SSR_CodeBiasSupport_r15 getGnss_SSR_CodeBiasSupport_r15 () {
      return gnss_SSR_CodeBiasSupport_r15;
   }

   public void setGnss_SSR_CodeBiasSupport_r15 (GNSS_SSR_CodeBiasSupport_r15 value) {
      this.gnss_SSR_CodeBiasSupport_r15 = value;
   }

   public boolean hasGnss_SSR_CodeBiasSupport_r15 () {
      return (gnss_SSR_CodeBiasSupport_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_URA_Support_r16
    */
   public GNSS_SSR_URA_Support_r16 getGnss_SSR_URA_Support_r16 () {
      return gnss_SSR_URA_Support_r16;
   }

   public void setGnss_SSR_URA_Support_r16 (GNSS_SSR_URA_Support_r16 value) {
      this.gnss_SSR_URA_Support_r16 = value;
   }

   public boolean hasGnss_SSR_URA_Support_r16 () {
      return (gnss_SSR_URA_Support_r16 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_PhaseBiasSupport_r16
    */
   public GNSS_SSR_PhaseBiasSupport_r16 getGnss_SSR_PhaseBiasSupport_r16 () {
      return gnss_SSR_PhaseBiasSupport_r16;
   }

   public void setGnss_SSR_PhaseBiasSupport_r16 (GNSS_SSR_PhaseBiasSupport_r16 value) {
      this.gnss_SSR_PhaseBiasSupport_r16 = value;
   }

   public boolean hasGnss_SSR_PhaseBiasSupport_r16 () {
      return (gnss_SSR_PhaseBiasSupport_r16 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_STEC_CorrectionSupport_r16
    */
   public GNSS_SSR_STEC_CorrectionSupport_r16 getGnss_SSR_STEC_CorrectionSupport_r16 () {
      return gnss_SSR_STEC_CorrectionSupport_r16;
   }

   public void setGnss_SSR_STEC_CorrectionSupport_r16 (GNSS_SSR_STEC_CorrectionSupport_r16 value) {
      this.gnss_SSR_STEC_CorrectionSupport_r16 = value;
   }

   public boolean hasGnss_SSR_STEC_CorrectionSupport_r16 () {
      return (gnss_SSR_STEC_CorrectionSupport_r16 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_GriddedCorrectionSupport_r16
    */
   public GNSS_SSR_GriddedCorrectionSupport_r16 getGnss_SSR_GriddedCorrectionSupport_r16 () {
      return gnss_SSR_GriddedCorrectionSupport_r16;
   }

   public void setGnss_SSR_GriddedCorrectionSupport_r16 (GNSS_SSR_GriddedCorrectionSupport_r16 value) {
      this.gnss_SSR_GriddedCorrectionSupport_r16 = value;
   }

   public boolean hasGnss_SSR_GriddedCorrectionSupport_r16 () {
      return (gnss_SSR_GriddedCorrectionSupport_r16 != null);
   }

   /**
    * Accessor/mutator methods for Navic_DifferentialCorrectionsSupport_r16
    */
   public NavIC_DifferentialCorrectionsSupport_r16 getNavic_DifferentialCorrectionsSupport_r16 () {
      return navic_DifferentialCorrectionsSupport_r16;
   }

   public void setNavic_DifferentialCorrectionsSupport_r16 (NavIC_DifferentialCorrectionsSupport_r16 value) {
      this.navic_DifferentialCorrectionsSupport_r16 = value;
   }

   public boolean hasNavic_DifferentialCorrectionsSupport_r16 () {
      return (navic_DifferentialCorrectionsSupport_r16 != null);
   }

   /**
    * Accessor/mutator methods for Navic_GridModelSupport_r16
    */
   public NavIC_GridModelSupport_r16 getNavic_GridModelSupport_r16 () {
      return navic_GridModelSupport_r16;
   }

   public void setNavic_GridModelSupport_r16 (NavIC_GridModelSupport_r16 value) {
      this.navic_GridModelSupport_r16 = value;
   }

   public boolean hasNavic_GridModelSupport_r16 () {
      return (navic_GridModelSupport_r16 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 28; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gnss_ID;
         case 1: return sbas_ID;
         case 2: return gnss_TimeModelsSupport;
         case 3: return gnss_DifferentialCorrectionsSupport;
         case 4: return gnss_NavigationModelSupport;
         case 5: return gnss_RealTimeIntegritySupport;
         case 6: return gnss_DataBitAssistanceSupport;
         case 7: return gnss_AcquisitionAssistanceSupport;
         case 8: return gnss_AlmanacSupport;
         case 9: return gnss_UTC_ModelSupport;
         case 10: return gnss_AuxiliaryInformationSupport;
         case 11: return bds_DifferentialCorrectionsSupport_r12;
         case 12: return bds_GridModelSupport_r12;
         case 13: return gnss_RTK_ObservationsSupport_r15;
         case 14: return glo_RTK_BiasInformationSupport_r15;
         case 15: return gnss_RTK_MAC_CorrectionDifferencesSupport_r15;
         case 16: return gnss_RTK_ResidualsSupport_r15;
         case 17: return gnss_RTK_FKP_GradientsSupport_r15;
         case 18: return gnss_SSR_OrbitCorrectionsSupport_r15;
         case 19: return gnss_SSR_ClockCorrectionsSupport_r15;
         case 20: return gnss_SSR_CodeBiasSupport_r15;
         case 21: return gnss_SSR_URA_Support_r16;
         case 22: return gnss_SSR_PhaseBiasSupport_r16;
         case 23: return gnss_SSR_STEC_CorrectionSupport_r16;
         case 24: return gnss_SSR_GriddedCorrectionSupport_r16;
         case 25: return navic_DifferentialCorrectionsSupport_r16;
         case 26: return navic_GridModelSupport_r16;
         case 27: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gnss-ID";
         case 1: return "sbas-ID";
         case 2: return "gnss-TimeModelsSupport";
         case 3: return "gnss-DifferentialCorrectionsSupport";
         case 4: return "gnss-NavigationModelSupport";
         case 5: return "gnss-RealTimeIntegritySupport";
         case 6: return "gnss-DataBitAssistanceSupport";
         case 7: return "gnss-AcquisitionAssistanceSupport";
         case 8: return "gnss-AlmanacSupport";
         case 9: return "gnss-UTC-ModelSupport";
         case 10: return "gnss-AuxiliaryInformationSupport";
         case 11: return "bds-DifferentialCorrectionsSupport-r12";
         case 12: return "bds-GridModelSupport-r12";
         case 13: return "gnss-RTK-ObservationsSupport-r15";
         case 14: return "glo-RTK-BiasInformationSupport-r15";
         case 15: return "gnss-RTK-MAC-CorrectionDifferencesSupport-r15";
         case 16: return "gnss-RTK-ResidualsSupport-r15";
         case 17: return "gnss-RTK-FKP-GradientsSupport-r15";
         case 18: return "gnss-SSR-OrbitCorrectionsSupport-r15";
         case 19: return "gnss-SSR-ClockCorrectionsSupport-r15";
         case 20: return "gnss-SSR-CodeBiasSupport-r15";
         case 21: return "gnss-SSR-URA-Support-r16";
         case 22: return "gnss-SSR-PhaseBiasSupport-r16";
         case 23: return "gnss-SSR-STEC-CorrectionSupport-r16";
         case 24: return "gnss-SSR-GriddedCorrectionSupport-r16";
         case 25: return "navic-DifferentialCorrectionsSupport-r16";
         case 26: return "navic-GridModelSupport-r16";
         case 27: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean sbas_IDPresent = buffer.decodeBit ("sbas_IDPresent");
      boolean gnss_TimeModelsSupportPresent = buffer.decodeBit ("gnss_TimeModelsSupportPresent");
      boolean gnss_DifferentialCorrectionsSupportPresent = buffer.decodeBit ("gnss_DifferentialCorrectionsSupportPresent");
      boolean gnss_NavigationModelSupportPresent = buffer.decodeBit ("gnss_NavigationModelSupportPresent");
      boolean gnss_RealTimeIntegritySupportPresent = buffer.decodeBit ("gnss_RealTimeIntegritySupportPresent");
      boolean gnss_DataBitAssistanceSupportPresent = buffer.decodeBit ("gnss_DataBitAssistanceSupportPresent");
      boolean gnss_AcquisitionAssistanceSupportPresent = buffer.decodeBit ("gnss_AcquisitionAssistanceSupportPresent");
      boolean gnss_AlmanacSupportPresent = buffer.decodeBit ("gnss_AlmanacSupportPresent");
      boolean gnss_UTC_ModelSupportPresent = buffer.decodeBit ("gnss_UTC_ModelSupportPresent");
      boolean gnss_AuxiliaryInformationSupportPresent = buffer.decodeBit ("gnss_AuxiliaryInformationSupportPresent");

      // decode gnss_ID

      buffer.getContext().eventDispatcher.startElement("gnss_ID", -1);

      gnss_ID = new GNSS_ID();
      gnss_ID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("gnss_ID", -1);

      // decode sbas_ID

      if (sbas_IDPresent) {
         buffer.getContext().eventDispatcher.startElement("sbas_ID", -1);

         sbas_ID = new SBAS_ID();
         sbas_ID.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sbas_ID", -1);
      }
      else {
         sbas_ID = null;
      }

      // decode gnss_TimeModelsSupport

      if (gnss_TimeModelsSupportPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_TimeModelsSupport", -1);

         gnss_TimeModelsSupport = new GNSS_TimeModelListSupport();
         gnss_TimeModelsSupport.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_TimeModelsSupport", -1);
      }
      else {
         gnss_TimeModelsSupport = null;
      }

      // decode gnss_DifferentialCorrectionsSupport

      if (gnss_DifferentialCorrectionsSupportPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_DifferentialCorrectionsSupport", -1);

         gnss_DifferentialCorrectionsSupport = new GNSS_DifferentialCorrectionsSupport();
         gnss_DifferentialCorrectionsSupport.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_DifferentialCorrectionsSupport", -1);
      }
      else {
         gnss_DifferentialCorrectionsSupport = null;
      }

      // decode gnss_NavigationModelSupport

      if (gnss_NavigationModelSupportPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_NavigationModelSupport", -1);

         gnss_NavigationModelSupport = new GNSS_NavigationModelSupport();
         gnss_NavigationModelSupport.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_NavigationModelSupport", -1);
      }
      else {
         gnss_NavigationModelSupport = null;
      }

      // decode gnss_RealTimeIntegritySupport

      if (gnss_RealTimeIntegritySupportPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_RealTimeIntegritySupport", -1);

         gnss_RealTimeIntegritySupport = new GNSS_RealTimeIntegritySupport();
         gnss_RealTimeIntegritySupport.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_RealTimeIntegritySupport", -1);
      }
      else {
         gnss_RealTimeIntegritySupport = null;
      }

      // decode gnss_DataBitAssistanceSupport

      if (gnss_DataBitAssistanceSupportPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_DataBitAssistanceSupport", -1);

         gnss_DataBitAssistanceSupport = new GNSS_DataBitAssistanceSupport();
         gnss_DataBitAssistanceSupport.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_DataBitAssistanceSupport", -1);
      }
      else {
         gnss_DataBitAssistanceSupport = null;
      }

      // decode gnss_AcquisitionAssistanceSupport

      if (gnss_AcquisitionAssistanceSupportPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_AcquisitionAssistanceSupport", -1);

         gnss_AcquisitionAssistanceSupport = new GNSS_AcquisitionAssistanceSupport();
         gnss_AcquisitionAssistanceSupport.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_AcquisitionAssistanceSupport", -1);
      }
      else {
         gnss_AcquisitionAssistanceSupport = null;
      }

      // decode gnss_AlmanacSupport

      if (gnss_AlmanacSupportPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_AlmanacSupport", -1);

         gnss_AlmanacSupport = new GNSS_AlmanacSupport();
         gnss_AlmanacSupport.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_AlmanacSupport", -1);
      }
      else {
         gnss_AlmanacSupport = null;
      }

      // decode gnss_UTC_ModelSupport

      if (gnss_UTC_ModelSupportPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_UTC_ModelSupport", -1);

         gnss_UTC_ModelSupport = new GNSS_UTC_ModelSupport();
         gnss_UTC_ModelSupport.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_UTC_ModelSupport", -1);
      }
      else {
         gnss_UTC_ModelSupport = null;
      }

      // decode gnss_AuxiliaryInformationSupport

      if (gnss_AuxiliaryInformationSupportPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_AuxiliaryInformationSupport", -1);

         gnss_AuxiliaryInformationSupport = new GNSS_AuxiliaryInformationSupport();
         gnss_AuxiliaryInformationSupport.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_AuxiliaryInformationSupport", -1);
      }
      else {
         gnss_AuxiliaryInformationSupport = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("bds_DifferentialCorrectionsSupport_r12Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("bds_GridModelSupport_r12Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_RTK_ObservationsSupport_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("glo_RTK_BiasInformationSupport_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_RTK_MAC_CorrectionDifferencesSupport_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_RTK_ResidualsSupport_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_RTK_FKP_GradientsSupport_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_OrbitCorrectionsSupport_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_ClockCorrectionsSupport_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_CodeBiasSupport_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_URA_Support_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_PhaseBiasSupport_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_STEC_CorrectionSupport_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_GriddedCorrectionSupport_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("navic_DifferentialCorrectionsSupport_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("navic_GridModelSupport_r16Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode bds_DifferentialCorrectionsSupport_r12

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("bds_DifferentialCorrectionsSupport_r12", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            bds_DifferentialCorrectionsSupport_r12 = new BDS_DifferentialCorrectionsSupport_r12();
            bds_DifferentialCorrectionsSupport_r12.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("bds_DifferentialCorrectionsSupport_r12", -1);

         }
         else {
            bds_DifferentialCorrectionsSupport_r12 = null;
         }

         // decode bds_GridModelSupport_r12

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("bds_GridModelSupport_r12", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            bds_GridModelSupport_r12 = new BDS_GridModelSupport_r12();
            bds_GridModelSupport_r12.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("bds_GridModelSupport_r12", -1);

         }
         else {
            bds_GridModelSupport_r12 = null;
         }

         // decode gnss_RTK_ObservationsSupport_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_ObservationsSupport_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_RTK_ObservationsSupport_r15 = new GNSS_RTK_ObservationsSupport_r15();
            gnss_RTK_ObservationsSupport_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_RTK_ObservationsSupport_r15", -1);

         }
         else {
            gnss_RTK_ObservationsSupport_r15 = null;
         }

         // decode glo_RTK_BiasInformationSupport_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("glo_RTK_BiasInformationSupport_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            glo_RTK_BiasInformationSupport_r15 = new GLO_RTK_BiasInformationSupport_r15();
            glo_RTK_BiasInformationSupport_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("glo_RTK_BiasInformationSupport_r15", -1);

         }
         else {
            glo_RTK_BiasInformationSupport_r15 = null;
         }

         // decode gnss_RTK_MAC_CorrectionDifferencesSupport_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_MAC_CorrectionDifferencesSupport_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_RTK_MAC_CorrectionDifferencesSupport_r15 = new GNSS_RTK_MAC_CorrectionDifferencesSupport_r15();
            gnss_RTK_MAC_CorrectionDifferencesSupport_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_RTK_MAC_CorrectionDifferencesSupport_r15", -1);

         }
         else {
            gnss_RTK_MAC_CorrectionDifferencesSupport_r15 = null;
         }

         // decode gnss_RTK_ResidualsSupport_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_ResidualsSupport_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_RTK_ResidualsSupport_r15 = new GNSS_RTK_ResidualsSupport_r15();
            gnss_RTK_ResidualsSupport_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_RTK_ResidualsSupport_r15", -1);

         }
         else {
            gnss_RTK_ResidualsSupport_r15 = null;
         }

         // decode gnss_RTK_FKP_GradientsSupport_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_FKP_GradientsSupport_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_RTK_FKP_GradientsSupport_r15 = new GNSS_RTK_FKP_GradientsSupport_r15();
            gnss_RTK_FKP_GradientsSupport_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_RTK_FKP_GradientsSupport_r15", -1);

         }
         else {
            gnss_RTK_FKP_GradientsSupport_r15 = null;
         }

         // decode gnss_SSR_OrbitCorrectionsSupport_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_OrbitCorrectionsSupport_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_OrbitCorrectionsSupport_r15 = new GNSS_SSR_OrbitCorrectionsSupport_r15();
            gnss_SSR_OrbitCorrectionsSupport_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_OrbitCorrectionsSupport_r15", -1);

         }
         else {
            gnss_SSR_OrbitCorrectionsSupport_r15 = null;
         }

         // decode gnss_SSR_ClockCorrectionsSupport_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_ClockCorrectionsSupport_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_ClockCorrectionsSupport_r15 = new GNSS_SSR_ClockCorrectionsSupport_r15();
            gnss_SSR_ClockCorrectionsSupport_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_ClockCorrectionsSupport_r15", -1);

         }
         else {
            gnss_SSR_ClockCorrectionsSupport_r15 = null;
         }

         // decode gnss_SSR_CodeBiasSupport_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_CodeBiasSupport_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_CodeBiasSupport_r15 = new GNSS_SSR_CodeBiasSupport_r15();
            gnss_SSR_CodeBiasSupport_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_CodeBiasSupport_r15", -1);

         }
         else {
            gnss_SSR_CodeBiasSupport_r15 = null;
         }

         // decode gnss_SSR_URA_Support_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_URA_Support_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_URA_Support_r16 = new GNSS_SSR_URA_Support_r16();
            gnss_SSR_URA_Support_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_URA_Support_r16", -1);

         }
         else {
            gnss_SSR_URA_Support_r16 = null;
         }

         // decode gnss_SSR_PhaseBiasSupport_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_PhaseBiasSupport_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_PhaseBiasSupport_r16 = new GNSS_SSR_PhaseBiasSupport_r16();
            gnss_SSR_PhaseBiasSupport_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_PhaseBiasSupport_r16", -1);

         }
         else {
            gnss_SSR_PhaseBiasSupport_r16 = null;
         }

         // decode gnss_SSR_STEC_CorrectionSupport_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_STEC_CorrectionSupport_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_STEC_CorrectionSupport_r16 = new GNSS_SSR_STEC_CorrectionSupport_r16();
            gnss_SSR_STEC_CorrectionSupport_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_STEC_CorrectionSupport_r16", -1);

         }
         else {
            gnss_SSR_STEC_CorrectionSupport_r16 = null;
         }

         // decode gnss_SSR_GriddedCorrectionSupport_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_GriddedCorrectionSupport_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_GriddedCorrectionSupport_r16 = new GNSS_SSR_GriddedCorrectionSupport_r16();
            gnss_SSR_GriddedCorrectionSupport_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_GriddedCorrectionSupport_r16", -1);

         }
         else {
            gnss_SSR_GriddedCorrectionSupport_r16 = null;
         }

         // decode navic_DifferentialCorrectionsSupport_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("navic_DifferentialCorrectionsSupport_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            navic_DifferentialCorrectionsSupport_r16 = new NavIC_DifferentialCorrectionsSupport_r16();
            navic_DifferentialCorrectionsSupport_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("navic_DifferentialCorrectionsSupport_r16", -1);

         }
         else {
            navic_DifferentialCorrectionsSupport_r16 = null;
         }

         // decode navic_GridModelSupport_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("navic_GridModelSupport_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            navic_GridModelSupport_r16 = new NavIC_GridModelSupport_r16();
            navic_GridModelSupport_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("navic_GridModelSupport_r16", -1);

         }
         else {
            navic_GridModelSupport_r16 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((bds_DifferentialCorrectionsSupport_r12 != null) ||
      (bds_GridModelSupport_r12 != null) ||
      (gnss_RTK_ObservationsSupport_r15 != null) ||
      (glo_RTK_BiasInformationSupport_r15 != null) ||
      (gnss_RTK_MAC_CorrectionDifferencesSupport_r15 != null) ||
      (gnss_RTK_ResidualsSupport_r15 != null) ||
      (gnss_RTK_FKP_GradientsSupport_r15 != null) ||
      (gnss_SSR_OrbitCorrectionsSupport_r15 != null) ||
      (gnss_SSR_ClockCorrectionsSupport_r15 != null) ||
      (gnss_SSR_CodeBiasSupport_r15 != null) ||
      (gnss_SSR_URA_Support_r16 != null) ||
      (gnss_SSR_PhaseBiasSupport_r16 != null) ||
      (gnss_SSR_STEC_CorrectionSupport_r16 != null) ||
      (gnss_SSR_GriddedCorrectionSupport_r16 != null) ||
      (navic_DifferentialCorrectionsSupport_r16 != null) ||
      (navic_GridModelSupport_r16 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((sbas_ID != null), null);
      buffer.encodeBit ((gnss_TimeModelsSupport != null), null);
      buffer.encodeBit ((gnss_DifferentialCorrectionsSupport != null), null);
      buffer.encodeBit ((gnss_NavigationModelSupport != null), null);
      buffer.encodeBit ((gnss_RealTimeIntegritySupport != null), null);
      buffer.encodeBit ((gnss_DataBitAssistanceSupport != null), null);
      buffer.encodeBit ((gnss_AcquisitionAssistanceSupport != null), null);
      buffer.encodeBit ((gnss_AlmanacSupport != null), null);
      buffer.encodeBit ((gnss_UTC_ModelSupport != null), null);
      buffer.encodeBit ((gnss_AuxiliaryInformationSupport != null), null);

      // encode gnss_ID

      if (gnss_ID != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_ID", -1);

         gnss_ID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_ID", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_ID");

      // encode sbas_ID

      if (sbas_ID != null) {
         buffer.getContext().eventDispatcher.startElement("sbas_ID", -1);

         sbas_ID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sbas_ID", -1);
      }

      // encode gnss_TimeModelsSupport

      if (gnss_TimeModelsSupport != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_TimeModelsSupport", -1);

         gnss_TimeModelsSupport.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_TimeModelsSupport", -1);
      }

      // encode gnss_DifferentialCorrectionsSupport

      if (gnss_DifferentialCorrectionsSupport != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_DifferentialCorrectionsSupport", -1);

         gnss_DifferentialCorrectionsSupport.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_DifferentialCorrectionsSupport", -1);
      }

      // encode gnss_NavigationModelSupport

      if (gnss_NavigationModelSupport != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_NavigationModelSupport", -1);

         gnss_NavigationModelSupport.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_NavigationModelSupport", -1);
      }

      // encode gnss_RealTimeIntegritySupport

      if (gnss_RealTimeIntegritySupport != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_RealTimeIntegritySupport", -1);

         gnss_RealTimeIntegritySupport.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_RealTimeIntegritySupport", -1);
      }

      // encode gnss_DataBitAssistanceSupport

      if (gnss_DataBitAssistanceSupport != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_DataBitAssistanceSupport", -1);

         gnss_DataBitAssistanceSupport.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_DataBitAssistanceSupport", -1);
      }

      // encode gnss_AcquisitionAssistanceSupport

      if (gnss_AcquisitionAssistanceSupport != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_AcquisitionAssistanceSupport", -1);

         gnss_AcquisitionAssistanceSupport.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_AcquisitionAssistanceSupport", -1);
      }

      // encode gnss_AlmanacSupport

      if (gnss_AlmanacSupport != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_AlmanacSupport", -1);

         gnss_AlmanacSupport.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_AlmanacSupport", -1);
      }

      // encode gnss_UTC_ModelSupport

      if (gnss_UTC_ModelSupport != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_UTC_ModelSupport", -1);

         gnss_UTC_ModelSupport.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_UTC_ModelSupport", -1);
      }

      // encode gnss_AuxiliaryInformationSupport

      if (gnss_AuxiliaryInformationSupport != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_AuxiliaryInformationSupport", -1);

         gnss_AuxiliaryInformationSupport.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_AuxiliaryInformationSupport", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 16;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((bds_DifferentialCorrectionsSupport_r12 != null), null);
         buffer.encodeBit ((bds_GridModelSupport_r12 != null), null);
         buffer.encodeBit ((gnss_RTK_ObservationsSupport_r15 != null), null);
         buffer.encodeBit ((glo_RTK_BiasInformationSupport_r15 != null), null);
         buffer.encodeBit ((gnss_RTK_MAC_CorrectionDifferencesSupport_r15 != null), null);
         buffer.encodeBit ((gnss_RTK_ResidualsSupport_r15 != null), null);
         buffer.encodeBit ((gnss_RTK_FKP_GradientsSupport_r15 != null), null);
         buffer.encodeBit ((gnss_SSR_OrbitCorrectionsSupport_r15 != null), null);
         buffer.encodeBit ((gnss_SSR_ClockCorrectionsSupport_r15 != null), null);
         buffer.encodeBit ((gnss_SSR_CodeBiasSupport_r15 != null), null);
         buffer.encodeBit ((gnss_SSR_URA_Support_r16 != null), null);
         buffer.encodeBit ((gnss_SSR_PhaseBiasSupport_r16 != null), null);
         buffer.encodeBit ((gnss_SSR_STEC_CorrectionSupport_r16 != null), null);
         buffer.encodeBit ((gnss_SSR_GriddedCorrectionSupport_r16 != null), null);
         buffer.encodeBit ((navic_DifferentialCorrectionsSupport_r16 != null), null);
         buffer.encodeBit ((navic_GridModelSupport_r16 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // bds_DifferentialCorrectionsSupport_r12

         if (bds_DifferentialCorrectionsSupport_r12 != null) {
            buffer.reset();
            bds_DifferentialCorrectionsSupport_r12.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("bds_DifferentialCorrectionsSupport_r12", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("bds_DifferentialCorrectionsSupport_r12", -1);
         }

         // bds_GridModelSupport_r12

         if (bds_GridModelSupport_r12 != null) {
            buffer.reset();
            bds_GridModelSupport_r12.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("bds_GridModelSupport_r12", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("bds_GridModelSupport_r12", -1);
         }

         // gnss_RTK_ObservationsSupport_r15

         if (gnss_RTK_ObservationsSupport_r15 != null) {
            buffer.reset();
            gnss_RTK_ObservationsSupport_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_ObservationsSupport_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_RTK_ObservationsSupport_r15", -1);
         }

         // glo_RTK_BiasInformationSupport_r15

         if (glo_RTK_BiasInformationSupport_r15 != null) {
            buffer.reset();
            glo_RTK_BiasInformationSupport_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("glo_RTK_BiasInformationSupport_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("glo_RTK_BiasInformationSupport_r15", -1);
         }

         // gnss_RTK_MAC_CorrectionDifferencesSupport_r15

         if (gnss_RTK_MAC_CorrectionDifferencesSupport_r15 != null) {
            buffer.reset();
            gnss_RTK_MAC_CorrectionDifferencesSupport_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_MAC_CorrectionDifferencesSupport_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_RTK_MAC_CorrectionDifferencesSupport_r15", -1);
         }

         // gnss_RTK_ResidualsSupport_r15

         if (gnss_RTK_ResidualsSupport_r15 != null) {
            buffer.reset();
            gnss_RTK_ResidualsSupport_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_ResidualsSupport_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_RTK_ResidualsSupport_r15", -1);
         }

         // gnss_RTK_FKP_GradientsSupport_r15

         if (gnss_RTK_FKP_GradientsSupport_r15 != null) {
            buffer.reset();
            gnss_RTK_FKP_GradientsSupport_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_FKP_GradientsSupport_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_RTK_FKP_GradientsSupport_r15", -1);
         }

         // gnss_SSR_OrbitCorrectionsSupport_r15

         if (gnss_SSR_OrbitCorrectionsSupport_r15 != null) {
            buffer.reset();
            gnss_SSR_OrbitCorrectionsSupport_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_OrbitCorrectionsSupport_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_OrbitCorrectionsSupport_r15", -1);
         }

         // gnss_SSR_ClockCorrectionsSupport_r15

         if (gnss_SSR_ClockCorrectionsSupport_r15 != null) {
            buffer.reset();
            gnss_SSR_ClockCorrectionsSupport_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_ClockCorrectionsSupport_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_ClockCorrectionsSupport_r15", -1);
         }

         // gnss_SSR_CodeBiasSupport_r15

         if (gnss_SSR_CodeBiasSupport_r15 != null) {
            buffer.reset();
            gnss_SSR_CodeBiasSupport_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_CodeBiasSupport_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_CodeBiasSupport_r15", -1);
         }

         // gnss_SSR_URA_Support_r16

         if (gnss_SSR_URA_Support_r16 != null) {
            buffer.reset();
            gnss_SSR_URA_Support_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_URA_Support_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_URA_Support_r16", -1);
         }

         // gnss_SSR_PhaseBiasSupport_r16

         if (gnss_SSR_PhaseBiasSupport_r16 != null) {
            buffer.reset();
            gnss_SSR_PhaseBiasSupport_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_PhaseBiasSupport_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_PhaseBiasSupport_r16", -1);
         }

         // gnss_SSR_STEC_CorrectionSupport_r16

         if (gnss_SSR_STEC_CorrectionSupport_r16 != null) {
            buffer.reset();
            gnss_SSR_STEC_CorrectionSupport_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_STEC_CorrectionSupport_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_STEC_CorrectionSupport_r16", -1);
         }

         // gnss_SSR_GriddedCorrectionSupport_r16

         if (gnss_SSR_GriddedCorrectionSupport_r16 != null) {
            buffer.reset();
            gnss_SSR_GriddedCorrectionSupport_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_GriddedCorrectionSupport_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_GriddedCorrectionSupport_r16", -1);
         }

         // navic_DifferentialCorrectionsSupport_r16

         if (navic_DifferentialCorrectionsSupport_r16 != null) {
            buffer.reset();
            navic_DifferentialCorrectionsSupport_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("navic_DifferentialCorrectionsSupport_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("navic_DifferentialCorrectionsSupport_r16", -1);
         }

         // navic_GridModelSupport_r16

         if (navic_GridModelSupport_r16 != null) {
            buffer.reset();
            navic_GridModelSupport_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("navic_GridModelSupport_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("navic_GridModelSupport_r16", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
