/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_CommonAssistData extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-CommonAssistData";
   }

   protected GNSS_ReferenceTime gnss_ReferenceTime;  // optional
   protected GNSS_ReferenceLocation gnss_ReferenceLocation;  // optional
   protected GNSS_IonosphericModel gnss_IonosphericModel;  // optional
   protected GNSS_EarthOrientationParameters gnss_EarthOrientationParameters;  // optional
   protected GNSS_RTK_ReferenceStationInfo_r15 gnss_RTK_ReferenceStationInfo_r15;  // optional
   protected GNSS_RTK_CommonObservationInfo_r15 gnss_RTK_CommonObservationInfo_r15;  // optional
   protected GNSS_RTK_AuxiliaryStationData_r15 gnss_RTK_AuxiliaryStationData_r15;  // optional
   protected GNSS_SSR_CorrectionPoints_r16 gnss_SSR_CorrectionPoints_r16;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_CommonAssistData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_CommonAssistData (
      GNSS_ReferenceTime gnss_ReferenceTime_,
      GNSS_ReferenceLocation gnss_ReferenceLocation_,
      GNSS_IonosphericModel gnss_IonosphericModel_,
      GNSS_EarthOrientationParameters gnss_EarthOrientationParameters_,
      GNSS_RTK_ReferenceStationInfo_r15 gnss_RTK_ReferenceStationInfo_r15_,
      GNSS_RTK_CommonObservationInfo_r15 gnss_RTK_CommonObservationInfo_r15_,
      GNSS_RTK_AuxiliaryStationData_r15 gnss_RTK_AuxiliaryStationData_r15_,
      GNSS_SSR_CorrectionPoints_r16 gnss_SSR_CorrectionPoints_r16_
   ) {
      super();
      setGnss_ReferenceTime (gnss_ReferenceTime_);
      setGnss_ReferenceLocation (gnss_ReferenceLocation_);
      setGnss_IonosphericModel (gnss_IonosphericModel_);
      setGnss_EarthOrientationParameters (gnss_EarthOrientationParameters_);
      setGnss_RTK_ReferenceStationInfo_r15 (gnss_RTK_ReferenceStationInfo_r15_);
      setGnss_RTK_CommonObservationInfo_r15 (gnss_RTK_CommonObservationInfo_r15_);
      setGnss_RTK_AuxiliaryStationData_r15 (gnss_RTK_AuxiliaryStationData_r15_);
      setGnss_SSR_CorrectionPoints_r16 (gnss_SSR_CorrectionPoints_r16_);
   }

   public void init () {
      gnss_ReferenceTime = null;
      gnss_ReferenceLocation = null;
      gnss_IonosphericModel = null;
      gnss_EarthOrientationParameters = null;
      gnss_RTK_ReferenceStationInfo_r15 = null;
      gnss_RTK_CommonObservationInfo_r15 = null;
      gnss_RTK_AuxiliaryStationData_r15 = null;
      gnss_SSR_CorrectionPoints_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_CommonAssistData) ) return false;

      GNSS_CommonAssistData rhs = (GNSS_CommonAssistData) obj;

      if (gnss_ReferenceTime == null) {
         if (rhs.gnss_ReferenceTime != null) return false;
      }
      else {
         if (!gnss_ReferenceTime.equals(rhs.gnss_ReferenceTime)) {
            return false;
         }
      }

      if (gnss_ReferenceLocation == null) {
         if (rhs.gnss_ReferenceLocation != null) return false;
      }
      else {
         if (!gnss_ReferenceLocation.equals(rhs.gnss_ReferenceLocation)) {
            return false;
         }
      }

      if (gnss_IonosphericModel == null) {
         if (rhs.gnss_IonosphericModel != null) return false;
      }
      else {
         if (!gnss_IonosphericModel.equals(rhs.gnss_IonosphericModel)) {
            return false;
         }
      }

      if (gnss_EarthOrientationParameters == null) {
         if (rhs.gnss_EarthOrientationParameters != null) return false;
      }
      else {
         if (!gnss_EarthOrientationParameters.equals(rhs.gnss_EarthOrientationParameters)) {
            return false;
         }
      }

      if (gnss_RTK_ReferenceStationInfo_r15 == null) {
         if (rhs.gnss_RTK_ReferenceStationInfo_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_ReferenceStationInfo_r15.equals(rhs.gnss_RTK_ReferenceStationInfo_r15)) {
            return false;
         }
      }

      if (gnss_RTK_CommonObservationInfo_r15 == null) {
         if (rhs.gnss_RTK_CommonObservationInfo_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_CommonObservationInfo_r15.equals(rhs.gnss_RTK_CommonObservationInfo_r15)) {
            return false;
         }
      }

      if (gnss_RTK_AuxiliaryStationData_r15 == null) {
         if (rhs.gnss_RTK_AuxiliaryStationData_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_AuxiliaryStationData_r15.equals(rhs.gnss_RTK_AuxiliaryStationData_r15)) {
            return false;
         }
      }

      if (gnss_SSR_CorrectionPoints_r16 == null) {
         if (rhs.gnss_SSR_CorrectionPoints_r16 != null) return false;
      }
      else {
         if (!gnss_SSR_CorrectionPoints_r16.equals(rhs.gnss_SSR_CorrectionPoints_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gnss_ReferenceTime != null) __code = 31*__code + gnss_ReferenceTime.hashCode();
      if (gnss_ReferenceLocation != null) __code = 31*__code + gnss_ReferenceLocation.hashCode();
      if (gnss_IonosphericModel != null) __code = 31*__code + gnss_IonosphericModel.hashCode();
      if (gnss_EarthOrientationParameters != null) __code = 31*__code + gnss_EarthOrientationParameters.hashCode();
      if (gnss_RTK_ReferenceStationInfo_r15 != null) __code = 31*__code + gnss_RTK_ReferenceStationInfo_r15.hashCode();
      if (gnss_RTK_CommonObservationInfo_r15 != null) __code = 31*__code + gnss_RTK_CommonObservationInfo_r15.hashCode();
      if (gnss_RTK_AuxiliaryStationData_r15 != null) __code = 31*__code + gnss_RTK_AuxiliaryStationData_r15.hashCode();
      if (gnss_SSR_CorrectionPoints_r16 != null) __code = 31*__code + gnss_SSR_CorrectionPoints_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Gnss_ReferenceTime
    */
   public GNSS_ReferenceTime getGnss_ReferenceTime () {
      return gnss_ReferenceTime;
   }

   public void setGnss_ReferenceTime (GNSS_ReferenceTime value) {
      this.gnss_ReferenceTime = value;
   }

   public boolean hasGnss_ReferenceTime () {
      return (gnss_ReferenceTime != null);
   }

   /**
    * Accessor/mutator methods for Gnss_ReferenceLocation
    */
   public GNSS_ReferenceLocation getGnss_ReferenceLocation () {
      return gnss_ReferenceLocation;
   }

   public void setGnss_ReferenceLocation (GNSS_ReferenceLocation value) {
      this.gnss_ReferenceLocation = value;
   }

   public boolean hasGnss_ReferenceLocation () {
      return (gnss_ReferenceLocation != null);
   }

   /**
    * Accessor/mutator methods for Gnss_IonosphericModel
    */
   public GNSS_IonosphericModel getGnss_IonosphericModel () {
      return gnss_IonosphericModel;
   }

   public void setGnss_IonosphericModel (GNSS_IonosphericModel value) {
      this.gnss_IonosphericModel = value;
   }

   public boolean hasGnss_IonosphericModel () {
      return (gnss_IonosphericModel != null);
   }

   /**
    * Accessor/mutator methods for Gnss_EarthOrientationParameters
    */
   public GNSS_EarthOrientationParameters getGnss_EarthOrientationParameters () {
      return gnss_EarthOrientationParameters;
   }

   public void setGnss_EarthOrientationParameters (GNSS_EarthOrientationParameters value) {
      this.gnss_EarthOrientationParameters = value;
   }

   public boolean hasGnss_EarthOrientationParameters () {
      return (gnss_EarthOrientationParameters != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_ReferenceStationInfo_r15
    */
   public GNSS_RTK_ReferenceStationInfo_r15 getGnss_RTK_ReferenceStationInfo_r15 () {
      return gnss_RTK_ReferenceStationInfo_r15;
   }

   public void setGnss_RTK_ReferenceStationInfo_r15 (GNSS_RTK_ReferenceStationInfo_r15 value) {
      this.gnss_RTK_ReferenceStationInfo_r15 = value;
   }

   public boolean hasGnss_RTK_ReferenceStationInfo_r15 () {
      return (gnss_RTK_ReferenceStationInfo_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_CommonObservationInfo_r15
    */
   public GNSS_RTK_CommonObservationInfo_r15 getGnss_RTK_CommonObservationInfo_r15 () {
      return gnss_RTK_CommonObservationInfo_r15;
   }

   public void setGnss_RTK_CommonObservationInfo_r15 (GNSS_RTK_CommonObservationInfo_r15 value) {
      this.gnss_RTK_CommonObservationInfo_r15 = value;
   }

   public boolean hasGnss_RTK_CommonObservationInfo_r15 () {
      return (gnss_RTK_CommonObservationInfo_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_AuxiliaryStationData_r15
    */
   public GNSS_RTK_AuxiliaryStationData_r15 getGnss_RTK_AuxiliaryStationData_r15 () {
      return gnss_RTK_AuxiliaryStationData_r15;
   }

   public void setGnss_RTK_AuxiliaryStationData_r15 (GNSS_RTK_AuxiliaryStationData_r15 value) {
      this.gnss_RTK_AuxiliaryStationData_r15 = value;
   }

   public boolean hasGnss_RTK_AuxiliaryStationData_r15 () {
      return (gnss_RTK_AuxiliaryStationData_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_CorrectionPoints_r16
    */
   public GNSS_SSR_CorrectionPoints_r16 getGnss_SSR_CorrectionPoints_r16 () {
      return gnss_SSR_CorrectionPoints_r16;
   }

   public void setGnss_SSR_CorrectionPoints_r16 (GNSS_SSR_CorrectionPoints_r16 value) {
      this.gnss_SSR_CorrectionPoints_r16 = value;
   }

   public boolean hasGnss_SSR_CorrectionPoints_r16 () {
      return (gnss_SSR_CorrectionPoints_r16 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gnss_ReferenceTime;
         case 1: return gnss_ReferenceLocation;
         case 2: return gnss_IonosphericModel;
         case 3: return gnss_EarthOrientationParameters;
         case 4: return gnss_RTK_ReferenceStationInfo_r15;
         case 5: return gnss_RTK_CommonObservationInfo_r15;
         case 6: return gnss_RTK_AuxiliaryStationData_r15;
         case 7: return gnss_SSR_CorrectionPoints_r16;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gnss-ReferenceTime";
         case 1: return "gnss-ReferenceLocation";
         case 2: return "gnss-IonosphericModel";
         case 3: return "gnss-EarthOrientationParameters";
         case 4: return "gnss-RTK-ReferenceStationInfo-r15";
         case 5: return "gnss-RTK-CommonObservationInfo-r15";
         case 6: return "gnss-RTK-AuxiliaryStationData-r15";
         case 7: return "gnss-SSR-CorrectionPoints-r16";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean gnss_ReferenceTimePresent = buffer.decodeBit ("gnss_ReferenceTimePresent");
      boolean gnss_ReferenceLocationPresent = buffer.decodeBit ("gnss_ReferenceLocationPresent");
      boolean gnss_IonosphericModelPresent = buffer.decodeBit ("gnss_IonosphericModelPresent");
      boolean gnss_EarthOrientationParametersPresent = buffer.decodeBit ("gnss_EarthOrientationParametersPresent");

      // decode gnss_ReferenceTime

      if (gnss_ReferenceTimePresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_ReferenceTime", -1);

         gnss_ReferenceTime = new GNSS_ReferenceTime();
         gnss_ReferenceTime.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_ReferenceTime", -1);
      }
      else {
         gnss_ReferenceTime = null;
      }

      // decode gnss_ReferenceLocation

      if (gnss_ReferenceLocationPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_ReferenceLocation", -1);

         gnss_ReferenceLocation = new GNSS_ReferenceLocation();
         gnss_ReferenceLocation.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_ReferenceLocation", -1);
      }
      else {
         gnss_ReferenceLocation = null;
      }

      // decode gnss_IonosphericModel

      if (gnss_IonosphericModelPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_IonosphericModel", -1);

         gnss_IonosphericModel = new GNSS_IonosphericModel();
         gnss_IonosphericModel.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_IonosphericModel", -1);
      }
      else {
         gnss_IonosphericModel = null;
      }

      // decode gnss_EarthOrientationParameters

      if (gnss_EarthOrientationParametersPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_EarthOrientationParameters", -1);

         gnss_EarthOrientationParameters = new GNSS_EarthOrientationParameters();
         gnss_EarthOrientationParameters.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_EarthOrientationParameters", -1);
      }
      else {
         gnss_EarthOrientationParameters = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_RTK_ReferenceStationInfo_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_RTK_CommonObservationInfo_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_RTK_AuxiliaryStationData_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_CorrectionPoints_r16Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode gnss_RTK_ReferenceStationInfo_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_ReferenceStationInfo_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_RTK_ReferenceStationInfo_r15 = new GNSS_RTK_ReferenceStationInfo_r15();
            gnss_RTK_ReferenceStationInfo_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_RTK_ReferenceStationInfo_r15", -1);

         }
         else {
            gnss_RTK_ReferenceStationInfo_r15 = null;
         }

         // decode gnss_RTK_CommonObservationInfo_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_CommonObservationInfo_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_RTK_CommonObservationInfo_r15 = new GNSS_RTK_CommonObservationInfo_r15();
            gnss_RTK_CommonObservationInfo_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_RTK_CommonObservationInfo_r15", -1);

         }
         else {
            gnss_RTK_CommonObservationInfo_r15 = null;
         }

         // decode gnss_RTK_AuxiliaryStationData_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_AuxiliaryStationData_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_RTK_AuxiliaryStationData_r15 = new GNSS_RTK_AuxiliaryStationData_r15();
            gnss_RTK_AuxiliaryStationData_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_RTK_AuxiliaryStationData_r15", -1);

         }
         else {
            gnss_RTK_AuxiliaryStationData_r15 = null;
         }

         // decode gnss_SSR_CorrectionPoints_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_CorrectionPoints_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_CorrectionPoints_r16 = new GNSS_SSR_CorrectionPoints_r16();
            gnss_SSR_CorrectionPoints_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_CorrectionPoints_r16", -1);

         }
         else {
            gnss_SSR_CorrectionPoints_r16 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((gnss_RTK_ReferenceStationInfo_r15 != null) ||
      (gnss_RTK_CommonObservationInfo_r15 != null) ||
      (gnss_RTK_AuxiliaryStationData_r15 != null) ||
      (gnss_SSR_CorrectionPoints_r16 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((gnss_ReferenceTime != null), null);
      buffer.encodeBit ((gnss_ReferenceLocation != null), null);
      buffer.encodeBit ((gnss_IonosphericModel != null), null);
      buffer.encodeBit ((gnss_EarthOrientationParameters != null), null);

      // encode gnss_ReferenceTime

      if (gnss_ReferenceTime != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_ReferenceTime", -1);

         gnss_ReferenceTime.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_ReferenceTime", -1);
      }

      // encode gnss_ReferenceLocation

      if (gnss_ReferenceLocation != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_ReferenceLocation", -1);

         gnss_ReferenceLocation.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_ReferenceLocation", -1);
      }

      // encode gnss_IonosphericModel

      if (gnss_IonosphericModel != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_IonosphericModel", -1);

         gnss_IonosphericModel.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_IonosphericModel", -1);
      }

      // encode gnss_EarthOrientationParameters

      if (gnss_EarthOrientationParameters != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_EarthOrientationParameters", -1);

         gnss_EarthOrientationParameters.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_EarthOrientationParameters", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 4;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((gnss_RTK_ReferenceStationInfo_r15 != null), null);
         buffer.encodeBit ((gnss_RTK_CommonObservationInfo_r15 != null), null);
         buffer.encodeBit ((gnss_RTK_AuxiliaryStationData_r15 != null), null);
         buffer.encodeBit ((gnss_SSR_CorrectionPoints_r16 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // gnss_RTK_ReferenceStationInfo_r15

         if (gnss_RTK_ReferenceStationInfo_r15 != null) {
            buffer.reset();
            gnss_RTK_ReferenceStationInfo_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_ReferenceStationInfo_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_RTK_ReferenceStationInfo_r15", -1);
         }

         // gnss_RTK_CommonObservationInfo_r15

         if (gnss_RTK_CommonObservationInfo_r15 != null) {
            buffer.reset();
            gnss_RTK_CommonObservationInfo_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_CommonObservationInfo_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_RTK_CommonObservationInfo_r15", -1);
         }

         // gnss_RTK_AuxiliaryStationData_r15

         if (gnss_RTK_AuxiliaryStationData_r15 != null) {
            buffer.reset();
            gnss_RTK_AuxiliaryStationData_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_AuxiliaryStationData_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_RTK_AuxiliaryStationData_r15", -1);
         }

         // gnss_SSR_CorrectionPoints_r16

         if (gnss_SSR_CorrectionPoints_r16 != null) {
            buffer.reset();
            gnss_SSR_CorrectionPoints_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_CorrectionPoints_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_CorrectionPoints_r16", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
