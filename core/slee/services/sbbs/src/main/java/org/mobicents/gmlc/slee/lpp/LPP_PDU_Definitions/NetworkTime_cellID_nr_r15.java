/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NetworkTime_cellID_nr_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   protected Asn1Integer nrPhysCellId_r15;
   protected NCGI_r15 nrCellGlobalID_r15;  // optional
   protected ARFCN_ValueNR_r15 nrARFCN_r15;
   protected Asn1OpenExt extElem1;

   public NetworkTime_cellID_nr_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NetworkTime_cellID_nr_r15 (
      Asn1Integer nrPhysCellId_r15_,
      NCGI_r15 nrCellGlobalID_r15_,
      ARFCN_ValueNR_r15 nrARFCN_r15_
   ) throws Asn1Exception {
      super();
      setNrPhysCellId_r15 (nrPhysCellId_r15_);
      setNrCellGlobalID_r15 (nrCellGlobalID_r15_);
      setNrARFCN_r15 (nrARFCN_r15_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public NetworkTime_cellID_nr_r15 (
      Asn1Integer nrPhysCellId_r15_,
      ARFCN_ValueNR_r15 nrARFCN_r15_
   ) throws Asn1Exception {
      super();
      setNrPhysCellId_r15 (nrPhysCellId_r15_);
      setNrARFCN_r15 (nrARFCN_r15_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NetworkTime_cellID_nr_r15 (long nrPhysCellId_r15_,
      NCGI_r15 nrCellGlobalID_r15_,
      long nrARFCN_r15_
   ) throws Asn1Exception {
      super();
      setNrPhysCellId_r15 (nrPhysCellId_r15_);
      setNrCellGlobalID_r15 (nrCellGlobalID_r15_);
      setNrARFCN_r15 (nrARFCN_r15_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public NetworkTime_cellID_nr_r15 (
      long nrPhysCellId_r15_,
      long nrARFCN_r15_
   ) throws Asn1Exception {
      super();
      setNrPhysCellId_r15 (nrPhysCellId_r15_);
      setNrARFCN_r15 (nrARFCN_r15_);
   }

   public void init () {
      nrPhysCellId_r15 = null;
      nrCellGlobalID_r15 = null;
      nrARFCN_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof NetworkTime_cellID_nr_r15) ) return false;

      NetworkTime_cellID_nr_r15 rhs = (NetworkTime_cellID_nr_r15) obj;

      if (nrPhysCellId_r15 == null) {
         if (rhs.nrPhysCellId_r15 != null) return false;
      }
      else {
         if (!nrPhysCellId_r15.equals(rhs.nrPhysCellId_r15)) {
            return false;
         }
      }

      if (nrCellGlobalID_r15 == null) {
         if (rhs.nrCellGlobalID_r15 != null) return false;
      }
      else {
         if (!nrCellGlobalID_r15.equals(rhs.nrCellGlobalID_r15)) {
            return false;
         }
      }

      if (nrARFCN_r15 == null) {
         if (rhs.nrARFCN_r15 != null) return false;
      }
      else {
         if (!nrARFCN_r15.equals(rhs.nrARFCN_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (nrPhysCellId_r15 != null) __code = 31*__code + nrPhysCellId_r15.hashCode();
      if (nrCellGlobalID_r15 != null) __code = 31*__code + nrCellGlobalID_r15.hashCode();
      if (nrARFCN_r15 != null) __code = 31*__code + nrARFCN_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for NrPhysCellId_r15
    */
   public Asn1Integer getNrPhysCellId_r15 () {
      return nrPhysCellId_r15;
   }

   public void setNrPhysCellId_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1007))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nrPhysCellId_r15 = value;
   }

   public void setNrPhysCellId_r15 (long value) 
      throws Asn1Exception
   {
      setNrPhysCellId_r15 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for NrCellGlobalID_r15
    */
   public NCGI_r15 getNrCellGlobalID_r15 () {
      return nrCellGlobalID_r15;
   }

   public void setNrCellGlobalID_r15 (NCGI_r15 value) {
      this.nrCellGlobalID_r15 = value;
   }

   public boolean hasNrCellGlobalID_r15 () {
      return (nrCellGlobalID_r15 != null);
   }

   /**
    * Accessor/mutator methods for NrARFCN_r15
    */
   public ARFCN_ValueNR_r15 getNrARFCN_r15 () {
      return nrARFCN_r15;
   }

   public void setNrARFCN_r15 (ARFCN_ValueNR_r15 value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 3279165))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nrARFCN_r15 = value;
   }

   public void setNrARFCN_r15 (long value) 
      throws Asn1Exception
   {
      setNrARFCN_r15 (new ARFCN_ValueNR_r15(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return nrPhysCellId_r15;
         case 1: return nrCellGlobalID_r15;
         case 2: return nrARFCN_r15;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "nrPhysCellId-r15";
         case 1: return "nrCellGlobalID-r15";
         case 2: return "nrARFCN-r15";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean nrCellGlobalID_r15Present = buffer.decodeBit ("nrCellGlobalID_r15Present");

      // decode nrPhysCellId_r15

      buffer.getContext().eventDispatcher.startElement("nrPhysCellId_r15", -1);

      nrPhysCellId_r15 = new Asn1Integer();
      nrPhysCellId_r15.decode (buffer, 0, 1007);
      buffer.getContext().eventDispatcher.endElement("nrPhysCellId_r15", -1);

      // decode nrCellGlobalID_r15

      if (nrCellGlobalID_r15Present) {
         buffer.getContext().eventDispatcher.startElement("nrCellGlobalID_r15", -1);

         nrCellGlobalID_r15 = new NCGI_r15();
         nrCellGlobalID_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nrCellGlobalID_r15", -1);
      }
      else {
         nrCellGlobalID_r15 = null;
      }

      // decode nrARFCN_r15

      buffer.getContext().eventDispatcher.startElement("nrARFCN_r15", -1);

      nrARFCN_r15 = new ARFCN_ValueNR_r15();
      nrARFCN_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("nrARFCN_r15", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((nrCellGlobalID_r15 != null), null);

      // encode nrPhysCellId_r15

      if (nrPhysCellId_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("nrPhysCellId_r15", -1);

         nrPhysCellId_r15.encode (buffer, 0, 1007);

         buffer.getContext().eventDispatcher.endElement("nrPhysCellId_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("nrPhysCellId_r15");

      // encode nrCellGlobalID_r15

      if (nrCellGlobalID_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("nrCellGlobalID_r15", -1);

         nrCellGlobalID_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nrCellGlobalID_r15", -1);
      }

      // encode nrARFCN_r15

      if (nrARFCN_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("nrARFCN_r15", -1);

         nrARFCN_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nrARFCN_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("nrARFCN_r15");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
