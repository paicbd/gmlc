/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_POS_INIT;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.ULP_Version_2_parameter_extensions.Ver2_RequestedAssistData_extension;

public class RequestedAssistData extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_POS_INITRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_POS_INITRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "RequestedAssistData";
   }

   protected Asn1Boolean almanacRequested;
   protected Asn1Boolean utcModelRequested;
   protected Asn1Boolean ionosphericModelRequested;
   protected Asn1Boolean dgpsCorrectionsRequested;
   protected Asn1Boolean referenceLocationRequested;
   protected Asn1Boolean referenceTimeRequested;
   protected Asn1Boolean acquisitionAssistanceRequested;
   protected Asn1Boolean realTimeIntegrityRequested;
   protected Asn1Boolean navigationModelRequested;
   protected NavigationModel navigationModelData;  // optional
   protected Ver2_RequestedAssistData_extension ver2_RequestedAssistData_extension;  // optional
   protected Asn1OpenExt extElem1;

   public RequestedAssistData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RequestedAssistData (
      Asn1Boolean almanacRequested_,
      Asn1Boolean utcModelRequested_,
      Asn1Boolean ionosphericModelRequested_,
      Asn1Boolean dgpsCorrectionsRequested_,
      Asn1Boolean referenceLocationRequested_,
      Asn1Boolean referenceTimeRequested_,
      Asn1Boolean acquisitionAssistanceRequested_,
      Asn1Boolean realTimeIntegrityRequested_,
      Asn1Boolean navigationModelRequested_,
      NavigationModel navigationModelData_,
      Ver2_RequestedAssistData_extension ver2_RequestedAssistData_extension_
   ) {
      super();
      setAlmanacRequested (almanacRequested_);
      setUtcModelRequested (utcModelRequested_);
      setIonosphericModelRequested (ionosphericModelRequested_);
      setDgpsCorrectionsRequested (dgpsCorrectionsRequested_);
      setReferenceLocationRequested (referenceLocationRequested_);
      setReferenceTimeRequested (referenceTimeRequested_);
      setAcquisitionAssistanceRequested (acquisitionAssistanceRequested_);
      setRealTimeIntegrityRequested (realTimeIntegrityRequested_);
      setNavigationModelRequested (navigationModelRequested_);
      setNavigationModelData (navigationModelData_);
      setVer2_RequestedAssistData_extension (ver2_RequestedAssistData_extension_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RequestedAssistData (
      Asn1Boolean almanacRequested_,
      Asn1Boolean utcModelRequested_,
      Asn1Boolean ionosphericModelRequested_,
      Asn1Boolean dgpsCorrectionsRequested_,
      Asn1Boolean referenceLocationRequested_,
      Asn1Boolean referenceTimeRequested_,
      Asn1Boolean acquisitionAssistanceRequested_,
      Asn1Boolean realTimeIntegrityRequested_,
      Asn1Boolean navigationModelRequested_
   ) {
      super();
      setAlmanacRequested (almanacRequested_);
      setUtcModelRequested (utcModelRequested_);
      setIonosphericModelRequested (ionosphericModelRequested_);
      setDgpsCorrectionsRequested (dgpsCorrectionsRequested_);
      setReferenceLocationRequested (referenceLocationRequested_);
      setReferenceTimeRequested (referenceTimeRequested_);
      setAcquisitionAssistanceRequested (acquisitionAssistanceRequested_);
      setRealTimeIntegrityRequested (realTimeIntegrityRequested_);
      setNavigationModelRequested (navigationModelRequested_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RequestedAssistData (boolean almanacRequested_,
      boolean utcModelRequested_,
      boolean ionosphericModelRequested_,
      boolean dgpsCorrectionsRequested_,
      boolean referenceLocationRequested_,
      boolean referenceTimeRequested_,
      boolean acquisitionAssistanceRequested_,
      boolean realTimeIntegrityRequested_,
      boolean navigationModelRequested_,
      NavigationModel navigationModelData_,
      Ver2_RequestedAssistData_extension ver2_RequestedAssistData_extension_
   ) {
      super();
      setAlmanacRequested (almanacRequested_);
      setUtcModelRequested (utcModelRequested_);
      setIonosphericModelRequested (ionosphericModelRequested_);
      setDgpsCorrectionsRequested (dgpsCorrectionsRequested_);
      setReferenceLocationRequested (referenceLocationRequested_);
      setReferenceTimeRequested (referenceTimeRequested_);
      setAcquisitionAssistanceRequested (acquisitionAssistanceRequested_);
      setRealTimeIntegrityRequested (realTimeIntegrityRequested_);
      setNavigationModelRequested (navigationModelRequested_);
      setNavigationModelData (navigationModelData_);
      setVer2_RequestedAssistData_extension (ver2_RequestedAssistData_extension_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public RequestedAssistData (
      boolean almanacRequested_,
      boolean utcModelRequested_,
      boolean ionosphericModelRequested_,
      boolean dgpsCorrectionsRequested_,
      boolean referenceLocationRequested_,
      boolean referenceTimeRequested_,
      boolean acquisitionAssistanceRequested_,
      boolean realTimeIntegrityRequested_,
      boolean navigationModelRequested_
   ) {
      super();
      setAlmanacRequested (almanacRequested_);
      setUtcModelRequested (utcModelRequested_);
      setIonosphericModelRequested (ionosphericModelRequested_);
      setDgpsCorrectionsRequested (dgpsCorrectionsRequested_);
      setReferenceLocationRequested (referenceLocationRequested_);
      setReferenceTimeRequested (referenceTimeRequested_);
      setAcquisitionAssistanceRequested (acquisitionAssistanceRequested_);
      setRealTimeIntegrityRequested (realTimeIntegrityRequested_);
      setNavigationModelRequested (navigationModelRequested_);
   }

   public void init () {
      almanacRequested = null;
      utcModelRequested = null;
      ionosphericModelRequested = null;
      dgpsCorrectionsRequested = null;
      referenceLocationRequested = null;
      referenceTimeRequested = null;
      acquisitionAssistanceRequested = null;
      realTimeIntegrityRequested = null;
      navigationModelRequested = null;
      navigationModelData = null;
      ver2_RequestedAssistData_extension = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof RequestedAssistData) ) return false;

      RequestedAssistData rhs = (RequestedAssistData) obj;

      if (almanacRequested == null) {
         if (rhs.almanacRequested != null) return false;
      }
      else {
         if (!almanacRequested.equals(rhs.almanacRequested)) {
            return false;
         }
      }

      if (utcModelRequested == null) {
         if (rhs.utcModelRequested != null) return false;
      }
      else {
         if (!utcModelRequested.equals(rhs.utcModelRequested)) {
            return false;
         }
      }

      if (ionosphericModelRequested == null) {
         if (rhs.ionosphericModelRequested != null) return false;
      }
      else {
         if (!ionosphericModelRequested.equals(rhs.ionosphericModelRequested)) {
            return false;
         }
      }

      if (dgpsCorrectionsRequested == null) {
         if (rhs.dgpsCorrectionsRequested != null) return false;
      }
      else {
         if (!dgpsCorrectionsRequested.equals(rhs.dgpsCorrectionsRequested)) {
            return false;
         }
      }

      if (referenceLocationRequested == null) {
         if (rhs.referenceLocationRequested != null) return false;
      }
      else {
         if (!referenceLocationRequested.equals(rhs.referenceLocationRequested)) {
            return false;
         }
      }

      if (referenceTimeRequested == null) {
         if (rhs.referenceTimeRequested != null) return false;
      }
      else {
         if (!referenceTimeRequested.equals(rhs.referenceTimeRequested)) {
            return false;
         }
      }

      if (acquisitionAssistanceRequested == null) {
         if (rhs.acquisitionAssistanceRequested != null) return false;
      }
      else {
         if (!acquisitionAssistanceRequested.equals(rhs.acquisitionAssistanceRequested)) {
            return false;
         }
      }

      if (realTimeIntegrityRequested == null) {
         if (rhs.realTimeIntegrityRequested != null) return false;
      }
      else {
         if (!realTimeIntegrityRequested.equals(rhs.realTimeIntegrityRequested)) {
            return false;
         }
      }

      if (navigationModelRequested == null) {
         if (rhs.navigationModelRequested != null) return false;
      }
      else {
         if (!navigationModelRequested.equals(rhs.navigationModelRequested)) {
            return false;
         }
      }

      if (navigationModelData == null) {
         if (rhs.navigationModelData != null) return false;
      }
      else {
         if (!navigationModelData.equals(rhs.navigationModelData)) {
            return false;
         }
      }

      if (ver2_RequestedAssistData_extension == null) {
         if (rhs.ver2_RequestedAssistData_extension != null) return false;
      }
      else {
         if (!ver2_RequestedAssistData_extension.equals(rhs.ver2_RequestedAssistData_extension)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (almanacRequested != null) __code = 31*__code + almanacRequested.hashCode();
      if (utcModelRequested != null) __code = 31*__code + utcModelRequested.hashCode();
      if (ionosphericModelRequested != null) __code = 31*__code + ionosphericModelRequested.hashCode();
      if (dgpsCorrectionsRequested != null) __code = 31*__code + dgpsCorrectionsRequested.hashCode();
      if (referenceLocationRequested != null) __code = 31*__code + referenceLocationRequested.hashCode();
      if (referenceTimeRequested != null) __code = 31*__code + referenceTimeRequested.hashCode();
      if (acquisitionAssistanceRequested != null) __code = 31*__code + acquisitionAssistanceRequested.hashCode();
      if (realTimeIntegrityRequested != null) __code = 31*__code + realTimeIntegrityRequested.hashCode();
      if (navigationModelRequested != null) __code = 31*__code + navigationModelRequested.hashCode();
      if (navigationModelData != null) __code = 31*__code + navigationModelData.hashCode();
      if (ver2_RequestedAssistData_extension != null) __code = 31*__code + ver2_RequestedAssistData_extension.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for AlmanacRequested
    */
   public Asn1Boolean getAlmanacRequested () {
      return almanacRequested;
   }

   public void setAlmanacRequested (Asn1Boolean value) {
      this.almanacRequested = value;
   }

   public void setAlmanacRequested (boolean value) {
      setAlmanacRequested (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for UtcModelRequested
    */
   public Asn1Boolean getUtcModelRequested () {
      return utcModelRequested;
   }

   public void setUtcModelRequested (Asn1Boolean value) {
      this.utcModelRequested = value;
   }

   public void setUtcModelRequested (boolean value) {
      setUtcModelRequested (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for IonosphericModelRequested
    */
   public Asn1Boolean getIonosphericModelRequested () {
      return ionosphericModelRequested;
   }

   public void setIonosphericModelRequested (Asn1Boolean value) {
      this.ionosphericModelRequested = value;
   }

   public void setIonosphericModelRequested (boolean value) {
      setIonosphericModelRequested (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for DgpsCorrectionsRequested
    */
   public Asn1Boolean getDgpsCorrectionsRequested () {
      return dgpsCorrectionsRequested;
   }

   public void setDgpsCorrectionsRequested (Asn1Boolean value) {
      this.dgpsCorrectionsRequested = value;
   }

   public void setDgpsCorrectionsRequested (boolean value) {
      setDgpsCorrectionsRequested (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for ReferenceLocationRequested
    */
   public Asn1Boolean getReferenceLocationRequested () {
      return referenceLocationRequested;
   }

   public void setReferenceLocationRequested (Asn1Boolean value) {
      this.referenceLocationRequested = value;
   }

   public void setReferenceLocationRequested (boolean value) {
      setReferenceLocationRequested (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for ReferenceTimeRequested
    */
   public Asn1Boolean getReferenceTimeRequested () {
      return referenceTimeRequested;
   }

   public void setReferenceTimeRequested (Asn1Boolean value) {
      this.referenceTimeRequested = value;
   }

   public void setReferenceTimeRequested (boolean value) {
      setReferenceTimeRequested (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for AcquisitionAssistanceRequested
    */
   public Asn1Boolean getAcquisitionAssistanceRequested () {
      return acquisitionAssistanceRequested;
   }

   public void setAcquisitionAssistanceRequested (Asn1Boolean value) {
      this.acquisitionAssistanceRequested = value;
   }

   public void setAcquisitionAssistanceRequested (boolean value) {
      setAcquisitionAssistanceRequested (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for RealTimeIntegrityRequested
    */
   public Asn1Boolean getRealTimeIntegrityRequested () {
      return realTimeIntegrityRequested;
   }

   public void setRealTimeIntegrityRequested (Asn1Boolean value) {
      this.realTimeIntegrityRequested = value;
   }

   public void setRealTimeIntegrityRequested (boolean value) {
      setRealTimeIntegrityRequested (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for NavigationModelRequested
    */
   public Asn1Boolean getNavigationModelRequested () {
      return navigationModelRequested;
   }

   public void setNavigationModelRequested (Asn1Boolean value) {
      this.navigationModelRequested = value;
   }

   public void setNavigationModelRequested (boolean value) {
      setNavigationModelRequested (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for NavigationModelData
    */
   public NavigationModel getNavigationModelData () {
      return navigationModelData;
   }

   public void setNavigationModelData (NavigationModel value) {
      this.navigationModelData = value;
   }

   public boolean hasNavigationModelData () {
      return (navigationModelData != null);
   }

   /**
    * Accessor/mutator methods for Ver2_RequestedAssistData_extension
    */
   public Ver2_RequestedAssistData_extension getVer2_RequestedAssistData_extension () {
      return ver2_RequestedAssistData_extension;
   }

   public void setVer2_RequestedAssistData_extension (Ver2_RequestedAssistData_extension value) {
      this.ver2_RequestedAssistData_extension = value;
   }

   public boolean hasVer2_RequestedAssistData_extension () {
      return (ver2_RequestedAssistData_extension != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 12; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return almanacRequested;
         case 1: return utcModelRequested;
         case 2: return ionosphericModelRequested;
         case 3: return dgpsCorrectionsRequested;
         case 4: return referenceLocationRequested;
         case 5: return referenceTimeRequested;
         case 6: return acquisitionAssistanceRequested;
         case 7: return realTimeIntegrityRequested;
         case 8: return navigationModelRequested;
         case 9: return navigationModelData;
         case 10: return ver2_RequestedAssistData_extension;
         case 11: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "almanacRequested";
         case 1: return "utcModelRequested";
         case 2: return "ionosphericModelRequested";
         case 3: return "dgpsCorrectionsRequested";
         case 4: return "referenceLocationRequested";
         case 5: return "referenceTimeRequested";
         case 6: return "acquisitionAssistanceRequested";
         case 7: return "realTimeIntegrityRequested";
         case 8: return "navigationModelRequested";
         case 9: return "navigationModelData";
         case 10: return "ver2-RequestedAssistData-extension";
         case 11: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean navigationModelDataPresent = buffer.decodeBit ("navigationModelDataPresent");

      // decode almanacRequested

      buffer.getContext().eventDispatcher.startElement("almanacRequested", -1);

      almanacRequested = new Asn1Boolean();
      almanacRequested.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("almanacRequested", -1);

      // decode utcModelRequested

      buffer.getContext().eventDispatcher.startElement("utcModelRequested", -1);

      utcModelRequested = new Asn1Boolean();
      utcModelRequested.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("utcModelRequested", -1);

      // decode ionosphericModelRequested

      buffer.getContext().eventDispatcher.startElement("ionosphericModelRequested", -1);

      ionosphericModelRequested = new Asn1Boolean();
      ionosphericModelRequested.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ionosphericModelRequested", -1);

      // decode dgpsCorrectionsRequested

      buffer.getContext().eventDispatcher.startElement("dgpsCorrectionsRequested", -1);

      dgpsCorrectionsRequested = new Asn1Boolean();
      dgpsCorrectionsRequested.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("dgpsCorrectionsRequested", -1);

      // decode referenceLocationRequested

      buffer.getContext().eventDispatcher.startElement("referenceLocationRequested", -1);

      referenceLocationRequested = new Asn1Boolean();
      referenceLocationRequested.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("referenceLocationRequested", -1);

      // decode referenceTimeRequested

      buffer.getContext().eventDispatcher.startElement("referenceTimeRequested", -1);

      referenceTimeRequested = new Asn1Boolean();
      referenceTimeRequested.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("referenceTimeRequested", -1);

      // decode acquisitionAssistanceRequested

      buffer.getContext().eventDispatcher.startElement("acquisitionAssistanceRequested", -1);

      acquisitionAssistanceRequested = new Asn1Boolean();
      acquisitionAssistanceRequested.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("acquisitionAssistanceRequested", -1);

      // decode realTimeIntegrityRequested

      buffer.getContext().eventDispatcher.startElement("realTimeIntegrityRequested", -1);

      realTimeIntegrityRequested = new Asn1Boolean();
      realTimeIntegrityRequested.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("realTimeIntegrityRequested", -1);

      // decode navigationModelRequested

      buffer.getContext().eventDispatcher.startElement("navigationModelRequested", -1);

      navigationModelRequested = new Asn1Boolean();
      navigationModelRequested.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("navigationModelRequested", -1);

      // decode navigationModelData

      if (navigationModelDataPresent) {
         buffer.getContext().eventDispatcher.startElement("navigationModelData", -1);

         navigationModelData = new NavigationModel();
         navigationModelData.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("navigationModelData", -1);
      }
      else {
         navigationModelData = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("ver2_RequestedAssistData_extensionPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode ver2_RequestedAssistData_extension

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("ver2_RequestedAssistData_extension", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            ver2_RequestedAssistData_extension = new Ver2_RequestedAssistData_extension();
            ver2_RequestedAssistData_extension.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("ver2_RequestedAssistData_extension", -1);

         }
         else {
            ver2_RequestedAssistData_extension = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((ver2_RequestedAssistData_extension != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((navigationModelData != null), null);

      // encode almanacRequested

      if (almanacRequested != null) {
         buffer.getContext().eventDispatcher.startElement("almanacRequested", -1);

         almanacRequested.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("almanacRequested", -1);
      }
      else throw new Asn1MissingRequiredException ("almanacRequested");

      // encode utcModelRequested

      if (utcModelRequested != null) {
         buffer.getContext().eventDispatcher.startElement("utcModelRequested", -1);

         utcModelRequested.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("utcModelRequested", -1);
      }
      else throw new Asn1MissingRequiredException ("utcModelRequested");

      // encode ionosphericModelRequested

      if (ionosphericModelRequested != null) {
         buffer.getContext().eventDispatcher.startElement("ionosphericModelRequested", -1);

         ionosphericModelRequested.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ionosphericModelRequested", -1);
      }
      else throw new Asn1MissingRequiredException ("ionosphericModelRequested");

      // encode dgpsCorrectionsRequested

      if (dgpsCorrectionsRequested != null) {
         buffer.getContext().eventDispatcher.startElement("dgpsCorrectionsRequested", -1);

         dgpsCorrectionsRequested.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dgpsCorrectionsRequested", -1);
      }
      else throw new Asn1MissingRequiredException ("dgpsCorrectionsRequested");

      // encode referenceLocationRequested

      if (referenceLocationRequested != null) {
         buffer.getContext().eventDispatcher.startElement("referenceLocationRequested", -1);

         referenceLocationRequested.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("referenceLocationRequested", -1);
      }
      else throw new Asn1MissingRequiredException ("referenceLocationRequested");

      // encode referenceTimeRequested

      if (referenceTimeRequested != null) {
         buffer.getContext().eventDispatcher.startElement("referenceTimeRequested", -1);

         referenceTimeRequested.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("referenceTimeRequested", -1);
      }
      else throw new Asn1MissingRequiredException ("referenceTimeRequested");

      // encode acquisitionAssistanceRequested

      if (acquisitionAssistanceRequested != null) {
         buffer.getContext().eventDispatcher.startElement("acquisitionAssistanceRequested", -1);

         acquisitionAssistanceRequested.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("acquisitionAssistanceRequested", -1);
      }
      else throw new Asn1MissingRequiredException ("acquisitionAssistanceRequested");

      // encode realTimeIntegrityRequested

      if (realTimeIntegrityRequested != null) {
         buffer.getContext().eventDispatcher.startElement("realTimeIntegrityRequested", -1);

         realTimeIntegrityRequested.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("realTimeIntegrityRequested", -1);
      }
      else throw new Asn1MissingRequiredException ("realTimeIntegrityRequested");

      // encode navigationModelRequested

      if (navigationModelRequested != null) {
         buffer.getContext().eventDispatcher.startElement("navigationModelRequested", -1);

         navigationModelRequested.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("navigationModelRequested", -1);
      }
      else throw new Asn1MissingRequiredException ("navigationModelRequested");

      // encode navigationModelData

      if (navigationModelData != null) {
         buffer.getContext().eventDispatcher.startElement("navigationModelData", -1);

         navigationModelData.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("navigationModelData", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((ver2_RequestedAssistData_extension != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // ver2_RequestedAssistData_extension

         if (ver2_RequestedAssistData_extension != null) {
            buffer.reset();
            ver2_RequestedAssistData_extension.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("ver2_RequestedAssistData_extension", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("ver2_RequestedAssistData_extension", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
