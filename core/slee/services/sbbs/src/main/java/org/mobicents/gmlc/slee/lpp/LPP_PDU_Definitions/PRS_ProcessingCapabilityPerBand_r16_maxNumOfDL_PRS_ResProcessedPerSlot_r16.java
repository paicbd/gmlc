/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   protected PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs15_r16 scs15_r16 = null;  // optional
   protected PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs30_r16 scs30_r16 = null;  // optional
   protected PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs60_r16 scs60_r16 = null;  // optional
   protected PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs120_r16 scs120_r16 = null;  // optional
   protected Asn1OpenExt extElem1;

   public PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16 (
      PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs15_r16 scs15_r16_,
      PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs30_r16 scs30_r16_,
      PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs60_r16 scs60_r16_,
      PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs120_r16 scs120_r16_
   ) {
      super();
      setScs15_r16 (scs15_r16_);
      setScs30_r16 (scs30_r16_);
      setScs60_r16 (scs60_r16_);
      setScs120_r16 (scs120_r16_);
   }

   public void init () {
      scs15_r16 = null;
      scs30_r16 = null;
      scs60_r16 = null;
      scs120_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16) ) return false;

      PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16 rhs = (PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16) obj;

      if (scs15_r16 == null) {
         if (rhs.scs15_r16 != null) return false;
      }
      else {
         if (!scs15_r16.equals(rhs.scs15_r16)) {
            return false;
         }
      }

      if (scs30_r16 == null) {
         if (rhs.scs30_r16 != null) return false;
      }
      else {
         if (!scs30_r16.equals(rhs.scs30_r16)) {
            return false;
         }
      }

      if (scs60_r16 == null) {
         if (rhs.scs60_r16 != null) return false;
      }
      else {
         if (!scs60_r16.equals(rhs.scs60_r16)) {
            return false;
         }
      }

      if (scs120_r16 == null) {
         if (rhs.scs120_r16 != null) return false;
      }
      else {
         if (!scs120_r16.equals(rhs.scs120_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (scs15_r16 != null) __code = 31*__code + scs15_r16.hashCode();
      if (scs30_r16 != null) __code = 31*__code + scs30_r16.hashCode();
      if (scs60_r16 != null) __code = 31*__code + scs60_r16.hashCode();
      if (scs120_r16 != null) __code = 31*__code + scs120_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Scs15_r16
    */
   public PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs15_r16 getScs15_r16 () {
      return scs15_r16;
   }

   public void setScs15_r16 (PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs15_r16 value) {
      this.scs15_r16 = value;
   }

   public boolean hasScs15_r16 () {
      return (scs15_r16 != null);
   }

   /**
    * Accessor/mutator methods for Scs30_r16
    */
   public PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs30_r16 getScs30_r16 () {
      return scs30_r16;
   }

   public void setScs30_r16 (PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs30_r16 value) {
      this.scs30_r16 = value;
   }

   public boolean hasScs30_r16 () {
      return (scs30_r16 != null);
   }

   /**
    * Accessor/mutator methods for Scs60_r16
    */
   public PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs60_r16 getScs60_r16 () {
      return scs60_r16;
   }

   public void setScs60_r16 (PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs60_r16 value) {
      this.scs60_r16 = value;
   }

   public boolean hasScs60_r16 () {
      return (scs60_r16 != null);
   }

   /**
    * Accessor/mutator methods for Scs120_r16
    */
   public PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs120_r16 getScs120_r16 () {
      return scs120_r16;
   }

   public void setScs120_r16 (PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs120_r16 value) {
      this.scs120_r16 = value;
   }

   public boolean hasScs120_r16 () {
      return (scs120_r16 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return scs15_r16;
         case 1: return scs30_r16;
         case 2: return scs60_r16;
         case 3: return scs120_r16;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "scs15-r16";
         case 1: return "scs30-r16";
         case 2: return "scs60-r16";
         case 3: return "scs120-r16";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean scs15_r16Present = buffer.decodeBit ("scs15_r16Present");
      boolean scs30_r16Present = buffer.decodeBit ("scs30_r16Present");
      boolean scs60_r16Present = buffer.decodeBit ("scs60_r16Present");
      boolean scs120_r16Present = buffer.decodeBit ("scs120_r16Present");

      // decode scs15_r16

      if (scs15_r16Present) {
         buffer.getContext().eventDispatcher.startElement("scs15_r16", -1);

         int tval = PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs15_r16.decodeEnumValue (buffer);
         scs15_r16 = PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs15_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("scs15_r16", -1);
      }
      else {
         scs15_r16 = null;
      }

      // decode scs30_r16

      if (scs30_r16Present) {
         buffer.getContext().eventDispatcher.startElement("scs30_r16", -1);

         int tval = PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs30_r16.decodeEnumValue (buffer);
         scs30_r16 = PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs30_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("scs30_r16", -1);
      }
      else {
         scs30_r16 = null;
      }

      // decode scs60_r16

      if (scs60_r16Present) {
         buffer.getContext().eventDispatcher.startElement("scs60_r16", -1);

         int tval = PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs60_r16.decodeEnumValue (buffer);
         scs60_r16 = PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs60_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("scs60_r16", -1);
      }
      else {
         scs60_r16 = null;
      }

      // decode scs120_r16

      if (scs120_r16Present) {
         buffer.getContext().eventDispatcher.startElement("scs120_r16", -1);

         int tval = PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs120_r16.decodeEnumValue (buffer);
         scs120_r16 = PRS_ProcessingCapabilityPerBand_r16_maxNumOfDL_PRS_ResProcessedPerSlot_r16_scs120_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("scs120_r16", -1);
      }
      else {
         scs120_r16 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((scs15_r16 != null), null);
      buffer.encodeBit ((scs30_r16 != null), null);
      buffer.encodeBit ((scs60_r16 != null), null);
      buffer.encodeBit ((scs120_r16 != null), null);

      // encode scs15_r16

      if (scs15_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("scs15_r16", -1);

         scs15_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("scs15_r16", -1);
      }

      // encode scs30_r16

      if (scs30_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("scs30_r16", -1);

         scs30_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("scs30_r16", -1);
      }

      // encode scs60_r16

      if (scs60_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("scs60_r16", -1);

         scs60_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("scs60_r16", -1);
      }

      // encode scs120_r16

      if (scs120_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("scs120_r16", -1);

         scs120_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("scs120_r16", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
