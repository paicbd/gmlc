/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class AlmanacBDS_AlmanacSet_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "AlmanacBDS-AlmanacSet-r12";
   }

   protected SV_ID svID;
   protected Asn1Integer bdsAlmToa_r12;  // optional
   protected Asn1Integer bdsAlmSqrtA_r12;
   protected Asn1Integer bdsAlmE_r12;
   protected Asn1Integer bdsAlmW_r12;
   protected Asn1Integer bdsAlmM0_r12;
   protected Asn1Integer bdsAlmOmega0_r12;
   protected Asn1Integer bdsAlmOmegaDot_r12;
   protected Asn1Integer bdsAlmDeltaI_r12;
   protected Asn1Integer bdsAlmA0_r12;
   protected Asn1Integer bdsAlmA1_r12;
   protected Asn1BitString bdsSvHealth_r12;  // optional
   protected Asn1OpenExt extElem1;

   public AlmanacBDS_AlmanacSet_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AlmanacBDS_AlmanacSet_r12 (
      SV_ID svID_,
      Asn1Integer bdsAlmToa_r12_,
      Asn1Integer bdsAlmSqrtA_r12_,
      Asn1Integer bdsAlmE_r12_,
      Asn1Integer bdsAlmW_r12_,
      Asn1Integer bdsAlmM0_r12_,
      Asn1Integer bdsAlmOmega0_r12_,
      Asn1Integer bdsAlmOmegaDot_r12_,
      Asn1Integer bdsAlmDeltaI_r12_,
      Asn1Integer bdsAlmA0_r12_,
      Asn1Integer bdsAlmA1_r12_,
      Asn1BitString bdsSvHealth_r12_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setBdsAlmToa_r12 (bdsAlmToa_r12_);
      setBdsAlmSqrtA_r12 (bdsAlmSqrtA_r12_);
      setBdsAlmE_r12 (bdsAlmE_r12_);
      setBdsAlmW_r12 (bdsAlmW_r12_);
      setBdsAlmM0_r12 (bdsAlmM0_r12_);
      setBdsAlmOmega0_r12 (bdsAlmOmega0_r12_);
      setBdsAlmOmegaDot_r12 (bdsAlmOmegaDot_r12_);
      setBdsAlmDeltaI_r12 (bdsAlmDeltaI_r12_);
      setBdsAlmA0_r12 (bdsAlmA0_r12_);
      setBdsAlmA1_r12 (bdsAlmA1_r12_);
      setBdsSvHealth_r12 (bdsSvHealth_r12_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public AlmanacBDS_AlmanacSet_r12 (
      SV_ID svID_,
      Asn1Integer bdsAlmSqrtA_r12_,
      Asn1Integer bdsAlmE_r12_,
      Asn1Integer bdsAlmW_r12_,
      Asn1Integer bdsAlmM0_r12_,
      Asn1Integer bdsAlmOmega0_r12_,
      Asn1Integer bdsAlmOmegaDot_r12_,
      Asn1Integer bdsAlmDeltaI_r12_,
      Asn1Integer bdsAlmA0_r12_,
      Asn1Integer bdsAlmA1_r12_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setBdsAlmSqrtA_r12 (bdsAlmSqrtA_r12_);
      setBdsAlmE_r12 (bdsAlmE_r12_);
      setBdsAlmW_r12 (bdsAlmW_r12_);
      setBdsAlmM0_r12 (bdsAlmM0_r12_);
      setBdsAlmOmega0_r12 (bdsAlmOmega0_r12_);
      setBdsAlmOmegaDot_r12 (bdsAlmOmegaDot_r12_);
      setBdsAlmDeltaI_r12 (bdsAlmDeltaI_r12_);
      setBdsAlmA0_r12 (bdsAlmA0_r12_);
      setBdsAlmA1_r12 (bdsAlmA1_r12_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AlmanacBDS_AlmanacSet_r12 (SV_ID svID_,
      long bdsAlmToa_r12_,
      long bdsAlmSqrtA_r12_,
      long bdsAlmE_r12_,
      long bdsAlmW_r12_,
      long bdsAlmM0_r12_,
      long bdsAlmOmega0_r12_,
      long bdsAlmOmegaDot_r12_,
      long bdsAlmDeltaI_r12_,
      long bdsAlmA0_r12_,
      long bdsAlmA1_r12_,
      Asn1BitString bdsSvHealth_r12_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setBdsAlmToa_r12 (bdsAlmToa_r12_);
      setBdsAlmSqrtA_r12 (bdsAlmSqrtA_r12_);
      setBdsAlmE_r12 (bdsAlmE_r12_);
      setBdsAlmW_r12 (bdsAlmW_r12_);
      setBdsAlmM0_r12 (bdsAlmM0_r12_);
      setBdsAlmOmega0_r12 (bdsAlmOmega0_r12_);
      setBdsAlmOmegaDot_r12 (bdsAlmOmegaDot_r12_);
      setBdsAlmDeltaI_r12 (bdsAlmDeltaI_r12_);
      setBdsAlmA0_r12 (bdsAlmA0_r12_);
      setBdsAlmA1_r12 (bdsAlmA1_r12_);
      setBdsSvHealth_r12 (bdsSvHealth_r12_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public AlmanacBDS_AlmanacSet_r12 (
      SV_ID svID_,
      long bdsAlmSqrtA_r12_,
      long bdsAlmE_r12_,
      long bdsAlmW_r12_,
      long bdsAlmM0_r12_,
      long bdsAlmOmega0_r12_,
      long bdsAlmOmegaDot_r12_,
      long bdsAlmDeltaI_r12_,
      long bdsAlmA0_r12_,
      long bdsAlmA1_r12_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setBdsAlmSqrtA_r12 (bdsAlmSqrtA_r12_);
      setBdsAlmE_r12 (bdsAlmE_r12_);
      setBdsAlmW_r12 (bdsAlmW_r12_);
      setBdsAlmM0_r12 (bdsAlmM0_r12_);
      setBdsAlmOmega0_r12 (bdsAlmOmega0_r12_);
      setBdsAlmOmegaDot_r12 (bdsAlmOmegaDot_r12_);
      setBdsAlmDeltaI_r12 (bdsAlmDeltaI_r12_);
      setBdsAlmA0_r12 (bdsAlmA0_r12_);
      setBdsAlmA1_r12 (bdsAlmA1_r12_);
   }

   public void init () {
      svID = null;
      bdsAlmToa_r12 = null;
      bdsAlmSqrtA_r12 = null;
      bdsAlmE_r12 = null;
      bdsAlmW_r12 = null;
      bdsAlmM0_r12 = null;
      bdsAlmOmega0_r12 = null;
      bdsAlmOmegaDot_r12 = null;
      bdsAlmDeltaI_r12 = null;
      bdsAlmA0_r12 = null;
      bdsAlmA1_r12 = null;
      bdsSvHealth_r12 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof AlmanacBDS_AlmanacSet_r12) ) return false;

      AlmanacBDS_AlmanacSet_r12 rhs = (AlmanacBDS_AlmanacSet_r12) obj;

      if (svID == null) {
         if (rhs.svID != null) return false;
      }
      else {
         if (!svID.equals(rhs.svID)) {
            return false;
         }
      }

      if (bdsAlmToa_r12 == null) {
         if (rhs.bdsAlmToa_r12 != null) return false;
      }
      else {
         if (!bdsAlmToa_r12.equals(rhs.bdsAlmToa_r12)) {
            return false;
         }
      }

      if (bdsAlmSqrtA_r12 == null) {
         if (rhs.bdsAlmSqrtA_r12 != null) return false;
      }
      else {
         if (!bdsAlmSqrtA_r12.equals(rhs.bdsAlmSqrtA_r12)) {
            return false;
         }
      }

      if (bdsAlmE_r12 == null) {
         if (rhs.bdsAlmE_r12 != null) return false;
      }
      else {
         if (!bdsAlmE_r12.equals(rhs.bdsAlmE_r12)) {
            return false;
         }
      }

      if (bdsAlmW_r12 == null) {
         if (rhs.bdsAlmW_r12 != null) return false;
      }
      else {
         if (!bdsAlmW_r12.equals(rhs.bdsAlmW_r12)) {
            return false;
         }
      }

      if (bdsAlmM0_r12 == null) {
         if (rhs.bdsAlmM0_r12 != null) return false;
      }
      else {
         if (!bdsAlmM0_r12.equals(rhs.bdsAlmM0_r12)) {
            return false;
         }
      }

      if (bdsAlmOmega0_r12 == null) {
         if (rhs.bdsAlmOmega0_r12 != null) return false;
      }
      else {
         if (!bdsAlmOmega0_r12.equals(rhs.bdsAlmOmega0_r12)) {
            return false;
         }
      }

      if (bdsAlmOmegaDot_r12 == null) {
         if (rhs.bdsAlmOmegaDot_r12 != null) return false;
      }
      else {
         if (!bdsAlmOmegaDot_r12.equals(rhs.bdsAlmOmegaDot_r12)) {
            return false;
         }
      }

      if (bdsAlmDeltaI_r12 == null) {
         if (rhs.bdsAlmDeltaI_r12 != null) return false;
      }
      else {
         if (!bdsAlmDeltaI_r12.equals(rhs.bdsAlmDeltaI_r12)) {
            return false;
         }
      }

      if (bdsAlmA0_r12 == null) {
         if (rhs.bdsAlmA0_r12 != null) return false;
      }
      else {
         if (!bdsAlmA0_r12.equals(rhs.bdsAlmA0_r12)) {
            return false;
         }
      }

      if (bdsAlmA1_r12 == null) {
         if (rhs.bdsAlmA1_r12 != null) return false;
      }
      else {
         if (!bdsAlmA1_r12.equals(rhs.bdsAlmA1_r12)) {
            return false;
         }
      }

      if (bdsSvHealth_r12 == null) {
         if (rhs.bdsSvHealth_r12 != null) return false;
      }
      else {
         if (!bdsSvHealth_r12.equals(rhs.bdsSvHealth_r12)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (svID != null) __code = 31*__code + svID.hashCode();
      if (bdsAlmToa_r12 != null) __code = 31*__code + bdsAlmToa_r12.hashCode();
      if (bdsAlmSqrtA_r12 != null) __code = 31*__code + bdsAlmSqrtA_r12.hashCode();
      if (bdsAlmE_r12 != null) __code = 31*__code + bdsAlmE_r12.hashCode();
      if (bdsAlmW_r12 != null) __code = 31*__code + bdsAlmW_r12.hashCode();
      if (bdsAlmM0_r12 != null) __code = 31*__code + bdsAlmM0_r12.hashCode();
      if (bdsAlmOmega0_r12 != null) __code = 31*__code + bdsAlmOmega0_r12.hashCode();
      if (bdsAlmOmegaDot_r12 != null) __code = 31*__code + bdsAlmOmegaDot_r12.hashCode();
      if (bdsAlmDeltaI_r12 != null) __code = 31*__code + bdsAlmDeltaI_r12.hashCode();
      if (bdsAlmA0_r12 != null) __code = 31*__code + bdsAlmA0_r12.hashCode();
      if (bdsAlmA1_r12 != null) __code = 31*__code + bdsAlmA1_r12.hashCode();
      if (bdsSvHealth_r12 != null) __code = 31*__code + bdsSvHealth_r12.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SvID
    */
   public SV_ID getSvID () {
      return svID;
   }

   public void setSvID (SV_ID value) {
      this.svID = value;
   }

   /**
    * Accessor/mutator methods for BdsAlmToa_r12
    */
   public Asn1Integer getBdsAlmToa_r12 () {
      return bdsAlmToa_r12;
   }

   public void setBdsAlmToa_r12 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.bdsAlmToa_r12 = value;
   }

   public void setBdsAlmToa_r12 (long value) 
      throws Asn1Exception
   {
      setBdsAlmToa_r12 (new Asn1Integer(value));
   }
   public boolean hasBdsAlmToa_r12 () {
      return (bdsAlmToa_r12 != null);
   }

   /**
    * Accessor/mutator methods for BdsAlmSqrtA_r12
    */
   public Asn1Integer getBdsAlmSqrtA_r12 () {
      return bdsAlmSqrtA_r12;
   }

   public void setBdsAlmSqrtA_r12 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 16777215))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.bdsAlmSqrtA_r12 = value;
   }

   public void setBdsAlmSqrtA_r12 (long value) 
      throws Asn1Exception
   {
      setBdsAlmSqrtA_r12 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for BdsAlmE_r12
    */
   public Asn1Integer getBdsAlmE_r12 () {
      return bdsAlmE_r12;
   }

   public void setBdsAlmE_r12 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 131071))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.bdsAlmE_r12 = value;
   }

   public void setBdsAlmE_r12 (long value) 
      throws Asn1Exception
   {
      setBdsAlmE_r12 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for BdsAlmW_r12
    */
   public Asn1Integer getBdsAlmW_r12 () {
      return bdsAlmW_r12;
   }

   public void setBdsAlmW_r12 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8388608 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.bdsAlmW_r12 = value;
   }

   public void setBdsAlmW_r12 (long value) 
      throws Asn1Exception
   {
      setBdsAlmW_r12 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for BdsAlmM0_r12
    */
   public Asn1Integer getBdsAlmM0_r12 () {
      return bdsAlmM0_r12;
   }

   public void setBdsAlmM0_r12 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8388608 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.bdsAlmM0_r12 = value;
   }

   public void setBdsAlmM0_r12 (long value) 
      throws Asn1Exception
   {
      setBdsAlmM0_r12 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for BdsAlmOmega0_r12
    */
   public Asn1Integer getBdsAlmOmega0_r12 () {
      return bdsAlmOmega0_r12;
   }

   public void setBdsAlmOmega0_r12 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8388608 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.bdsAlmOmega0_r12 = value;
   }

   public void setBdsAlmOmega0_r12 (long value) 
      throws Asn1Exception
   {
      setBdsAlmOmega0_r12 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for BdsAlmOmegaDot_r12
    */
   public Asn1Integer getBdsAlmOmegaDot_r12 () {
      return bdsAlmOmegaDot_r12;
   }

   public void setBdsAlmOmegaDot_r12 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -65536 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.bdsAlmOmegaDot_r12 = value;
   }

   public void setBdsAlmOmegaDot_r12 (long value) 
      throws Asn1Exception
   {
      setBdsAlmOmegaDot_r12 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for BdsAlmDeltaI_r12
    */
   public Asn1Integer getBdsAlmDeltaI_r12 () {
      return bdsAlmDeltaI_r12;
   }

   public void setBdsAlmDeltaI_r12 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.bdsAlmDeltaI_r12 = value;
   }

   public void setBdsAlmDeltaI_r12 (long value) 
      throws Asn1Exception
   {
      setBdsAlmDeltaI_r12 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for BdsAlmA0_r12
    */
   public Asn1Integer getBdsAlmA0_r12 () {
      return bdsAlmA0_r12;
   }

   public void setBdsAlmA0_r12 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1024 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.bdsAlmA0_r12 = value;
   }

   public void setBdsAlmA0_r12 (long value) 
      throws Asn1Exception
   {
      setBdsAlmA0_r12 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for BdsAlmA1_r12
    */
   public Asn1Integer getBdsAlmA1_r12 () {
      return bdsAlmA1_r12;
   }

   public void setBdsAlmA1_r12 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1024 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.bdsAlmA1_r12 = value;
   }

   public void setBdsAlmA1_r12 (long value) 
      throws Asn1Exception
   {
      setBdsAlmA1_r12 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for BdsSvHealth_r12
    */
   public Asn1BitString getBdsSvHealth_r12 () {
      return bdsSvHealth_r12;
   }

   public void setBdsSvHealth_r12 (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 9)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.bdsSvHealth_r12 = value;
   }

   public boolean hasBdsSvHealth_r12 () {
      return (bdsSvHealth_r12 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 13; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return svID;
         case 1: return bdsAlmToa_r12;
         case 2: return bdsAlmSqrtA_r12;
         case 3: return bdsAlmE_r12;
         case 4: return bdsAlmW_r12;
         case 5: return bdsAlmM0_r12;
         case 6: return bdsAlmOmega0_r12;
         case 7: return bdsAlmOmegaDot_r12;
         case 8: return bdsAlmDeltaI_r12;
         case 9: return bdsAlmA0_r12;
         case 10: return bdsAlmA1_r12;
         case 11: return bdsSvHealth_r12;
         case 12: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "svID";
         case 1: return "bdsAlmToa-r12";
         case 2: return "bdsAlmSqrtA-r12";
         case 3: return "bdsAlmE-r12";
         case 4: return "bdsAlmW-r12";
         case 5: return "bdsAlmM0-r12";
         case 6: return "bdsAlmOmega0-r12";
         case 7: return "bdsAlmOmegaDot-r12";
         case 8: return "bdsAlmDeltaI-r12";
         case 9: return "bdsAlmA0-r12";
         case 10: return "bdsAlmA1-r12";
         case 11: return "bdsSvHealth-r12";
         case 12: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean bdsAlmToa_r12Present = buffer.decodeBit ("bdsAlmToa_r12Present");
      boolean bdsSvHealth_r12Present = buffer.decodeBit ("bdsSvHealth_r12Present");

      // decode svID

      buffer.getContext().eventDispatcher.startElement("svID", -1);

      svID = new SV_ID();
      svID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("svID", -1);

      // decode bdsAlmToa_r12

      if (bdsAlmToa_r12Present) {
         buffer.getContext().eventDispatcher.startElement("bdsAlmToa_r12", -1);

         bdsAlmToa_r12 = new Asn1Integer();
         bdsAlmToa_r12.decode (buffer, 0, 255);
         buffer.getContext().eventDispatcher.endElement("bdsAlmToa_r12", -1);
      }
      else {
         bdsAlmToa_r12 = null;
      }

      // decode bdsAlmSqrtA_r12

      buffer.getContext().eventDispatcher.startElement("bdsAlmSqrtA_r12", -1);

      bdsAlmSqrtA_r12 = new Asn1Integer();
      bdsAlmSqrtA_r12.decode (buffer, 0, 16777215);
      buffer.getContext().eventDispatcher.endElement("bdsAlmSqrtA_r12", -1);

      // decode bdsAlmE_r12

      buffer.getContext().eventDispatcher.startElement("bdsAlmE_r12", -1);

      bdsAlmE_r12 = new Asn1Integer();
      bdsAlmE_r12.decode (buffer, 0, 131071);
      buffer.getContext().eventDispatcher.endElement("bdsAlmE_r12", -1);

      // decode bdsAlmW_r12

      buffer.getContext().eventDispatcher.startElement("bdsAlmW_r12", -1);

      bdsAlmW_r12 = new Asn1Integer();
      bdsAlmW_r12.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("bdsAlmW_r12", -1);

      // decode bdsAlmM0_r12

      buffer.getContext().eventDispatcher.startElement("bdsAlmM0_r12", -1);

      bdsAlmM0_r12 = new Asn1Integer();
      bdsAlmM0_r12.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("bdsAlmM0_r12", -1);

      // decode bdsAlmOmega0_r12

      buffer.getContext().eventDispatcher.startElement("bdsAlmOmega0_r12", -1);

      bdsAlmOmega0_r12 = new Asn1Integer();
      bdsAlmOmega0_r12.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("bdsAlmOmega0_r12", -1);

      // decode bdsAlmOmegaDot_r12

      buffer.getContext().eventDispatcher.startElement("bdsAlmOmegaDot_r12", -1);

      bdsAlmOmegaDot_r12 = new Asn1Integer();
      bdsAlmOmegaDot_r12.decode (buffer, -65536, 65535);
      buffer.getContext().eventDispatcher.endElement("bdsAlmOmegaDot_r12", -1);

      // decode bdsAlmDeltaI_r12

      buffer.getContext().eventDispatcher.startElement("bdsAlmDeltaI_r12", -1);

      bdsAlmDeltaI_r12 = new Asn1Integer();
      bdsAlmDeltaI_r12.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("bdsAlmDeltaI_r12", -1);

      // decode bdsAlmA0_r12

      buffer.getContext().eventDispatcher.startElement("bdsAlmA0_r12", -1);

      bdsAlmA0_r12 = new Asn1Integer();
      bdsAlmA0_r12.decode (buffer, -1024, 1023);
      buffer.getContext().eventDispatcher.endElement("bdsAlmA0_r12", -1);

      // decode bdsAlmA1_r12

      buffer.getContext().eventDispatcher.startElement("bdsAlmA1_r12", -1);

      bdsAlmA1_r12 = new Asn1Integer();
      bdsAlmA1_r12.decode (buffer, -1024, 1023);
      buffer.getContext().eventDispatcher.endElement("bdsAlmA1_r12", -1);

      // decode bdsSvHealth_r12

      if (bdsSvHealth_r12Present) {
         buffer.getContext().eventDispatcher.startElement("bdsSvHealth_r12", -1);

         bdsSvHealth_r12 = new Asn1BitString();
         bdsSvHealth_r12.decode (buffer, 9, 9);
         buffer.getContext().eventDispatcher.endElement("bdsSvHealth_r12", -1);
      }
      else {
         bdsSvHealth_r12 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((bdsAlmToa_r12 != null), null);
      buffer.encodeBit ((bdsSvHealth_r12 != null), null);

      // encode svID

      if (svID != null) {
         buffer.getContext().eventDispatcher.startElement("svID", -1);

         svID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("svID", -1);
      }
      else throw new Asn1MissingRequiredException ("svID");

      // encode bdsAlmToa_r12

      if (bdsAlmToa_r12 != null) {
         buffer.getContext().eventDispatcher.startElement("bdsAlmToa_r12", -1);

         bdsAlmToa_r12.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("bdsAlmToa_r12", -1);
      }

      // encode bdsAlmSqrtA_r12

      if (bdsAlmSqrtA_r12 != null) {
         buffer.getContext().eventDispatcher.startElement("bdsAlmSqrtA_r12", -1);

         bdsAlmSqrtA_r12.encode (buffer, 0, 16777215);

         buffer.getContext().eventDispatcher.endElement("bdsAlmSqrtA_r12", -1);
      }
      else throw new Asn1MissingRequiredException ("bdsAlmSqrtA_r12");

      // encode bdsAlmE_r12

      if (bdsAlmE_r12 != null) {
         buffer.getContext().eventDispatcher.startElement("bdsAlmE_r12", -1);

         bdsAlmE_r12.encode (buffer, 0, 131071);

         buffer.getContext().eventDispatcher.endElement("bdsAlmE_r12", -1);
      }
      else throw new Asn1MissingRequiredException ("bdsAlmE_r12");

      // encode bdsAlmW_r12

      if (bdsAlmW_r12 != null) {
         buffer.getContext().eventDispatcher.startElement("bdsAlmW_r12", -1);

         bdsAlmW_r12.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("bdsAlmW_r12", -1);
      }
      else throw new Asn1MissingRequiredException ("bdsAlmW_r12");

      // encode bdsAlmM0_r12

      if (bdsAlmM0_r12 != null) {
         buffer.getContext().eventDispatcher.startElement("bdsAlmM0_r12", -1);

         bdsAlmM0_r12.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("bdsAlmM0_r12", -1);
      }
      else throw new Asn1MissingRequiredException ("bdsAlmM0_r12");

      // encode bdsAlmOmega0_r12

      if (bdsAlmOmega0_r12 != null) {
         buffer.getContext().eventDispatcher.startElement("bdsAlmOmega0_r12", -1);

         bdsAlmOmega0_r12.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("bdsAlmOmega0_r12", -1);
      }
      else throw new Asn1MissingRequiredException ("bdsAlmOmega0_r12");

      // encode bdsAlmOmegaDot_r12

      if (bdsAlmOmegaDot_r12 != null) {
         buffer.getContext().eventDispatcher.startElement("bdsAlmOmegaDot_r12", -1);

         bdsAlmOmegaDot_r12.encode (buffer, -65536, 65535);

         buffer.getContext().eventDispatcher.endElement("bdsAlmOmegaDot_r12", -1);
      }
      else throw new Asn1MissingRequiredException ("bdsAlmOmegaDot_r12");

      // encode bdsAlmDeltaI_r12

      if (bdsAlmDeltaI_r12 != null) {
         buffer.getContext().eventDispatcher.startElement("bdsAlmDeltaI_r12", -1);

         bdsAlmDeltaI_r12.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("bdsAlmDeltaI_r12", -1);
      }
      else throw new Asn1MissingRequiredException ("bdsAlmDeltaI_r12");

      // encode bdsAlmA0_r12

      if (bdsAlmA0_r12 != null) {
         buffer.getContext().eventDispatcher.startElement("bdsAlmA0_r12", -1);

         bdsAlmA0_r12.encode (buffer, -1024, 1023);

         buffer.getContext().eventDispatcher.endElement("bdsAlmA0_r12", -1);
      }
      else throw new Asn1MissingRequiredException ("bdsAlmA0_r12");

      // encode bdsAlmA1_r12

      if (bdsAlmA1_r12 != null) {
         buffer.getContext().eventDispatcher.startElement("bdsAlmA1_r12", -1);

         bdsAlmA1_r12.encode (buffer, -1024, 1023);

         buffer.getContext().eventDispatcher.endElement("bdsAlmA1_r12", -1);
      }
      else throw new Asn1MissingRequiredException ("bdsAlmA1_r12");

      // encode bdsSvHealth_r12

      if (bdsSvHealth_r12 != null) {
         buffer.getContext().eventDispatcher.startElement("bdsSvHealth_r12", -1);

         bdsSvHealth_r12.encode (buffer, 9, 9);

         buffer.getContext().eventDispatcher.endElement("bdsSvHealth_r12", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
