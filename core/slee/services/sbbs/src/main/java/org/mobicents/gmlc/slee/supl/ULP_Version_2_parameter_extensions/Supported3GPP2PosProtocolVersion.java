/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Version_2_parameter_extensions;

import com.objsys.asn1j.runtime.*;

public class Supported3GPP2PosProtocolVersion extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_Version_2_parameter_extensionsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_Version_2_parameter_extensionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Supported3GPP2PosProtocolVersion";
   }

   protected Asn1BitString revisionNumber;
   protected Asn1Integer pointReleaseNumber;
   protected Asn1Integer internalEditLevel;
   protected Asn1OpenExt extElem1;

   public Supported3GPP2PosProtocolVersion () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Supported3GPP2PosProtocolVersion (
      Asn1BitString revisionNumber_,
      Asn1Integer pointReleaseNumber_,
      Asn1Integer internalEditLevel_
   ) throws Asn1Exception {
      super();
      setRevisionNumber (revisionNumber_);
      setPointReleaseNumber (pointReleaseNumber_);
      setInternalEditLevel (internalEditLevel_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Supported3GPP2PosProtocolVersion (Asn1BitString revisionNumber_,
      long pointReleaseNumber_,
      long internalEditLevel_
   ) throws Asn1Exception {
      super();
      setRevisionNumber (revisionNumber_);
      setPointReleaseNumber (pointReleaseNumber_);
      setInternalEditLevel (internalEditLevel_);
   }

   public void init () {
      revisionNumber = null;
      pointReleaseNumber = null;
      internalEditLevel = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Supported3GPP2PosProtocolVersion) ) return false;

      Supported3GPP2PosProtocolVersion rhs = (Supported3GPP2PosProtocolVersion) obj;

      if (revisionNumber == null) {
         if (rhs.revisionNumber != null) return false;
      }
      else {
         if (!revisionNumber.equals(rhs.revisionNumber)) {
            return false;
         }
      }

      if (pointReleaseNumber == null) {
         if (rhs.pointReleaseNumber != null) return false;
      }
      else {
         if (!pointReleaseNumber.equals(rhs.pointReleaseNumber)) {
            return false;
         }
      }

      if (internalEditLevel == null) {
         if (rhs.internalEditLevel != null) return false;
      }
      else {
         if (!internalEditLevel.equals(rhs.internalEditLevel)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (revisionNumber != null) __code = 31*__code + revisionNumber.hashCode();
      if (pointReleaseNumber != null) __code = 31*__code + pointReleaseNumber.hashCode();
      if (internalEditLevel != null) __code = 31*__code + internalEditLevel.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for RevisionNumber
    */
   public Asn1BitString getRevisionNumber () {
      return revisionNumber;
   }

   public void setRevisionNumber (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 6)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.revisionNumber = value;
   }

   /**
    * Accessor/mutator methods for PointReleaseNumber
    */
   public Asn1Integer getPointReleaseNumber () {
      return pointReleaseNumber;
   }

   public void setPointReleaseNumber (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.pointReleaseNumber = value;
   }

   public void setPointReleaseNumber (long value) 
      throws Asn1Exception
   {
      setPointReleaseNumber (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for InternalEditLevel
    */
   public Asn1Integer getInternalEditLevel () {
      return internalEditLevel;
   }

   public void setInternalEditLevel (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.internalEditLevel = value;
   }

   public void setInternalEditLevel (long value) 
      throws Asn1Exception
   {
      setInternalEditLevel (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return revisionNumber;
         case 1: return pointReleaseNumber;
         case 2: return internalEditLevel;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "revisionNumber";
         case 1: return "pointReleaseNumber";
         case 2: return "internalEditLevel";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode revisionNumber

      buffer.getContext().eventDispatcher.startElement("revisionNumber", -1);

      revisionNumber = new Asn1BitString();
      revisionNumber.decode (buffer, 6, 6);
      buffer.getContext().eventDispatcher.endElement("revisionNumber", -1);

      // decode pointReleaseNumber

      buffer.getContext().eventDispatcher.startElement("pointReleaseNumber", -1);

      pointReleaseNumber = new Asn1Integer();
      pointReleaseNumber.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("pointReleaseNumber", -1);

      // decode internalEditLevel

      buffer.getContext().eventDispatcher.startElement("internalEditLevel", -1);

      internalEditLevel = new Asn1Integer();
      internalEditLevel.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("internalEditLevel", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode revisionNumber

      if (revisionNumber != null) {
         buffer.getContext().eventDispatcher.startElement("revisionNumber", -1);

         revisionNumber.encode (buffer, 6, 6);

         buffer.getContext().eventDispatcher.endElement("revisionNumber", -1);
      }
      else throw new Asn1MissingRequiredException ("revisionNumber");

      // encode pointReleaseNumber

      if (pointReleaseNumber != null) {
         buffer.getContext().eventDispatcher.startElement("pointReleaseNumber", -1);

         pointReleaseNumber.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("pointReleaseNumber", -1);
      }
      else throw new Asn1MissingRequiredException ("pointReleaseNumber");

      // encode internalEditLevel

      if (internalEditLevel != null) {
         buffer.getContext().eventDispatcher.startElement("internalEditLevel", -1);

         internalEditLevel.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("internalEditLevel", -1);
      }
      else throw new Asn1MissingRequiredException ("internalEditLevel");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
