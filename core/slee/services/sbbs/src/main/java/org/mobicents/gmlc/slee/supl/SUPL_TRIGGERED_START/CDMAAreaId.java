/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_TRIGGERED_START;

import com.objsys.asn1j.runtime.*;

public class CDMAAreaId extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_TRIGGERED_STARTRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_TRIGGERED_STARTRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "CDMAAreaId";
   }

   protected Asn1Integer refSID;  // optional
   protected Asn1Integer refNID;  // optional
   protected Asn1Integer refBASEID;  // optional
   protected Asn1OpenExt extElem1;

   public CDMAAreaId () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CDMAAreaId (
      Asn1Integer refSID_,
      Asn1Integer refNID_,
      Asn1Integer refBASEID_
   ) throws Asn1Exception {
      super();
      setRefSID (refSID_);
      setRefNID (refNID_);
      setRefBASEID (refBASEID_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CDMAAreaId (long refSID_,
      long refNID_,
      long refBASEID_
   ) throws Asn1Exception {
      super();
      setRefSID (refSID_);
      setRefNID (refNID_);
      setRefBASEID (refBASEID_);
   }

   public void init () {
      refSID = null;
      refNID = null;
      refBASEID = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof CDMAAreaId) ) return false;

      CDMAAreaId rhs = (CDMAAreaId) obj;

      if (refSID == null) {
         if (rhs.refSID != null) return false;
      }
      else {
         if (!refSID.equals(rhs.refSID)) {
            return false;
         }
      }

      if (refNID == null) {
         if (rhs.refNID != null) return false;
      }
      else {
         if (!refNID.equals(rhs.refNID)) {
            return false;
         }
      }

      if (refBASEID == null) {
         if (rhs.refBASEID != null) return false;
      }
      else {
         if (!refBASEID.equals(rhs.refBASEID)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (refSID != null) __code = 31*__code + refSID.hashCode();
      if (refNID != null) __code = 31*__code + refNID.hashCode();
      if (refBASEID != null) __code = 31*__code + refBASEID.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for RefSID
    */
   public Asn1Integer getRefSID () {
      return refSID;
   }

   public void setRefSID (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.refSID = value;
   }

   public void setRefSID (long value) 
      throws Asn1Exception
   {
      setRefSID (new Asn1Integer(value));
   }
   public boolean hasRefSID () {
      return (refSID != null);
   }

   /**
    * Accessor/mutator methods for RefNID
    */
   public Asn1Integer getRefNID () {
      return refNID;
   }

   public void setRefNID (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.refNID = value;
   }

   public void setRefNID (long value) 
      throws Asn1Exception
   {
      setRefNID (new Asn1Integer(value));
   }
   public boolean hasRefNID () {
      return (refNID != null);
   }

   /**
    * Accessor/mutator methods for RefBASEID
    */
   public Asn1Integer getRefBASEID () {
      return refBASEID;
   }

   public void setRefBASEID (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.refBASEID = value;
   }

   public void setRefBASEID (long value) 
      throws Asn1Exception
   {
      setRefBASEID (new Asn1Integer(value));
   }
   public boolean hasRefBASEID () {
      return (refBASEID != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return refSID;
         case 1: return refNID;
         case 2: return refBASEID;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "refSID";
         case 1: return "refNID";
         case 2: return "refBASEID";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean refSIDPresent = buffer.decodeBit ("refSIDPresent");
      boolean refNIDPresent = buffer.decodeBit ("refNIDPresent");
      boolean refBASEIDPresent = buffer.decodeBit ("refBASEIDPresent");

      // decode refSID

      if (refSIDPresent) {
         buffer.getContext().eventDispatcher.startElement("refSID", -1);

         refSID = new Asn1Integer();
         refSID.decode (buffer, 0, 65535);
         buffer.getContext().eventDispatcher.endElement("refSID", -1);
      }
      else {
         refSID = null;
      }

      // decode refNID

      if (refNIDPresent) {
         buffer.getContext().eventDispatcher.startElement("refNID", -1);

         refNID = new Asn1Integer();
         refNID.decode (buffer, 0, 32767);
         buffer.getContext().eventDispatcher.endElement("refNID", -1);
      }
      else {
         refNID = null;
      }

      // decode refBASEID

      if (refBASEIDPresent) {
         buffer.getContext().eventDispatcher.startElement("refBASEID", -1);

         refBASEID = new Asn1Integer();
         refBASEID.decode (buffer, 0, 65535);
         buffer.getContext().eventDispatcher.endElement("refBASEID", -1);
      }
      else {
         refBASEID = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((refSID != null), null);
      buffer.encodeBit ((refNID != null), null);
      buffer.encodeBit ((refBASEID != null), null);

      // encode refSID

      if (refSID != null) {
         buffer.getContext().eventDispatcher.startElement("refSID", -1);

         refSID.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("refSID", -1);
      }

      // encode refNID

      if (refNID != null) {
         buffer.getContext().eventDispatcher.startElement("refNID", -1);

         refNID.encode (buffer, 0, 32767);

         buffer.getContext().eventDispatcher.endElement("refNID", -1);
      }

      // encode refBASEID

      if (refBASEID != null) {
         buffer.getContext().eventDispatcher.startElement("refBASEID", -1);

         refBASEID.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("refBASEID", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
