/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class MBS_AcquisitionAssistance_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "MBS-AcquisitionAssistance-r14";
   }

   protected Asn1Integer transmitterID_r14;  // optional
   protected MBS_AcquisitionAssistance_r14_mbsConfiguration_r14 mbsConfiguration_r14 = null;  // optional
   protected Asn1Integer pnCodeIndex_r14;  // optional
   protected Asn1Integer freq_r14;  // optional
   protected Asn1OpenExt extElem1;

   public MBS_AcquisitionAssistance_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MBS_AcquisitionAssistance_r14 (
      Asn1Integer transmitterID_r14_,
      MBS_AcquisitionAssistance_r14_mbsConfiguration_r14 mbsConfiguration_r14_,
      Asn1Integer pnCodeIndex_r14_,
      Asn1Integer freq_r14_
   ) throws Asn1Exception {
      super();
      setTransmitterID_r14 (transmitterID_r14_);
      setMbsConfiguration_r14 (mbsConfiguration_r14_);
      setPnCodeIndex_r14 (pnCodeIndex_r14_);
      setFreq_r14 (freq_r14_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MBS_AcquisitionAssistance_r14 (long transmitterID_r14_,
      MBS_AcquisitionAssistance_r14_mbsConfiguration_r14 mbsConfiguration_r14_,
      long pnCodeIndex_r14_,
      long freq_r14_
   ) throws Asn1Exception {
      super();
      setTransmitterID_r14 (transmitterID_r14_);
      setMbsConfiguration_r14 (mbsConfiguration_r14_);
      setPnCodeIndex_r14 (pnCodeIndex_r14_);
      setFreq_r14 (freq_r14_);
   }

   public void init () {
      transmitterID_r14 = null;
      mbsConfiguration_r14 = null;
      pnCodeIndex_r14 = null;
      freq_r14 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof MBS_AcquisitionAssistance_r14) ) return false;

      MBS_AcquisitionAssistance_r14 rhs = (MBS_AcquisitionAssistance_r14) obj;

      if (transmitterID_r14 == null) {
         if (rhs.transmitterID_r14 != null) return false;
      }
      else {
         if (!transmitterID_r14.equals(rhs.transmitterID_r14)) {
            return false;
         }
      }

      if (mbsConfiguration_r14 == null) {
         if (rhs.mbsConfiguration_r14 != null) return false;
      }
      else {
         if (!mbsConfiguration_r14.equals(rhs.mbsConfiguration_r14)) {
            return false;
         }
      }

      if (pnCodeIndex_r14 == null) {
         if (rhs.pnCodeIndex_r14 != null) return false;
      }
      else {
         if (!pnCodeIndex_r14.equals(rhs.pnCodeIndex_r14)) {
            return false;
         }
      }

      if (freq_r14 == null) {
         if (rhs.freq_r14 != null) return false;
      }
      else {
         if (!freq_r14.equals(rhs.freq_r14)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (transmitterID_r14 != null) __code = 31*__code + transmitterID_r14.hashCode();
      if (mbsConfiguration_r14 != null) __code = 31*__code + mbsConfiguration_r14.hashCode();
      if (pnCodeIndex_r14 != null) __code = 31*__code + pnCodeIndex_r14.hashCode();
      if (freq_r14 != null) __code = 31*__code + freq_r14.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for TransmitterID_r14
    */
   public Asn1Integer getTransmitterID_r14 () {
      return transmitterID_r14;
   }

   public void setTransmitterID_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.transmitterID_r14 = value;
   }

   public void setTransmitterID_r14 (long value) 
      throws Asn1Exception
   {
      setTransmitterID_r14 (new Asn1Integer(value));
   }
   public boolean hasTransmitterID_r14 () {
      return (transmitterID_r14 != null);
   }

   /**
    * Accessor/mutator methods for MbsConfiguration_r14
    */
   public MBS_AcquisitionAssistance_r14_mbsConfiguration_r14 getMbsConfiguration_r14 () {
      return mbsConfiguration_r14;
   }

   public void setMbsConfiguration_r14 (MBS_AcquisitionAssistance_r14_mbsConfiguration_r14 value) {
      this.mbsConfiguration_r14 = value;
   }

   public boolean hasMbsConfiguration_r14 () {
      return (mbsConfiguration_r14 != null);
   }

   /**
    * Accessor/mutator methods for PnCodeIndex_r14
    */
   public Asn1Integer getPnCodeIndex_r14 () {
      return pnCodeIndex_r14;
   }

   public void setPnCodeIndex_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 128))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.pnCodeIndex_r14 = value;
   }

   public void setPnCodeIndex_r14 (long value) 
      throws Asn1Exception
   {
      setPnCodeIndex_r14 (new Asn1Integer(value));
   }
   public boolean hasPnCodeIndex_r14 () {
      return (pnCodeIndex_r14 != null);
   }

   /**
    * Accessor/mutator methods for Freq_r14
    */
   public Asn1Integer getFreq_r14 () {
      return freq_r14;
   }

   public void setFreq_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 919750000 && value.value <= 927250000))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.freq_r14 = value;
   }

   public void setFreq_r14 (long value) 
      throws Asn1Exception
   {
      setFreq_r14 (new Asn1Integer(value));
   }
   public boolean hasFreq_r14 () {
      return (freq_r14 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return transmitterID_r14;
         case 1: return mbsConfiguration_r14;
         case 2: return pnCodeIndex_r14;
         case 3: return freq_r14;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "transmitterID-r14";
         case 1: return "mbsConfiguration-r14";
         case 2: return "pnCodeIndex-r14";
         case 3: return "freq-r14";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean transmitterID_r14Present = buffer.decodeBit ("transmitterID_r14Present");
      boolean mbsConfiguration_r14Present = buffer.decodeBit ("mbsConfiguration_r14Present");
      boolean pnCodeIndex_r14Present = buffer.decodeBit ("pnCodeIndex_r14Present");
      boolean freq_r14Present = buffer.decodeBit ("freq_r14Present");

      // decode transmitterID_r14

      if (transmitterID_r14Present) {
         buffer.getContext().eventDispatcher.startElement("transmitterID_r14", -1);

         transmitterID_r14 = new Asn1Integer();
         transmitterID_r14.decode (buffer, 0, 32767);
         buffer.getContext().eventDispatcher.endElement("transmitterID_r14", -1);
      }
      else {
         transmitterID_r14 = null;
      }

      // decode mbsConfiguration_r14

      if (mbsConfiguration_r14Present) {
         buffer.getContext().eventDispatcher.startElement("mbsConfiguration_r14", -1);

         int tval = MBS_AcquisitionAssistance_r14_mbsConfiguration_r14.decodeEnumValue (buffer);
         mbsConfiguration_r14 = MBS_AcquisitionAssistance_r14_mbsConfiguration_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("mbsConfiguration_r14", -1);
      }
      else {
         mbsConfiguration_r14 = null;
      }

      // decode pnCodeIndex_r14

      if (pnCodeIndex_r14Present) {
         buffer.getContext().eventDispatcher.startElement("pnCodeIndex_r14", -1);

         pnCodeIndex_r14 = new Asn1Integer();
         pnCodeIndex_r14.decode (buffer, 1, 128);
         buffer.getContext().eventDispatcher.endElement("pnCodeIndex_r14", -1);
      }
      else {
         pnCodeIndex_r14 = null;
      }

      // decode freq_r14

      if (freq_r14Present) {
         buffer.getContext().eventDispatcher.startElement("freq_r14", -1);

         freq_r14 = new Asn1Integer();
         freq_r14.decode (buffer, 919750000, 927250000);
         buffer.getContext().eventDispatcher.endElement("freq_r14", -1);
      }
      else {
         freq_r14 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((transmitterID_r14 != null), null);
      buffer.encodeBit ((mbsConfiguration_r14 != null), null);
      buffer.encodeBit ((pnCodeIndex_r14 != null), null);
      buffer.encodeBit ((freq_r14 != null), null);

      // encode transmitterID_r14

      if (transmitterID_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("transmitterID_r14", -1);

         transmitterID_r14.encode (buffer, 0, 32767);

         buffer.getContext().eventDispatcher.endElement("transmitterID_r14", -1);
      }

      // encode mbsConfiguration_r14

      if (mbsConfiguration_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("mbsConfiguration_r14", -1);

         mbsConfiguration_r14.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mbsConfiguration_r14", -1);
      }

      // encode pnCodeIndex_r14

      if (pnCodeIndex_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("pnCodeIndex_r14", -1);

         pnCodeIndex_r14.encode (buffer, 1, 128);

         buffer.getContext().eventDispatcher.endElement("pnCodeIndex_r14", -1);
      }

      // encode freq_r14

      if (freq_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("freq_r14", -1);

         freq_r14.encode (buffer, 919750000, 927250000);

         buffer.getContext().eventDispatcher.endElement("freq_r14", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
