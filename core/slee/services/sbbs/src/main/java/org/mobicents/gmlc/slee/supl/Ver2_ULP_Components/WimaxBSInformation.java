/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class WimaxBSInformation extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "WimaxBSInformation";
   }

   protected WimaxBsID wimaxBsID;
   protected WimaxRTD wimaxRTD;  // optional
   protected WimaxNMRList wimaxNMRList;  // optional
   protected Asn1OpenExt extElem1;

   public WimaxBSInformation () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public WimaxBSInformation (
      WimaxBsID wimaxBsID_,
      WimaxRTD wimaxRTD_,
      WimaxNMRList wimaxNMRList_
   ) throws Asn1Exception {
      super();
      setWimaxBsID (wimaxBsID_);
      setWimaxRTD (wimaxRTD_);
      setWimaxNMRList (wimaxNMRList_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public WimaxBSInformation (
      WimaxBsID wimaxBsID_
   ) throws Asn1Exception {
      super();
      setWimaxBsID (wimaxBsID_);
   }

   public void init () {
      wimaxBsID = null;
      wimaxRTD = null;
      wimaxNMRList = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof WimaxBSInformation) ) return false;

      WimaxBSInformation rhs = (WimaxBSInformation) obj;

      if (wimaxBsID == null) {
         if (rhs.wimaxBsID != null) return false;
      }
      else {
         if (!wimaxBsID.equals(rhs.wimaxBsID)) {
            return false;
         }
      }

      if (wimaxRTD == null) {
         if (rhs.wimaxRTD != null) return false;
      }
      else {
         if (!wimaxRTD.equals(rhs.wimaxRTD)) {
            return false;
         }
      }

      if (wimaxNMRList == null) {
         if (rhs.wimaxNMRList != null) return false;
      }
      else {
         if (!wimaxNMRList.equals(rhs.wimaxNMRList)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (wimaxBsID != null) __code = 31*__code + wimaxBsID.hashCode();
      if (wimaxRTD != null) __code = 31*__code + wimaxRTD.hashCode();
      if (wimaxNMRList != null) __code = 31*__code + wimaxNMRList.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for WimaxBsID
    */
   public WimaxBsID getWimaxBsID () {
      return wimaxBsID;
   }

   public void setWimaxBsID (WimaxBsID value) {
      this.wimaxBsID = value;
   }

   /**
    * Accessor/mutator methods for WimaxRTD
    */
   public WimaxRTD getWimaxRTD () {
      return wimaxRTD;
   }

   public void setWimaxRTD (WimaxRTD value) {
      this.wimaxRTD = value;
   }

   public boolean hasWimaxRTD () {
      return (wimaxRTD != null);
   }

   /**
    * Accessor/mutator methods for WimaxNMRList
    */
   public WimaxNMRList getWimaxNMRList () {
      return wimaxNMRList;
   }

   public void setWimaxNMRList (WimaxNMRList value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 32))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.wimaxNMRList = value;
   }

   public boolean hasWimaxNMRList () {
      return (wimaxNMRList != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return wimaxBsID;
         case 1: return wimaxRTD;
         case 2: return wimaxNMRList;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "wimaxBsID";
         case 1: return "wimaxRTD";
         case 2: return "wimaxNMRList";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean wimaxRTDPresent = buffer.decodeBit ("wimaxRTDPresent");
      boolean wimaxNMRListPresent = buffer.decodeBit ("wimaxNMRListPresent");

      // decode wimaxBsID

      buffer.getContext().eventDispatcher.startElement("wimaxBsID", -1);

      wimaxBsID = new WimaxBsID();
      wimaxBsID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("wimaxBsID", -1);

      // decode wimaxRTD

      if (wimaxRTDPresent) {
         buffer.getContext().eventDispatcher.startElement("wimaxRTD", -1);

         wimaxRTD = new WimaxRTD();
         wimaxRTD.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("wimaxRTD", -1);
      }
      else {
         wimaxRTD = null;
      }

      // decode wimaxNMRList

      if (wimaxNMRListPresent) {
         buffer.getContext().eventDispatcher.startElement("wimaxNMRList", -1);

         wimaxNMRList = new WimaxNMRList();
         wimaxNMRList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("wimaxNMRList", -1);
      }
      else {
         wimaxNMRList = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((wimaxRTD != null), null);
      buffer.encodeBit ((wimaxNMRList != null), null);

      // encode wimaxBsID

      if (wimaxBsID != null) {
         buffer.getContext().eventDispatcher.startElement("wimaxBsID", -1);

         wimaxBsID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("wimaxBsID", -1);
      }
      else throw new Asn1MissingRequiredException ("wimaxBsID");

      // encode wimaxRTD

      if (wimaxRTD != null) {
         buffer.getContext().eventDispatcher.startElement("wimaxRTD", -1);

         wimaxRTD.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("wimaxRTD", -1);
      }

      // encode wimaxNMRList

      if (wimaxNMRList != null) {
         buffer.getContext().eventDispatcher.startElement("wimaxNMRList", -1);

         wimaxNMRList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("wimaxNMRList", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
