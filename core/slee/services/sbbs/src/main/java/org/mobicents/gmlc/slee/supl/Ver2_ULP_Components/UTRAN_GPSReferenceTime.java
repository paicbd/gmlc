/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class UTRAN_GPSReferenceTime extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "UTRAN-GPSReferenceTime";
   }

   protected UTRAN_GPSReferenceTime_utran_GPSTimingOfCell utran_GPSTimingOfCell;
   protected UTRAN_GPSReferenceTime_modeSpecificInfo modeSpecificInfo;  // optional
   protected Asn1Integer sfn;

   public UTRAN_GPSReferenceTime () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UTRAN_GPSReferenceTime (
      UTRAN_GPSReferenceTime_utran_GPSTimingOfCell utran_GPSTimingOfCell_,
      UTRAN_GPSReferenceTime_modeSpecificInfo modeSpecificInfo_,
      Asn1Integer sfn_
   ) throws Asn1Exception {
      super();
      setUtran_GPSTimingOfCell (utran_GPSTimingOfCell_);
      setModeSpecificInfo (modeSpecificInfo_);
      setSfn (sfn_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public UTRAN_GPSReferenceTime (
      UTRAN_GPSReferenceTime_utran_GPSTimingOfCell utran_GPSTimingOfCell_,
      Asn1Integer sfn_
   ) throws Asn1Exception {
      super();
      setUtran_GPSTimingOfCell (utran_GPSTimingOfCell_);
      setSfn (sfn_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UTRAN_GPSReferenceTime (UTRAN_GPSReferenceTime_utran_GPSTimingOfCell utran_GPSTimingOfCell_,
      UTRAN_GPSReferenceTime_modeSpecificInfo modeSpecificInfo_,
      long sfn_
   ) throws Asn1Exception {
      super();
      setUtran_GPSTimingOfCell (utran_GPSTimingOfCell_);
      setModeSpecificInfo (modeSpecificInfo_);
      setSfn (sfn_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public UTRAN_GPSReferenceTime (
      UTRAN_GPSReferenceTime_utran_GPSTimingOfCell utran_GPSTimingOfCell_,
      long sfn_
   ) throws Asn1Exception {
      super();
      setUtran_GPSTimingOfCell (utran_GPSTimingOfCell_);
      setSfn (sfn_);
   }

   public void init () {
      utran_GPSTimingOfCell = null;
      modeSpecificInfo = null;
      sfn = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof UTRAN_GPSReferenceTime) ) return false;

      UTRAN_GPSReferenceTime rhs = (UTRAN_GPSReferenceTime) obj;

      if (utran_GPSTimingOfCell == null) {
         if (rhs.utran_GPSTimingOfCell != null) return false;
      }
      else {
         if (!utran_GPSTimingOfCell.equals(rhs.utran_GPSTimingOfCell)) {
            return false;
         }
      }

      if (modeSpecificInfo == null) {
         if (rhs.modeSpecificInfo != null) return false;
      }
      else {
         if (!modeSpecificInfo.equals(rhs.modeSpecificInfo)) {
            return false;
         }
      }

      if (sfn == null) {
         if (rhs.sfn != null) return false;
      }
      else {
         if (!sfn.equals(rhs.sfn)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (utran_GPSTimingOfCell != null) __code = 31*__code + utran_GPSTimingOfCell.hashCode();
      if (modeSpecificInfo != null) __code = 31*__code + modeSpecificInfo.hashCode();
      if (sfn != null) __code = 31*__code + sfn.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Utran_GPSTimingOfCell
    */
   public UTRAN_GPSReferenceTime_utran_GPSTimingOfCell getUtran_GPSTimingOfCell () {
      return utran_GPSTimingOfCell;
   }

   public void setUtran_GPSTimingOfCell (UTRAN_GPSReferenceTime_utran_GPSTimingOfCell value) {
      this.utran_GPSTimingOfCell = value;
   }

   /**
    * Accessor/mutator methods for ModeSpecificInfo
    */
   public UTRAN_GPSReferenceTime_modeSpecificInfo getModeSpecificInfo () {
      return modeSpecificInfo;
   }

   public void setModeSpecificInfo (UTRAN_GPSReferenceTime_modeSpecificInfo value) {
      this.modeSpecificInfo = value;
   }

   public boolean hasModeSpecificInfo () {
      return (modeSpecificInfo != null);
   }

   /**
    * Accessor/mutator methods for Sfn
    */
   public Asn1Integer getSfn () {
      return sfn;
   }

   public void setSfn (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sfn = value;
   }

   public void setSfn (long value) 
      throws Asn1Exception
   {
      setSfn (new Asn1Integer(value));
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return utran_GPSTimingOfCell;
         case 1: return modeSpecificInfo;
         case 2: return sfn;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "utran-GPSTimingOfCell";
         case 1: return "modeSpecificInfo";
         case 2: return "sfn";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean modeSpecificInfoPresent = buffer.decodeBit ("modeSpecificInfoPresent");

      // decode utran_GPSTimingOfCell

      buffer.getContext().eventDispatcher.startElement("utran_GPSTimingOfCell", -1);

      utran_GPSTimingOfCell = new UTRAN_GPSReferenceTime_utran_GPSTimingOfCell();
      utran_GPSTimingOfCell.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("utran_GPSTimingOfCell", -1);

      // decode modeSpecificInfo

      if (modeSpecificInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("modeSpecificInfo", -1);

         modeSpecificInfo = new UTRAN_GPSReferenceTime_modeSpecificInfo();
         modeSpecificInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("modeSpecificInfo", -1);
      }
      else {
         modeSpecificInfo = null;
      }

      // decode sfn

      buffer.getContext().eventDispatcher.startElement("sfn", -1);

      sfn = new Asn1Integer();
      sfn.decode (buffer, 0, 4095);
      buffer.getContext().eventDispatcher.endElement("sfn", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((modeSpecificInfo != null), null);

      // encode utran_GPSTimingOfCell

      if (utran_GPSTimingOfCell != null) {
         buffer.getContext().eventDispatcher.startElement("utran_GPSTimingOfCell", -1);

         utran_GPSTimingOfCell.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("utran_GPSTimingOfCell", -1);
      }
      else throw new Asn1MissingRequiredException ("utran_GPSTimingOfCell");

      // encode modeSpecificInfo

      if (modeSpecificInfo != null) {
         buffer.getContext().eventDispatcher.startElement("modeSpecificInfo", -1);

         modeSpecificInfo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("modeSpecificInfo", -1);
      }

      // encode sfn

      if (sfn != null) {
         buffer.getContext().eventDispatcher.startElement("sfn", -1);

         sfn.encode (buffer, 0, 4095);

         buffer.getContext().eventDispatcher.endElement("sfn", -1);
      }
      else throw new Asn1MissingRequiredException ("sfn");

   }

}
