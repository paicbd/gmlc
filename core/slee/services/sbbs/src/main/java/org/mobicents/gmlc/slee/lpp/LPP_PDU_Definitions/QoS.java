/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class QoS extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "QoS";
   }

   protected HorizontalAccuracy horizontalAccuracy;  // optional
   protected Asn1Boolean verticalCoordinateRequest;
   protected VerticalAccuracy verticalAccuracy;  // optional
   protected ResponseTime responseTime;  // optional
   protected Asn1Boolean velocityRequest;
   protected ResponseTimeNB_r14 responseTimeNB_r14;  // optional
   protected HorizontalAccuracyExt_r15 horizontalAccuracyExt_r15;  // optional
   protected VerticalAccuracyExt_r15 verticalAccuracyExt_r15;  // optional
   protected Asn1OpenExt extElem1;

   public QoS () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public QoS (
      HorizontalAccuracy horizontalAccuracy_,
      Asn1Boolean verticalCoordinateRequest_,
      VerticalAccuracy verticalAccuracy_,
      ResponseTime responseTime_,
      Asn1Boolean velocityRequest_,
      ResponseTimeNB_r14 responseTimeNB_r14_,
      HorizontalAccuracyExt_r15 horizontalAccuracyExt_r15_,
      VerticalAccuracyExt_r15 verticalAccuracyExt_r15_
   ) {
      super();
      setHorizontalAccuracy (horizontalAccuracy_);
      setVerticalCoordinateRequest (verticalCoordinateRequest_);
      setVerticalAccuracy (verticalAccuracy_);
      setResponseTime (responseTime_);
      setVelocityRequest (velocityRequest_);
      setResponseTimeNB_r14 (responseTimeNB_r14_);
      setHorizontalAccuracyExt_r15 (horizontalAccuracyExt_r15_);
      setVerticalAccuracyExt_r15 (verticalAccuracyExt_r15_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public QoS (
      Asn1Boolean verticalCoordinateRequest_,
      Asn1Boolean velocityRequest_
   ) {
      super();
      setVerticalCoordinateRequest (verticalCoordinateRequest_);
      setVelocityRequest (velocityRequest_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public QoS (HorizontalAccuracy horizontalAccuracy_,
      boolean verticalCoordinateRequest_,
      VerticalAccuracy verticalAccuracy_,
      ResponseTime responseTime_,
      boolean velocityRequest_,
      ResponseTimeNB_r14 responseTimeNB_r14_,
      HorizontalAccuracyExt_r15 horizontalAccuracyExt_r15_,
      VerticalAccuracyExt_r15 verticalAccuracyExt_r15_
   ) {
      super();
      setHorizontalAccuracy (horizontalAccuracy_);
      setVerticalCoordinateRequest (verticalCoordinateRequest_);
      setVerticalAccuracy (verticalAccuracy_);
      setResponseTime (responseTime_);
      setVelocityRequest (velocityRequest_);
      setResponseTimeNB_r14 (responseTimeNB_r14_);
      setHorizontalAccuracyExt_r15 (horizontalAccuracyExt_r15_);
      setVerticalAccuracyExt_r15 (verticalAccuracyExt_r15_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public QoS (
      boolean verticalCoordinateRequest_,
      boolean velocityRequest_
   ) {
      super();
      setVerticalCoordinateRequest (verticalCoordinateRequest_);
      setVelocityRequest (velocityRequest_);
   }

   public void init () {
      horizontalAccuracy = null;
      verticalCoordinateRequest = null;
      verticalAccuracy = null;
      responseTime = null;
      velocityRequest = null;
      responseTimeNB_r14 = null;
      horizontalAccuracyExt_r15 = null;
      verticalAccuracyExt_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof QoS) ) return false;

      QoS rhs = (QoS) obj;

      if (horizontalAccuracy == null) {
         if (rhs.horizontalAccuracy != null) return false;
      }
      else {
         if (!horizontalAccuracy.equals(rhs.horizontalAccuracy)) {
            return false;
         }
      }

      if (verticalCoordinateRequest == null) {
         if (rhs.verticalCoordinateRequest != null) return false;
      }
      else {
         if (!verticalCoordinateRequest.equals(rhs.verticalCoordinateRequest)) {
            return false;
         }
      }

      if (verticalAccuracy == null) {
         if (rhs.verticalAccuracy != null) return false;
      }
      else {
         if (!verticalAccuracy.equals(rhs.verticalAccuracy)) {
            return false;
         }
      }

      if (responseTime == null) {
         if (rhs.responseTime != null) return false;
      }
      else {
         if (!responseTime.equals(rhs.responseTime)) {
            return false;
         }
      }

      if (velocityRequest == null) {
         if (rhs.velocityRequest != null) return false;
      }
      else {
         if (!velocityRequest.equals(rhs.velocityRequest)) {
            return false;
         }
      }

      if (responseTimeNB_r14 == null) {
         if (rhs.responseTimeNB_r14 != null) return false;
      }
      else {
         if (!responseTimeNB_r14.equals(rhs.responseTimeNB_r14)) {
            return false;
         }
      }

      if (horizontalAccuracyExt_r15 == null) {
         if (rhs.horizontalAccuracyExt_r15 != null) return false;
      }
      else {
         if (!horizontalAccuracyExt_r15.equals(rhs.horizontalAccuracyExt_r15)) {
            return false;
         }
      }

      if (verticalAccuracyExt_r15 == null) {
         if (rhs.verticalAccuracyExt_r15 != null) return false;
      }
      else {
         if (!verticalAccuracyExt_r15.equals(rhs.verticalAccuracyExt_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (horizontalAccuracy != null) __code = 31*__code + horizontalAccuracy.hashCode();
      if (verticalCoordinateRequest != null) __code = 31*__code + verticalCoordinateRequest.hashCode();
      if (verticalAccuracy != null) __code = 31*__code + verticalAccuracy.hashCode();
      if (responseTime != null) __code = 31*__code + responseTime.hashCode();
      if (velocityRequest != null) __code = 31*__code + velocityRequest.hashCode();
      if (responseTimeNB_r14 != null) __code = 31*__code + responseTimeNB_r14.hashCode();
      if (horizontalAccuracyExt_r15 != null) __code = 31*__code + horizontalAccuracyExt_r15.hashCode();
      if (verticalAccuracyExt_r15 != null) __code = 31*__code + verticalAccuracyExt_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for HorizontalAccuracy
    */
   public HorizontalAccuracy getHorizontalAccuracy () {
      return horizontalAccuracy;
   }

   public void setHorizontalAccuracy (HorizontalAccuracy value) {
      this.horizontalAccuracy = value;
   }

   public boolean hasHorizontalAccuracy () {
      return (horizontalAccuracy != null);
   }

   /**
    * Accessor/mutator methods for VerticalCoordinateRequest
    */
   public Asn1Boolean getVerticalCoordinateRequest () {
      return verticalCoordinateRequest;
   }

   public void setVerticalCoordinateRequest (Asn1Boolean value) {
      this.verticalCoordinateRequest = value;
   }

   public void setVerticalCoordinateRequest (boolean value) {
      setVerticalCoordinateRequest (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for VerticalAccuracy
    */
   public VerticalAccuracy getVerticalAccuracy () {
      return verticalAccuracy;
   }

   public void setVerticalAccuracy (VerticalAccuracy value) {
      this.verticalAccuracy = value;
   }

   public boolean hasVerticalAccuracy () {
      return (verticalAccuracy != null);
   }

   /**
    * Accessor/mutator methods for ResponseTime
    */
   public ResponseTime getResponseTime () {
      return responseTime;
   }

   public void setResponseTime (ResponseTime value) {
      this.responseTime = value;
   }

   public boolean hasResponseTime () {
      return (responseTime != null);
   }

   /**
    * Accessor/mutator methods for VelocityRequest
    */
   public Asn1Boolean getVelocityRequest () {
      return velocityRequest;
   }

   public void setVelocityRequest (Asn1Boolean value) {
      this.velocityRequest = value;
   }

   public void setVelocityRequest (boolean value) {
      setVelocityRequest (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for ResponseTimeNB_r14
    */
   public ResponseTimeNB_r14 getResponseTimeNB_r14 () {
      return responseTimeNB_r14;
   }

   public void setResponseTimeNB_r14 (ResponseTimeNB_r14 value) {
      this.responseTimeNB_r14 = value;
   }

   public boolean hasResponseTimeNB_r14 () {
      return (responseTimeNB_r14 != null);
   }

   /**
    * Accessor/mutator methods for HorizontalAccuracyExt_r15
    */
   public HorizontalAccuracyExt_r15 getHorizontalAccuracyExt_r15 () {
      return horizontalAccuracyExt_r15;
   }

   public void setHorizontalAccuracyExt_r15 (HorizontalAccuracyExt_r15 value) {
      this.horizontalAccuracyExt_r15 = value;
   }

   public boolean hasHorizontalAccuracyExt_r15 () {
      return (horizontalAccuracyExt_r15 != null);
   }

   /**
    * Accessor/mutator methods for VerticalAccuracyExt_r15
    */
   public VerticalAccuracyExt_r15 getVerticalAccuracyExt_r15 () {
      return verticalAccuracyExt_r15;
   }

   public void setVerticalAccuracyExt_r15 (VerticalAccuracyExt_r15 value) {
      this.verticalAccuracyExt_r15 = value;
   }

   public boolean hasVerticalAccuracyExt_r15 () {
      return (verticalAccuracyExt_r15 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return horizontalAccuracy;
         case 1: return verticalCoordinateRequest;
         case 2: return verticalAccuracy;
         case 3: return responseTime;
         case 4: return velocityRequest;
         case 5: return responseTimeNB_r14;
         case 6: return horizontalAccuracyExt_r15;
         case 7: return verticalAccuracyExt_r15;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "horizontalAccuracy";
         case 1: return "verticalCoordinateRequest";
         case 2: return "verticalAccuracy";
         case 3: return "responseTime";
         case 4: return "velocityRequest";
         case 5: return "responseTimeNB-r14";
         case 6: return "horizontalAccuracyExt-r15";
         case 7: return "verticalAccuracyExt-r15";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean horizontalAccuracyPresent = buffer.decodeBit ("horizontalAccuracyPresent");
      boolean verticalAccuracyPresent = buffer.decodeBit ("verticalAccuracyPresent");
      boolean responseTimePresent = buffer.decodeBit ("responseTimePresent");

      // decode horizontalAccuracy

      if (horizontalAccuracyPresent) {
         buffer.getContext().eventDispatcher.startElement("horizontalAccuracy", -1);

         horizontalAccuracy = new HorizontalAccuracy();
         horizontalAccuracy.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("horizontalAccuracy", -1);
      }
      else {
         horizontalAccuracy = null;
      }

      // decode verticalCoordinateRequest

      buffer.getContext().eventDispatcher.startElement("verticalCoordinateRequest", -1);

      verticalCoordinateRequest = new Asn1Boolean();
      verticalCoordinateRequest.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("verticalCoordinateRequest", -1);

      // decode verticalAccuracy

      if (verticalAccuracyPresent) {
         buffer.getContext().eventDispatcher.startElement("verticalAccuracy", -1);

         verticalAccuracy = new VerticalAccuracy();
         verticalAccuracy.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("verticalAccuracy", -1);
      }
      else {
         verticalAccuracy = null;
      }

      // decode responseTime

      if (responseTimePresent) {
         buffer.getContext().eventDispatcher.startElement("responseTime", -1);

         responseTime = new ResponseTime();
         responseTime.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("responseTime", -1);
      }
      else {
         responseTime = null;
      }

      // decode velocityRequest

      buffer.getContext().eventDispatcher.startElement("velocityRequest", -1);

      velocityRequest = new Asn1Boolean();
      velocityRequest.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("velocityRequest", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("responseTimeNB_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("horizontalAccuracyExt_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("verticalAccuracyExt_r15Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode responseTimeNB_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("responseTimeNB_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            responseTimeNB_r14 = new ResponseTimeNB_r14();
            responseTimeNB_r14.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("responseTimeNB_r14", -1);

         }
         else {
            responseTimeNB_r14 = null;
         }

         // decode horizontalAccuracyExt_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("horizontalAccuracyExt_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            horizontalAccuracyExt_r15 = new HorizontalAccuracyExt_r15();
            horizontalAccuracyExt_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("horizontalAccuracyExt_r15", -1);

         }
         else {
            horizontalAccuracyExt_r15 = null;
         }

         // decode verticalAccuracyExt_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("verticalAccuracyExt_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            verticalAccuracyExt_r15 = new VerticalAccuracyExt_r15();
            verticalAccuracyExt_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("verticalAccuracyExt_r15", -1);

         }
         else {
            verticalAccuracyExt_r15 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((responseTimeNB_r14 != null) ||
      (horizontalAccuracyExt_r15 != null) ||
      (verticalAccuracyExt_r15 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((horizontalAccuracy != null), null);
      buffer.encodeBit ((verticalAccuracy != null), null);
      buffer.encodeBit ((responseTime != null), null);

      // encode horizontalAccuracy

      if (horizontalAccuracy != null) {
         buffer.getContext().eventDispatcher.startElement("horizontalAccuracy", -1);

         horizontalAccuracy.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("horizontalAccuracy", -1);
      }

      // encode verticalCoordinateRequest

      if (verticalCoordinateRequest != null) {
         buffer.getContext().eventDispatcher.startElement("verticalCoordinateRequest", -1);

         verticalCoordinateRequest.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("verticalCoordinateRequest", -1);
      }
      else throw new Asn1MissingRequiredException ("verticalCoordinateRequest");

      // encode verticalAccuracy

      if (verticalAccuracy != null) {
         buffer.getContext().eventDispatcher.startElement("verticalAccuracy", -1);

         verticalAccuracy.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("verticalAccuracy", -1);
      }

      // encode responseTime

      if (responseTime != null) {
         buffer.getContext().eventDispatcher.startElement("responseTime", -1);

         responseTime.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("responseTime", -1);
      }

      // encode velocityRequest

      if (velocityRequest != null) {
         buffer.getContext().eventDispatcher.startElement("velocityRequest", -1);

         velocityRequest.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("velocityRequest", -1);
      }
      else throw new Asn1MissingRequiredException ("velocityRequest");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 3;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((responseTimeNB_r14 != null), null);
         buffer.encodeBit ((horizontalAccuracyExt_r15 != null), null);
         buffer.encodeBit ((verticalAccuracyExt_r15 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // responseTimeNB_r14

         if (responseTimeNB_r14 != null) {
            buffer.reset();
            responseTimeNB_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("responseTimeNB_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("responseTimeNB_r14", -1);
         }

         // horizontalAccuracyExt_r15

         if (horizontalAccuracyExt_r15 != null) {
            buffer.reset();
            horizontalAccuracyExt_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("horizontalAccuracyExt_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("horizontalAccuracyExt_r15", -1);
         }

         // verticalAccuracyExt_r15

         if (verticalAccuracyExt_r15 != null) {
            buffer.reset();
            verticalAccuracyExt_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("verticalAccuracyExt_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("verticalAccuracyExt_r15", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
