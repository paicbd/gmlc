/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NavModel_SBAS_ECEF extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "NavModel-SBAS-ECEF";
   }

   protected Asn1Integer sbasTo;  // optional
   protected Asn1BitString sbasAccuracy;
   protected Asn1Integer sbasXg;
   protected Asn1Integer sbasYg;
   protected Asn1Integer sbasZg;
   protected Asn1Integer sbasXgDot;
   protected Asn1Integer sbasYgDot;
   protected Asn1Integer sbasZgDot;
   protected Asn1Integer sbasXgDotDot;
   protected Asn1Integer sbagYgDotDot;
   protected Asn1Integer sbasZgDotDot;
   protected Asn1OpenExt extElem1;

   public NavModel_SBAS_ECEF () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NavModel_SBAS_ECEF (
      Asn1Integer sbasTo_,
      Asn1BitString sbasAccuracy_,
      Asn1Integer sbasXg_,
      Asn1Integer sbasYg_,
      Asn1Integer sbasZg_,
      Asn1Integer sbasXgDot_,
      Asn1Integer sbasYgDot_,
      Asn1Integer sbasZgDot_,
      Asn1Integer sbasXgDotDot_,
      Asn1Integer sbagYgDotDot_,
      Asn1Integer sbasZgDotDot_
   ) throws Asn1Exception {
      super();
      setSbasTo (sbasTo_);
      setSbasAccuracy (sbasAccuracy_);
      setSbasXg (sbasXg_);
      setSbasYg (sbasYg_);
      setSbasZg (sbasZg_);
      setSbasXgDot (sbasXgDot_);
      setSbasYgDot (sbasYgDot_);
      setSbasZgDot (sbasZgDot_);
      setSbasXgDotDot (sbasXgDotDot_);
      setSbagYgDotDot (sbagYgDotDot_);
      setSbasZgDotDot (sbasZgDotDot_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public NavModel_SBAS_ECEF (
      Asn1BitString sbasAccuracy_,
      Asn1Integer sbasXg_,
      Asn1Integer sbasYg_,
      Asn1Integer sbasZg_,
      Asn1Integer sbasXgDot_,
      Asn1Integer sbasYgDot_,
      Asn1Integer sbasZgDot_,
      Asn1Integer sbasXgDotDot_,
      Asn1Integer sbagYgDotDot_,
      Asn1Integer sbasZgDotDot_
   ) throws Asn1Exception {
      super();
      setSbasAccuracy (sbasAccuracy_);
      setSbasXg (sbasXg_);
      setSbasYg (sbasYg_);
      setSbasZg (sbasZg_);
      setSbasXgDot (sbasXgDot_);
      setSbasYgDot (sbasYgDot_);
      setSbasZgDot (sbasZgDot_);
      setSbasXgDotDot (sbasXgDotDot_);
      setSbagYgDotDot (sbagYgDotDot_);
      setSbasZgDotDot (sbasZgDotDot_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NavModel_SBAS_ECEF (long sbasTo_,
      Asn1BitString sbasAccuracy_,
      long sbasXg_,
      long sbasYg_,
      long sbasZg_,
      long sbasXgDot_,
      long sbasYgDot_,
      long sbasZgDot_,
      long sbasXgDotDot_,
      long sbagYgDotDot_,
      long sbasZgDotDot_
   ) throws Asn1Exception {
      super();
      setSbasTo (sbasTo_);
      setSbasAccuracy (sbasAccuracy_);
      setSbasXg (sbasXg_);
      setSbasYg (sbasYg_);
      setSbasZg (sbasZg_);
      setSbasXgDot (sbasXgDot_);
      setSbasYgDot (sbasYgDot_);
      setSbasZgDot (sbasZgDot_);
      setSbasXgDotDot (sbasXgDotDot_);
      setSbagYgDotDot (sbagYgDotDot_);
      setSbasZgDotDot (sbasZgDotDot_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public NavModel_SBAS_ECEF (
      Asn1BitString sbasAccuracy_,
      long sbasXg_,
      long sbasYg_,
      long sbasZg_,
      long sbasXgDot_,
      long sbasYgDot_,
      long sbasZgDot_,
      long sbasXgDotDot_,
      long sbagYgDotDot_,
      long sbasZgDotDot_
   ) throws Asn1Exception {
      super();
      setSbasAccuracy (sbasAccuracy_);
      setSbasXg (sbasXg_);
      setSbasYg (sbasYg_);
      setSbasZg (sbasZg_);
      setSbasXgDot (sbasXgDot_);
      setSbasYgDot (sbasYgDot_);
      setSbasZgDot (sbasZgDot_);
      setSbasXgDotDot (sbasXgDotDot_);
      setSbagYgDotDot (sbagYgDotDot_);
      setSbasZgDotDot (sbasZgDotDot_);
   }

   public void init () {
      sbasTo = null;
      sbasAccuracy = null;
      sbasXg = null;
      sbasYg = null;
      sbasZg = null;
      sbasXgDot = null;
      sbasYgDot = null;
      sbasZgDot = null;
      sbasXgDotDot = null;
      sbagYgDotDot = null;
      sbasZgDotDot = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof NavModel_SBAS_ECEF) ) return false;

      NavModel_SBAS_ECEF rhs = (NavModel_SBAS_ECEF) obj;

      if (sbasTo == null) {
         if (rhs.sbasTo != null) return false;
      }
      else {
         if (!sbasTo.equals(rhs.sbasTo)) {
            return false;
         }
      }

      if (sbasAccuracy == null) {
         if (rhs.sbasAccuracy != null) return false;
      }
      else {
         if (!sbasAccuracy.equals(rhs.sbasAccuracy)) {
            return false;
         }
      }

      if (sbasXg == null) {
         if (rhs.sbasXg != null) return false;
      }
      else {
         if (!sbasXg.equals(rhs.sbasXg)) {
            return false;
         }
      }

      if (sbasYg == null) {
         if (rhs.sbasYg != null) return false;
      }
      else {
         if (!sbasYg.equals(rhs.sbasYg)) {
            return false;
         }
      }

      if (sbasZg == null) {
         if (rhs.sbasZg != null) return false;
      }
      else {
         if (!sbasZg.equals(rhs.sbasZg)) {
            return false;
         }
      }

      if (sbasXgDot == null) {
         if (rhs.sbasXgDot != null) return false;
      }
      else {
         if (!sbasXgDot.equals(rhs.sbasXgDot)) {
            return false;
         }
      }

      if (sbasYgDot == null) {
         if (rhs.sbasYgDot != null) return false;
      }
      else {
         if (!sbasYgDot.equals(rhs.sbasYgDot)) {
            return false;
         }
      }

      if (sbasZgDot == null) {
         if (rhs.sbasZgDot != null) return false;
      }
      else {
         if (!sbasZgDot.equals(rhs.sbasZgDot)) {
            return false;
         }
      }

      if (sbasXgDotDot == null) {
         if (rhs.sbasXgDotDot != null) return false;
      }
      else {
         if (!sbasXgDotDot.equals(rhs.sbasXgDotDot)) {
            return false;
         }
      }

      if (sbagYgDotDot == null) {
         if (rhs.sbagYgDotDot != null) return false;
      }
      else {
         if (!sbagYgDotDot.equals(rhs.sbagYgDotDot)) {
            return false;
         }
      }

      if (sbasZgDotDot == null) {
         if (rhs.sbasZgDotDot != null) return false;
      }
      else {
         if (!sbasZgDotDot.equals(rhs.sbasZgDotDot)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (sbasTo != null) __code = 31*__code + sbasTo.hashCode();
      if (sbasAccuracy != null) __code = 31*__code + sbasAccuracy.hashCode();
      if (sbasXg != null) __code = 31*__code + sbasXg.hashCode();
      if (sbasYg != null) __code = 31*__code + sbasYg.hashCode();
      if (sbasZg != null) __code = 31*__code + sbasZg.hashCode();
      if (sbasXgDot != null) __code = 31*__code + sbasXgDot.hashCode();
      if (sbasYgDot != null) __code = 31*__code + sbasYgDot.hashCode();
      if (sbasZgDot != null) __code = 31*__code + sbasZgDot.hashCode();
      if (sbasXgDotDot != null) __code = 31*__code + sbasXgDotDot.hashCode();
      if (sbagYgDotDot != null) __code = 31*__code + sbagYgDotDot.hashCode();
      if (sbasZgDotDot != null) __code = 31*__code + sbasZgDotDot.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SbasTo
    */
   public Asn1Integer getSbasTo () {
      return sbasTo;
   }

   public void setSbasTo (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 5399))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sbasTo = value;
   }

   public void setSbasTo (long value) 
      throws Asn1Exception
   {
      setSbasTo (new Asn1Integer(value));
   }
   public boolean hasSbasTo () {
      return (sbasTo != null);
   }

   /**
    * Accessor/mutator methods for SbasAccuracy
    */
   public Asn1BitString getSbasAccuracy () {
      return sbasAccuracy;
   }

   public void setSbasAccuracy (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 4)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.sbasAccuracy = value;
   }

   /**
    * Accessor/mutator methods for SbasXg
    */
   public Asn1Integer getSbasXg () {
      return sbasXg;
   }

   public void setSbasXg (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -536870912 && value.value <= 536870911))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sbasXg = value;
   }

   public void setSbasXg (long value) 
      throws Asn1Exception
   {
      setSbasXg (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SbasYg
    */
   public Asn1Integer getSbasYg () {
      return sbasYg;
   }

   public void setSbasYg (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -536870912 && value.value <= 536870911))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sbasYg = value;
   }

   public void setSbasYg (long value) 
      throws Asn1Exception
   {
      setSbasYg (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SbasZg
    */
   public Asn1Integer getSbasZg () {
      return sbasZg;
   }

   public void setSbasZg (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -16777216 && value.value <= 16777215))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sbasZg = value;
   }

   public void setSbasZg (long value) 
      throws Asn1Exception
   {
      setSbasZg (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SbasXgDot
    */
   public Asn1Integer getSbasXgDot () {
      return sbasXgDot;
   }

   public void setSbasXgDot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -65536 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sbasXgDot = value;
   }

   public void setSbasXgDot (long value) 
      throws Asn1Exception
   {
      setSbasXgDot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SbasYgDot
    */
   public Asn1Integer getSbasYgDot () {
      return sbasYgDot;
   }

   public void setSbasYgDot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -65536 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sbasYgDot = value;
   }

   public void setSbasYgDot (long value) 
      throws Asn1Exception
   {
      setSbasYgDot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SbasZgDot
    */
   public Asn1Integer getSbasZgDot () {
      return sbasZgDot;
   }

   public void setSbasZgDot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -131072 && value.value <= 131071))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sbasZgDot = value;
   }

   public void setSbasZgDot (long value) 
      throws Asn1Exception
   {
      setSbasZgDot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SbasXgDotDot
    */
   public Asn1Integer getSbasXgDotDot () {
      return sbasXgDotDot;
   }

   public void setSbasXgDotDot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -512 && value.value <= 511))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sbasXgDotDot = value;
   }

   public void setSbasXgDotDot (long value) 
      throws Asn1Exception
   {
      setSbasXgDotDot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SbagYgDotDot
    */
   public Asn1Integer getSbagYgDotDot () {
      return sbagYgDotDot;
   }

   public void setSbagYgDotDot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -512 && value.value <= 511))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sbagYgDotDot = value;
   }

   public void setSbagYgDotDot (long value) 
      throws Asn1Exception
   {
      setSbagYgDotDot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SbasZgDotDot
    */
   public Asn1Integer getSbasZgDotDot () {
      return sbasZgDotDot;
   }

   public void setSbasZgDotDot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -512 && value.value <= 511))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sbasZgDotDot = value;
   }

   public void setSbasZgDotDot (long value) 
      throws Asn1Exception
   {
      setSbasZgDotDot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 12; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sbasTo;
         case 1: return sbasAccuracy;
         case 2: return sbasXg;
         case 3: return sbasYg;
         case 4: return sbasZg;
         case 5: return sbasXgDot;
         case 6: return sbasYgDot;
         case 7: return sbasZgDot;
         case 8: return sbasXgDotDot;
         case 9: return sbagYgDotDot;
         case 10: return sbasZgDotDot;
         case 11: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sbasTo";
         case 1: return "sbasAccuracy";
         case 2: return "sbasXg";
         case 3: return "sbasYg";
         case 4: return "sbasZg";
         case 5: return "sbasXgDot";
         case 6: return "sbasYgDot";
         case 7: return "sbasZgDot";
         case 8: return "sbasXgDotDot";
         case 9: return "sbagYgDotDot";
         case 10: return "sbasZgDotDot";
         case 11: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean sbasToPresent = buffer.decodeBit ("sbasToPresent");

      // decode sbasTo

      if (sbasToPresent) {
         buffer.getContext().eventDispatcher.startElement("sbasTo", -1);

         sbasTo = new Asn1Integer();
         sbasTo.decode (buffer, 0, 5399);
         buffer.getContext().eventDispatcher.endElement("sbasTo", -1);
      }
      else {
         sbasTo = null;
      }

      // decode sbasAccuracy

      buffer.getContext().eventDispatcher.startElement("sbasAccuracy", -1);

      sbasAccuracy = new Asn1BitString();
      sbasAccuracy.decode (buffer, 4, 4);
      buffer.getContext().eventDispatcher.endElement("sbasAccuracy", -1);

      // decode sbasXg

      buffer.getContext().eventDispatcher.startElement("sbasXg", -1);

      sbasXg = new Asn1Integer();
      sbasXg.decode (buffer, -536870912, 536870911);
      buffer.getContext().eventDispatcher.endElement("sbasXg", -1);

      // decode sbasYg

      buffer.getContext().eventDispatcher.startElement("sbasYg", -1);

      sbasYg = new Asn1Integer();
      sbasYg.decode (buffer, -536870912, 536870911);
      buffer.getContext().eventDispatcher.endElement("sbasYg", -1);

      // decode sbasZg

      buffer.getContext().eventDispatcher.startElement("sbasZg", -1);

      sbasZg = new Asn1Integer();
      sbasZg.decode (buffer, -16777216, 16777215);
      buffer.getContext().eventDispatcher.endElement("sbasZg", -1);

      // decode sbasXgDot

      buffer.getContext().eventDispatcher.startElement("sbasXgDot", -1);

      sbasXgDot = new Asn1Integer();
      sbasXgDot.decode (buffer, -65536, 65535);
      buffer.getContext().eventDispatcher.endElement("sbasXgDot", -1);

      // decode sbasYgDot

      buffer.getContext().eventDispatcher.startElement("sbasYgDot", -1);

      sbasYgDot = new Asn1Integer();
      sbasYgDot.decode (buffer, -65536, 65535);
      buffer.getContext().eventDispatcher.endElement("sbasYgDot", -1);

      // decode sbasZgDot

      buffer.getContext().eventDispatcher.startElement("sbasZgDot", -1);

      sbasZgDot = new Asn1Integer();
      sbasZgDot.decode (buffer, -131072, 131071);
      buffer.getContext().eventDispatcher.endElement("sbasZgDot", -1);

      // decode sbasXgDotDot

      buffer.getContext().eventDispatcher.startElement("sbasXgDotDot", -1);

      sbasXgDotDot = new Asn1Integer();
      sbasXgDotDot.decode (buffer, -512, 511);
      buffer.getContext().eventDispatcher.endElement("sbasXgDotDot", -1);

      // decode sbagYgDotDot

      buffer.getContext().eventDispatcher.startElement("sbagYgDotDot", -1);

      sbagYgDotDot = new Asn1Integer();
      sbagYgDotDot.decode (buffer, -512, 511);
      buffer.getContext().eventDispatcher.endElement("sbagYgDotDot", -1);

      // decode sbasZgDotDot

      buffer.getContext().eventDispatcher.startElement("sbasZgDotDot", -1);

      sbasZgDotDot = new Asn1Integer();
      sbasZgDotDot.decode (buffer, -512, 511);
      buffer.getContext().eventDispatcher.endElement("sbasZgDotDot", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((sbasTo != null), null);

      // encode sbasTo

      if (sbasTo != null) {
         buffer.getContext().eventDispatcher.startElement("sbasTo", -1);

         sbasTo.encode (buffer, 0, 5399);

         buffer.getContext().eventDispatcher.endElement("sbasTo", -1);
      }

      // encode sbasAccuracy

      if (sbasAccuracy != null) {
         buffer.getContext().eventDispatcher.startElement("sbasAccuracy", -1);

         sbasAccuracy.encode (buffer, 4, 4);

         buffer.getContext().eventDispatcher.endElement("sbasAccuracy", -1);
      }
      else throw new Asn1MissingRequiredException ("sbasAccuracy");

      // encode sbasXg

      if (sbasXg != null) {
         buffer.getContext().eventDispatcher.startElement("sbasXg", -1);

         sbasXg.encode (buffer, -536870912, 536870911);

         buffer.getContext().eventDispatcher.endElement("sbasXg", -1);
      }
      else throw new Asn1MissingRequiredException ("sbasXg");

      // encode sbasYg

      if (sbasYg != null) {
         buffer.getContext().eventDispatcher.startElement("sbasYg", -1);

         sbasYg.encode (buffer, -536870912, 536870911);

         buffer.getContext().eventDispatcher.endElement("sbasYg", -1);
      }
      else throw new Asn1MissingRequiredException ("sbasYg");

      // encode sbasZg

      if (sbasZg != null) {
         buffer.getContext().eventDispatcher.startElement("sbasZg", -1);

         sbasZg.encode (buffer, -16777216, 16777215);

         buffer.getContext().eventDispatcher.endElement("sbasZg", -1);
      }
      else throw new Asn1MissingRequiredException ("sbasZg");

      // encode sbasXgDot

      if (sbasXgDot != null) {
         buffer.getContext().eventDispatcher.startElement("sbasXgDot", -1);

         sbasXgDot.encode (buffer, -65536, 65535);

         buffer.getContext().eventDispatcher.endElement("sbasXgDot", -1);
      }
      else throw new Asn1MissingRequiredException ("sbasXgDot");

      // encode sbasYgDot

      if (sbasYgDot != null) {
         buffer.getContext().eventDispatcher.startElement("sbasYgDot", -1);

         sbasYgDot.encode (buffer, -65536, 65535);

         buffer.getContext().eventDispatcher.endElement("sbasYgDot", -1);
      }
      else throw new Asn1MissingRequiredException ("sbasYgDot");

      // encode sbasZgDot

      if (sbasZgDot != null) {
         buffer.getContext().eventDispatcher.startElement("sbasZgDot", -1);

         sbasZgDot.encode (buffer, -131072, 131071);

         buffer.getContext().eventDispatcher.endElement("sbasZgDot", -1);
      }
      else throw new Asn1MissingRequiredException ("sbasZgDot");

      // encode sbasXgDotDot

      if (sbasXgDotDot != null) {
         buffer.getContext().eventDispatcher.startElement("sbasXgDotDot", -1);

         sbasXgDotDot.encode (buffer, -512, 511);

         buffer.getContext().eventDispatcher.endElement("sbasXgDotDot", -1);
      }
      else throw new Asn1MissingRequiredException ("sbasXgDotDot");

      // encode sbagYgDotDot

      if (sbagYgDotDot != null) {
         buffer.getContext().eventDispatcher.startElement("sbagYgDotDot", -1);

         sbagYgDotDot.encode (buffer, -512, 511);

         buffer.getContext().eventDispatcher.endElement("sbagYgDotDot", -1);
      }
      else throw new Asn1MissingRequiredException ("sbagYgDotDot");

      // encode sbasZgDotDot

      if (sbasZgDotDot != null) {
         buffer.getContext().eventDispatcher.startElement("sbasZgDotDot", -1);

         sbasZgDotDot.encode (buffer, -512, 511);

         buffer.getContext().eventDispatcher.endElement("sbasZgDotDot", -1);
      }
      else throw new Asn1MissingRequiredException ("sbasZgDotDot");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
