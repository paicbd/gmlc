/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_SSR_GriddedCorrection_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-SSR-GriddedCorrection-r16";
   }

   protected GNSS_SystemTime epochTime_r16;
   protected Asn1Integer ssrUpdateInterval_r16;
   protected Asn1Integer iod_ssr_r16;
   protected Asn1BitString troposphericDelayQualityIndicator_r16;  // optional
   protected Asn1Integer correctionPointSetID_r16;
   protected GridList_r16 gridList_r16;
   protected Asn1OpenExt extElem1;

   public GNSS_SSR_GriddedCorrection_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_SSR_GriddedCorrection_r16 (
      GNSS_SystemTime epochTime_r16_,
      Asn1Integer ssrUpdateInterval_r16_,
      Asn1Integer iod_ssr_r16_,
      Asn1BitString troposphericDelayQualityIndicator_r16_,
      Asn1Integer correctionPointSetID_r16_,
      GridList_r16 gridList_r16_
   ) throws Asn1Exception {
      super();
      setEpochTime_r16 (epochTime_r16_);
      setSsrUpdateInterval_r16 (ssrUpdateInterval_r16_);
      setIod_ssr_r16 (iod_ssr_r16_);
      setTroposphericDelayQualityIndicator_r16 (troposphericDelayQualityIndicator_r16_);
      setCorrectionPointSetID_r16 (correctionPointSetID_r16_);
      setGridList_r16 (gridList_r16_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GNSS_SSR_GriddedCorrection_r16 (
      GNSS_SystemTime epochTime_r16_,
      Asn1Integer ssrUpdateInterval_r16_,
      Asn1Integer iod_ssr_r16_,
      Asn1Integer correctionPointSetID_r16_,
      GridList_r16 gridList_r16_
   ) throws Asn1Exception {
      super();
      setEpochTime_r16 (epochTime_r16_);
      setSsrUpdateInterval_r16 (ssrUpdateInterval_r16_);
      setIod_ssr_r16 (iod_ssr_r16_);
      setCorrectionPointSetID_r16 (correctionPointSetID_r16_);
      setGridList_r16 (gridList_r16_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GNSS_SSR_GriddedCorrection_r16 (GNSS_SystemTime epochTime_r16_,
      long ssrUpdateInterval_r16_,
      long iod_ssr_r16_,
      Asn1BitString troposphericDelayQualityIndicator_r16_,
      long correctionPointSetID_r16_,
      GridList_r16 gridList_r16_
   ) throws Asn1Exception {
      super();
      setEpochTime_r16 (epochTime_r16_);
      setSsrUpdateInterval_r16 (ssrUpdateInterval_r16_);
      setIod_ssr_r16 (iod_ssr_r16_);
      setTroposphericDelayQualityIndicator_r16 (troposphericDelayQualityIndicator_r16_);
      setCorrectionPointSetID_r16 (correctionPointSetID_r16_);
      setGridList_r16 (gridList_r16_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public GNSS_SSR_GriddedCorrection_r16 (
      GNSS_SystemTime epochTime_r16_,
      long ssrUpdateInterval_r16_,
      long iod_ssr_r16_,
      long correctionPointSetID_r16_,
      GridList_r16 gridList_r16_
   ) throws Asn1Exception {
      super();
      setEpochTime_r16 (epochTime_r16_);
      setSsrUpdateInterval_r16 (ssrUpdateInterval_r16_);
      setIod_ssr_r16 (iod_ssr_r16_);
      setCorrectionPointSetID_r16 (correctionPointSetID_r16_);
      setGridList_r16 (gridList_r16_);
   }

   public void init () {
      epochTime_r16 = null;
      ssrUpdateInterval_r16 = null;
      iod_ssr_r16 = null;
      troposphericDelayQualityIndicator_r16 = null;
      correctionPointSetID_r16 = null;
      gridList_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_SSR_GriddedCorrection_r16) ) return false;

      GNSS_SSR_GriddedCorrection_r16 rhs = (GNSS_SSR_GriddedCorrection_r16) obj;

      if (epochTime_r16 == null) {
         if (rhs.epochTime_r16 != null) return false;
      }
      else {
         if (!epochTime_r16.equals(rhs.epochTime_r16)) {
            return false;
         }
      }

      if (ssrUpdateInterval_r16 == null) {
         if (rhs.ssrUpdateInterval_r16 != null) return false;
      }
      else {
         if (!ssrUpdateInterval_r16.equals(rhs.ssrUpdateInterval_r16)) {
            return false;
         }
      }

      if (iod_ssr_r16 == null) {
         if (rhs.iod_ssr_r16 != null) return false;
      }
      else {
         if (!iod_ssr_r16.equals(rhs.iod_ssr_r16)) {
            return false;
         }
      }

      if (troposphericDelayQualityIndicator_r16 == null) {
         if (rhs.troposphericDelayQualityIndicator_r16 != null) return false;
      }
      else {
         if (!troposphericDelayQualityIndicator_r16.equals(rhs.troposphericDelayQualityIndicator_r16)) {
            return false;
         }
      }

      if (correctionPointSetID_r16 == null) {
         if (rhs.correctionPointSetID_r16 != null) return false;
      }
      else {
         if (!correctionPointSetID_r16.equals(rhs.correctionPointSetID_r16)) {
            return false;
         }
      }

      if (gridList_r16 == null) {
         if (rhs.gridList_r16 != null) return false;
      }
      else {
         if (!gridList_r16.equals(rhs.gridList_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (epochTime_r16 != null) __code = 31*__code + epochTime_r16.hashCode();
      if (ssrUpdateInterval_r16 != null) __code = 31*__code + ssrUpdateInterval_r16.hashCode();
      if (iod_ssr_r16 != null) __code = 31*__code + iod_ssr_r16.hashCode();
      if (troposphericDelayQualityIndicator_r16 != null) __code = 31*__code + troposphericDelayQualityIndicator_r16.hashCode();
      if (correctionPointSetID_r16 != null) __code = 31*__code + correctionPointSetID_r16.hashCode();
      if (gridList_r16 != null) __code = 31*__code + gridList_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for EpochTime_r16
    */
   public GNSS_SystemTime getEpochTime_r16 () {
      return epochTime_r16;
   }

   public void setEpochTime_r16 (GNSS_SystemTime value) {
      this.epochTime_r16 = value;
   }

   /**
    * Accessor/mutator methods for SsrUpdateInterval_r16
    */
   public Asn1Integer getSsrUpdateInterval_r16 () {
      return ssrUpdateInterval_r16;
   }

   public void setSsrUpdateInterval_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.ssrUpdateInterval_r16 = value;
   }

   public void setSsrUpdateInterval_r16 (long value) 
      throws Asn1Exception
   {
      setSsrUpdateInterval_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Iod_ssr_r16
    */
   public Asn1Integer getIod_ssr_r16 () {
      return iod_ssr_r16;
   }

   public void setIod_ssr_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.iod_ssr_r16 = value;
   }

   public void setIod_ssr_r16 (long value) 
      throws Asn1Exception
   {
      setIod_ssr_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for TroposphericDelayQualityIndicator_r16
    */
   public Asn1BitString getTroposphericDelayQualityIndicator_r16 () {
      return troposphericDelayQualityIndicator_r16;
   }

   public void setTroposphericDelayQualityIndicator_r16 (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 6)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.troposphericDelayQualityIndicator_r16 = value;
   }

   public boolean hasTroposphericDelayQualityIndicator_r16 () {
      return (troposphericDelayQualityIndicator_r16 != null);
   }

   /**
    * Accessor/mutator methods for CorrectionPointSetID_r16
    */
   public Asn1Integer getCorrectionPointSetID_r16 () {
      return correctionPointSetID_r16;
   }

   public void setCorrectionPointSetID_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 16383))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.correctionPointSetID_r16 = value;
   }

   public void setCorrectionPointSetID_r16 (long value) 
      throws Asn1Exception
   {
      setCorrectionPointSetID_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GridList_r16
    */
   public GridList_r16 getGridList_r16 () {
      return gridList_r16;
   }

   public void setGridList_r16 (GridList_r16 value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 64))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.gridList_r16 = value;
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return epochTime_r16;
         case 1: return ssrUpdateInterval_r16;
         case 2: return iod_ssr_r16;
         case 3: return troposphericDelayQualityIndicator_r16;
         case 4: return correctionPointSetID_r16;
         case 5: return gridList_r16;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "epochTime-r16";
         case 1: return "ssrUpdateInterval-r16";
         case 2: return "iod-ssr-r16";
         case 3: return "troposphericDelayQualityIndicator-r16";
         case 4: return "correctionPointSetID-r16";
         case 5: return "gridList-r16";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean troposphericDelayQualityIndicator_r16Present = buffer.decodeBit ("troposphericDelayQualityIndicator_r16Present");

      // decode epochTime_r16

      buffer.getContext().eventDispatcher.startElement("epochTime_r16", -1);

      epochTime_r16 = new GNSS_SystemTime();
      epochTime_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("epochTime_r16", -1);

      // decode ssrUpdateInterval_r16

      buffer.getContext().eventDispatcher.startElement("ssrUpdateInterval_r16", -1);

      ssrUpdateInterval_r16 = new Asn1Integer();
      ssrUpdateInterval_r16.decode (buffer, 0, 15);
      buffer.getContext().eventDispatcher.endElement("ssrUpdateInterval_r16", -1);

      // decode iod_ssr_r16

      buffer.getContext().eventDispatcher.startElement("iod_ssr_r16", -1);

      iod_ssr_r16 = new Asn1Integer();
      iod_ssr_r16.decode (buffer, 0, 15);
      buffer.getContext().eventDispatcher.endElement("iod_ssr_r16", -1);

      // decode troposphericDelayQualityIndicator_r16

      if (troposphericDelayQualityIndicator_r16Present) {
         buffer.getContext().eventDispatcher.startElement("troposphericDelayQualityIndicator_r16", -1);

         troposphericDelayQualityIndicator_r16 = new Asn1BitString();
         troposphericDelayQualityIndicator_r16.decode (buffer, 6, 6);
         buffer.getContext().eventDispatcher.endElement("troposphericDelayQualityIndicator_r16", -1);
      }
      else {
         troposphericDelayQualityIndicator_r16 = null;
      }

      // decode correctionPointSetID_r16

      buffer.getContext().eventDispatcher.startElement("correctionPointSetID_r16", -1);

      correctionPointSetID_r16 = new Asn1Integer();
      correctionPointSetID_r16.decode (buffer, 0, 16383);
      buffer.getContext().eventDispatcher.endElement("correctionPointSetID_r16", -1);

      // decode gridList_r16

      buffer.getContext().eventDispatcher.startElement("gridList_r16", -1);

      gridList_r16 = new GridList_r16();
      gridList_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("gridList_r16", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((troposphericDelayQualityIndicator_r16 != null), null);

      // encode epochTime_r16

      if (epochTime_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("epochTime_r16", -1);

         epochTime_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("epochTime_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("epochTime_r16");

      // encode ssrUpdateInterval_r16

      if (ssrUpdateInterval_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("ssrUpdateInterval_r16", -1);

         ssrUpdateInterval_r16.encode (buffer, 0, 15);

         buffer.getContext().eventDispatcher.endElement("ssrUpdateInterval_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("ssrUpdateInterval_r16");

      // encode iod_ssr_r16

      if (iod_ssr_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("iod_ssr_r16", -1);

         iod_ssr_r16.encode (buffer, 0, 15);

         buffer.getContext().eventDispatcher.endElement("iod_ssr_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("iod_ssr_r16");

      // encode troposphericDelayQualityIndicator_r16

      if (troposphericDelayQualityIndicator_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("troposphericDelayQualityIndicator_r16", -1);

         troposphericDelayQualityIndicator_r16.encode (buffer, 6, 6);

         buffer.getContext().eventDispatcher.endElement("troposphericDelayQualityIndicator_r16", -1);
      }

      // encode correctionPointSetID_r16

      if (correctionPointSetID_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("correctionPointSetID_r16", -1);

         correctionPointSetID_r16.encode (buffer, 0, 16383);

         buffer.getContext().eventDispatcher.endElement("correctionPointSetID_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("correctionPointSetID_r16");

      // encode gridList_r16

      if (gridList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("gridList_r16", -1);

         gridList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gridList_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("gridList_r16");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
