/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NR_DL_PRS_Resource_r16_dl_PRS_CombSizeN_AndReOffset_r16 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _N2_R16 = 1;
   public final static byte _N4_R16 = 2;
   public final static byte _N6_R16 = 3;
   public final static byte _N12_R16 = 4;
   public final static byte _EXTELEM1 = 5;

   public NR_DL_PRS_Resource_r16_dl_PRS_CombSizeN_AndReOffset_r16 () {
      super();
   }

   public NR_DL_PRS_Resource_r16_dl_PRS_CombSizeN_AndReOffset_r16 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _N2_R16: return "n2_r16";
      case _N4_R16: return "n4_r16";
      case _N6_R16: return "n6_r16";
      case _N12_R16: return "n12_r16";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for n2_r16
    */
   public Asn1Integer getN2_r16 () {
      return (choiceID == _N2_R16) ? (Asn1Integer)element : null;
   }
   public void setN2_r16 (Asn1Integer value) {
      setElement (_N2_R16, value);
   }
   public boolean isN2_r16 () {
      return (choiceID == _N2_R16);
   }

   /**
    * Accessor/mutator methods for n4_r16
    */
   public Asn1Integer getN4_r16 () {
      return (choiceID == _N4_R16) ? (Asn1Integer)element : null;
   }
   public void setN4_r16 (Asn1Integer value) {
      setElement (_N4_R16, value);
   }
   public boolean isN4_r16 () {
      return (choiceID == _N4_R16);
   }

   /**
    * Accessor/mutator methods for n6_r16
    */
   public Asn1Integer getN6_r16 () {
      return (choiceID == _N6_R16) ? (Asn1Integer)element : null;
   }
   public void setN6_r16 (Asn1Integer value) {
      setElement (_N6_R16, value);
   }
   public boolean isN6_r16 () {
      return (choiceID == _N6_R16);
   }

   /**
    * Accessor/mutator methods for n12_r16
    */
   public Asn1Integer getN12_r16 () {
      return (choiceID == _N12_R16) ? (Asn1Integer)element : null;
   }
   public void setN12_r16 (Asn1Integer value) {
      setElement (_N12_R16, value);
   }
   public boolean isN12_r16 () {
      return (choiceID == _N12_R16);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (4, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // n2_r16
            case 0: { 
               Asn1Integer n2_r16;
               element = n2_r16 = new Asn1Integer();
               n2_r16.decode (buffer, 0, 1);
               break;
            }

            // n4_r16
            case 1: { 
               Asn1Integer n4_r16;
               element = n4_r16 = new Asn1Integer();
               n4_r16.decode (buffer, 0, 3);
               break;
            }

            // n6_r16
            case 2: { 
               Asn1Integer n6_r16;
               element = n6_r16 = new Asn1Integer();
               n6_r16.decode (buffer, 0, 5);
               break;
            }

            // n12_r16
            case 3: { 
               Asn1Integer n12_r16;
               element = n12_r16 = new Asn1Integer();
               n12_r16.decode (buffer, 0, 11);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 5;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         setElement (_EXTELEM1, openType);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 4);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 4, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // n2_r16
            case _N2_R16:
               Asn1Integer n2_r16 = (Asn1Integer) element;
               n2_r16.encode (buffer, 0, 1);
               break;

            // n4_r16
            case _N4_R16:
               Asn1Integer n4_r16 = (Asn1Integer) element;
               n4_r16.encode (buffer, 0, 3);
               break;

            // n6_r16
            case _N6_R16:
               Asn1Integer n6_r16 = (Asn1Integer) element;
               n6_r16.encode (buffer, 0, 5);
               break;

            // n12_r16
            case _N12_R16:
               Asn1Integer n12_r16 = (Asn1Integer) element;
               n12_r16.encode (buffer, 0, 11);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 5);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1OpenType openType = (Asn1OpenType) element;
         buffer.byteAlign();
         openType.encode (buffer);
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
