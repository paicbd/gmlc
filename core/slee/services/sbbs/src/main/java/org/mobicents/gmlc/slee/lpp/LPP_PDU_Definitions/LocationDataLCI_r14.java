/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class LocationDataLCI_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "LocationDataLCI-r14";
   }

   protected Asn1BitString latitudeUncertainty_r14;
   protected Asn1BitString latitude_r14;
   protected Asn1BitString longitudeUncertainty_r14;
   protected Asn1BitString longitude_r14;
   protected Asn1BitString altitudeUncertainty_r14;  // optional
   protected Asn1BitString altitude_r14;  // optional
   protected Asn1BitString datum_r14;
   protected Asn1OpenExt extElem1;

   public LocationDataLCI_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public LocationDataLCI_r14 (
      Asn1BitString latitudeUncertainty_r14_,
      Asn1BitString latitude_r14_,
      Asn1BitString longitudeUncertainty_r14_,
      Asn1BitString longitude_r14_,
      Asn1BitString altitudeUncertainty_r14_,
      Asn1BitString altitude_r14_,
      Asn1BitString datum_r14_
   ) throws Asn1Exception {
      super();
      setLatitudeUncertainty_r14 (latitudeUncertainty_r14_);
      setLatitude_r14 (latitude_r14_);
      setLongitudeUncertainty_r14 (longitudeUncertainty_r14_);
      setLongitude_r14 (longitude_r14_);
      setAltitudeUncertainty_r14 (altitudeUncertainty_r14_);
      setAltitude_r14 (altitude_r14_);
      setDatum_r14 (datum_r14_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public LocationDataLCI_r14 (
      Asn1BitString latitudeUncertainty_r14_,
      Asn1BitString latitude_r14_,
      Asn1BitString longitudeUncertainty_r14_,
      Asn1BitString longitude_r14_,
      Asn1BitString datum_r14_
   ) throws Asn1Exception {
      super();
      setLatitudeUncertainty_r14 (latitudeUncertainty_r14_);
      setLatitude_r14 (latitude_r14_);
      setLongitudeUncertainty_r14 (longitudeUncertainty_r14_);
      setLongitude_r14 (longitude_r14_);
      setDatum_r14 (datum_r14_);
   }

   public void init () {
      latitudeUncertainty_r14 = null;
      latitude_r14 = null;
      longitudeUncertainty_r14 = null;
      longitude_r14 = null;
      altitudeUncertainty_r14 = null;
      altitude_r14 = null;
      datum_r14 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof LocationDataLCI_r14) ) return false;

      LocationDataLCI_r14 rhs = (LocationDataLCI_r14) obj;

      if (latitudeUncertainty_r14 == null) {
         if (rhs.latitudeUncertainty_r14 != null) return false;
      }
      else {
         if (!latitudeUncertainty_r14.equals(rhs.latitudeUncertainty_r14)) {
            return false;
         }
      }

      if (latitude_r14 == null) {
         if (rhs.latitude_r14 != null) return false;
      }
      else {
         if (!latitude_r14.equals(rhs.latitude_r14)) {
            return false;
         }
      }

      if (longitudeUncertainty_r14 == null) {
         if (rhs.longitudeUncertainty_r14 != null) return false;
      }
      else {
         if (!longitudeUncertainty_r14.equals(rhs.longitudeUncertainty_r14)) {
            return false;
         }
      }

      if (longitude_r14 == null) {
         if (rhs.longitude_r14 != null) return false;
      }
      else {
         if (!longitude_r14.equals(rhs.longitude_r14)) {
            return false;
         }
      }

      if (altitudeUncertainty_r14 == null) {
         if (rhs.altitudeUncertainty_r14 != null) return false;
      }
      else {
         if (!altitudeUncertainty_r14.equals(rhs.altitudeUncertainty_r14)) {
            return false;
         }
      }

      if (altitude_r14 == null) {
         if (rhs.altitude_r14 != null) return false;
      }
      else {
         if (!altitude_r14.equals(rhs.altitude_r14)) {
            return false;
         }
      }

      if (datum_r14 == null) {
         if (rhs.datum_r14 != null) return false;
      }
      else {
         if (!datum_r14.equals(rhs.datum_r14)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (latitudeUncertainty_r14 != null) __code = 31*__code + latitudeUncertainty_r14.hashCode();
      if (latitude_r14 != null) __code = 31*__code + latitude_r14.hashCode();
      if (longitudeUncertainty_r14 != null) __code = 31*__code + longitudeUncertainty_r14.hashCode();
      if (longitude_r14 != null) __code = 31*__code + longitude_r14.hashCode();
      if (altitudeUncertainty_r14 != null) __code = 31*__code + altitudeUncertainty_r14.hashCode();
      if (altitude_r14 != null) __code = 31*__code + altitude_r14.hashCode();
      if (datum_r14 != null) __code = 31*__code + datum_r14.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for LatitudeUncertainty_r14
    */
   public Asn1BitString getLatitudeUncertainty_r14 () {
      return latitudeUncertainty_r14;
   }

   public void setLatitudeUncertainty_r14 (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 6)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.latitudeUncertainty_r14 = value;
   }

   /**
    * Accessor/mutator methods for Latitude_r14
    */
   public Asn1BitString getLatitude_r14 () {
      return latitude_r14;
   }

   public void setLatitude_r14 (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 34)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.latitude_r14 = value;
   }

   /**
    * Accessor/mutator methods for LongitudeUncertainty_r14
    */
   public Asn1BitString getLongitudeUncertainty_r14 () {
      return longitudeUncertainty_r14;
   }

   public void setLongitudeUncertainty_r14 (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 6)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.longitudeUncertainty_r14 = value;
   }

   /**
    * Accessor/mutator methods for Longitude_r14
    */
   public Asn1BitString getLongitude_r14 () {
      return longitude_r14;
   }

   public void setLongitude_r14 (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 34)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.longitude_r14 = value;
   }

   /**
    * Accessor/mutator methods for AltitudeUncertainty_r14
    */
   public Asn1BitString getAltitudeUncertainty_r14 () {
      return altitudeUncertainty_r14;
   }

   public void setAltitudeUncertainty_r14 (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 6)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.altitudeUncertainty_r14 = value;
   }

   public boolean hasAltitudeUncertainty_r14 () {
      return (altitudeUncertainty_r14 != null);
   }

   /**
    * Accessor/mutator methods for Altitude_r14
    */
   public Asn1BitString getAltitude_r14 () {
      return altitude_r14;
   }

   public void setAltitude_r14 (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 30)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.altitude_r14 = value;
   }

   public boolean hasAltitude_r14 () {
      return (altitude_r14 != null);
   }

   /**
    * Accessor/mutator methods for Datum_r14
    */
   public Asn1BitString getDatum_r14 () {
      return datum_r14;
   }

   public void setDatum_r14 (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 8)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.datum_r14 = value;
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return latitudeUncertainty_r14;
         case 1: return latitude_r14;
         case 2: return longitudeUncertainty_r14;
         case 3: return longitude_r14;
         case 4: return altitudeUncertainty_r14;
         case 5: return altitude_r14;
         case 6: return datum_r14;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "latitudeUncertainty-r14";
         case 1: return "latitude-r14";
         case 2: return "longitudeUncertainty-r14";
         case 3: return "longitude-r14";
         case 4: return "altitudeUncertainty-r14";
         case 5: return "altitude-r14";
         case 6: return "datum-r14";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean altitudeUncertainty_r14Present = buffer.decodeBit ("altitudeUncertainty_r14Present");
      boolean altitude_r14Present = buffer.decodeBit ("altitude_r14Present");

      // decode latitudeUncertainty_r14

      buffer.getContext().eventDispatcher.startElement("latitudeUncertainty_r14", -1);

      latitudeUncertainty_r14 = new Asn1BitString();
      latitudeUncertainty_r14.decode (buffer, 6, 6);
      buffer.getContext().eventDispatcher.endElement("latitudeUncertainty_r14", -1);

      // decode latitude_r14

      buffer.getContext().eventDispatcher.startElement("latitude_r14", -1);

      latitude_r14 = new Asn1BitString();
      latitude_r14.decode (buffer, 34, 34);
      buffer.getContext().eventDispatcher.endElement("latitude_r14", -1);

      // decode longitudeUncertainty_r14

      buffer.getContext().eventDispatcher.startElement("longitudeUncertainty_r14", -1);

      longitudeUncertainty_r14 = new Asn1BitString();
      longitudeUncertainty_r14.decode (buffer, 6, 6);
      buffer.getContext().eventDispatcher.endElement("longitudeUncertainty_r14", -1);

      // decode longitude_r14

      buffer.getContext().eventDispatcher.startElement("longitude_r14", -1);

      longitude_r14 = new Asn1BitString();
      longitude_r14.decode (buffer, 34, 34);
      buffer.getContext().eventDispatcher.endElement("longitude_r14", -1);

      // decode altitudeUncertainty_r14

      if (altitudeUncertainty_r14Present) {
         buffer.getContext().eventDispatcher.startElement("altitudeUncertainty_r14", -1);

         altitudeUncertainty_r14 = new Asn1BitString();
         altitudeUncertainty_r14.decode (buffer, 6, 6);
         buffer.getContext().eventDispatcher.endElement("altitudeUncertainty_r14", -1);
      }
      else {
         altitudeUncertainty_r14 = null;
      }

      // decode altitude_r14

      if (altitude_r14Present) {
         buffer.getContext().eventDispatcher.startElement("altitude_r14", -1);

         altitude_r14 = new Asn1BitString();
         altitude_r14.decode (buffer, 30, 30);
         buffer.getContext().eventDispatcher.endElement("altitude_r14", -1);
      }
      else {
         altitude_r14 = null;
      }

      // decode datum_r14

      buffer.getContext().eventDispatcher.startElement("datum_r14", -1);

      datum_r14 = new Asn1BitString();
      datum_r14.decode (buffer, 8, 8);
      buffer.getContext().eventDispatcher.endElement("datum_r14", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((altitudeUncertainty_r14 != null), null);
      buffer.encodeBit ((altitude_r14 != null), null);

      // encode latitudeUncertainty_r14

      if (latitudeUncertainty_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("latitudeUncertainty_r14", -1);

         latitudeUncertainty_r14.encode (buffer, 6, 6);

         buffer.getContext().eventDispatcher.endElement("latitudeUncertainty_r14", -1);
      }
      else throw new Asn1MissingRequiredException ("latitudeUncertainty_r14");

      // encode latitude_r14

      if (latitude_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("latitude_r14", -1);

         latitude_r14.encode (buffer, 34, 34);

         buffer.getContext().eventDispatcher.endElement("latitude_r14", -1);
      }
      else throw new Asn1MissingRequiredException ("latitude_r14");

      // encode longitudeUncertainty_r14

      if (longitudeUncertainty_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("longitudeUncertainty_r14", -1);

         longitudeUncertainty_r14.encode (buffer, 6, 6);

         buffer.getContext().eventDispatcher.endElement("longitudeUncertainty_r14", -1);
      }
      else throw new Asn1MissingRequiredException ("longitudeUncertainty_r14");

      // encode longitude_r14

      if (longitude_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("longitude_r14", -1);

         longitude_r14.encode (buffer, 34, 34);

         buffer.getContext().eventDispatcher.endElement("longitude_r14", -1);
      }
      else throw new Asn1MissingRequiredException ("longitude_r14");

      // encode altitudeUncertainty_r14

      if (altitudeUncertainty_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("altitudeUncertainty_r14", -1);

         altitudeUncertainty_r14.encode (buffer, 6, 6);

         buffer.getContext().eventDispatcher.endElement("altitudeUncertainty_r14", -1);
      }

      // encode altitude_r14

      if (altitude_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("altitude_r14", -1);

         altitude_r14.encode (buffer, 30, 30);

         buffer.getContext().eventDispatcher.endElement("altitude_r14", -1);
      }

      // encode datum_r14

      if (datum_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("datum_r14", -1);

         datum_r14.encode (buffer, 8, 8);

         buffer.getContext().eventDispatcher.endElement("datum_r14", -1);
      }
      else throw new Asn1MissingRequiredException ("datum_r14");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
