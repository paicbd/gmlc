/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class RelativeLocation_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "RelativeLocation-r16";
   }

   protected RelativeLocation_r16_milli_arc_second_units_r16 milli_arc_second_units_r16 = null;
   protected RelativeLocation_r16_height_units_r16 height_units_r16 = null;
   protected Delta_Latitude_r16 delta_latitude_r16;
   protected Delta_Longitude_r16 delta_longitude_r16;
   protected Delta_Height_r16 delta_height_r16;
   protected LocationUncertainty_r16 locationUNC_r16;  // optional
   protected Asn1OpenExt extElem1;

   public RelativeLocation_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RelativeLocation_r16 (
      RelativeLocation_r16_milli_arc_second_units_r16 milli_arc_second_units_r16_,
      RelativeLocation_r16_height_units_r16 height_units_r16_,
      Delta_Latitude_r16 delta_latitude_r16_,
      Delta_Longitude_r16 delta_longitude_r16_,
      Delta_Height_r16 delta_height_r16_,
      LocationUncertainty_r16 locationUNC_r16_
   ) {
      super();
      setMilli_arc_second_units_r16 (milli_arc_second_units_r16_);
      setHeight_units_r16 (height_units_r16_);
      setDelta_latitude_r16 (delta_latitude_r16_);
      setDelta_longitude_r16 (delta_longitude_r16_);
      setDelta_height_r16 (delta_height_r16_);
      setLocationUNC_r16 (locationUNC_r16_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RelativeLocation_r16 (
      RelativeLocation_r16_milli_arc_second_units_r16 milli_arc_second_units_r16_,
      RelativeLocation_r16_height_units_r16 height_units_r16_,
      Delta_Latitude_r16 delta_latitude_r16_,
      Delta_Longitude_r16 delta_longitude_r16_,
      Delta_Height_r16 delta_height_r16_
   ) {
      super();
      setMilli_arc_second_units_r16 (milli_arc_second_units_r16_);
      setHeight_units_r16 (height_units_r16_);
      setDelta_latitude_r16 (delta_latitude_r16_);
      setDelta_longitude_r16 (delta_longitude_r16_);
      setDelta_height_r16 (delta_height_r16_);
   }

   public void init () {
      milli_arc_second_units_r16 = null;
      height_units_r16 = null;
      delta_latitude_r16 = null;
      delta_longitude_r16 = null;
      delta_height_r16 = null;
      locationUNC_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof RelativeLocation_r16) ) return false;

      RelativeLocation_r16 rhs = (RelativeLocation_r16) obj;

      if (milli_arc_second_units_r16 == null) {
         if (rhs.milli_arc_second_units_r16 != null) return false;
      }
      else {
         if (!milli_arc_second_units_r16.equals(rhs.milli_arc_second_units_r16)) {
            return false;
         }
      }

      if (height_units_r16 == null) {
         if (rhs.height_units_r16 != null) return false;
      }
      else {
         if (!height_units_r16.equals(rhs.height_units_r16)) {
            return false;
         }
      }

      if (delta_latitude_r16 == null) {
         if (rhs.delta_latitude_r16 != null) return false;
      }
      else {
         if (!delta_latitude_r16.equals(rhs.delta_latitude_r16)) {
            return false;
         }
      }

      if (delta_longitude_r16 == null) {
         if (rhs.delta_longitude_r16 != null) return false;
      }
      else {
         if (!delta_longitude_r16.equals(rhs.delta_longitude_r16)) {
            return false;
         }
      }

      if (delta_height_r16 == null) {
         if (rhs.delta_height_r16 != null) return false;
      }
      else {
         if (!delta_height_r16.equals(rhs.delta_height_r16)) {
            return false;
         }
      }

      if (locationUNC_r16 == null) {
         if (rhs.locationUNC_r16 != null) return false;
      }
      else {
         if (!locationUNC_r16.equals(rhs.locationUNC_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (milli_arc_second_units_r16 != null) __code = 31*__code + milli_arc_second_units_r16.hashCode();
      if (height_units_r16 != null) __code = 31*__code + height_units_r16.hashCode();
      if (delta_latitude_r16 != null) __code = 31*__code + delta_latitude_r16.hashCode();
      if (delta_longitude_r16 != null) __code = 31*__code + delta_longitude_r16.hashCode();
      if (delta_height_r16 != null) __code = 31*__code + delta_height_r16.hashCode();
      if (locationUNC_r16 != null) __code = 31*__code + locationUNC_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Milli_arc_second_units_r16
    */
   public RelativeLocation_r16_milli_arc_second_units_r16 getMilli_arc_second_units_r16 () {
      return milli_arc_second_units_r16;
   }

   public void setMilli_arc_second_units_r16 (RelativeLocation_r16_milli_arc_second_units_r16 value) {
      this.milli_arc_second_units_r16 = value;
   }

   /**
    * Accessor/mutator methods for Height_units_r16
    */
   public RelativeLocation_r16_height_units_r16 getHeight_units_r16 () {
      return height_units_r16;
   }

   public void setHeight_units_r16 (RelativeLocation_r16_height_units_r16 value) {
      this.height_units_r16 = value;
   }

   /**
    * Accessor/mutator methods for Delta_latitude_r16
    */
   public Delta_Latitude_r16 getDelta_latitude_r16 () {
      return delta_latitude_r16;
   }

   public void setDelta_latitude_r16 (Delta_Latitude_r16 value) {
      this.delta_latitude_r16 = value;
   }

   /**
    * Accessor/mutator methods for Delta_longitude_r16
    */
   public Delta_Longitude_r16 getDelta_longitude_r16 () {
      return delta_longitude_r16;
   }

   public void setDelta_longitude_r16 (Delta_Longitude_r16 value) {
      this.delta_longitude_r16 = value;
   }

   /**
    * Accessor/mutator methods for Delta_height_r16
    */
   public Delta_Height_r16 getDelta_height_r16 () {
      return delta_height_r16;
   }

   public void setDelta_height_r16 (Delta_Height_r16 value) {
      this.delta_height_r16 = value;
   }

   /**
    * Accessor/mutator methods for LocationUNC_r16
    */
   public LocationUncertainty_r16 getLocationUNC_r16 () {
      return locationUNC_r16;
   }

   public void setLocationUNC_r16 (LocationUncertainty_r16 value) {
      this.locationUNC_r16 = value;
   }

   public boolean hasLocationUNC_r16 () {
      return (locationUNC_r16 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return milli_arc_second_units_r16;
         case 1: return height_units_r16;
         case 2: return delta_latitude_r16;
         case 3: return delta_longitude_r16;
         case 4: return delta_height_r16;
         case 5: return locationUNC_r16;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "milli-arc-second-units-r16";
         case 1: return "height-units-r16";
         case 2: return "delta-latitude-r16";
         case 3: return "delta-longitude-r16";
         case 4: return "delta-height-r16";
         case 5: return "locationUNC-r16";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean locationUNC_r16Present = buffer.decodeBit ("locationUNC_r16Present");

      // decode milli_arc_second_units_r16

      buffer.getContext().eventDispatcher.startElement("milli_arc_second_units_r16", -1);

      {
         int tval = RelativeLocation_r16_milli_arc_second_units_r16.decodeEnumValue (buffer);
         milli_arc_second_units_r16 = RelativeLocation_r16_milli_arc_second_units_r16.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("milli_arc_second_units_r16", -1);

      // decode height_units_r16

      buffer.getContext().eventDispatcher.startElement("height_units_r16", -1);

      {
         int tval = RelativeLocation_r16_height_units_r16.decodeEnumValue (buffer);
         height_units_r16 = RelativeLocation_r16_height_units_r16.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("height_units_r16", -1);

      // decode delta_latitude_r16

      buffer.getContext().eventDispatcher.startElement("delta_latitude_r16", -1);

      delta_latitude_r16 = new Delta_Latitude_r16();
      delta_latitude_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("delta_latitude_r16", -1);

      // decode delta_longitude_r16

      buffer.getContext().eventDispatcher.startElement("delta_longitude_r16", -1);

      delta_longitude_r16 = new Delta_Longitude_r16();
      delta_longitude_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("delta_longitude_r16", -1);

      // decode delta_height_r16

      buffer.getContext().eventDispatcher.startElement("delta_height_r16", -1);

      delta_height_r16 = new Delta_Height_r16();
      delta_height_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("delta_height_r16", -1);

      // decode locationUNC_r16

      if (locationUNC_r16Present) {
         buffer.getContext().eventDispatcher.startElement("locationUNC_r16", -1);

         locationUNC_r16 = new LocationUncertainty_r16();
         locationUNC_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("locationUNC_r16", -1);
      }
      else {
         locationUNC_r16 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((locationUNC_r16 != null), null);

      // encode milli_arc_second_units_r16

      if (milli_arc_second_units_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("milli_arc_second_units_r16", -1);

         milli_arc_second_units_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("milli_arc_second_units_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("milli_arc_second_units_r16");

      // encode height_units_r16

      if (height_units_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("height_units_r16", -1);

         height_units_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("height_units_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("height_units_r16");

      // encode delta_latitude_r16

      if (delta_latitude_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("delta_latitude_r16", -1);

         delta_latitude_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("delta_latitude_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("delta_latitude_r16");

      // encode delta_longitude_r16

      if (delta_longitude_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("delta_longitude_r16", -1);

         delta_longitude_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("delta_longitude_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("delta_longitude_r16");

      // encode delta_height_r16

      if (delta_height_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("delta_height_r16", -1);

         delta_height_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("delta_height_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("delta_height_r16");

      // encode locationUNC_r16

      if (locationUNC_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("locationUNC_r16", -1);

         locationUNC_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("locationUNC_r16", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
