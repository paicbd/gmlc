/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class SupportedWLANApsChannel11a extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SupportedWLANApsChannel11a";
   }

   protected Asn1Boolean ch34;
   protected Asn1Boolean ch36;
   protected Asn1Boolean ch38;
   protected Asn1Boolean ch40;
   protected Asn1Boolean ch42;
   protected Asn1Boolean ch44;
   protected Asn1Boolean ch46;
   protected Asn1Boolean ch48;
   protected Asn1Boolean ch52;
   protected Asn1Boolean ch56;
   protected Asn1Boolean ch60;
   protected Asn1Boolean ch64;
   protected Asn1Boolean ch149;
   protected Asn1Boolean ch153;
   protected Asn1Boolean ch157;
   protected Asn1Boolean ch161;

   public SupportedWLANApsChannel11a () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SupportedWLANApsChannel11a (
      Asn1Boolean ch34_,
      Asn1Boolean ch36_,
      Asn1Boolean ch38_,
      Asn1Boolean ch40_,
      Asn1Boolean ch42_,
      Asn1Boolean ch44_,
      Asn1Boolean ch46_,
      Asn1Boolean ch48_,
      Asn1Boolean ch52_,
      Asn1Boolean ch56_,
      Asn1Boolean ch60_,
      Asn1Boolean ch64_,
      Asn1Boolean ch149_,
      Asn1Boolean ch153_,
      Asn1Boolean ch157_,
      Asn1Boolean ch161_
   ) {
      super();
      setCh34 (ch34_);
      setCh36 (ch36_);
      setCh38 (ch38_);
      setCh40 (ch40_);
      setCh42 (ch42_);
      setCh44 (ch44_);
      setCh46 (ch46_);
      setCh48 (ch48_);
      setCh52 (ch52_);
      setCh56 (ch56_);
      setCh60 (ch60_);
      setCh64 (ch64_);
      setCh149 (ch149_);
      setCh153 (ch153_);
      setCh157 (ch157_);
      setCh161 (ch161_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SupportedWLANApsChannel11a (boolean ch34_,
      boolean ch36_,
      boolean ch38_,
      boolean ch40_,
      boolean ch42_,
      boolean ch44_,
      boolean ch46_,
      boolean ch48_,
      boolean ch52_,
      boolean ch56_,
      boolean ch60_,
      boolean ch64_,
      boolean ch149_,
      boolean ch153_,
      boolean ch157_,
      boolean ch161_
   ) {
      super();
      setCh34 (ch34_);
      setCh36 (ch36_);
      setCh38 (ch38_);
      setCh40 (ch40_);
      setCh42 (ch42_);
      setCh44 (ch44_);
      setCh46 (ch46_);
      setCh48 (ch48_);
      setCh52 (ch52_);
      setCh56 (ch56_);
      setCh60 (ch60_);
      setCh64 (ch64_);
      setCh149 (ch149_);
      setCh153 (ch153_);
      setCh157 (ch157_);
      setCh161 (ch161_);
   }

   public void init () {
      ch34 = null;
      ch36 = null;
      ch38 = null;
      ch40 = null;
      ch42 = null;
      ch44 = null;
      ch46 = null;
      ch48 = null;
      ch52 = null;
      ch56 = null;
      ch60 = null;
      ch64 = null;
      ch149 = null;
      ch153 = null;
      ch157 = null;
      ch161 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof SupportedWLANApsChannel11a) ) return false;

      SupportedWLANApsChannel11a rhs = (SupportedWLANApsChannel11a) obj;

      if (ch34 == null) {
         if (rhs.ch34 != null) return false;
      }
      else {
         if (!ch34.equals(rhs.ch34)) {
            return false;
         }
      }

      if (ch36 == null) {
         if (rhs.ch36 != null) return false;
      }
      else {
         if (!ch36.equals(rhs.ch36)) {
            return false;
         }
      }

      if (ch38 == null) {
         if (rhs.ch38 != null) return false;
      }
      else {
         if (!ch38.equals(rhs.ch38)) {
            return false;
         }
      }

      if (ch40 == null) {
         if (rhs.ch40 != null) return false;
      }
      else {
         if (!ch40.equals(rhs.ch40)) {
            return false;
         }
      }

      if (ch42 == null) {
         if (rhs.ch42 != null) return false;
      }
      else {
         if (!ch42.equals(rhs.ch42)) {
            return false;
         }
      }

      if (ch44 == null) {
         if (rhs.ch44 != null) return false;
      }
      else {
         if (!ch44.equals(rhs.ch44)) {
            return false;
         }
      }

      if (ch46 == null) {
         if (rhs.ch46 != null) return false;
      }
      else {
         if (!ch46.equals(rhs.ch46)) {
            return false;
         }
      }

      if (ch48 == null) {
         if (rhs.ch48 != null) return false;
      }
      else {
         if (!ch48.equals(rhs.ch48)) {
            return false;
         }
      }

      if (ch52 == null) {
         if (rhs.ch52 != null) return false;
      }
      else {
         if (!ch52.equals(rhs.ch52)) {
            return false;
         }
      }

      if (ch56 == null) {
         if (rhs.ch56 != null) return false;
      }
      else {
         if (!ch56.equals(rhs.ch56)) {
            return false;
         }
      }

      if (ch60 == null) {
         if (rhs.ch60 != null) return false;
      }
      else {
         if (!ch60.equals(rhs.ch60)) {
            return false;
         }
      }

      if (ch64 == null) {
         if (rhs.ch64 != null) return false;
      }
      else {
         if (!ch64.equals(rhs.ch64)) {
            return false;
         }
      }

      if (ch149 == null) {
         if (rhs.ch149 != null) return false;
      }
      else {
         if (!ch149.equals(rhs.ch149)) {
            return false;
         }
      }

      if (ch153 == null) {
         if (rhs.ch153 != null) return false;
      }
      else {
         if (!ch153.equals(rhs.ch153)) {
            return false;
         }
      }

      if (ch157 == null) {
         if (rhs.ch157 != null) return false;
      }
      else {
         if (!ch157.equals(rhs.ch157)) {
            return false;
         }
      }

      if (ch161 == null) {
         if (rhs.ch161 != null) return false;
      }
      else {
         if (!ch161.equals(rhs.ch161)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (ch34 != null) __code = 31*__code + ch34.hashCode();
      if (ch36 != null) __code = 31*__code + ch36.hashCode();
      if (ch38 != null) __code = 31*__code + ch38.hashCode();
      if (ch40 != null) __code = 31*__code + ch40.hashCode();
      if (ch42 != null) __code = 31*__code + ch42.hashCode();
      if (ch44 != null) __code = 31*__code + ch44.hashCode();
      if (ch46 != null) __code = 31*__code + ch46.hashCode();
      if (ch48 != null) __code = 31*__code + ch48.hashCode();
      if (ch52 != null) __code = 31*__code + ch52.hashCode();
      if (ch56 != null) __code = 31*__code + ch56.hashCode();
      if (ch60 != null) __code = 31*__code + ch60.hashCode();
      if (ch64 != null) __code = 31*__code + ch64.hashCode();
      if (ch149 != null) __code = 31*__code + ch149.hashCode();
      if (ch153 != null) __code = 31*__code + ch153.hashCode();
      if (ch157 != null) __code = 31*__code + ch157.hashCode();
      if (ch161 != null) __code = 31*__code + ch161.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Ch34
    */
   public Asn1Boolean getCh34 () {
      return ch34;
   }

   public void setCh34 (Asn1Boolean value) {
      this.ch34 = value;
   }

   public void setCh34 (boolean value) {
      setCh34 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch36
    */
   public Asn1Boolean getCh36 () {
      return ch36;
   }

   public void setCh36 (Asn1Boolean value) {
      this.ch36 = value;
   }

   public void setCh36 (boolean value) {
      setCh36 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch38
    */
   public Asn1Boolean getCh38 () {
      return ch38;
   }

   public void setCh38 (Asn1Boolean value) {
      this.ch38 = value;
   }

   public void setCh38 (boolean value) {
      setCh38 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch40
    */
   public Asn1Boolean getCh40 () {
      return ch40;
   }

   public void setCh40 (Asn1Boolean value) {
      this.ch40 = value;
   }

   public void setCh40 (boolean value) {
      setCh40 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch42
    */
   public Asn1Boolean getCh42 () {
      return ch42;
   }

   public void setCh42 (Asn1Boolean value) {
      this.ch42 = value;
   }

   public void setCh42 (boolean value) {
      setCh42 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch44
    */
   public Asn1Boolean getCh44 () {
      return ch44;
   }

   public void setCh44 (Asn1Boolean value) {
      this.ch44 = value;
   }

   public void setCh44 (boolean value) {
      setCh44 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch46
    */
   public Asn1Boolean getCh46 () {
      return ch46;
   }

   public void setCh46 (Asn1Boolean value) {
      this.ch46 = value;
   }

   public void setCh46 (boolean value) {
      setCh46 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch48
    */
   public Asn1Boolean getCh48 () {
      return ch48;
   }

   public void setCh48 (Asn1Boolean value) {
      this.ch48 = value;
   }

   public void setCh48 (boolean value) {
      setCh48 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch52
    */
   public Asn1Boolean getCh52 () {
      return ch52;
   }

   public void setCh52 (Asn1Boolean value) {
      this.ch52 = value;
   }

   public void setCh52 (boolean value) {
      setCh52 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch56
    */
   public Asn1Boolean getCh56 () {
      return ch56;
   }

   public void setCh56 (Asn1Boolean value) {
      this.ch56 = value;
   }

   public void setCh56 (boolean value) {
      setCh56 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch60
    */
   public Asn1Boolean getCh60 () {
      return ch60;
   }

   public void setCh60 (Asn1Boolean value) {
      this.ch60 = value;
   }

   public void setCh60 (boolean value) {
      setCh60 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch64
    */
   public Asn1Boolean getCh64 () {
      return ch64;
   }

   public void setCh64 (Asn1Boolean value) {
      this.ch64 = value;
   }

   public void setCh64 (boolean value) {
      setCh64 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch149
    */
   public Asn1Boolean getCh149 () {
      return ch149;
   }

   public void setCh149 (Asn1Boolean value) {
      this.ch149 = value;
   }

   public void setCh149 (boolean value) {
      setCh149 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch153
    */
   public Asn1Boolean getCh153 () {
      return ch153;
   }

   public void setCh153 (Asn1Boolean value) {
      this.ch153 = value;
   }

   public void setCh153 (boolean value) {
      setCh153 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch157
    */
   public Asn1Boolean getCh157 () {
      return ch157;
   }

   public void setCh157 (Asn1Boolean value) {
      this.ch157 = value;
   }

   public void setCh157 (boolean value) {
      setCh157 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch161
    */
   public Asn1Boolean getCh161 () {
      return ch161;
   }

   public void setCh161 (Asn1Boolean value) {
      this.ch161 = value;
   }

   public void setCh161 (boolean value) {
      setCh161 (new Asn1Boolean(value));
   }

   public int getElementCount() { return 16; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ch34;
         case 1: return ch36;
         case 2: return ch38;
         case 3: return ch40;
         case 4: return ch42;
         case 5: return ch44;
         case 6: return ch46;
         case 7: return ch48;
         case 8: return ch52;
         case 9: return ch56;
         case 10: return ch60;
         case 11: return ch64;
         case 12: return ch149;
         case 13: return ch153;
         case 14: return ch157;
         case 15: return ch161;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ch34";
         case 1: return "ch36";
         case 2: return "ch38";
         case 3: return "ch40";
         case 4: return "ch42";
         case 5: return "ch44";
         case 6: return "ch46";
         case 7: return "ch48";
         case 8: return "ch52";
         case 9: return "ch56";
         case 10: return "ch60";
         case 11: return "ch64";
         case 12: return "ch149";
         case 13: return "ch153";
         case 14: return "ch157";
         case 15: return "ch161";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode ch34

      buffer.getContext().eventDispatcher.startElement("ch34", -1);

      ch34 = new Asn1Boolean();
      ch34.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch34", -1);

      // decode ch36

      buffer.getContext().eventDispatcher.startElement("ch36", -1);

      ch36 = new Asn1Boolean();
      ch36.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch36", -1);

      // decode ch38

      buffer.getContext().eventDispatcher.startElement("ch38", -1);

      ch38 = new Asn1Boolean();
      ch38.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch38", -1);

      // decode ch40

      buffer.getContext().eventDispatcher.startElement("ch40", -1);

      ch40 = new Asn1Boolean();
      ch40.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch40", -1);

      // decode ch42

      buffer.getContext().eventDispatcher.startElement("ch42", -1);

      ch42 = new Asn1Boolean();
      ch42.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch42", -1);

      // decode ch44

      buffer.getContext().eventDispatcher.startElement("ch44", -1);

      ch44 = new Asn1Boolean();
      ch44.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch44", -1);

      // decode ch46

      buffer.getContext().eventDispatcher.startElement("ch46", -1);

      ch46 = new Asn1Boolean();
      ch46.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch46", -1);

      // decode ch48

      buffer.getContext().eventDispatcher.startElement("ch48", -1);

      ch48 = new Asn1Boolean();
      ch48.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch48", -1);

      // decode ch52

      buffer.getContext().eventDispatcher.startElement("ch52", -1);

      ch52 = new Asn1Boolean();
      ch52.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch52", -1);

      // decode ch56

      buffer.getContext().eventDispatcher.startElement("ch56", -1);

      ch56 = new Asn1Boolean();
      ch56.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch56", -1);

      // decode ch60

      buffer.getContext().eventDispatcher.startElement("ch60", -1);

      ch60 = new Asn1Boolean();
      ch60.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch60", -1);

      // decode ch64

      buffer.getContext().eventDispatcher.startElement("ch64", -1);

      ch64 = new Asn1Boolean();
      ch64.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch64", -1);

      // decode ch149

      buffer.getContext().eventDispatcher.startElement("ch149", -1);

      ch149 = new Asn1Boolean();
      ch149.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch149", -1);

      // decode ch153

      buffer.getContext().eventDispatcher.startElement("ch153", -1);

      ch153 = new Asn1Boolean();
      ch153.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch153", -1);

      // decode ch157

      buffer.getContext().eventDispatcher.startElement("ch157", -1);

      ch157 = new Asn1Boolean();
      ch157.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch157", -1);

      // decode ch161

      buffer.getContext().eventDispatcher.startElement("ch161", -1);

      ch161 = new Asn1Boolean();
      ch161.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch161", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode ch34

      if (ch34 != null) {
         buffer.getContext().eventDispatcher.startElement("ch34", -1);

         ch34.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch34", -1);
      }
      else throw new Asn1MissingRequiredException ("ch34");

      // encode ch36

      if (ch36 != null) {
         buffer.getContext().eventDispatcher.startElement("ch36", -1);

         ch36.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch36", -1);
      }
      else throw new Asn1MissingRequiredException ("ch36");

      // encode ch38

      if (ch38 != null) {
         buffer.getContext().eventDispatcher.startElement("ch38", -1);

         ch38.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch38", -1);
      }
      else throw new Asn1MissingRequiredException ("ch38");

      // encode ch40

      if (ch40 != null) {
         buffer.getContext().eventDispatcher.startElement("ch40", -1);

         ch40.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch40", -1);
      }
      else throw new Asn1MissingRequiredException ("ch40");

      // encode ch42

      if (ch42 != null) {
         buffer.getContext().eventDispatcher.startElement("ch42", -1);

         ch42.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch42", -1);
      }
      else throw new Asn1MissingRequiredException ("ch42");

      // encode ch44

      if (ch44 != null) {
         buffer.getContext().eventDispatcher.startElement("ch44", -1);

         ch44.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch44", -1);
      }
      else throw new Asn1MissingRequiredException ("ch44");

      // encode ch46

      if (ch46 != null) {
         buffer.getContext().eventDispatcher.startElement("ch46", -1);

         ch46.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch46", -1);
      }
      else throw new Asn1MissingRequiredException ("ch46");

      // encode ch48

      if (ch48 != null) {
         buffer.getContext().eventDispatcher.startElement("ch48", -1);

         ch48.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch48", -1);
      }
      else throw new Asn1MissingRequiredException ("ch48");

      // encode ch52

      if (ch52 != null) {
         buffer.getContext().eventDispatcher.startElement("ch52", -1);

         ch52.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch52", -1);
      }
      else throw new Asn1MissingRequiredException ("ch52");

      // encode ch56

      if (ch56 != null) {
         buffer.getContext().eventDispatcher.startElement("ch56", -1);

         ch56.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch56", -1);
      }
      else throw new Asn1MissingRequiredException ("ch56");

      // encode ch60

      if (ch60 != null) {
         buffer.getContext().eventDispatcher.startElement("ch60", -1);

         ch60.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch60", -1);
      }
      else throw new Asn1MissingRequiredException ("ch60");

      // encode ch64

      if (ch64 != null) {
         buffer.getContext().eventDispatcher.startElement("ch64", -1);

         ch64.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch64", -1);
      }
      else throw new Asn1MissingRequiredException ("ch64");

      // encode ch149

      if (ch149 != null) {
         buffer.getContext().eventDispatcher.startElement("ch149", -1);

         ch149.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch149", -1);
      }
      else throw new Asn1MissingRequiredException ("ch149");

      // encode ch153

      if (ch153 != null) {
         buffer.getContext().eventDispatcher.startElement("ch153", -1);

         ch153.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch153", -1);
      }
      else throw new Asn1MissingRequiredException ("ch153");

      // encode ch157

      if (ch157 != null) {
         buffer.getContext().eventDispatcher.startElement("ch157", -1);

         ch157.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch157", -1);
      }
      else throw new Asn1MissingRequiredException ("ch157");

      // encode ch161

      if (ch161 != null) {
         buffer.getContext().eventDispatcher.startElement("ch161", -1);

         ch161.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch161", -1);
      }
      else throw new Asn1MissingRequiredException ("ch161");

   }

}
