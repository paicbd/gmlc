/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class RequestLocationInformation_r9_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "RequestLocationInformation-r9-IEs";
   }

   protected CommonIEsRequestLocationInformation commonIEsRequestLocationInformation;  // optional
   protected A_GNSS_RequestLocationInformation a_gnss_RequestLocationInformation;  // optional
   protected OTDOA_RequestLocationInformation otdoa_RequestLocationInformation;  // optional
   protected ECID_RequestLocationInformation ecid_RequestLocationInformation;  // optional
   protected EPDU_Sequence epdu_RequestLocationInformation;  // optional
   protected Sensor_RequestLocationInformation_r13 sensor_RequestLocationInformation_r13;  // optional
   protected TBS_RequestLocationInformation_r13 tbs_RequestLocationInformation_r13;  // optional
   protected WLAN_RequestLocationInformation_r13 wlan_RequestLocationInformation_r13;  // optional
   protected BT_RequestLocationInformation_r13 bt_RequestLocationInformation_r13;  // optional
   protected NR_ECID_RequestLocationInformation_r16 nr_ECID_RequestLocationInformation_r16;  // optional
   protected NR_Multi_RTT_RequestLocationInformation_r16 nr_Multi_RTT_RequestLocationInformation_r16;  // optional
   protected NR_DL_AoD_RequestLocationInformation_r16 nr_DL_AoD_RequestLocationInformation_r16;  // optional
   protected NR_DL_TDOA_RequestLocationInformation_r16 nr_DL_TDOA_RequestLocationInformation_r16;  // optional
   protected Asn1OpenExt extElem1;

   public RequestLocationInformation_r9_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RequestLocationInformation_r9_IEs (
      CommonIEsRequestLocationInformation commonIEsRequestLocationInformation_,
      A_GNSS_RequestLocationInformation a_gnss_RequestLocationInformation_,
      OTDOA_RequestLocationInformation otdoa_RequestLocationInformation_,
      ECID_RequestLocationInformation ecid_RequestLocationInformation_,
      EPDU_Sequence epdu_RequestLocationInformation_,
      Sensor_RequestLocationInformation_r13 sensor_RequestLocationInformation_r13_,
      TBS_RequestLocationInformation_r13 tbs_RequestLocationInformation_r13_,
      WLAN_RequestLocationInformation_r13 wlan_RequestLocationInformation_r13_,
      BT_RequestLocationInformation_r13 bt_RequestLocationInformation_r13_,
      NR_ECID_RequestLocationInformation_r16 nr_ECID_RequestLocationInformation_r16_,
      NR_Multi_RTT_RequestLocationInformation_r16 nr_Multi_RTT_RequestLocationInformation_r16_,
      NR_DL_AoD_RequestLocationInformation_r16 nr_DL_AoD_RequestLocationInformation_r16_,
      NR_DL_TDOA_RequestLocationInformation_r16 nr_DL_TDOA_RequestLocationInformation_r16_
   ) throws Asn1Exception {
      super();
      setCommonIEsRequestLocationInformation (commonIEsRequestLocationInformation_);
      setA_gnss_RequestLocationInformation (a_gnss_RequestLocationInformation_);
      setOtdoa_RequestLocationInformation (otdoa_RequestLocationInformation_);
      setEcid_RequestLocationInformation (ecid_RequestLocationInformation_);
      setEpdu_RequestLocationInformation (epdu_RequestLocationInformation_);
      setSensor_RequestLocationInformation_r13 (sensor_RequestLocationInformation_r13_);
      setTbs_RequestLocationInformation_r13 (tbs_RequestLocationInformation_r13_);
      setWlan_RequestLocationInformation_r13 (wlan_RequestLocationInformation_r13_);
      setBt_RequestLocationInformation_r13 (bt_RequestLocationInformation_r13_);
      setNr_ECID_RequestLocationInformation_r16 (nr_ECID_RequestLocationInformation_r16_);
      setNr_Multi_RTT_RequestLocationInformation_r16 (nr_Multi_RTT_RequestLocationInformation_r16_);
      setNr_DL_AoD_RequestLocationInformation_r16 (nr_DL_AoD_RequestLocationInformation_r16_);
      setNr_DL_TDOA_RequestLocationInformation_r16 (nr_DL_TDOA_RequestLocationInformation_r16_);
   }

   public void init () {
      commonIEsRequestLocationInformation = null;
      a_gnss_RequestLocationInformation = null;
      otdoa_RequestLocationInformation = null;
      ecid_RequestLocationInformation = null;
      epdu_RequestLocationInformation = null;
      sensor_RequestLocationInformation_r13 = null;
      tbs_RequestLocationInformation_r13 = null;
      wlan_RequestLocationInformation_r13 = null;
      bt_RequestLocationInformation_r13 = null;
      nr_ECID_RequestLocationInformation_r16 = null;
      nr_Multi_RTT_RequestLocationInformation_r16 = null;
      nr_DL_AoD_RequestLocationInformation_r16 = null;
      nr_DL_TDOA_RequestLocationInformation_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof RequestLocationInformation_r9_IEs) ) return false;

      RequestLocationInformation_r9_IEs rhs = (RequestLocationInformation_r9_IEs) obj;

      if (commonIEsRequestLocationInformation == null) {
         if (rhs.commonIEsRequestLocationInformation != null) return false;
      }
      else {
         if (!commonIEsRequestLocationInformation.equals(rhs.commonIEsRequestLocationInformation)) {
            return false;
         }
      }

      if (a_gnss_RequestLocationInformation == null) {
         if (rhs.a_gnss_RequestLocationInformation != null) return false;
      }
      else {
         if (!a_gnss_RequestLocationInformation.equals(rhs.a_gnss_RequestLocationInformation)) {
            return false;
         }
      }

      if (otdoa_RequestLocationInformation == null) {
         if (rhs.otdoa_RequestLocationInformation != null) return false;
      }
      else {
         if (!otdoa_RequestLocationInformation.equals(rhs.otdoa_RequestLocationInformation)) {
            return false;
         }
      }

      if (ecid_RequestLocationInformation == null) {
         if (rhs.ecid_RequestLocationInformation != null) return false;
      }
      else {
         if (!ecid_RequestLocationInformation.equals(rhs.ecid_RequestLocationInformation)) {
            return false;
         }
      }

      if (epdu_RequestLocationInformation == null) {
         if (rhs.epdu_RequestLocationInformation != null) return false;
      }
      else {
         if (!epdu_RequestLocationInformation.equals(rhs.epdu_RequestLocationInformation)) {
            return false;
         }
      }

      if (sensor_RequestLocationInformation_r13 == null) {
         if (rhs.sensor_RequestLocationInformation_r13 != null) return false;
      }
      else {
         if (!sensor_RequestLocationInformation_r13.equals(rhs.sensor_RequestLocationInformation_r13)) {
            return false;
         }
      }

      if (tbs_RequestLocationInformation_r13 == null) {
         if (rhs.tbs_RequestLocationInformation_r13 != null) return false;
      }
      else {
         if (!tbs_RequestLocationInformation_r13.equals(rhs.tbs_RequestLocationInformation_r13)) {
            return false;
         }
      }

      if (wlan_RequestLocationInformation_r13 == null) {
         if (rhs.wlan_RequestLocationInformation_r13 != null) return false;
      }
      else {
         if (!wlan_RequestLocationInformation_r13.equals(rhs.wlan_RequestLocationInformation_r13)) {
            return false;
         }
      }

      if (bt_RequestLocationInformation_r13 == null) {
         if (rhs.bt_RequestLocationInformation_r13 != null) return false;
      }
      else {
         if (!bt_RequestLocationInformation_r13.equals(rhs.bt_RequestLocationInformation_r13)) {
            return false;
         }
      }

      if (nr_ECID_RequestLocationInformation_r16 == null) {
         if (rhs.nr_ECID_RequestLocationInformation_r16 != null) return false;
      }
      else {
         if (!nr_ECID_RequestLocationInformation_r16.equals(rhs.nr_ECID_RequestLocationInformation_r16)) {
            return false;
         }
      }

      if (nr_Multi_RTT_RequestLocationInformation_r16 == null) {
         if (rhs.nr_Multi_RTT_RequestLocationInformation_r16 != null) return false;
      }
      else {
         if (!nr_Multi_RTT_RequestLocationInformation_r16.equals(rhs.nr_Multi_RTT_RequestLocationInformation_r16)) {
            return false;
         }
      }

      if (nr_DL_AoD_RequestLocationInformation_r16 == null) {
         if (rhs.nr_DL_AoD_RequestLocationInformation_r16 != null) return false;
      }
      else {
         if (!nr_DL_AoD_RequestLocationInformation_r16.equals(rhs.nr_DL_AoD_RequestLocationInformation_r16)) {
            return false;
         }
      }

      if (nr_DL_TDOA_RequestLocationInformation_r16 == null) {
         if (rhs.nr_DL_TDOA_RequestLocationInformation_r16 != null) return false;
      }
      else {
         if (!nr_DL_TDOA_RequestLocationInformation_r16.equals(rhs.nr_DL_TDOA_RequestLocationInformation_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (commonIEsRequestLocationInformation != null) __code = 31*__code + commonIEsRequestLocationInformation.hashCode();
      if (a_gnss_RequestLocationInformation != null) __code = 31*__code + a_gnss_RequestLocationInformation.hashCode();
      if (otdoa_RequestLocationInformation != null) __code = 31*__code + otdoa_RequestLocationInformation.hashCode();
      if (ecid_RequestLocationInformation != null) __code = 31*__code + ecid_RequestLocationInformation.hashCode();
      if (epdu_RequestLocationInformation != null) __code = 31*__code + epdu_RequestLocationInformation.hashCode();
      if (sensor_RequestLocationInformation_r13 != null) __code = 31*__code + sensor_RequestLocationInformation_r13.hashCode();
      if (tbs_RequestLocationInformation_r13 != null) __code = 31*__code + tbs_RequestLocationInformation_r13.hashCode();
      if (wlan_RequestLocationInformation_r13 != null) __code = 31*__code + wlan_RequestLocationInformation_r13.hashCode();
      if (bt_RequestLocationInformation_r13 != null) __code = 31*__code + bt_RequestLocationInformation_r13.hashCode();
      if (nr_ECID_RequestLocationInformation_r16 != null) __code = 31*__code + nr_ECID_RequestLocationInformation_r16.hashCode();
      if (nr_Multi_RTT_RequestLocationInformation_r16 != null) __code = 31*__code + nr_Multi_RTT_RequestLocationInformation_r16.hashCode();
      if (nr_DL_AoD_RequestLocationInformation_r16 != null) __code = 31*__code + nr_DL_AoD_RequestLocationInformation_r16.hashCode();
      if (nr_DL_TDOA_RequestLocationInformation_r16 != null) __code = 31*__code + nr_DL_TDOA_RequestLocationInformation_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for CommonIEsRequestLocationInformation
    */
   public CommonIEsRequestLocationInformation getCommonIEsRequestLocationInformation () {
      return commonIEsRequestLocationInformation;
   }

   public void setCommonIEsRequestLocationInformation (CommonIEsRequestLocationInformation value) {
      this.commonIEsRequestLocationInformation = value;
   }

   public boolean hasCommonIEsRequestLocationInformation () {
      return (commonIEsRequestLocationInformation != null);
   }

   /**
    * Accessor/mutator methods for A_gnss_RequestLocationInformation
    */
   public A_GNSS_RequestLocationInformation getA_gnss_RequestLocationInformation () {
      return a_gnss_RequestLocationInformation;
   }

   public void setA_gnss_RequestLocationInformation (A_GNSS_RequestLocationInformation value) {
      this.a_gnss_RequestLocationInformation = value;
   }

   public boolean hasA_gnss_RequestLocationInformation () {
      return (a_gnss_RequestLocationInformation != null);
   }

   /**
    * Accessor/mutator methods for Otdoa_RequestLocationInformation
    */
   public OTDOA_RequestLocationInformation getOtdoa_RequestLocationInformation () {
      return otdoa_RequestLocationInformation;
   }

   public void setOtdoa_RequestLocationInformation (OTDOA_RequestLocationInformation value) {
      this.otdoa_RequestLocationInformation = value;
   }

   public boolean hasOtdoa_RequestLocationInformation () {
      return (otdoa_RequestLocationInformation != null);
   }

   /**
    * Accessor/mutator methods for Ecid_RequestLocationInformation
    */
   public ECID_RequestLocationInformation getEcid_RequestLocationInformation () {
      return ecid_RequestLocationInformation;
   }

   public void setEcid_RequestLocationInformation (ECID_RequestLocationInformation value) {
      this.ecid_RequestLocationInformation = value;
   }

   public boolean hasEcid_RequestLocationInformation () {
      return (ecid_RequestLocationInformation != null);
   }

   /**
    * Accessor/mutator methods for Epdu_RequestLocationInformation
    */
   public EPDU_Sequence getEpdu_RequestLocationInformation () {
      return epdu_RequestLocationInformation;
   }

   public void setEpdu_RequestLocationInformation (EPDU_Sequence value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 16))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.epdu_RequestLocationInformation = value;
   }

   public boolean hasEpdu_RequestLocationInformation () {
      return (epdu_RequestLocationInformation != null);
   }

   /**
    * Accessor/mutator methods for Sensor_RequestLocationInformation_r13
    */
   public Sensor_RequestLocationInformation_r13 getSensor_RequestLocationInformation_r13 () {
      return sensor_RequestLocationInformation_r13;
   }

   public void setSensor_RequestLocationInformation_r13 (Sensor_RequestLocationInformation_r13 value) {
      this.sensor_RequestLocationInformation_r13 = value;
   }

   public boolean hasSensor_RequestLocationInformation_r13 () {
      return (sensor_RequestLocationInformation_r13 != null);
   }

   /**
    * Accessor/mutator methods for Tbs_RequestLocationInformation_r13
    */
   public TBS_RequestLocationInformation_r13 getTbs_RequestLocationInformation_r13 () {
      return tbs_RequestLocationInformation_r13;
   }

   public void setTbs_RequestLocationInformation_r13 (TBS_RequestLocationInformation_r13 value) {
      this.tbs_RequestLocationInformation_r13 = value;
   }

   public boolean hasTbs_RequestLocationInformation_r13 () {
      return (tbs_RequestLocationInformation_r13 != null);
   }

   /**
    * Accessor/mutator methods for Wlan_RequestLocationInformation_r13
    */
   public WLAN_RequestLocationInformation_r13 getWlan_RequestLocationInformation_r13 () {
      return wlan_RequestLocationInformation_r13;
   }

   public void setWlan_RequestLocationInformation_r13 (WLAN_RequestLocationInformation_r13 value) {
      this.wlan_RequestLocationInformation_r13 = value;
   }

   public boolean hasWlan_RequestLocationInformation_r13 () {
      return (wlan_RequestLocationInformation_r13 != null);
   }

   /**
    * Accessor/mutator methods for Bt_RequestLocationInformation_r13
    */
   public BT_RequestLocationInformation_r13 getBt_RequestLocationInformation_r13 () {
      return bt_RequestLocationInformation_r13;
   }

   public void setBt_RequestLocationInformation_r13 (BT_RequestLocationInformation_r13 value) {
      this.bt_RequestLocationInformation_r13 = value;
   }

   public boolean hasBt_RequestLocationInformation_r13 () {
      return (bt_RequestLocationInformation_r13 != null);
   }

   /**
    * Accessor/mutator methods for Nr_ECID_RequestLocationInformation_r16
    */
   public NR_ECID_RequestLocationInformation_r16 getNr_ECID_RequestLocationInformation_r16 () {
      return nr_ECID_RequestLocationInformation_r16;
   }

   public void setNr_ECID_RequestLocationInformation_r16 (NR_ECID_RequestLocationInformation_r16 value) {
      this.nr_ECID_RequestLocationInformation_r16 = value;
   }

   public boolean hasNr_ECID_RequestLocationInformation_r16 () {
      return (nr_ECID_RequestLocationInformation_r16 != null);
   }

   /**
    * Accessor/mutator methods for Nr_Multi_RTT_RequestLocationInformation_r16
    */
   public NR_Multi_RTT_RequestLocationInformation_r16 getNr_Multi_RTT_RequestLocationInformation_r16 () {
      return nr_Multi_RTT_RequestLocationInformation_r16;
   }

   public void setNr_Multi_RTT_RequestLocationInformation_r16 (NR_Multi_RTT_RequestLocationInformation_r16 value) {
      this.nr_Multi_RTT_RequestLocationInformation_r16 = value;
   }

   public boolean hasNr_Multi_RTT_RequestLocationInformation_r16 () {
      return (nr_Multi_RTT_RequestLocationInformation_r16 != null);
   }

   /**
    * Accessor/mutator methods for Nr_DL_AoD_RequestLocationInformation_r16
    */
   public NR_DL_AoD_RequestLocationInformation_r16 getNr_DL_AoD_RequestLocationInformation_r16 () {
      return nr_DL_AoD_RequestLocationInformation_r16;
   }

   public void setNr_DL_AoD_RequestLocationInformation_r16 (NR_DL_AoD_RequestLocationInformation_r16 value) {
      this.nr_DL_AoD_RequestLocationInformation_r16 = value;
   }

   public boolean hasNr_DL_AoD_RequestLocationInformation_r16 () {
      return (nr_DL_AoD_RequestLocationInformation_r16 != null);
   }

   /**
    * Accessor/mutator methods for Nr_DL_TDOA_RequestLocationInformation_r16
    */
   public NR_DL_TDOA_RequestLocationInformation_r16 getNr_DL_TDOA_RequestLocationInformation_r16 () {
      return nr_DL_TDOA_RequestLocationInformation_r16;
   }

   public void setNr_DL_TDOA_RequestLocationInformation_r16 (NR_DL_TDOA_RequestLocationInformation_r16 value) {
      this.nr_DL_TDOA_RequestLocationInformation_r16 = value;
   }

   public boolean hasNr_DL_TDOA_RequestLocationInformation_r16 () {
      return (nr_DL_TDOA_RequestLocationInformation_r16 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return commonIEsRequestLocationInformation;
         case 1: return a_gnss_RequestLocationInformation;
         case 2: return otdoa_RequestLocationInformation;
         case 3: return ecid_RequestLocationInformation;
         case 4: return epdu_RequestLocationInformation;
         case 5: return sensor_RequestLocationInformation_r13;
         case 6: return tbs_RequestLocationInformation_r13;
         case 7: return wlan_RequestLocationInformation_r13;
         case 8: return bt_RequestLocationInformation_r13;
         case 9: return nr_ECID_RequestLocationInformation_r16;
         case 10: return nr_Multi_RTT_RequestLocationInformation_r16;
         case 11: return nr_DL_AoD_RequestLocationInformation_r16;
         case 12: return nr_DL_TDOA_RequestLocationInformation_r16;
         case 13: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "commonIEsRequestLocationInformation";
         case 1: return "a-gnss-RequestLocationInformation";
         case 2: return "otdoa-RequestLocationInformation";
         case 3: return "ecid-RequestLocationInformation";
         case 4: return "epdu-RequestLocationInformation";
         case 5: return "sensor-RequestLocationInformation-r13";
         case 6: return "tbs-RequestLocationInformation-r13";
         case 7: return "wlan-RequestLocationInformation-r13";
         case 8: return "bt-RequestLocationInformation-r13";
         case 9: return "nr-ECID-RequestLocationInformation-r16";
         case 10: return "nr-Multi-RTT-RequestLocationInformation-r16";
         case 11: return "nr-DL-AoD-RequestLocationInformation-r16";
         case 12: return "nr-DL-TDOA-RequestLocationInformation-r16";
         case 13: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean commonIEsRequestLocationInformationPresent = buffer.decodeBit ("commonIEsRequestLocationInformationPresent");
      boolean a_gnss_RequestLocationInformationPresent = buffer.decodeBit ("a_gnss_RequestLocationInformationPresent");
      boolean otdoa_RequestLocationInformationPresent = buffer.decodeBit ("otdoa_RequestLocationInformationPresent");
      boolean ecid_RequestLocationInformationPresent = buffer.decodeBit ("ecid_RequestLocationInformationPresent");
      boolean epdu_RequestLocationInformationPresent = buffer.decodeBit ("epdu_RequestLocationInformationPresent");

      // decode commonIEsRequestLocationInformation

      if (commonIEsRequestLocationInformationPresent) {
         buffer.getContext().eventDispatcher.startElement("commonIEsRequestLocationInformation", -1);

         commonIEsRequestLocationInformation = new CommonIEsRequestLocationInformation();
         commonIEsRequestLocationInformation.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("commonIEsRequestLocationInformation", -1);
      }
      else {
         commonIEsRequestLocationInformation = null;
      }

      // decode a_gnss_RequestLocationInformation

      if (a_gnss_RequestLocationInformationPresent) {
         buffer.getContext().eventDispatcher.startElement("a_gnss_RequestLocationInformation", -1);

         a_gnss_RequestLocationInformation = new A_GNSS_RequestLocationInformation();
         a_gnss_RequestLocationInformation.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("a_gnss_RequestLocationInformation", -1);
      }
      else {
         a_gnss_RequestLocationInformation = null;
      }

      // decode otdoa_RequestLocationInformation

      if (otdoa_RequestLocationInformationPresent) {
         buffer.getContext().eventDispatcher.startElement("otdoa_RequestLocationInformation", -1);

         otdoa_RequestLocationInformation = new OTDOA_RequestLocationInformation();
         otdoa_RequestLocationInformation.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("otdoa_RequestLocationInformation", -1);
      }
      else {
         otdoa_RequestLocationInformation = null;
      }

      // decode ecid_RequestLocationInformation

      if (ecid_RequestLocationInformationPresent) {
         buffer.getContext().eventDispatcher.startElement("ecid_RequestLocationInformation", -1);

         ecid_RequestLocationInformation = new ECID_RequestLocationInformation();
         ecid_RequestLocationInformation.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ecid_RequestLocationInformation", -1);
      }
      else {
         ecid_RequestLocationInformation = null;
      }

      // decode epdu_RequestLocationInformation

      if (epdu_RequestLocationInformationPresent) {
         buffer.getContext().eventDispatcher.startElement("epdu_RequestLocationInformation", -1);

         epdu_RequestLocationInformation = new EPDU_Sequence();
         epdu_RequestLocationInformation.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("epdu_RequestLocationInformation", -1);
      }
      else {
         epdu_RequestLocationInformation = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("sensor_RequestLocationInformation_r13Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("tbs_RequestLocationInformation_r13Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("wlan_RequestLocationInformation_r13Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("bt_RequestLocationInformation_r13Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("nr_ECID_RequestLocationInformation_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("nr_Multi_RTT_RequestLocationInformation_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("nr_DL_AoD_RequestLocationInformation_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("nr_DL_TDOA_RequestLocationInformation_r16Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode sensor_RequestLocationInformation_r13

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("sensor_RequestLocationInformation_r13", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            sensor_RequestLocationInformation_r13 = new Sensor_RequestLocationInformation_r13();
            sensor_RequestLocationInformation_r13.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("sensor_RequestLocationInformation_r13", -1);

         }
         else {
            sensor_RequestLocationInformation_r13 = null;
         }

         // decode tbs_RequestLocationInformation_r13

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("tbs_RequestLocationInformation_r13", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            tbs_RequestLocationInformation_r13 = new TBS_RequestLocationInformation_r13();
            tbs_RequestLocationInformation_r13.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("tbs_RequestLocationInformation_r13", -1);

         }
         else {
            tbs_RequestLocationInformation_r13 = null;
         }

         // decode wlan_RequestLocationInformation_r13

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("wlan_RequestLocationInformation_r13", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            wlan_RequestLocationInformation_r13 = new WLAN_RequestLocationInformation_r13();
            wlan_RequestLocationInformation_r13.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("wlan_RequestLocationInformation_r13", -1);

         }
         else {
            wlan_RequestLocationInformation_r13 = null;
         }

         // decode bt_RequestLocationInformation_r13

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("bt_RequestLocationInformation_r13", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            bt_RequestLocationInformation_r13 = new BT_RequestLocationInformation_r13();
            bt_RequestLocationInformation_r13.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("bt_RequestLocationInformation_r13", -1);

         }
         else {
            bt_RequestLocationInformation_r13 = null;
         }

         // decode nr_ECID_RequestLocationInformation_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("nr_ECID_RequestLocationInformation_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            nr_ECID_RequestLocationInformation_r16 = new NR_ECID_RequestLocationInformation_r16();
            nr_ECID_RequestLocationInformation_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("nr_ECID_RequestLocationInformation_r16", -1);

         }
         else {
            nr_ECID_RequestLocationInformation_r16 = null;
         }

         // decode nr_Multi_RTT_RequestLocationInformation_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("nr_Multi_RTT_RequestLocationInformation_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            nr_Multi_RTT_RequestLocationInformation_r16 = new NR_Multi_RTT_RequestLocationInformation_r16();
            nr_Multi_RTT_RequestLocationInformation_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("nr_Multi_RTT_RequestLocationInformation_r16", -1);

         }
         else {
            nr_Multi_RTT_RequestLocationInformation_r16 = null;
         }

         // decode nr_DL_AoD_RequestLocationInformation_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("nr_DL_AoD_RequestLocationInformation_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            nr_DL_AoD_RequestLocationInformation_r16 = new NR_DL_AoD_RequestLocationInformation_r16();
            nr_DL_AoD_RequestLocationInformation_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("nr_DL_AoD_RequestLocationInformation_r16", -1);

         }
         else {
            nr_DL_AoD_RequestLocationInformation_r16 = null;
         }

         // decode nr_DL_TDOA_RequestLocationInformation_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("nr_DL_TDOA_RequestLocationInformation_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            nr_DL_TDOA_RequestLocationInformation_r16 = new NR_DL_TDOA_RequestLocationInformation_r16();
            nr_DL_TDOA_RequestLocationInformation_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("nr_DL_TDOA_RequestLocationInformation_r16", -1);

         }
         else {
            nr_DL_TDOA_RequestLocationInformation_r16 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((sensor_RequestLocationInformation_r13 != null) ||
      (tbs_RequestLocationInformation_r13 != null) ||
      (wlan_RequestLocationInformation_r13 != null) ||
      (bt_RequestLocationInformation_r13 != null) ||
      (nr_ECID_RequestLocationInformation_r16 != null) ||
      (nr_Multi_RTT_RequestLocationInformation_r16 != null) ||
      (nr_DL_AoD_RequestLocationInformation_r16 != null) ||
      (nr_DL_TDOA_RequestLocationInformation_r16 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((commonIEsRequestLocationInformation != null), null);
      buffer.encodeBit ((a_gnss_RequestLocationInformation != null), null);
      buffer.encodeBit ((otdoa_RequestLocationInformation != null), null);
      buffer.encodeBit ((ecid_RequestLocationInformation != null), null);
      buffer.encodeBit ((epdu_RequestLocationInformation != null), null);

      // encode commonIEsRequestLocationInformation

      if (commonIEsRequestLocationInformation != null) {
         buffer.getContext().eventDispatcher.startElement("commonIEsRequestLocationInformation", -1);

         commonIEsRequestLocationInformation.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("commonIEsRequestLocationInformation", -1);
      }

      // encode a_gnss_RequestLocationInformation

      if (a_gnss_RequestLocationInformation != null) {
         buffer.getContext().eventDispatcher.startElement("a_gnss_RequestLocationInformation", -1);

         a_gnss_RequestLocationInformation.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("a_gnss_RequestLocationInformation", -1);
      }

      // encode otdoa_RequestLocationInformation

      if (otdoa_RequestLocationInformation != null) {
         buffer.getContext().eventDispatcher.startElement("otdoa_RequestLocationInformation", -1);

         otdoa_RequestLocationInformation.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("otdoa_RequestLocationInformation", -1);
      }

      // encode ecid_RequestLocationInformation

      if (ecid_RequestLocationInformation != null) {
         buffer.getContext().eventDispatcher.startElement("ecid_RequestLocationInformation", -1);

         ecid_RequestLocationInformation.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ecid_RequestLocationInformation", -1);
      }

      // encode epdu_RequestLocationInformation

      if (epdu_RequestLocationInformation != null) {
         buffer.getContext().eventDispatcher.startElement("epdu_RequestLocationInformation", -1);

         epdu_RequestLocationInformation.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("epdu_RequestLocationInformation", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 8;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((sensor_RequestLocationInformation_r13 != null), null);
         buffer.encodeBit ((tbs_RequestLocationInformation_r13 != null), null);
         buffer.encodeBit ((wlan_RequestLocationInformation_r13 != null), null);
         buffer.encodeBit ((bt_RequestLocationInformation_r13 != null), null);
         buffer.encodeBit ((nr_ECID_RequestLocationInformation_r16 != null), null);
         buffer.encodeBit ((nr_Multi_RTT_RequestLocationInformation_r16 != null), null);
         buffer.encodeBit ((nr_DL_AoD_RequestLocationInformation_r16 != null), null);
         buffer.encodeBit ((nr_DL_TDOA_RequestLocationInformation_r16 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // sensor_RequestLocationInformation_r13

         if (sensor_RequestLocationInformation_r13 != null) {
            buffer.reset();
            sensor_RequestLocationInformation_r13.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("sensor_RequestLocationInformation_r13", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("sensor_RequestLocationInformation_r13", -1);
         }

         // tbs_RequestLocationInformation_r13

         if (tbs_RequestLocationInformation_r13 != null) {
            buffer.reset();
            tbs_RequestLocationInformation_r13.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("tbs_RequestLocationInformation_r13", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("tbs_RequestLocationInformation_r13", -1);
         }

         // wlan_RequestLocationInformation_r13

         if (wlan_RequestLocationInformation_r13 != null) {
            buffer.reset();
            wlan_RequestLocationInformation_r13.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("wlan_RequestLocationInformation_r13", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("wlan_RequestLocationInformation_r13", -1);
         }

         // bt_RequestLocationInformation_r13

         if (bt_RequestLocationInformation_r13 != null) {
            buffer.reset();
            bt_RequestLocationInformation_r13.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("bt_RequestLocationInformation_r13", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("bt_RequestLocationInformation_r13", -1);
         }

         // nr_ECID_RequestLocationInformation_r16

         if (nr_ECID_RequestLocationInformation_r16 != null) {
            buffer.reset();
            nr_ECID_RequestLocationInformation_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("nr_ECID_RequestLocationInformation_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("nr_ECID_RequestLocationInformation_r16", -1);
         }

         // nr_Multi_RTT_RequestLocationInformation_r16

         if (nr_Multi_RTT_RequestLocationInformation_r16 != null) {
            buffer.reset();
            nr_Multi_RTT_RequestLocationInformation_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("nr_Multi_RTT_RequestLocationInformation_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("nr_Multi_RTT_RequestLocationInformation_r16", -1);
         }

         // nr_DL_AoD_RequestLocationInformation_r16

         if (nr_DL_AoD_RequestLocationInformation_r16 != null) {
            buffer.reset();
            nr_DL_AoD_RequestLocationInformation_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("nr_DL_AoD_RequestLocationInformation_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("nr_DL_AoD_RequestLocationInformation_r16", -1);
         }

         // nr_DL_TDOA_RequestLocationInformation_r16

         if (nr_DL_TDOA_RequestLocationInformation_r16 != null) {
            buffer.reset();
            nr_DL_TDOA_RequestLocationInformation_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("nr_DL_TDOA_RequestLocationInformation_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("nr_DL_TDOA_RequestLocationInformation_r16", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
