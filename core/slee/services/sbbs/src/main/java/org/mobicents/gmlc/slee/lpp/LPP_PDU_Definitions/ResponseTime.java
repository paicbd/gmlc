/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class ResponseTime extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ResponseTime";
   }

   protected Asn1Integer time;
   protected Asn1Integer responseTimeEarlyFix_r12;  // optional
   protected ResponseTime_unit_r15 unit_r15 = null;  // optional
   protected Asn1OpenExt extElem1;

   public ResponseTime () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ResponseTime (
      Asn1Integer time_,
      Asn1Integer responseTimeEarlyFix_r12_,
      ResponseTime_unit_r15 unit_r15_
   ) throws Asn1Exception {
      super();
      setTime (time_);
      setResponseTimeEarlyFix_r12 (responseTimeEarlyFix_r12_);
      setUnit_r15 (unit_r15_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ResponseTime (
      Asn1Integer time_
   ) throws Asn1Exception {
      super();
      setTime (time_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ResponseTime (long time_,
      long responseTimeEarlyFix_r12_,
      ResponseTime_unit_r15 unit_r15_
   ) throws Asn1Exception {
      super();
      setTime (time_);
      setResponseTimeEarlyFix_r12 (responseTimeEarlyFix_r12_);
      setUnit_r15 (unit_r15_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ResponseTime (
      long time_
   ) throws Asn1Exception {
      super();
      setTime (time_);
   }

   public void init () {
      time = null;
      responseTimeEarlyFix_r12 = null;
      unit_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof ResponseTime) ) return false;

      ResponseTime rhs = (ResponseTime) obj;

      if (time == null) {
         if (rhs.time != null) return false;
      }
      else {
         if (!time.equals(rhs.time)) {
            return false;
         }
      }

      if (responseTimeEarlyFix_r12 == null) {
         if (rhs.responseTimeEarlyFix_r12 != null) return false;
      }
      else {
         if (!responseTimeEarlyFix_r12.equals(rhs.responseTimeEarlyFix_r12)) {
            return false;
         }
      }

      if (unit_r15 == null) {
         if (rhs.unit_r15 != null) return false;
      }
      else {
         if (!unit_r15.equals(rhs.unit_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (time != null) __code = 31*__code + time.hashCode();
      if (responseTimeEarlyFix_r12 != null) __code = 31*__code + responseTimeEarlyFix_r12.hashCode();
      if (unit_r15 != null) __code = 31*__code + unit_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Time
    */
   public Asn1Integer getTime () {
      return time;
   }

   public void setTime (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 128))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.time = value;
   }

   public void setTime (long value) 
      throws Asn1Exception
   {
      setTime (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ResponseTimeEarlyFix_r12
    */
   public Asn1Integer getResponseTimeEarlyFix_r12 () {
      return responseTimeEarlyFix_r12;
   }

   public void setResponseTimeEarlyFix_r12 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 128))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.responseTimeEarlyFix_r12 = value;
   }

   public void setResponseTimeEarlyFix_r12 (long value) 
      throws Asn1Exception
   {
      setResponseTimeEarlyFix_r12 (new Asn1Integer(value));
   }
   public boolean hasResponseTimeEarlyFix_r12 () {
      return (responseTimeEarlyFix_r12 != null);
   }

   /**
    * Accessor/mutator methods for Unit_r15
    */
   public ResponseTime_unit_r15 getUnit_r15 () {
      return unit_r15;
   }

   public void setUnit_r15 (ResponseTime_unit_r15 value) {
      this.unit_r15 = value;
   }

   public boolean hasUnit_r15 () {
      return (unit_r15 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return time;
         case 1: return responseTimeEarlyFix_r12;
         case 2: return unit_r15;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "time";
         case 1: return "responseTimeEarlyFix-r12";
         case 2: return "unit-r15";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode time

      buffer.getContext().eventDispatcher.startElement("time", -1);

      time = new Asn1Integer();
      time.decode (buffer, 1, 128);
      buffer.getContext().eventDispatcher.endElement("time", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("responseTimeEarlyFix_r12Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("unit_r15Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode responseTimeEarlyFix_r12

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("responseTimeEarlyFix_r12", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            responseTimeEarlyFix_r12 = new Asn1Integer();
            responseTimeEarlyFix_r12.decode (buffer, 1, 128);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("responseTimeEarlyFix_r12", -1);

         }
         else {
            responseTimeEarlyFix_r12 = null;
         }

         // decode unit_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("unit_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = ResponseTime_unit_r15.decodeEnumValue (buffer);
               unit_r15 = ResponseTime_unit_r15.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("unit_r15", -1);

         }
         else {
            unit_r15 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((responseTimeEarlyFix_r12 != null) ||
      (unit_r15 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode time

      if (time != null) {
         buffer.getContext().eventDispatcher.startElement("time", -1);

         time.encode (buffer, 1, 128);

         buffer.getContext().eventDispatcher.endElement("time", -1);
      }
      else throw new Asn1MissingRequiredException ("time");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 2;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((responseTimeEarlyFix_r12 != null), null);
         buffer.encodeBit ((unit_r15 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // responseTimeEarlyFix_r12

         if (responseTimeEarlyFix_r12 != null) {
            buffer.reset();
            responseTimeEarlyFix_r12.encode (buffer, 1, 128);
            buffer.getContext().eventDispatcher.startElement("responseTimeEarlyFix_r12", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("responseTimeEarlyFix_r12", -1);
         }

         // unit_r15

         if (unit_r15 != null) {
            buffer.reset();
            unit_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("unit_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("unit_r15", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
