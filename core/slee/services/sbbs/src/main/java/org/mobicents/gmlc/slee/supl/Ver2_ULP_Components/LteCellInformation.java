/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class LteCellInformation extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "LteCellInformation";
   }

   protected CellGlobalIdEUTRA cellGlobalIdEUTRA;
   protected PhysCellId physCellId;
   protected TrackingAreaCode trackingAreaCode;
   protected RSRP_Range rsrpResult;  // optional
   protected RSRQ_Range rsrqResult;  // optional
   protected Asn1Integer ta;  // optional
   protected MeasResultListEUTRA measResultListEUTRA;  // optional
   protected Asn1Integer earfcn;  // optional
   protected Asn1Integer earfcn_ext;  // optional
   protected RSRP_Range_Ext rsrpResult_ext;  // optional
   protected RSRQ_Range_Ext rsrqResult_ext;  // optional
   protected RS_SINR_Range rs_sinrResult;  // optional
   protected ServingInformation5G servingInformation5G;  // optional
   protected Asn1OpenExt extElem1;

   public LteCellInformation () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public LteCellInformation (
      CellGlobalIdEUTRA cellGlobalIdEUTRA_,
      PhysCellId physCellId_,
      TrackingAreaCode trackingAreaCode_,
      RSRP_Range rsrpResult_,
      RSRQ_Range rsrqResult_,
      Asn1Integer ta_,
      MeasResultListEUTRA measResultListEUTRA_,
      Asn1Integer earfcn_,
      Asn1Integer earfcn_ext_,
      RSRP_Range_Ext rsrpResult_ext_,
      RSRQ_Range_Ext rsrqResult_ext_,
      RS_SINR_Range rs_sinrResult_,
      ServingInformation5G servingInformation5G_
   ) throws Asn1Exception {
      super();
      setCellGlobalIdEUTRA (cellGlobalIdEUTRA_);
      setPhysCellId (physCellId_);
      setTrackingAreaCode (trackingAreaCode_);
      setRsrpResult (rsrpResult_);
      setRsrqResult (rsrqResult_);
      setTa (ta_);
      setMeasResultListEUTRA (measResultListEUTRA_);
      setEarfcn (earfcn_);
      setEarfcn_ext (earfcn_ext_);
      setRsrpResult_ext (rsrpResult_ext_);
      setRsrqResult_ext (rsrqResult_ext_);
      setRs_sinrResult (rs_sinrResult_);
      setServingInformation5G (servingInformation5G_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public LteCellInformation (
      CellGlobalIdEUTRA cellGlobalIdEUTRA_,
      PhysCellId physCellId_,
      TrackingAreaCode trackingAreaCode_
   ) throws Asn1Exception {
      super();
      setCellGlobalIdEUTRA (cellGlobalIdEUTRA_);
      setPhysCellId (physCellId_);
      setTrackingAreaCode (trackingAreaCode_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public LteCellInformation (CellGlobalIdEUTRA cellGlobalIdEUTRA_,
      long physCellId_,
      TrackingAreaCode trackingAreaCode_,
      long rsrpResult_,
      long rsrqResult_,
      long ta_,
      MeasResultListEUTRA measResultListEUTRA_,
      long earfcn_,
      long earfcn_ext_,
      long rsrpResult_ext_,
      long rsrqResult_ext_,
      long rs_sinrResult_,
      ServingInformation5G servingInformation5G_
   ) throws Asn1Exception {
      super();
      setCellGlobalIdEUTRA (cellGlobalIdEUTRA_);
      setPhysCellId (physCellId_);
      setTrackingAreaCode (trackingAreaCode_);
      setRsrpResult (rsrpResult_);
      setRsrqResult (rsrqResult_);
      setTa (ta_);
      setMeasResultListEUTRA (measResultListEUTRA_);
      setEarfcn (earfcn_);
      setEarfcn_ext (earfcn_ext_);
      setRsrpResult_ext (rsrpResult_ext_);
      setRsrqResult_ext (rsrqResult_ext_);
      setRs_sinrResult (rs_sinrResult_);
      setServingInformation5G (servingInformation5G_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public LteCellInformation (
      CellGlobalIdEUTRA cellGlobalIdEUTRA_,
      long physCellId_,
      TrackingAreaCode trackingAreaCode_
   ) throws Asn1Exception {
      super();
      setCellGlobalIdEUTRA (cellGlobalIdEUTRA_);
      setPhysCellId (physCellId_);
      setTrackingAreaCode (trackingAreaCode_);
   }

   public void init () {
      cellGlobalIdEUTRA = null;
      physCellId = null;
      trackingAreaCode = null;
      rsrpResult = null;
      rsrqResult = null;
      ta = null;
      measResultListEUTRA = null;
      earfcn = null;
      earfcn_ext = null;
      rsrpResult_ext = null;
      rsrqResult_ext = null;
      rs_sinrResult = null;
      servingInformation5G = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof LteCellInformation) ) return false;

      LteCellInformation rhs = (LteCellInformation) obj;

      if (cellGlobalIdEUTRA == null) {
         if (rhs.cellGlobalIdEUTRA != null) return false;
      }
      else {
         if (!cellGlobalIdEUTRA.equals(rhs.cellGlobalIdEUTRA)) {
            return false;
         }
      }

      if (physCellId == null) {
         if (rhs.physCellId != null) return false;
      }
      else {
         if (!physCellId.equals(rhs.physCellId)) {
            return false;
         }
      }

      if (trackingAreaCode == null) {
         if (rhs.trackingAreaCode != null) return false;
      }
      else {
         if (!trackingAreaCode.equals(rhs.trackingAreaCode)) {
            return false;
         }
      }

      if (rsrpResult == null) {
         if (rhs.rsrpResult != null) return false;
      }
      else {
         if (!rsrpResult.equals(rhs.rsrpResult)) {
            return false;
         }
      }

      if (rsrqResult == null) {
         if (rhs.rsrqResult != null) return false;
      }
      else {
         if (!rsrqResult.equals(rhs.rsrqResult)) {
            return false;
         }
      }

      if (ta == null) {
         if (rhs.ta != null) return false;
      }
      else {
         if (!ta.equals(rhs.ta)) {
            return false;
         }
      }

      if (measResultListEUTRA == null) {
         if (rhs.measResultListEUTRA != null) return false;
      }
      else {
         if (!measResultListEUTRA.equals(rhs.measResultListEUTRA)) {
            return false;
         }
      }

      if (earfcn == null) {
         if (rhs.earfcn != null) return false;
      }
      else {
         if (!earfcn.equals(rhs.earfcn)) {
            return false;
         }
      }

      if (earfcn_ext == null) {
         if (rhs.earfcn_ext != null) return false;
      }
      else {
         if (!earfcn_ext.equals(rhs.earfcn_ext)) {
            return false;
         }
      }

      if (rsrpResult_ext == null) {
         if (rhs.rsrpResult_ext != null) return false;
      }
      else {
         if (!rsrpResult_ext.equals(rhs.rsrpResult_ext)) {
            return false;
         }
      }

      if (rsrqResult_ext == null) {
         if (rhs.rsrqResult_ext != null) return false;
      }
      else {
         if (!rsrqResult_ext.equals(rhs.rsrqResult_ext)) {
            return false;
         }
      }

      if (rs_sinrResult == null) {
         if (rhs.rs_sinrResult != null) return false;
      }
      else {
         if (!rs_sinrResult.equals(rhs.rs_sinrResult)) {
            return false;
         }
      }

      if (servingInformation5G == null) {
         if (rhs.servingInformation5G != null) return false;
      }
      else {
         if (!servingInformation5G.equals(rhs.servingInformation5G)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (cellGlobalIdEUTRA != null) __code = 31*__code + cellGlobalIdEUTRA.hashCode();
      if (physCellId != null) __code = 31*__code + physCellId.hashCode();
      if (trackingAreaCode != null) __code = 31*__code + trackingAreaCode.hashCode();
      if (rsrpResult != null) __code = 31*__code + rsrpResult.hashCode();
      if (rsrqResult != null) __code = 31*__code + rsrqResult.hashCode();
      if (ta != null) __code = 31*__code + ta.hashCode();
      if (measResultListEUTRA != null) __code = 31*__code + measResultListEUTRA.hashCode();
      if (earfcn != null) __code = 31*__code + earfcn.hashCode();
      if (earfcn_ext != null) __code = 31*__code + earfcn_ext.hashCode();
      if (rsrpResult_ext != null) __code = 31*__code + rsrpResult_ext.hashCode();
      if (rsrqResult_ext != null) __code = 31*__code + rsrqResult_ext.hashCode();
      if (rs_sinrResult != null) __code = 31*__code + rs_sinrResult.hashCode();
      if (servingInformation5G != null) __code = 31*__code + servingInformation5G.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for CellGlobalIdEUTRA
    */
   public CellGlobalIdEUTRA getCellGlobalIdEUTRA () {
      return cellGlobalIdEUTRA;
   }

   public void setCellGlobalIdEUTRA (CellGlobalIdEUTRA value) {
      this.cellGlobalIdEUTRA = value;
   }

   /**
    * Accessor/mutator methods for PhysCellId
    */
   public PhysCellId getPhysCellId () {
      return physCellId;
   }

   public void setPhysCellId (PhysCellId value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 503))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.physCellId = value;
   }

   public void setPhysCellId (long value) 
      throws Asn1Exception
   {
      setPhysCellId (new PhysCellId(value));
   }

   /**
    * Accessor/mutator methods for TrackingAreaCode
    */
   public TrackingAreaCode getTrackingAreaCode () {
      return trackingAreaCode;
   }

   public void setTrackingAreaCode (TrackingAreaCode value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 16)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.trackingAreaCode = value;
   }

   /**
    * Accessor/mutator methods for RsrpResult
    */
   public RSRP_Range getRsrpResult () {
      return rsrpResult;
   }

   public void setRsrpResult (RSRP_Range value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 97))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.rsrpResult = value;
   }

   public void setRsrpResult (long value) 
      throws Asn1Exception
   {
      setRsrpResult (new RSRP_Range(value));
   }
   public boolean hasRsrpResult () {
      return (rsrpResult != null);
   }

   /**
    * Accessor/mutator methods for RsrqResult
    */
   public RSRQ_Range getRsrqResult () {
      return rsrqResult;
   }

   public void setRsrqResult (RSRQ_Range value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 34))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.rsrqResult = value;
   }

   public void setRsrqResult (long value) 
      throws Asn1Exception
   {
      setRsrqResult (new RSRQ_Range(value));
   }
   public boolean hasRsrqResult () {
      return (rsrqResult != null);
   }

   /**
    * Accessor/mutator methods for Ta
    */
   public Asn1Integer getTa () {
      return ta;
   }

   public void setTa (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1282))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.ta = value;
   }

   public void setTa (long value) 
      throws Asn1Exception
   {
      setTa (new Asn1Integer(value));
   }
   public boolean hasTa () {
      return (ta != null);
   }

   /**
    * Accessor/mutator methods for MeasResultListEUTRA
    */
   public MeasResultListEUTRA getMeasResultListEUTRA () {
      return measResultListEUTRA;
   }

   public void setMeasResultListEUTRA (MeasResultListEUTRA value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 8))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.measResultListEUTRA = value;
   }

   public boolean hasMeasResultListEUTRA () {
      return (measResultListEUTRA != null);
   }

   /**
    * Accessor/mutator methods for Earfcn
    */
   public Asn1Integer getEarfcn () {
      return earfcn;
   }

   public void setEarfcn (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.earfcn = value;
   }

   public void setEarfcn (long value) 
      throws Asn1Exception
   {
      setEarfcn (new Asn1Integer(value));
   }
   public boolean hasEarfcn () {
      return (earfcn != null);
   }

   /**
    * Accessor/mutator methods for Earfcn_ext
    */
   public Asn1Integer getEarfcn_ext () {
      return earfcn_ext;
   }

   public void setEarfcn_ext (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 65536 && value.value <= 262143))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.earfcn_ext = value;
   }

   public void setEarfcn_ext (long value) 
      throws Asn1Exception
   {
      setEarfcn_ext (new Asn1Integer(value));
   }
   public boolean hasEarfcn_ext () {
      return (earfcn_ext != null);
   }

   /**
    * Accessor/mutator methods for RsrpResult_ext
    */
   public RSRP_Range_Ext getRsrpResult_ext () {
      return rsrpResult_ext;
   }

   public void setRsrpResult_ext (RSRP_Range_Ext value) 
      throws Asn1Exception
   {
      if (!((value.value >= -17 && value.value <= -1))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.rsrpResult_ext = value;
   }

   public void setRsrpResult_ext (long value) 
      throws Asn1Exception
   {
      setRsrpResult_ext (new RSRP_Range_Ext(value));
   }
   public boolean hasRsrpResult_ext () {
      return (rsrpResult_ext != null);
   }

   /**
    * Accessor/mutator methods for RsrqResult_ext
    */
   public RSRQ_Range_Ext getRsrqResult_ext () {
      return rsrqResult_ext;
   }

   public void setRsrqResult_ext (RSRQ_Range_Ext value) 
      throws Asn1Exception
   {
      if (!((value.value >= -30 && value.value <= 46))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.rsrqResult_ext = value;
   }

   public void setRsrqResult_ext (long value) 
      throws Asn1Exception
   {
      setRsrqResult_ext (new RSRQ_Range_Ext(value));
   }
   public boolean hasRsrqResult_ext () {
      return (rsrqResult_ext != null);
   }

   /**
    * Accessor/mutator methods for Rs_sinrResult
    */
   public RS_SINR_Range getRs_sinrResult () {
      return rs_sinrResult;
   }

   public void setRs_sinrResult (RS_SINR_Range value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.rs_sinrResult = value;
   }

   public void setRs_sinrResult (long value) 
      throws Asn1Exception
   {
      setRs_sinrResult (new RS_SINR_Range(value));
   }
   public boolean hasRs_sinrResult () {
      return (rs_sinrResult != null);
   }

   /**
    * Accessor/mutator methods for ServingInformation5G
    */
   public ServingInformation5G getServingInformation5G () {
      return servingInformation5G;
   }

   public void setServingInformation5G (ServingInformation5G value) {
      this.servingInformation5G = value;
   }

   public boolean hasServingInformation5G () {
      return (servingInformation5G != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cellGlobalIdEUTRA;
         case 1: return physCellId;
         case 2: return trackingAreaCode;
         case 3: return rsrpResult;
         case 4: return rsrqResult;
         case 5: return ta;
         case 6: return measResultListEUTRA;
         case 7: return earfcn;
         case 8: return earfcn_ext;
         case 9: return rsrpResult_ext;
         case 10: return rsrqResult_ext;
         case 11: return rs_sinrResult;
         case 12: return servingInformation5G;
         case 13: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cellGlobalIdEUTRA";
         case 1: return "physCellId";
         case 2: return "trackingAreaCode";
         case 3: return "rsrpResult";
         case 4: return "rsrqResult";
         case 5: return "ta";
         case 6: return "measResultListEUTRA";
         case 7: return "earfcn";
         case 8: return "earfcn-ext";
         case 9: return "rsrpResult-ext";
         case 10: return "rsrqResult-ext";
         case 11: return "rs-sinrResult";
         case 12: return "servingInformation5G";
         case 13: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean rsrpResultPresent = buffer.decodeBit ("rsrpResultPresent");
      boolean rsrqResultPresent = buffer.decodeBit ("rsrqResultPresent");
      boolean taPresent = buffer.decodeBit ("taPresent");
      boolean measResultListEUTRAPresent = buffer.decodeBit ("measResultListEUTRAPresent");

      // decode cellGlobalIdEUTRA

      buffer.getContext().eventDispatcher.startElement("cellGlobalIdEUTRA", -1);

      cellGlobalIdEUTRA = new CellGlobalIdEUTRA();
      cellGlobalIdEUTRA.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cellGlobalIdEUTRA", -1);

      // decode physCellId

      buffer.getContext().eventDispatcher.startElement("physCellId", -1);

      physCellId = new PhysCellId();
      physCellId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("physCellId", -1);

      // decode trackingAreaCode

      buffer.getContext().eventDispatcher.startElement("trackingAreaCode", -1);

      trackingAreaCode = new TrackingAreaCode();
      trackingAreaCode.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("trackingAreaCode", -1);

      // decode rsrpResult

      if (rsrpResultPresent) {
         buffer.getContext().eventDispatcher.startElement("rsrpResult", -1);

         rsrpResult = new RSRP_Range();
         rsrpResult.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rsrpResult", -1);
      }
      else {
         rsrpResult = null;
      }

      // decode rsrqResult

      if (rsrqResultPresent) {
         buffer.getContext().eventDispatcher.startElement("rsrqResult", -1);

         rsrqResult = new RSRQ_Range();
         rsrqResult.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rsrqResult", -1);
      }
      else {
         rsrqResult = null;
      }

      // decode ta

      if (taPresent) {
         buffer.getContext().eventDispatcher.startElement("ta", -1);

         ta = new Asn1Integer();
         ta.decode (buffer, 0, 1282);
         buffer.getContext().eventDispatcher.endElement("ta", -1);
      }
      else {
         ta = null;
      }

      // decode measResultListEUTRA

      if (measResultListEUTRAPresent) {
         buffer.getContext().eventDispatcher.startElement("measResultListEUTRA", -1);

         measResultListEUTRA = new MeasResultListEUTRA();
         measResultListEUTRA.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measResultListEUTRA", -1);
      }
      else {
         measResultListEUTRA = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("earfcnPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("earfcn_extPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("rsrpResult_extPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("rsrqResult_extPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("rs_sinrResultPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("servingInformation5GPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode earfcn

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("earfcn", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            earfcn = new Asn1Integer();
            earfcn.decode (buffer, 0, 65535);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("earfcn", -1);

         }
         else {
            earfcn = null;
         }

         // decode earfcn_ext

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("earfcn_ext", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            earfcn_ext = new Asn1Integer();
            earfcn_ext.decode (buffer, 65536, 262143);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("earfcn_ext", -1);

         }
         else {
            earfcn_ext = null;
         }

         // decode rsrpResult_ext

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("rsrpResult_ext", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            rsrpResult_ext = new RSRP_Range_Ext();
            rsrpResult_ext.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("rsrpResult_ext", -1);

         }
         else {
            rsrpResult_ext = null;
         }

         // decode rsrqResult_ext

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("rsrqResult_ext", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            rsrqResult_ext = new RSRQ_Range_Ext();
            rsrqResult_ext.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("rsrqResult_ext", -1);

         }
         else {
            rsrqResult_ext = null;
         }

         // decode rs_sinrResult

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("rs_sinrResult", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            rs_sinrResult = new RS_SINR_Range();
            rs_sinrResult.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("rs_sinrResult", -1);

         }
         else {
            rs_sinrResult = null;
         }

         // decode servingInformation5G

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("servingInformation5G", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            servingInformation5G = new ServingInformation5G();
            servingInformation5G.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("servingInformation5G", -1);

         }
         else {
            servingInformation5G = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((earfcn != null) ||
      (earfcn_ext != null) ||
      (rsrpResult_ext != null) ||
      (rsrqResult_ext != null) ||
      (rs_sinrResult != null) ||
      (servingInformation5G != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((rsrpResult != null), null);
      buffer.encodeBit ((rsrqResult != null), null);
      buffer.encodeBit ((ta != null), null);
      buffer.encodeBit ((measResultListEUTRA != null), null);

      // encode cellGlobalIdEUTRA

      if (cellGlobalIdEUTRA != null) {
         buffer.getContext().eventDispatcher.startElement("cellGlobalIdEUTRA", -1);

         cellGlobalIdEUTRA.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cellGlobalIdEUTRA", -1);
      }
      else throw new Asn1MissingRequiredException ("cellGlobalIdEUTRA");

      // encode physCellId

      if (physCellId != null) {
         buffer.getContext().eventDispatcher.startElement("physCellId", -1);

         physCellId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("physCellId", -1);
      }
      else throw new Asn1MissingRequiredException ("physCellId");

      // encode trackingAreaCode

      if (trackingAreaCode != null) {
         buffer.getContext().eventDispatcher.startElement("trackingAreaCode", -1);

         trackingAreaCode.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("trackingAreaCode", -1);
      }
      else throw new Asn1MissingRequiredException ("trackingAreaCode");

      // encode rsrpResult

      if (rsrpResult != null) {
         buffer.getContext().eventDispatcher.startElement("rsrpResult", -1);

         rsrpResult.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rsrpResult", -1);
      }

      // encode rsrqResult

      if (rsrqResult != null) {
         buffer.getContext().eventDispatcher.startElement("rsrqResult", -1);

         rsrqResult.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rsrqResult", -1);
      }

      // encode ta

      if (ta != null) {
         buffer.getContext().eventDispatcher.startElement("ta", -1);

         ta.encode (buffer, 0, 1282);

         buffer.getContext().eventDispatcher.endElement("ta", -1);
      }

      // encode measResultListEUTRA

      if (measResultListEUTRA != null) {
         buffer.getContext().eventDispatcher.startElement("measResultListEUTRA", -1);

         measResultListEUTRA.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("measResultListEUTRA", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 6;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((earfcn != null), null);
         buffer.encodeBit ((earfcn_ext != null), null);
         buffer.encodeBit ((rsrpResult_ext != null), null);
         buffer.encodeBit ((rsrqResult_ext != null), null);
         buffer.encodeBit ((rs_sinrResult != null), null);
         buffer.encodeBit ((servingInformation5G != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // earfcn

         if (earfcn != null) {
            buffer.reset();
            earfcn.encode (buffer, 0, 65535);
            buffer.getContext().eventDispatcher.startElement("earfcn", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("earfcn", -1);
         }

         // earfcn_ext

         if (earfcn_ext != null) {
            buffer.reset();
            earfcn_ext.encode (buffer, 65536, 262143);
            buffer.getContext().eventDispatcher.startElement("earfcn_ext", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("earfcn_ext", -1);
         }

         // rsrpResult_ext

         if (rsrpResult_ext != null) {
            buffer.reset();
            rsrpResult_ext.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("rsrpResult_ext", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("rsrpResult_ext", -1);
         }

         // rsrqResult_ext

         if (rsrqResult_ext != null) {
            buffer.reset();
            rsrqResult_ext.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("rsrqResult_ext", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("rsrqResult_ext", -1);
         }

         // rs_sinrResult

         if (rs_sinrResult != null) {
            buffer.reset();
            rs_sinrResult.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("rs_sinrResult", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("rs_sinrResult", -1);
         }

         // servingInformation5G

         if (servingInformation5G != null) {
            buffer.reset();
            servingInformation5G.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("servingInformation5G", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("servingInformation5G", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
