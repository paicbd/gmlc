/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NavModel_NavIC_KeplerianSet_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "NavModel-NavIC-KeplerianSet-r16";
   }

   protected Asn1Integer navic_Toe_r16;
   protected Asn1Integer navic_URAI_r16;
   protected Asn1Integer navic_W_r16;
   protected Asn1Integer navic_DeltaN_r16;
   protected Asn1Integer navic_M0_r16;
   protected Asn1Integer navic_OmegaDot_r16;
   protected Asn1Integer navic_E_r16;
   protected Asn1Integer navic_IDot_r16;
   protected Asn1Integer navic_APowerHalf_r16;
   protected Asn1Integer navic_I0_r16;
   protected Asn1Integer navic_Omega0_r16;
   protected Asn1Integer navic_Crs_r16;
   protected Asn1Integer navic_Cis_r16;
   protected Asn1Integer navic_Cus_r16;
   protected Asn1Integer navic_Crc_r16;
   protected Asn1Integer navic_Cic_r16;
   protected Asn1Integer navic_Cuc_r16;
   protected Asn1OpenExt extElem1;

   public NavModel_NavIC_KeplerianSet_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NavModel_NavIC_KeplerianSet_r16 (
      Asn1Integer navic_Toe_r16_,
      Asn1Integer navic_URAI_r16_,
      Asn1Integer navic_W_r16_,
      Asn1Integer navic_DeltaN_r16_,
      Asn1Integer navic_M0_r16_,
      Asn1Integer navic_OmegaDot_r16_,
      Asn1Integer navic_E_r16_,
      Asn1Integer navic_IDot_r16_,
      Asn1Integer navic_APowerHalf_r16_,
      Asn1Integer navic_I0_r16_,
      Asn1Integer navic_Omega0_r16_,
      Asn1Integer navic_Crs_r16_,
      Asn1Integer navic_Cis_r16_,
      Asn1Integer navic_Cus_r16_,
      Asn1Integer navic_Crc_r16_,
      Asn1Integer navic_Cic_r16_,
      Asn1Integer navic_Cuc_r16_
   ) throws Asn1Exception {
      super();
      setNavic_Toe_r16 (navic_Toe_r16_);
      setNavic_URAI_r16 (navic_URAI_r16_);
      setNavic_W_r16 (navic_W_r16_);
      setNavic_DeltaN_r16 (navic_DeltaN_r16_);
      setNavic_M0_r16 (navic_M0_r16_);
      setNavic_OmegaDot_r16 (navic_OmegaDot_r16_);
      setNavic_E_r16 (navic_E_r16_);
      setNavic_IDot_r16 (navic_IDot_r16_);
      setNavic_APowerHalf_r16 (navic_APowerHalf_r16_);
      setNavic_I0_r16 (navic_I0_r16_);
      setNavic_Omega0_r16 (navic_Omega0_r16_);
      setNavic_Crs_r16 (navic_Crs_r16_);
      setNavic_Cis_r16 (navic_Cis_r16_);
      setNavic_Cus_r16 (navic_Cus_r16_);
      setNavic_Crc_r16 (navic_Crc_r16_);
      setNavic_Cic_r16 (navic_Cic_r16_);
      setNavic_Cuc_r16 (navic_Cuc_r16_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NavModel_NavIC_KeplerianSet_r16 (long navic_Toe_r16_,
      long navic_URAI_r16_,
      long navic_W_r16_,
      long navic_DeltaN_r16_,
      long navic_M0_r16_,
      long navic_OmegaDot_r16_,
      long navic_E_r16_,
      long navic_IDot_r16_,
      long navic_APowerHalf_r16_,
      long navic_I0_r16_,
      long navic_Omega0_r16_,
      long navic_Crs_r16_,
      long navic_Cis_r16_,
      long navic_Cus_r16_,
      long navic_Crc_r16_,
      long navic_Cic_r16_,
      long navic_Cuc_r16_
   ) throws Asn1Exception {
      super();
      setNavic_Toe_r16 (navic_Toe_r16_);
      setNavic_URAI_r16 (navic_URAI_r16_);
      setNavic_W_r16 (navic_W_r16_);
      setNavic_DeltaN_r16 (navic_DeltaN_r16_);
      setNavic_M0_r16 (navic_M0_r16_);
      setNavic_OmegaDot_r16 (navic_OmegaDot_r16_);
      setNavic_E_r16 (navic_E_r16_);
      setNavic_IDot_r16 (navic_IDot_r16_);
      setNavic_APowerHalf_r16 (navic_APowerHalf_r16_);
      setNavic_I0_r16 (navic_I0_r16_);
      setNavic_Omega0_r16 (navic_Omega0_r16_);
      setNavic_Crs_r16 (navic_Crs_r16_);
      setNavic_Cis_r16 (navic_Cis_r16_);
      setNavic_Cus_r16 (navic_Cus_r16_);
      setNavic_Crc_r16 (navic_Crc_r16_);
      setNavic_Cic_r16 (navic_Cic_r16_);
      setNavic_Cuc_r16 (navic_Cuc_r16_);
   }

   public void init () {
      navic_Toe_r16 = null;
      navic_URAI_r16 = null;
      navic_W_r16 = null;
      navic_DeltaN_r16 = null;
      navic_M0_r16 = null;
      navic_OmegaDot_r16 = null;
      navic_E_r16 = null;
      navic_IDot_r16 = null;
      navic_APowerHalf_r16 = null;
      navic_I0_r16 = null;
      navic_Omega0_r16 = null;
      navic_Crs_r16 = null;
      navic_Cis_r16 = null;
      navic_Cus_r16 = null;
      navic_Crc_r16 = null;
      navic_Cic_r16 = null;
      navic_Cuc_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof NavModel_NavIC_KeplerianSet_r16) ) return false;

      NavModel_NavIC_KeplerianSet_r16 rhs = (NavModel_NavIC_KeplerianSet_r16) obj;

      if (navic_Toe_r16 == null) {
         if (rhs.navic_Toe_r16 != null) return false;
      }
      else {
         if (!navic_Toe_r16.equals(rhs.navic_Toe_r16)) {
            return false;
         }
      }

      if (navic_URAI_r16 == null) {
         if (rhs.navic_URAI_r16 != null) return false;
      }
      else {
         if (!navic_URAI_r16.equals(rhs.navic_URAI_r16)) {
            return false;
         }
      }

      if (navic_W_r16 == null) {
         if (rhs.navic_W_r16 != null) return false;
      }
      else {
         if (!navic_W_r16.equals(rhs.navic_W_r16)) {
            return false;
         }
      }

      if (navic_DeltaN_r16 == null) {
         if (rhs.navic_DeltaN_r16 != null) return false;
      }
      else {
         if (!navic_DeltaN_r16.equals(rhs.navic_DeltaN_r16)) {
            return false;
         }
      }

      if (navic_M0_r16 == null) {
         if (rhs.navic_M0_r16 != null) return false;
      }
      else {
         if (!navic_M0_r16.equals(rhs.navic_M0_r16)) {
            return false;
         }
      }

      if (navic_OmegaDot_r16 == null) {
         if (rhs.navic_OmegaDot_r16 != null) return false;
      }
      else {
         if (!navic_OmegaDot_r16.equals(rhs.navic_OmegaDot_r16)) {
            return false;
         }
      }

      if (navic_E_r16 == null) {
         if (rhs.navic_E_r16 != null) return false;
      }
      else {
         if (!navic_E_r16.equals(rhs.navic_E_r16)) {
            return false;
         }
      }

      if (navic_IDot_r16 == null) {
         if (rhs.navic_IDot_r16 != null) return false;
      }
      else {
         if (!navic_IDot_r16.equals(rhs.navic_IDot_r16)) {
            return false;
         }
      }

      if (navic_APowerHalf_r16 == null) {
         if (rhs.navic_APowerHalf_r16 != null) return false;
      }
      else {
         if (!navic_APowerHalf_r16.equals(rhs.navic_APowerHalf_r16)) {
            return false;
         }
      }

      if (navic_I0_r16 == null) {
         if (rhs.navic_I0_r16 != null) return false;
      }
      else {
         if (!navic_I0_r16.equals(rhs.navic_I0_r16)) {
            return false;
         }
      }

      if (navic_Omega0_r16 == null) {
         if (rhs.navic_Omega0_r16 != null) return false;
      }
      else {
         if (!navic_Omega0_r16.equals(rhs.navic_Omega0_r16)) {
            return false;
         }
      }

      if (navic_Crs_r16 == null) {
         if (rhs.navic_Crs_r16 != null) return false;
      }
      else {
         if (!navic_Crs_r16.equals(rhs.navic_Crs_r16)) {
            return false;
         }
      }

      if (navic_Cis_r16 == null) {
         if (rhs.navic_Cis_r16 != null) return false;
      }
      else {
         if (!navic_Cis_r16.equals(rhs.navic_Cis_r16)) {
            return false;
         }
      }

      if (navic_Cus_r16 == null) {
         if (rhs.navic_Cus_r16 != null) return false;
      }
      else {
         if (!navic_Cus_r16.equals(rhs.navic_Cus_r16)) {
            return false;
         }
      }

      if (navic_Crc_r16 == null) {
         if (rhs.navic_Crc_r16 != null) return false;
      }
      else {
         if (!navic_Crc_r16.equals(rhs.navic_Crc_r16)) {
            return false;
         }
      }

      if (navic_Cic_r16 == null) {
         if (rhs.navic_Cic_r16 != null) return false;
      }
      else {
         if (!navic_Cic_r16.equals(rhs.navic_Cic_r16)) {
            return false;
         }
      }

      if (navic_Cuc_r16 == null) {
         if (rhs.navic_Cuc_r16 != null) return false;
      }
      else {
         if (!navic_Cuc_r16.equals(rhs.navic_Cuc_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (navic_Toe_r16 != null) __code = 31*__code + navic_Toe_r16.hashCode();
      if (navic_URAI_r16 != null) __code = 31*__code + navic_URAI_r16.hashCode();
      if (navic_W_r16 != null) __code = 31*__code + navic_W_r16.hashCode();
      if (navic_DeltaN_r16 != null) __code = 31*__code + navic_DeltaN_r16.hashCode();
      if (navic_M0_r16 != null) __code = 31*__code + navic_M0_r16.hashCode();
      if (navic_OmegaDot_r16 != null) __code = 31*__code + navic_OmegaDot_r16.hashCode();
      if (navic_E_r16 != null) __code = 31*__code + navic_E_r16.hashCode();
      if (navic_IDot_r16 != null) __code = 31*__code + navic_IDot_r16.hashCode();
      if (navic_APowerHalf_r16 != null) __code = 31*__code + navic_APowerHalf_r16.hashCode();
      if (navic_I0_r16 != null) __code = 31*__code + navic_I0_r16.hashCode();
      if (navic_Omega0_r16 != null) __code = 31*__code + navic_Omega0_r16.hashCode();
      if (navic_Crs_r16 != null) __code = 31*__code + navic_Crs_r16.hashCode();
      if (navic_Cis_r16 != null) __code = 31*__code + navic_Cis_r16.hashCode();
      if (navic_Cus_r16 != null) __code = 31*__code + navic_Cus_r16.hashCode();
      if (navic_Crc_r16 != null) __code = 31*__code + navic_Crc_r16.hashCode();
      if (navic_Cic_r16 != null) __code = 31*__code + navic_Cic_r16.hashCode();
      if (navic_Cuc_r16 != null) __code = 31*__code + navic_Cuc_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Navic_Toe_r16
    */
   public Asn1Integer getNavic_Toe_r16 () {
      return navic_Toe_r16;
   }

   public void setNavic_Toe_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65536))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_Toe_r16 = value;
   }

   public void setNavic_Toe_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_Toe_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_URAI_r16
    */
   public Asn1Integer getNavic_URAI_r16 () {
      return navic_URAI_r16;
   }

   public void setNavic_URAI_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_URAI_r16 = value;
   }

   public void setNavic_URAI_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_URAI_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_W_r16
    */
   public Asn1Integer getNavic_W_r16 () {
      return navic_W_r16;
   }

   public void setNavic_W_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      this.navic_W_r16 = value;
   }

   public void setNavic_W_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_W_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_DeltaN_r16
    */
   public Asn1Integer getNavic_DeltaN_r16 () {
      return navic_DeltaN_r16;
   }

   public void setNavic_DeltaN_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -2097152 && value.value <= 2097151))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_DeltaN_r16 = value;
   }

   public void setNavic_DeltaN_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_DeltaN_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_M0_r16
    */
   public Asn1Integer getNavic_M0_r16 () {
      return navic_M0_r16;
   }

   public void setNavic_M0_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      this.navic_M0_r16 = value;
   }

   public void setNavic_M0_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_M0_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_OmegaDot_r16
    */
   public Asn1Integer getNavic_OmegaDot_r16 () {
      return navic_OmegaDot_r16;
   }

   public void setNavic_OmegaDot_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      this.navic_OmegaDot_r16 = value;
   }

   public void setNavic_OmegaDot_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_OmegaDot_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_E_r16
    */
   public Asn1Integer getNavic_E_r16 () {
      return navic_E_r16;
   }

   public void setNavic_E_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      this.navic_E_r16 = value;
   }

   public void setNavic_E_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_E_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_IDot_r16
    */
   public Asn1Integer getNavic_IDot_r16 () {
      return navic_IDot_r16;
   }

   public void setNavic_IDot_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8192 && value.value <= 8191))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_IDot_r16 = value;
   }

   public void setNavic_IDot_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_IDot_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_APowerHalf_r16
    */
   public Asn1Integer getNavic_APowerHalf_r16 () {
      return navic_APowerHalf_r16;
   }

   public void setNavic_APowerHalf_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      this.navic_APowerHalf_r16 = value;
   }

   public void setNavic_APowerHalf_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_APowerHalf_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_I0_r16
    */
   public Asn1Integer getNavic_I0_r16 () {
      return navic_I0_r16;
   }

   public void setNavic_I0_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      this.navic_I0_r16 = value;
   }

   public void setNavic_I0_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_I0_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_Omega0_r16
    */
   public Asn1Integer getNavic_Omega0_r16 () {
      return navic_Omega0_r16;
   }

   public void setNavic_Omega0_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      this.navic_Omega0_r16 = value;
   }

   public void setNavic_Omega0_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_Omega0_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_Crs_r16
    */
   public Asn1Integer getNavic_Crs_r16 () {
      return navic_Crs_r16;
   }

   public void setNavic_Crs_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_Crs_r16 = value;
   }

   public void setNavic_Crs_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_Crs_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_Cis_r16
    */
   public Asn1Integer getNavic_Cis_r16 () {
      return navic_Cis_r16;
   }

   public void setNavic_Cis_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_Cis_r16 = value;
   }

   public void setNavic_Cis_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_Cis_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_Cus_r16
    */
   public Asn1Integer getNavic_Cus_r16 () {
      return navic_Cus_r16;
   }

   public void setNavic_Cus_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_Cus_r16 = value;
   }

   public void setNavic_Cus_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_Cus_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_Crc_r16
    */
   public Asn1Integer getNavic_Crc_r16 () {
      return navic_Crc_r16;
   }

   public void setNavic_Crc_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_Crc_r16 = value;
   }

   public void setNavic_Crc_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_Crc_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_Cic_r16
    */
   public Asn1Integer getNavic_Cic_r16 () {
      return navic_Cic_r16;
   }

   public void setNavic_Cic_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_Cic_r16 = value;
   }

   public void setNavic_Cic_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_Cic_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_Cuc_r16
    */
   public Asn1Integer getNavic_Cuc_r16 () {
      return navic_Cuc_r16;
   }

   public void setNavic_Cuc_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_Cuc_r16 = value;
   }

   public void setNavic_Cuc_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_Cuc_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 18; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return navic_Toe_r16;
         case 1: return navic_URAI_r16;
         case 2: return navic_W_r16;
         case 3: return navic_DeltaN_r16;
         case 4: return navic_M0_r16;
         case 5: return navic_OmegaDot_r16;
         case 6: return navic_E_r16;
         case 7: return navic_IDot_r16;
         case 8: return navic_APowerHalf_r16;
         case 9: return navic_I0_r16;
         case 10: return navic_Omega0_r16;
         case 11: return navic_Crs_r16;
         case 12: return navic_Cis_r16;
         case 13: return navic_Cus_r16;
         case 14: return navic_Crc_r16;
         case 15: return navic_Cic_r16;
         case 16: return navic_Cuc_r16;
         case 17: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "navic-Toe-r16";
         case 1: return "navic-URAI-r16";
         case 2: return "navic-W-r16";
         case 3: return "navic-DeltaN-r16";
         case 4: return "navic-M0-r16";
         case 5: return "navic-OmegaDot-r16";
         case 6: return "navic-E-r16";
         case 7: return "navic-IDot-r16";
         case 8: return "navic-APowerHalf-r16";
         case 9: return "navic-I0-r16";
         case 10: return "navic-Omega0-r16";
         case 11: return "navic-Crs-r16";
         case 12: return "navic-Cis-r16";
         case 13: return "navic-Cus-r16";
         case 14: return "navic-Crc-r16";
         case 15: return "navic-Cic-r16";
         case 16: return "navic-Cuc-r16";
         case 17: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode navic_Toe_r16

      buffer.getContext().eventDispatcher.startElement("navic_Toe_r16", -1);

      navic_Toe_r16 = new Asn1Integer();
      navic_Toe_r16.decode (buffer, 0, 65536);
      buffer.getContext().eventDispatcher.endElement("navic_Toe_r16", -1);

      // decode navic_URAI_r16

      buffer.getContext().eventDispatcher.startElement("navic_URAI_r16", -1);

      navic_URAI_r16 = new Asn1Integer();
      navic_URAI_r16.decode (buffer, 0, 15);
      buffer.getContext().eventDispatcher.endElement("navic_URAI_r16", -1);

      // decode navic_W_r16

      buffer.getContext().eventDispatcher.startElement("navic_W_r16", -1);

      navic_W_r16 = new Asn1Integer();
      navic_W_r16.decode (buffer, -2147483648, 2147483647);
      buffer.getContext().eventDispatcher.endElement("navic_W_r16", -1);

      // decode navic_DeltaN_r16

      buffer.getContext().eventDispatcher.startElement("navic_DeltaN_r16", -1);

      navic_DeltaN_r16 = new Asn1Integer();
      navic_DeltaN_r16.decode (buffer, -2097152, 2097151);
      buffer.getContext().eventDispatcher.endElement("navic_DeltaN_r16", -1);

      // decode navic_M0_r16

      buffer.getContext().eventDispatcher.startElement("navic_M0_r16", -1);

      navic_M0_r16 = new Asn1Integer();
      navic_M0_r16.decode (buffer, -2147483648, 2147483647);
      buffer.getContext().eventDispatcher.endElement("navic_M0_r16", -1);

      // decode navic_OmegaDot_r16

      buffer.getContext().eventDispatcher.startElement("navic_OmegaDot_r16", -1);

      navic_OmegaDot_r16 = new Asn1Integer();
      navic_OmegaDot_r16.decode (buffer, -2147483648, 2147483647);
      buffer.getContext().eventDispatcher.endElement("navic_OmegaDot_r16", -1);

      // decode navic_E_r16

      buffer.getContext().eventDispatcher.startElement("navic_E_r16", -1);

      navic_E_r16 = new Asn1Integer();
      navic_E_r16.decode (buffer, 0, 4294967295L);
      buffer.getContext().eventDispatcher.endElement("navic_E_r16", -1);

      // decode navic_IDot_r16

      buffer.getContext().eventDispatcher.startElement("navic_IDot_r16", -1);

      navic_IDot_r16 = new Asn1Integer();
      navic_IDot_r16.decode (buffer, -8192, 8191);
      buffer.getContext().eventDispatcher.endElement("navic_IDot_r16", -1);

      // decode navic_APowerHalf_r16

      buffer.getContext().eventDispatcher.startElement("navic_APowerHalf_r16", -1);

      navic_APowerHalf_r16 = new Asn1Integer();
      navic_APowerHalf_r16.decode (buffer, 0, 4294967295L);
      buffer.getContext().eventDispatcher.endElement("navic_APowerHalf_r16", -1);

      // decode navic_I0_r16

      buffer.getContext().eventDispatcher.startElement("navic_I0_r16", -1);

      navic_I0_r16 = new Asn1Integer();
      navic_I0_r16.decode (buffer, -2147483648, 2147483647);
      buffer.getContext().eventDispatcher.endElement("navic_I0_r16", -1);

      // decode navic_Omega0_r16

      buffer.getContext().eventDispatcher.startElement("navic_Omega0_r16", -1);

      navic_Omega0_r16 = new Asn1Integer();
      navic_Omega0_r16.decode (buffer, -2147483648, 2147483647);
      buffer.getContext().eventDispatcher.endElement("navic_Omega0_r16", -1);

      // decode navic_Crs_r16

      buffer.getContext().eventDispatcher.startElement("navic_Crs_r16", -1);

      navic_Crs_r16 = new Asn1Integer();
      navic_Crs_r16.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("navic_Crs_r16", -1);

      // decode navic_Cis_r16

      buffer.getContext().eventDispatcher.startElement("navic_Cis_r16", -1);

      navic_Cis_r16 = new Asn1Integer();
      navic_Cis_r16.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("navic_Cis_r16", -1);

      // decode navic_Cus_r16

      buffer.getContext().eventDispatcher.startElement("navic_Cus_r16", -1);

      navic_Cus_r16 = new Asn1Integer();
      navic_Cus_r16.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("navic_Cus_r16", -1);

      // decode navic_Crc_r16

      buffer.getContext().eventDispatcher.startElement("navic_Crc_r16", -1);

      navic_Crc_r16 = new Asn1Integer();
      navic_Crc_r16.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("navic_Crc_r16", -1);

      // decode navic_Cic_r16

      buffer.getContext().eventDispatcher.startElement("navic_Cic_r16", -1);

      navic_Cic_r16 = new Asn1Integer();
      navic_Cic_r16.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("navic_Cic_r16", -1);

      // decode navic_Cuc_r16

      buffer.getContext().eventDispatcher.startElement("navic_Cuc_r16", -1);

      navic_Cuc_r16 = new Asn1Integer();
      navic_Cuc_r16.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("navic_Cuc_r16", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode navic_Toe_r16

      if (navic_Toe_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_Toe_r16", -1);

         navic_Toe_r16.encode (buffer, 0, 65536);

         buffer.getContext().eventDispatcher.endElement("navic_Toe_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_Toe_r16");

      // encode navic_URAI_r16

      if (navic_URAI_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_URAI_r16", -1);

         navic_URAI_r16.encode (buffer, 0, 15);

         buffer.getContext().eventDispatcher.endElement("navic_URAI_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_URAI_r16");

      // encode navic_W_r16

      if (navic_W_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_W_r16", -1);

         navic_W_r16.encode (buffer, -2147483648, 2147483647);

         buffer.getContext().eventDispatcher.endElement("navic_W_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_W_r16");

      // encode navic_DeltaN_r16

      if (navic_DeltaN_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_DeltaN_r16", -1);

         navic_DeltaN_r16.encode (buffer, -2097152, 2097151);

         buffer.getContext().eventDispatcher.endElement("navic_DeltaN_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_DeltaN_r16");

      // encode navic_M0_r16

      if (navic_M0_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_M0_r16", -1);

         navic_M0_r16.encode (buffer, -2147483648, 2147483647);

         buffer.getContext().eventDispatcher.endElement("navic_M0_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_M0_r16");

      // encode navic_OmegaDot_r16

      if (navic_OmegaDot_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_OmegaDot_r16", -1);

         navic_OmegaDot_r16.encode (buffer, -2147483648, 2147483647);

         buffer.getContext().eventDispatcher.endElement("navic_OmegaDot_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_OmegaDot_r16");

      // encode navic_E_r16

      if (navic_E_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_E_r16", -1);

         navic_E_r16.encode (buffer, 0, 4294967295L);

         buffer.getContext().eventDispatcher.endElement("navic_E_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_E_r16");

      // encode navic_IDot_r16

      if (navic_IDot_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_IDot_r16", -1);

         navic_IDot_r16.encode (buffer, -8192, 8191);

         buffer.getContext().eventDispatcher.endElement("navic_IDot_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_IDot_r16");

      // encode navic_APowerHalf_r16

      if (navic_APowerHalf_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_APowerHalf_r16", -1);

         navic_APowerHalf_r16.encode (buffer, 0, 4294967295L);

         buffer.getContext().eventDispatcher.endElement("navic_APowerHalf_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_APowerHalf_r16");

      // encode navic_I0_r16

      if (navic_I0_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_I0_r16", -1);

         navic_I0_r16.encode (buffer, -2147483648, 2147483647);

         buffer.getContext().eventDispatcher.endElement("navic_I0_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_I0_r16");

      // encode navic_Omega0_r16

      if (navic_Omega0_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_Omega0_r16", -1);

         navic_Omega0_r16.encode (buffer, -2147483648, 2147483647);

         buffer.getContext().eventDispatcher.endElement("navic_Omega0_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_Omega0_r16");

      // encode navic_Crs_r16

      if (navic_Crs_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_Crs_r16", -1);

         navic_Crs_r16.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("navic_Crs_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_Crs_r16");

      // encode navic_Cis_r16

      if (navic_Cis_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_Cis_r16", -1);

         navic_Cis_r16.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("navic_Cis_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_Cis_r16");

      // encode navic_Cus_r16

      if (navic_Cus_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_Cus_r16", -1);

         navic_Cus_r16.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("navic_Cus_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_Cus_r16");

      // encode navic_Crc_r16

      if (navic_Crc_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_Crc_r16", -1);

         navic_Crc_r16.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("navic_Crc_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_Crc_r16");

      // encode navic_Cic_r16

      if (navic_Cic_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_Cic_r16", -1);

         navic_Cic_r16.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("navic_Cic_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_Cic_r16");

      // encode navic_Cuc_r16

      if (navic_Cuc_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_Cuc_r16", -1);

         navic_Cuc_r16.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("navic_Cuc_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_Cuc_r16");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
