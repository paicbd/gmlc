/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_REPORT;

import com.objsys.asn1j.runtime.*;

public class TimeStamp extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_REPORTRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_REPORTRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "TimeStamp";
   }

   // Choice element identifier constants
   public final static byte _ABSOLUTETIME = 1;
   public final static byte _RELATIVETIME = 2;

   public TimeStamp () {
      super();
   }

   public TimeStamp (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _ABSOLUTETIME: return "absoluteTime";
      case _RELATIVETIME: return "relativeTime";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for absoluteTime
    */
   public Asn1UTCTime getAbsoluteTime () {
      return (choiceID == _ABSOLUTETIME) ? (Asn1UTCTime)element : null;
   }
   public void setAbsoluteTime (Asn1UTCTime value) {
      setElement (_ABSOLUTETIME, value);
   }
   public boolean isAbsoluteTime () {
      return (choiceID == _ABSOLUTETIME);
   }

   /**
    * Accessor/mutator methods for relativeTime
    */
   public Asn1Integer getRelativeTime () {
      return (choiceID == _RELATIVETIME) ? (Asn1Integer)element : null;
   }
   public void setRelativeTime (Asn1Integer value) {
      setElement (_RELATIVETIME, value);
   }
   public boolean isRelativeTime () {
      return (choiceID == _RELATIVETIME);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (2, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // absoluteTime
         case 0: { 
            Asn1UTCTime absoluteTime;
            element = absoluteTime = new Asn1UTCTime (true);
            absoluteTime.decode (buffer, (Asn1CharSet)null);
            break;
         }

         // relativeTime
         case 1: { 
            Asn1Integer relativeTime;
            element = relativeTime = new Asn1Integer();
            relativeTime.decode (buffer, 0, 31536000);
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // Encode choice index value

      buffer.encodeConsWholeNumber (choiceID - 1, 2, "index");

      buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

      switch (choiceID) {
         // absoluteTime
         case _ABSOLUTETIME:
            Asn1UTCTime absoluteTime = (Asn1UTCTime) element;
            absoluteTime.encode (buffer, (Asn1CharSet)null);
            break;

         // relativeTime
         case _RELATIVETIME:
            Asn1Integer relativeTime = (Asn1Integer) element;
            relativeTime.encode (buffer, 0, 31536000);
            break;

         default:
         throw new Asn1InvalidChoiceOptionException();
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
