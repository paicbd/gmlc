/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Components;

import com.objsys.asn1j.runtime.*;

public class PositionEstimate_uncertainty extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   protected Asn1Integer uncertaintySemiMajor;
   protected Asn1Integer uncertaintySemiMinor;
   protected Asn1Integer orientationMajorAxis;

   public PositionEstimate_uncertainty () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PositionEstimate_uncertainty (
      Asn1Integer uncertaintySemiMajor_,
      Asn1Integer uncertaintySemiMinor_,
      Asn1Integer orientationMajorAxis_
   ) throws Asn1Exception {
      super();
      setUncertaintySemiMajor (uncertaintySemiMajor_);
      setUncertaintySemiMinor (uncertaintySemiMinor_);
      setOrientationMajorAxis (orientationMajorAxis_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PositionEstimate_uncertainty (long uncertaintySemiMajor_,
      long uncertaintySemiMinor_,
      long orientationMajorAxis_
   ) throws Asn1Exception {
      super();
      setUncertaintySemiMajor (uncertaintySemiMajor_);
      setUncertaintySemiMinor (uncertaintySemiMinor_);
      setOrientationMajorAxis (orientationMajorAxis_);
   }

   public void init () {
      uncertaintySemiMajor = null;
      uncertaintySemiMinor = null;
      orientationMajorAxis = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof PositionEstimate_uncertainty) ) return false;

      PositionEstimate_uncertainty rhs = (PositionEstimate_uncertainty) obj;

      if (uncertaintySemiMajor == null) {
         if (rhs.uncertaintySemiMajor != null) return false;
      }
      else {
         if (!uncertaintySemiMajor.equals(rhs.uncertaintySemiMajor)) {
            return false;
         }
      }

      if (uncertaintySemiMinor == null) {
         if (rhs.uncertaintySemiMinor != null) return false;
      }
      else {
         if (!uncertaintySemiMinor.equals(rhs.uncertaintySemiMinor)) {
            return false;
         }
      }

      if (orientationMajorAxis == null) {
         if (rhs.orientationMajorAxis != null) return false;
      }
      else {
         if (!orientationMajorAxis.equals(rhs.orientationMajorAxis)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (uncertaintySemiMajor != null) __code = 31*__code + uncertaintySemiMajor.hashCode();
      if (uncertaintySemiMinor != null) __code = 31*__code + uncertaintySemiMinor.hashCode();
      if (orientationMajorAxis != null) __code = 31*__code + orientationMajorAxis.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for UncertaintySemiMajor
    */
   public Asn1Integer getUncertaintySemiMajor () {
      return uncertaintySemiMajor;
   }

   public void setUncertaintySemiMajor (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.uncertaintySemiMajor = value;
   }

   public void setUncertaintySemiMajor (long value) 
      throws Asn1Exception
   {
      setUncertaintySemiMajor (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for UncertaintySemiMinor
    */
   public Asn1Integer getUncertaintySemiMinor () {
      return uncertaintySemiMinor;
   }

   public void setUncertaintySemiMinor (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.uncertaintySemiMinor = value;
   }

   public void setUncertaintySemiMinor (long value) 
      throws Asn1Exception
   {
      setUncertaintySemiMinor (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for OrientationMajorAxis
    */
   public Asn1Integer getOrientationMajorAxis () {
      return orientationMajorAxis;
   }

   public void setOrientationMajorAxis (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 180))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.orientationMajorAxis = value;
   }

   public void setOrientationMajorAxis (long value) 
      throws Asn1Exception
   {
      setOrientationMajorAxis (new Asn1Integer(value));
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return uncertaintySemiMajor;
         case 1: return uncertaintySemiMinor;
         case 2: return orientationMajorAxis;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "uncertaintySemiMajor";
         case 1: return "uncertaintySemiMinor";
         case 2: return "orientationMajorAxis";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode uncertaintySemiMajor

      buffer.getContext().eventDispatcher.startElement("uncertaintySemiMajor", -1);

      uncertaintySemiMajor = new Asn1Integer();
      uncertaintySemiMajor.decode (buffer, 0, 127);
      buffer.getContext().eventDispatcher.endElement("uncertaintySemiMajor", -1);

      // decode uncertaintySemiMinor

      buffer.getContext().eventDispatcher.startElement("uncertaintySemiMinor", -1);

      uncertaintySemiMinor = new Asn1Integer();
      uncertaintySemiMinor.decode (buffer, 0, 127);
      buffer.getContext().eventDispatcher.endElement("uncertaintySemiMinor", -1);

      // decode orientationMajorAxis

      buffer.getContext().eventDispatcher.startElement("orientationMajorAxis", -1);

      orientationMajorAxis = new Asn1Integer();
      orientationMajorAxis.decode (buffer, 0, 180);
      buffer.getContext().eventDispatcher.endElement("orientationMajorAxis", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode uncertaintySemiMajor

      if (uncertaintySemiMajor != null) {
         buffer.getContext().eventDispatcher.startElement("uncertaintySemiMajor", -1);

         uncertaintySemiMajor.encode (buffer, 0, 127);

         buffer.getContext().eventDispatcher.endElement("uncertaintySemiMajor", -1);
      }
      else throw new Asn1MissingRequiredException ("uncertaintySemiMajor");

      // encode uncertaintySemiMinor

      if (uncertaintySemiMinor != null) {
         buffer.getContext().eventDispatcher.startElement("uncertaintySemiMinor", -1);

         uncertaintySemiMinor.encode (buffer, 0, 127);

         buffer.getContext().eventDispatcher.endElement("uncertaintySemiMinor", -1);
      }
      else throw new Asn1MissingRequiredException ("uncertaintySemiMinor");

      // encode orientationMajorAxis

      if (orientationMajorAxis != null) {
         buffer.getContext().eventDispatcher.startElement("orientationMajorAxis", -1);

         orientationMajorAxis.encode (buffer, 0, 180);

         buffer.getContext().eventDispatcher.endElement("orientationMajorAxis", -1);
      }
      else throw new Asn1MissingRequiredException ("orientationMajorAxis");

   }

}
