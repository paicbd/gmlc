/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class CNAV_ClockModel extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "CNAV-ClockModel";
   }

   protected Asn1Integer cnavToc;
   protected Asn1Integer cnavTop;
   protected Asn1Integer cnavURA0;
   protected Asn1Integer cnavURA1;
   protected Asn1Integer cnavURA2;
   protected Asn1Integer cnavAf2;
   protected Asn1Integer cnavAf1;
   protected Asn1Integer cnavAf0;
   protected Asn1Integer cnavTgd;
   protected Asn1Integer cnavISCl1cp;  // optional
   protected Asn1Integer cnavISCl1cd;  // optional
   protected Asn1Integer cnavISCl1ca;  // optional
   protected Asn1Integer cnavISCl2c;  // optional
   protected Asn1Integer cnavISCl5i5;  // optional
   protected Asn1Integer cnavISCl5q5;  // optional
   protected Asn1OpenExt extElem1;

   public CNAV_ClockModel () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CNAV_ClockModel (
      Asn1Integer cnavToc_,
      Asn1Integer cnavTop_,
      Asn1Integer cnavURA0_,
      Asn1Integer cnavURA1_,
      Asn1Integer cnavURA2_,
      Asn1Integer cnavAf2_,
      Asn1Integer cnavAf1_,
      Asn1Integer cnavAf0_,
      Asn1Integer cnavTgd_,
      Asn1Integer cnavISCl1cp_,
      Asn1Integer cnavISCl1cd_,
      Asn1Integer cnavISCl1ca_,
      Asn1Integer cnavISCl2c_,
      Asn1Integer cnavISCl5i5_,
      Asn1Integer cnavISCl5q5_
   ) throws Asn1Exception {
      super();
      setCnavToc (cnavToc_);
      setCnavTop (cnavTop_);
      setCnavURA0 (cnavURA0_);
      setCnavURA1 (cnavURA1_);
      setCnavURA2 (cnavURA2_);
      setCnavAf2 (cnavAf2_);
      setCnavAf1 (cnavAf1_);
      setCnavAf0 (cnavAf0_);
      setCnavTgd (cnavTgd_);
      setCnavISCl1cp (cnavISCl1cp_);
      setCnavISCl1cd (cnavISCl1cd_);
      setCnavISCl1ca (cnavISCl1ca_);
      setCnavISCl2c (cnavISCl2c_);
      setCnavISCl5i5 (cnavISCl5i5_);
      setCnavISCl5q5 (cnavISCl5q5_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CNAV_ClockModel (
      Asn1Integer cnavToc_,
      Asn1Integer cnavTop_,
      Asn1Integer cnavURA0_,
      Asn1Integer cnavURA1_,
      Asn1Integer cnavURA2_,
      Asn1Integer cnavAf2_,
      Asn1Integer cnavAf1_,
      Asn1Integer cnavAf0_,
      Asn1Integer cnavTgd_
   ) throws Asn1Exception {
      super();
      setCnavToc (cnavToc_);
      setCnavTop (cnavTop_);
      setCnavURA0 (cnavURA0_);
      setCnavURA1 (cnavURA1_);
      setCnavURA2 (cnavURA2_);
      setCnavAf2 (cnavAf2_);
      setCnavAf1 (cnavAf1_);
      setCnavAf0 (cnavAf0_);
      setCnavTgd (cnavTgd_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CNAV_ClockModel (long cnavToc_,
      long cnavTop_,
      long cnavURA0_,
      long cnavURA1_,
      long cnavURA2_,
      long cnavAf2_,
      long cnavAf1_,
      long cnavAf0_,
      long cnavTgd_,
      long cnavISCl1cp_,
      long cnavISCl1cd_,
      long cnavISCl1ca_,
      long cnavISCl2c_,
      long cnavISCl5i5_,
      long cnavISCl5q5_
   ) throws Asn1Exception {
      super();
      setCnavToc (cnavToc_);
      setCnavTop (cnavTop_);
      setCnavURA0 (cnavURA0_);
      setCnavURA1 (cnavURA1_);
      setCnavURA2 (cnavURA2_);
      setCnavAf2 (cnavAf2_);
      setCnavAf1 (cnavAf1_);
      setCnavAf0 (cnavAf0_);
      setCnavTgd (cnavTgd_);
      setCnavISCl1cp (cnavISCl1cp_);
      setCnavISCl1cd (cnavISCl1cd_);
      setCnavISCl1ca (cnavISCl1ca_);
      setCnavISCl2c (cnavISCl2c_);
      setCnavISCl5i5 (cnavISCl5i5_);
      setCnavISCl5q5 (cnavISCl5q5_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CNAV_ClockModel (
      long cnavToc_,
      long cnavTop_,
      long cnavURA0_,
      long cnavURA1_,
      long cnavURA2_,
      long cnavAf2_,
      long cnavAf1_,
      long cnavAf0_,
      long cnavTgd_
   ) throws Asn1Exception {
      super();
      setCnavToc (cnavToc_);
      setCnavTop (cnavTop_);
      setCnavURA0 (cnavURA0_);
      setCnavURA1 (cnavURA1_);
      setCnavURA2 (cnavURA2_);
      setCnavAf2 (cnavAf2_);
      setCnavAf1 (cnavAf1_);
      setCnavAf0 (cnavAf0_);
      setCnavTgd (cnavTgd_);
   }

   public void init () {
      cnavToc = null;
      cnavTop = null;
      cnavURA0 = null;
      cnavURA1 = null;
      cnavURA2 = null;
      cnavAf2 = null;
      cnavAf1 = null;
      cnavAf0 = null;
      cnavTgd = null;
      cnavISCl1cp = null;
      cnavISCl1cd = null;
      cnavISCl1ca = null;
      cnavISCl2c = null;
      cnavISCl5i5 = null;
      cnavISCl5q5 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof CNAV_ClockModel) ) return false;

      CNAV_ClockModel rhs = (CNAV_ClockModel) obj;

      if (cnavToc == null) {
         if (rhs.cnavToc != null) return false;
      }
      else {
         if (!cnavToc.equals(rhs.cnavToc)) {
            return false;
         }
      }

      if (cnavTop == null) {
         if (rhs.cnavTop != null) return false;
      }
      else {
         if (!cnavTop.equals(rhs.cnavTop)) {
            return false;
         }
      }

      if (cnavURA0 == null) {
         if (rhs.cnavURA0 != null) return false;
      }
      else {
         if (!cnavURA0.equals(rhs.cnavURA0)) {
            return false;
         }
      }

      if (cnavURA1 == null) {
         if (rhs.cnavURA1 != null) return false;
      }
      else {
         if (!cnavURA1.equals(rhs.cnavURA1)) {
            return false;
         }
      }

      if (cnavURA2 == null) {
         if (rhs.cnavURA2 != null) return false;
      }
      else {
         if (!cnavURA2.equals(rhs.cnavURA2)) {
            return false;
         }
      }

      if (cnavAf2 == null) {
         if (rhs.cnavAf2 != null) return false;
      }
      else {
         if (!cnavAf2.equals(rhs.cnavAf2)) {
            return false;
         }
      }

      if (cnavAf1 == null) {
         if (rhs.cnavAf1 != null) return false;
      }
      else {
         if (!cnavAf1.equals(rhs.cnavAf1)) {
            return false;
         }
      }

      if (cnavAf0 == null) {
         if (rhs.cnavAf0 != null) return false;
      }
      else {
         if (!cnavAf0.equals(rhs.cnavAf0)) {
            return false;
         }
      }

      if (cnavTgd == null) {
         if (rhs.cnavTgd != null) return false;
      }
      else {
         if (!cnavTgd.equals(rhs.cnavTgd)) {
            return false;
         }
      }

      if (cnavISCl1cp == null) {
         if (rhs.cnavISCl1cp != null) return false;
      }
      else {
         if (!cnavISCl1cp.equals(rhs.cnavISCl1cp)) {
            return false;
         }
      }

      if (cnavISCl1cd == null) {
         if (rhs.cnavISCl1cd != null) return false;
      }
      else {
         if (!cnavISCl1cd.equals(rhs.cnavISCl1cd)) {
            return false;
         }
      }

      if (cnavISCl1ca == null) {
         if (rhs.cnavISCl1ca != null) return false;
      }
      else {
         if (!cnavISCl1ca.equals(rhs.cnavISCl1ca)) {
            return false;
         }
      }

      if (cnavISCl2c == null) {
         if (rhs.cnavISCl2c != null) return false;
      }
      else {
         if (!cnavISCl2c.equals(rhs.cnavISCl2c)) {
            return false;
         }
      }

      if (cnavISCl5i5 == null) {
         if (rhs.cnavISCl5i5 != null) return false;
      }
      else {
         if (!cnavISCl5i5.equals(rhs.cnavISCl5i5)) {
            return false;
         }
      }

      if (cnavISCl5q5 == null) {
         if (rhs.cnavISCl5q5 != null) return false;
      }
      else {
         if (!cnavISCl5q5.equals(rhs.cnavISCl5q5)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (cnavToc != null) __code = 31*__code + cnavToc.hashCode();
      if (cnavTop != null) __code = 31*__code + cnavTop.hashCode();
      if (cnavURA0 != null) __code = 31*__code + cnavURA0.hashCode();
      if (cnavURA1 != null) __code = 31*__code + cnavURA1.hashCode();
      if (cnavURA2 != null) __code = 31*__code + cnavURA2.hashCode();
      if (cnavAf2 != null) __code = 31*__code + cnavAf2.hashCode();
      if (cnavAf1 != null) __code = 31*__code + cnavAf1.hashCode();
      if (cnavAf0 != null) __code = 31*__code + cnavAf0.hashCode();
      if (cnavTgd != null) __code = 31*__code + cnavTgd.hashCode();
      if (cnavISCl1cp != null) __code = 31*__code + cnavISCl1cp.hashCode();
      if (cnavISCl1cd != null) __code = 31*__code + cnavISCl1cd.hashCode();
      if (cnavISCl1ca != null) __code = 31*__code + cnavISCl1ca.hashCode();
      if (cnavISCl2c != null) __code = 31*__code + cnavISCl2c.hashCode();
      if (cnavISCl5i5 != null) __code = 31*__code + cnavISCl5i5.hashCode();
      if (cnavISCl5q5 != null) __code = 31*__code + cnavISCl5q5.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for CnavToc
    */
   public Asn1Integer getCnavToc () {
      return cnavToc;
   }

   public void setCnavToc (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 2015))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavToc = value;
   }

   public void setCnavToc (long value) 
      throws Asn1Exception
   {
      setCnavToc (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavTop
    */
   public Asn1Integer getCnavTop () {
      return cnavTop;
   }

   public void setCnavTop (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 2015))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavTop = value;
   }

   public void setCnavTop (long value) 
      throws Asn1Exception
   {
      setCnavTop (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavURA0
    */
   public Asn1Integer getCnavURA0 () {
      return cnavURA0;
   }

   public void setCnavURA0 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -16 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavURA0 = value;
   }

   public void setCnavURA0 (long value) 
      throws Asn1Exception
   {
      setCnavURA0 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavURA1
    */
   public Asn1Integer getCnavURA1 () {
      return cnavURA1;
   }

   public void setCnavURA1 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 7))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavURA1 = value;
   }

   public void setCnavURA1 (long value) 
      throws Asn1Exception
   {
      setCnavURA1 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavURA2
    */
   public Asn1Integer getCnavURA2 () {
      return cnavURA2;
   }

   public void setCnavURA2 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 7))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavURA2 = value;
   }

   public void setCnavURA2 (long value) 
      throws Asn1Exception
   {
      setCnavURA2 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavAf2
    */
   public Asn1Integer getCnavAf2 () {
      return cnavAf2;
   }

   public void setCnavAf2 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -512 && value.value <= 511))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavAf2 = value;
   }

   public void setCnavAf2 (long value) 
      throws Asn1Exception
   {
      setCnavAf2 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavAf1
    */
   public Asn1Integer getCnavAf1 () {
      return cnavAf1;
   }

   public void setCnavAf1 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -524288 && value.value <= 524287))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavAf1 = value;
   }

   public void setCnavAf1 (long value) 
      throws Asn1Exception
   {
      setCnavAf1 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavAf0
    */
   public Asn1Integer getCnavAf0 () {
      return cnavAf0;
   }

   public void setCnavAf0 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -33554432 && value.value <= 33554431))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavAf0 = value;
   }

   public void setCnavAf0 (long value) 
      throws Asn1Exception
   {
      setCnavAf0 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavTgd
    */
   public Asn1Integer getCnavTgd () {
      return cnavTgd;
   }

   public void setCnavTgd (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -4096 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavTgd = value;
   }

   public void setCnavTgd (long value) 
      throws Asn1Exception
   {
      setCnavTgd (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavISCl1cp
    */
   public Asn1Integer getCnavISCl1cp () {
      return cnavISCl1cp;
   }

   public void setCnavISCl1cp (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -4096 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavISCl1cp = value;
   }

   public void setCnavISCl1cp (long value) 
      throws Asn1Exception
   {
      setCnavISCl1cp (new Asn1Integer(value));
   }
   public boolean hasCnavISCl1cp () {
      return (cnavISCl1cp != null);
   }

   /**
    * Accessor/mutator methods for CnavISCl1cd
    */
   public Asn1Integer getCnavISCl1cd () {
      return cnavISCl1cd;
   }

   public void setCnavISCl1cd (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -4096 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavISCl1cd = value;
   }

   public void setCnavISCl1cd (long value) 
      throws Asn1Exception
   {
      setCnavISCl1cd (new Asn1Integer(value));
   }
   public boolean hasCnavISCl1cd () {
      return (cnavISCl1cd != null);
   }

   /**
    * Accessor/mutator methods for CnavISCl1ca
    */
   public Asn1Integer getCnavISCl1ca () {
      return cnavISCl1ca;
   }

   public void setCnavISCl1ca (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -4096 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavISCl1ca = value;
   }

   public void setCnavISCl1ca (long value) 
      throws Asn1Exception
   {
      setCnavISCl1ca (new Asn1Integer(value));
   }
   public boolean hasCnavISCl1ca () {
      return (cnavISCl1ca != null);
   }

   /**
    * Accessor/mutator methods for CnavISCl2c
    */
   public Asn1Integer getCnavISCl2c () {
      return cnavISCl2c;
   }

   public void setCnavISCl2c (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -4096 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavISCl2c = value;
   }

   public void setCnavISCl2c (long value) 
      throws Asn1Exception
   {
      setCnavISCl2c (new Asn1Integer(value));
   }
   public boolean hasCnavISCl2c () {
      return (cnavISCl2c != null);
   }

   /**
    * Accessor/mutator methods for CnavISCl5i5
    */
   public Asn1Integer getCnavISCl5i5 () {
      return cnavISCl5i5;
   }

   public void setCnavISCl5i5 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -4096 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavISCl5i5 = value;
   }

   public void setCnavISCl5i5 (long value) 
      throws Asn1Exception
   {
      setCnavISCl5i5 (new Asn1Integer(value));
   }
   public boolean hasCnavISCl5i5 () {
      return (cnavISCl5i5 != null);
   }

   /**
    * Accessor/mutator methods for CnavISCl5q5
    */
   public Asn1Integer getCnavISCl5q5 () {
      return cnavISCl5q5;
   }

   public void setCnavISCl5q5 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -4096 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavISCl5q5 = value;
   }

   public void setCnavISCl5q5 (long value) 
      throws Asn1Exception
   {
      setCnavISCl5q5 (new Asn1Integer(value));
   }
   public boolean hasCnavISCl5q5 () {
      return (cnavISCl5q5 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 16; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cnavToc;
         case 1: return cnavTop;
         case 2: return cnavURA0;
         case 3: return cnavURA1;
         case 4: return cnavURA2;
         case 5: return cnavAf2;
         case 6: return cnavAf1;
         case 7: return cnavAf0;
         case 8: return cnavTgd;
         case 9: return cnavISCl1cp;
         case 10: return cnavISCl1cd;
         case 11: return cnavISCl1ca;
         case 12: return cnavISCl2c;
         case 13: return cnavISCl5i5;
         case 14: return cnavISCl5q5;
         case 15: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cnavToc";
         case 1: return "cnavTop";
         case 2: return "cnavURA0";
         case 3: return "cnavURA1";
         case 4: return "cnavURA2";
         case 5: return "cnavAf2";
         case 6: return "cnavAf1";
         case 7: return "cnavAf0";
         case 8: return "cnavTgd";
         case 9: return "cnavISCl1cp";
         case 10: return "cnavISCl1cd";
         case 11: return "cnavISCl1ca";
         case 12: return "cnavISCl2c";
         case 13: return "cnavISCl5i5";
         case 14: return "cnavISCl5q5";
         case 15: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean cnavISCl1cpPresent = buffer.decodeBit ("cnavISCl1cpPresent");
      boolean cnavISCl1cdPresent = buffer.decodeBit ("cnavISCl1cdPresent");
      boolean cnavISCl1caPresent = buffer.decodeBit ("cnavISCl1caPresent");
      boolean cnavISCl2cPresent = buffer.decodeBit ("cnavISCl2cPresent");
      boolean cnavISCl5i5Present = buffer.decodeBit ("cnavISCl5i5Present");
      boolean cnavISCl5q5Present = buffer.decodeBit ("cnavISCl5q5Present");

      // decode cnavToc

      buffer.getContext().eventDispatcher.startElement("cnavToc", -1);

      cnavToc = new Asn1Integer();
      cnavToc.decode (buffer, 0, 2015);
      buffer.getContext().eventDispatcher.endElement("cnavToc", -1);

      // decode cnavTop

      buffer.getContext().eventDispatcher.startElement("cnavTop", -1);

      cnavTop = new Asn1Integer();
      cnavTop.decode (buffer, 0, 2015);
      buffer.getContext().eventDispatcher.endElement("cnavTop", -1);

      // decode cnavURA0

      buffer.getContext().eventDispatcher.startElement("cnavURA0", -1);

      cnavURA0 = new Asn1Integer();
      cnavURA0.decode (buffer, -16, 15);
      buffer.getContext().eventDispatcher.endElement("cnavURA0", -1);

      // decode cnavURA1

      buffer.getContext().eventDispatcher.startElement("cnavURA1", -1);

      cnavURA1 = new Asn1Integer();
      cnavURA1.decode (buffer, 0, 7);
      buffer.getContext().eventDispatcher.endElement("cnavURA1", -1);

      // decode cnavURA2

      buffer.getContext().eventDispatcher.startElement("cnavURA2", -1);

      cnavURA2 = new Asn1Integer();
      cnavURA2.decode (buffer, 0, 7);
      buffer.getContext().eventDispatcher.endElement("cnavURA2", -1);

      // decode cnavAf2

      buffer.getContext().eventDispatcher.startElement("cnavAf2", -1);

      cnavAf2 = new Asn1Integer();
      cnavAf2.decode (buffer, -512, 511);
      buffer.getContext().eventDispatcher.endElement("cnavAf2", -1);

      // decode cnavAf1

      buffer.getContext().eventDispatcher.startElement("cnavAf1", -1);

      cnavAf1 = new Asn1Integer();
      cnavAf1.decode (buffer, -524288, 524287);
      buffer.getContext().eventDispatcher.endElement("cnavAf1", -1);

      // decode cnavAf0

      buffer.getContext().eventDispatcher.startElement("cnavAf0", -1);

      cnavAf0 = new Asn1Integer();
      cnavAf0.decode (buffer, -33554432, 33554431);
      buffer.getContext().eventDispatcher.endElement("cnavAf0", -1);

      // decode cnavTgd

      buffer.getContext().eventDispatcher.startElement("cnavTgd", -1);

      cnavTgd = new Asn1Integer();
      cnavTgd.decode (buffer, -4096, 4095);
      buffer.getContext().eventDispatcher.endElement("cnavTgd", -1);

      // decode cnavISCl1cp

      if (cnavISCl1cpPresent) {
         buffer.getContext().eventDispatcher.startElement("cnavISCl1cp", -1);

         cnavISCl1cp = new Asn1Integer();
         cnavISCl1cp.decode (buffer, -4096, 4095);
         buffer.getContext().eventDispatcher.endElement("cnavISCl1cp", -1);
      }
      else {
         cnavISCl1cp = null;
      }

      // decode cnavISCl1cd

      if (cnavISCl1cdPresent) {
         buffer.getContext().eventDispatcher.startElement("cnavISCl1cd", -1);

         cnavISCl1cd = new Asn1Integer();
         cnavISCl1cd.decode (buffer, -4096, 4095);
         buffer.getContext().eventDispatcher.endElement("cnavISCl1cd", -1);
      }
      else {
         cnavISCl1cd = null;
      }

      // decode cnavISCl1ca

      if (cnavISCl1caPresent) {
         buffer.getContext().eventDispatcher.startElement("cnavISCl1ca", -1);

         cnavISCl1ca = new Asn1Integer();
         cnavISCl1ca.decode (buffer, -4096, 4095);
         buffer.getContext().eventDispatcher.endElement("cnavISCl1ca", -1);
      }
      else {
         cnavISCl1ca = null;
      }

      // decode cnavISCl2c

      if (cnavISCl2cPresent) {
         buffer.getContext().eventDispatcher.startElement("cnavISCl2c", -1);

         cnavISCl2c = new Asn1Integer();
         cnavISCl2c.decode (buffer, -4096, 4095);
         buffer.getContext().eventDispatcher.endElement("cnavISCl2c", -1);
      }
      else {
         cnavISCl2c = null;
      }

      // decode cnavISCl5i5

      if (cnavISCl5i5Present) {
         buffer.getContext().eventDispatcher.startElement("cnavISCl5i5", -1);

         cnavISCl5i5 = new Asn1Integer();
         cnavISCl5i5.decode (buffer, -4096, 4095);
         buffer.getContext().eventDispatcher.endElement("cnavISCl5i5", -1);
      }
      else {
         cnavISCl5i5 = null;
      }

      // decode cnavISCl5q5

      if (cnavISCl5q5Present) {
         buffer.getContext().eventDispatcher.startElement("cnavISCl5q5", -1);

         cnavISCl5q5 = new Asn1Integer();
         cnavISCl5q5.decode (buffer, -4096, 4095);
         buffer.getContext().eventDispatcher.endElement("cnavISCl5q5", -1);
      }
      else {
         cnavISCl5q5 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((cnavISCl1cp != null), null);
      buffer.encodeBit ((cnavISCl1cd != null), null);
      buffer.encodeBit ((cnavISCl1ca != null), null);
      buffer.encodeBit ((cnavISCl2c != null), null);
      buffer.encodeBit ((cnavISCl5i5 != null), null);
      buffer.encodeBit ((cnavISCl5q5 != null), null);

      // encode cnavToc

      if (cnavToc != null) {
         buffer.getContext().eventDispatcher.startElement("cnavToc", -1);

         cnavToc.encode (buffer, 0, 2015);

         buffer.getContext().eventDispatcher.endElement("cnavToc", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavToc");

      // encode cnavTop

      if (cnavTop != null) {
         buffer.getContext().eventDispatcher.startElement("cnavTop", -1);

         cnavTop.encode (buffer, 0, 2015);

         buffer.getContext().eventDispatcher.endElement("cnavTop", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavTop");

      // encode cnavURA0

      if (cnavURA0 != null) {
         buffer.getContext().eventDispatcher.startElement("cnavURA0", -1);

         cnavURA0.encode (buffer, -16, 15);

         buffer.getContext().eventDispatcher.endElement("cnavURA0", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavURA0");

      // encode cnavURA1

      if (cnavURA1 != null) {
         buffer.getContext().eventDispatcher.startElement("cnavURA1", -1);

         cnavURA1.encode (buffer, 0, 7);

         buffer.getContext().eventDispatcher.endElement("cnavURA1", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavURA1");

      // encode cnavURA2

      if (cnavURA2 != null) {
         buffer.getContext().eventDispatcher.startElement("cnavURA2", -1);

         cnavURA2.encode (buffer, 0, 7);

         buffer.getContext().eventDispatcher.endElement("cnavURA2", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavURA2");

      // encode cnavAf2

      if (cnavAf2 != null) {
         buffer.getContext().eventDispatcher.startElement("cnavAf2", -1);

         cnavAf2.encode (buffer, -512, 511);

         buffer.getContext().eventDispatcher.endElement("cnavAf2", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavAf2");

      // encode cnavAf1

      if (cnavAf1 != null) {
         buffer.getContext().eventDispatcher.startElement("cnavAf1", -1);

         cnavAf1.encode (buffer, -524288, 524287);

         buffer.getContext().eventDispatcher.endElement("cnavAf1", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavAf1");

      // encode cnavAf0

      if (cnavAf0 != null) {
         buffer.getContext().eventDispatcher.startElement("cnavAf0", -1);

         cnavAf0.encode (buffer, -33554432, 33554431);

         buffer.getContext().eventDispatcher.endElement("cnavAf0", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavAf0");

      // encode cnavTgd

      if (cnavTgd != null) {
         buffer.getContext().eventDispatcher.startElement("cnavTgd", -1);

         cnavTgd.encode (buffer, -4096, 4095);

         buffer.getContext().eventDispatcher.endElement("cnavTgd", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavTgd");

      // encode cnavISCl1cp

      if (cnavISCl1cp != null) {
         buffer.getContext().eventDispatcher.startElement("cnavISCl1cp", -1);

         cnavISCl1cp.encode (buffer, -4096, 4095);

         buffer.getContext().eventDispatcher.endElement("cnavISCl1cp", -1);
      }

      // encode cnavISCl1cd

      if (cnavISCl1cd != null) {
         buffer.getContext().eventDispatcher.startElement("cnavISCl1cd", -1);

         cnavISCl1cd.encode (buffer, -4096, 4095);

         buffer.getContext().eventDispatcher.endElement("cnavISCl1cd", -1);
      }

      // encode cnavISCl1ca

      if (cnavISCl1ca != null) {
         buffer.getContext().eventDispatcher.startElement("cnavISCl1ca", -1);

         cnavISCl1ca.encode (buffer, -4096, 4095);

         buffer.getContext().eventDispatcher.endElement("cnavISCl1ca", -1);
      }

      // encode cnavISCl2c

      if (cnavISCl2c != null) {
         buffer.getContext().eventDispatcher.startElement("cnavISCl2c", -1);

         cnavISCl2c.encode (buffer, -4096, 4095);

         buffer.getContext().eventDispatcher.endElement("cnavISCl2c", -1);
      }

      // encode cnavISCl5i5

      if (cnavISCl5i5 != null) {
         buffer.getContext().eventDispatcher.startElement("cnavISCl5i5", -1);

         cnavISCl5i5.encode (buffer, -4096, 4095);

         buffer.getContext().eventDispatcher.endElement("cnavISCl5i5", -1);
      }

      // encode cnavISCl5q5

      if (cnavISCl5q5 != null) {
         buffer.getContext().eventDispatcher.startElement("cnavISCl5q5", -1);

         cnavISCl5q5.encode (buffer, -4096, 4095);

         buffer.getContext().eventDispatcher.endElement("cnavISCl5q5", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
