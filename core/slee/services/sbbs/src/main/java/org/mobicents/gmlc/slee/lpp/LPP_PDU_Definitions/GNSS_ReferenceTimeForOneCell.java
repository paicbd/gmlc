/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_ReferenceTimeForOneCell extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-ReferenceTimeForOneCell";
   }

   protected NetworkTime networkTime;
   protected Asn1Integer referenceTimeUnc;
   protected GNSS_ReferenceTimeForOneCell_bsAlign bsAlign = null;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_ReferenceTimeForOneCell () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_ReferenceTimeForOneCell (
      NetworkTime networkTime_,
      Asn1Integer referenceTimeUnc_,
      GNSS_ReferenceTimeForOneCell_bsAlign bsAlign_
   ) throws Asn1Exception {
      super();
      setNetworkTime (networkTime_);
      setReferenceTimeUnc (referenceTimeUnc_);
      setBsAlign (bsAlign_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GNSS_ReferenceTimeForOneCell (
      NetworkTime networkTime_,
      Asn1Integer referenceTimeUnc_
   ) throws Asn1Exception {
      super();
      setNetworkTime (networkTime_);
      setReferenceTimeUnc (referenceTimeUnc_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GNSS_ReferenceTimeForOneCell (NetworkTime networkTime_,
      long referenceTimeUnc_,
      GNSS_ReferenceTimeForOneCell_bsAlign bsAlign_
   ) throws Asn1Exception {
      super();
      setNetworkTime (networkTime_);
      setReferenceTimeUnc (referenceTimeUnc_);
      setBsAlign (bsAlign_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public GNSS_ReferenceTimeForOneCell (
      NetworkTime networkTime_,
      long referenceTimeUnc_
   ) throws Asn1Exception {
      super();
      setNetworkTime (networkTime_);
      setReferenceTimeUnc (referenceTimeUnc_);
   }

   public void init () {
      networkTime = null;
      referenceTimeUnc = null;
      bsAlign = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_ReferenceTimeForOneCell) ) return false;

      GNSS_ReferenceTimeForOneCell rhs = (GNSS_ReferenceTimeForOneCell) obj;

      if (networkTime == null) {
         if (rhs.networkTime != null) return false;
      }
      else {
         if (!networkTime.equals(rhs.networkTime)) {
            return false;
         }
      }

      if (referenceTimeUnc == null) {
         if (rhs.referenceTimeUnc != null) return false;
      }
      else {
         if (!referenceTimeUnc.equals(rhs.referenceTimeUnc)) {
            return false;
         }
      }

      if (bsAlign == null) {
         if (rhs.bsAlign != null) return false;
      }
      else {
         if (!bsAlign.equals(rhs.bsAlign)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (networkTime != null) __code = 31*__code + networkTime.hashCode();
      if (referenceTimeUnc != null) __code = 31*__code + referenceTimeUnc.hashCode();
      if (bsAlign != null) __code = 31*__code + bsAlign.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for NetworkTime
    */
   public NetworkTime getNetworkTime () {
      return networkTime;
   }

   public void setNetworkTime (NetworkTime value) {
      this.networkTime = value;
   }

   /**
    * Accessor/mutator methods for ReferenceTimeUnc
    */
   public Asn1Integer getReferenceTimeUnc () {
      return referenceTimeUnc;
   }

   public void setReferenceTimeUnc (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.referenceTimeUnc = value;
   }

   public void setReferenceTimeUnc (long value) 
      throws Asn1Exception
   {
      setReferenceTimeUnc (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for BsAlign
    */
   public GNSS_ReferenceTimeForOneCell_bsAlign getBsAlign () {
      return bsAlign;
   }

   public void setBsAlign (GNSS_ReferenceTimeForOneCell_bsAlign value) {
      this.bsAlign = value;
   }

   public boolean hasBsAlign () {
      return (bsAlign != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return networkTime;
         case 1: return referenceTimeUnc;
         case 2: return bsAlign;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "networkTime";
         case 1: return "referenceTimeUnc";
         case 2: return "bsAlign";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean bsAlignPresent = buffer.decodeBit ("bsAlignPresent");

      // decode networkTime

      buffer.getContext().eventDispatcher.startElement("networkTime", -1);

      networkTime = new NetworkTime();
      networkTime.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("networkTime", -1);

      // decode referenceTimeUnc

      buffer.getContext().eventDispatcher.startElement("referenceTimeUnc", -1);

      referenceTimeUnc = new Asn1Integer();
      referenceTimeUnc.decode (buffer, 0, 127);
      buffer.getContext().eventDispatcher.endElement("referenceTimeUnc", -1);

      // decode bsAlign

      if (bsAlignPresent) {
         buffer.getContext().eventDispatcher.startElement("bsAlign", -1);

         int tval = GNSS_ReferenceTimeForOneCell_bsAlign.decodeEnumValue (buffer);
         bsAlign = GNSS_ReferenceTimeForOneCell_bsAlign.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("bsAlign", -1);
      }
      else {
         bsAlign = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((bsAlign != null), null);

      // encode networkTime

      if (networkTime != null) {
         buffer.getContext().eventDispatcher.startElement("networkTime", -1);

         networkTime.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("networkTime", -1);
      }
      else throw new Asn1MissingRequiredException ("networkTime");

      // encode referenceTimeUnc

      if (referenceTimeUnc != null) {
         buffer.getContext().eventDispatcher.startElement("referenceTimeUnc", -1);

         referenceTimeUnc.encode (buffer, 0, 127);

         buffer.getContext().eventDispatcher.endElement("referenceTimeUnc", -1);
      }
      else throw new Asn1MissingRequiredException ("referenceTimeUnc");

      // encode bsAlign

      if (bsAlign != null) {
         buffer.getContext().eventDispatcher.startElement("bsAlign", -1);

         bsAlign.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("bsAlign", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
