/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class PeriodicalReportingCriteria extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "PeriodicalReportingCriteria";
   }

   protected PeriodicalReportingCriteria_reportingAmount reportingAmount = null;  // default = PeriodicalReportingCriteria_reportingAmount.ra_Infinity()
   protected PeriodicalReportingCriteria_reportingInterval reportingInterval = null;

   public PeriodicalReportingCriteria () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PeriodicalReportingCriteria (
      PeriodicalReportingCriteria_reportingAmount reportingAmount_,
      PeriodicalReportingCriteria_reportingInterval reportingInterval_
   ) {
      super();
      setReportingAmount (reportingAmount_);
      setReportingInterval (reportingInterval_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PeriodicalReportingCriteria (
      PeriodicalReportingCriteria_reportingInterval reportingInterval_
   ) {
      super();
      reportingAmount = PeriodicalReportingCriteria_reportingAmount.ra_Infinity();
      setReportingInterval (reportingInterval_);
   }

   public void init () {
      reportingAmount = PeriodicalReportingCriteria_reportingAmount.ra_Infinity();
      reportingInterval = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof PeriodicalReportingCriteria) ) return false;

      PeriodicalReportingCriteria rhs = (PeriodicalReportingCriteria) obj;

      if (reportingAmount == null) {
         if (rhs.reportingAmount != null) return false;
      }
      else {
         if (!reportingAmount.equals(rhs.reportingAmount)) {
            return false;
         }
      }

      if (reportingInterval == null) {
         if (rhs.reportingInterval != null) return false;
      }
      else {
         if (!reportingInterval.equals(rhs.reportingInterval)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (reportingAmount != null) __code = 31*__code + reportingAmount.hashCode();
      if (reportingInterval != null) __code = 31*__code + reportingInterval.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for ReportingAmount
    */
   public PeriodicalReportingCriteria_reportingAmount getReportingAmount () {
      return reportingAmount;
   }

   public void setReportingAmount (PeriodicalReportingCriteria_reportingAmount value) {
      this.reportingAmount = value;
   }

   public boolean hasReportingAmount () {
      return (reportingAmount != null);
   }

   /**
    * Accessor/mutator methods for ReportingInterval
    */
   public PeriodicalReportingCriteria_reportingInterval getReportingInterval () {
      return reportingInterval;
   }

   public void setReportingInterval (PeriodicalReportingCriteria_reportingInterval value) {
      this.reportingInterval = value;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return reportingAmount;
         case 1: return reportingInterval;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "reportingAmount";
         case 1: return "reportingInterval";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean reportingAmountPresent = buffer.decodeBit ("reportingAmountPresent");

      // decode reportingAmount

      if (reportingAmountPresent) {
         buffer.getContext().eventDispatcher.startElement("reportingAmount", -1);

         int tval = PeriodicalReportingCriteria_reportingAmount.decodeEnumValue (buffer);
         reportingAmount = PeriodicalReportingCriteria_reportingAmount.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("reportingAmount", -1);
      }
      else {
         reportingAmount = PeriodicalReportingCriteria_reportingAmount.ra_Infinity();
      }

      // decode reportingInterval

      buffer.getContext().eventDispatcher.startElement("reportingInterval", -1);

      {
         int tval = PeriodicalReportingCriteria_reportingInterval.decodeEnumValue (buffer);
         reportingInterval = PeriodicalReportingCriteria_reportingInterval.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("reportingInterval", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((!reportingAmount.equals (PeriodicalReportingCriteria_reportingAmount.ra_Infinity())), null);

      // encode reportingAmount

      if (reportingAmount != null) {
         if (!reportingAmount.equals (PeriodicalReportingCriteria_reportingAmount.ra_Infinity())) {
            buffer.getContext().eventDispatcher.startElement("reportingAmount", -1);

            reportingAmount.encode (buffer);

            buffer.getContext().eventDispatcher.endElement("reportingAmount", -1);
         }
      }

      // encode reportingInterval

      if (reportingInterval != null) {
         buffer.getContext().eventDispatcher.startElement("reportingInterval", -1);

         reportingInterval.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportingInterval", -1);
      }
      else throw new Asn1MissingRequiredException ("reportingInterval");

   }

}
