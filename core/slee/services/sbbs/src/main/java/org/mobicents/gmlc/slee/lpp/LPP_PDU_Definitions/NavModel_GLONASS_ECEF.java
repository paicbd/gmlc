/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NavModel_GLONASS_ECEF extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "NavModel-GLONASS-ECEF";
   }

   protected Asn1Integer gloEn;
   protected Asn1BitString gloP1;
   protected Asn1Boolean gloP2;
   protected Asn1Integer gloM;
   protected Asn1Integer gloX;
   protected Asn1Integer gloXdot;
   protected Asn1Integer gloXdotdot;
   protected Asn1Integer gloY;
   protected Asn1Integer gloYdot;
   protected Asn1Integer gloYdotdot;
   protected Asn1Integer gloZ;
   protected Asn1Integer gloZdot;
   protected Asn1Integer gloZdotdot;
   protected Asn1OpenExt extElem1;

   public NavModel_GLONASS_ECEF () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NavModel_GLONASS_ECEF (
      Asn1Integer gloEn_,
      Asn1BitString gloP1_,
      Asn1Boolean gloP2_,
      Asn1Integer gloM_,
      Asn1Integer gloX_,
      Asn1Integer gloXdot_,
      Asn1Integer gloXdotdot_,
      Asn1Integer gloY_,
      Asn1Integer gloYdot_,
      Asn1Integer gloYdotdot_,
      Asn1Integer gloZ_,
      Asn1Integer gloZdot_,
      Asn1Integer gloZdotdot_
   ) throws Asn1Exception {
      super();
      setGloEn (gloEn_);
      setGloP1 (gloP1_);
      setGloP2 (gloP2_);
      setGloM (gloM_);
      setGloX (gloX_);
      setGloXdot (gloXdot_);
      setGloXdotdot (gloXdotdot_);
      setGloY (gloY_);
      setGloYdot (gloYdot_);
      setGloYdotdot (gloYdotdot_);
      setGloZ (gloZ_);
      setGloZdot (gloZdot_);
      setGloZdotdot (gloZdotdot_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NavModel_GLONASS_ECEF (long gloEn_,
      Asn1BitString gloP1_,
      boolean gloP2_,
      long gloM_,
      long gloX_,
      long gloXdot_,
      long gloXdotdot_,
      long gloY_,
      long gloYdot_,
      long gloYdotdot_,
      long gloZ_,
      long gloZdot_,
      long gloZdotdot_
   ) throws Asn1Exception {
      super();
      setGloEn (gloEn_);
      setGloP1 (gloP1_);
      setGloP2 (gloP2_);
      setGloM (gloM_);
      setGloX (gloX_);
      setGloXdot (gloXdot_);
      setGloXdotdot (gloXdotdot_);
      setGloY (gloY_);
      setGloYdot (gloYdot_);
      setGloYdotdot (gloYdotdot_);
      setGloZ (gloZ_);
      setGloZdot (gloZdot_);
      setGloZdotdot (gloZdotdot_);
   }

   public void init () {
      gloEn = null;
      gloP1 = null;
      gloP2 = null;
      gloM = null;
      gloX = null;
      gloXdot = null;
      gloXdotdot = null;
      gloY = null;
      gloYdot = null;
      gloYdotdot = null;
      gloZ = null;
      gloZdot = null;
      gloZdotdot = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof NavModel_GLONASS_ECEF) ) return false;

      NavModel_GLONASS_ECEF rhs = (NavModel_GLONASS_ECEF) obj;

      if (gloEn == null) {
         if (rhs.gloEn != null) return false;
      }
      else {
         if (!gloEn.equals(rhs.gloEn)) {
            return false;
         }
      }

      if (gloP1 == null) {
         if (rhs.gloP1 != null) return false;
      }
      else {
         if (!gloP1.equals(rhs.gloP1)) {
            return false;
         }
      }

      if (gloP2 == null) {
         if (rhs.gloP2 != null) return false;
      }
      else {
         if (!gloP2.equals(rhs.gloP2)) {
            return false;
         }
      }

      if (gloM == null) {
         if (rhs.gloM != null) return false;
      }
      else {
         if (!gloM.equals(rhs.gloM)) {
            return false;
         }
      }

      if (gloX == null) {
         if (rhs.gloX != null) return false;
      }
      else {
         if (!gloX.equals(rhs.gloX)) {
            return false;
         }
      }

      if (gloXdot == null) {
         if (rhs.gloXdot != null) return false;
      }
      else {
         if (!gloXdot.equals(rhs.gloXdot)) {
            return false;
         }
      }

      if (gloXdotdot == null) {
         if (rhs.gloXdotdot != null) return false;
      }
      else {
         if (!gloXdotdot.equals(rhs.gloXdotdot)) {
            return false;
         }
      }

      if (gloY == null) {
         if (rhs.gloY != null) return false;
      }
      else {
         if (!gloY.equals(rhs.gloY)) {
            return false;
         }
      }

      if (gloYdot == null) {
         if (rhs.gloYdot != null) return false;
      }
      else {
         if (!gloYdot.equals(rhs.gloYdot)) {
            return false;
         }
      }

      if (gloYdotdot == null) {
         if (rhs.gloYdotdot != null) return false;
      }
      else {
         if (!gloYdotdot.equals(rhs.gloYdotdot)) {
            return false;
         }
      }

      if (gloZ == null) {
         if (rhs.gloZ != null) return false;
      }
      else {
         if (!gloZ.equals(rhs.gloZ)) {
            return false;
         }
      }

      if (gloZdot == null) {
         if (rhs.gloZdot != null) return false;
      }
      else {
         if (!gloZdot.equals(rhs.gloZdot)) {
            return false;
         }
      }

      if (gloZdotdot == null) {
         if (rhs.gloZdotdot != null) return false;
      }
      else {
         if (!gloZdotdot.equals(rhs.gloZdotdot)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gloEn != null) __code = 31*__code + gloEn.hashCode();
      if (gloP1 != null) __code = 31*__code + gloP1.hashCode();
      if (gloP2 != null) __code = 31*__code + gloP2.hashCode();
      if (gloM != null) __code = 31*__code + gloM.hashCode();
      if (gloX != null) __code = 31*__code + gloX.hashCode();
      if (gloXdot != null) __code = 31*__code + gloXdot.hashCode();
      if (gloXdotdot != null) __code = 31*__code + gloXdotdot.hashCode();
      if (gloY != null) __code = 31*__code + gloY.hashCode();
      if (gloYdot != null) __code = 31*__code + gloYdot.hashCode();
      if (gloYdotdot != null) __code = 31*__code + gloYdotdot.hashCode();
      if (gloZ != null) __code = 31*__code + gloZ.hashCode();
      if (gloZdot != null) __code = 31*__code + gloZdot.hashCode();
      if (gloZdotdot != null) __code = 31*__code + gloZdotdot.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for GloEn
    */
   public Asn1Integer getGloEn () {
      return gloEn;
   }

   public void setGloEn (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 31))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloEn = value;
   }

   public void setGloEn (long value) 
      throws Asn1Exception
   {
      setGloEn (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloP1
    */
   public Asn1BitString getGloP1 () {
      return gloP1;
   }

   public void setGloP1 (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 2)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.gloP1 = value;
   }

   /**
    * Accessor/mutator methods for GloP2
    */
   public Asn1Boolean getGloP2 () {
      return gloP2;
   }

   public void setGloP2 (Asn1Boolean value) {
      this.gloP2 = value;
   }

   public void setGloP2 (boolean value) {
      setGloP2 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for GloM
    */
   public Asn1Integer getGloM () {
      return gloM;
   }

   public void setGloM (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 3))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloM = value;
   }

   public void setGloM (long value) 
      throws Asn1Exception
   {
      setGloM (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloX
    */
   public Asn1Integer getGloX () {
      return gloX;
   }

   public void setGloX (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -67108864 && value.value <= 67108863))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloX = value;
   }

   public void setGloX (long value) 
      throws Asn1Exception
   {
      setGloX (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloXdot
    */
   public Asn1Integer getGloXdot () {
      return gloXdot;
   }

   public void setGloXdot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8388608 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloXdot = value;
   }

   public void setGloXdot (long value) 
      throws Asn1Exception
   {
      setGloXdot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloXdotdot
    */
   public Asn1Integer getGloXdotdot () {
      return gloXdotdot;
   }

   public void setGloXdotdot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -16 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloXdotdot = value;
   }

   public void setGloXdotdot (long value) 
      throws Asn1Exception
   {
      setGloXdotdot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloY
    */
   public Asn1Integer getGloY () {
      return gloY;
   }

   public void setGloY (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -67108864 && value.value <= 67108863))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloY = value;
   }

   public void setGloY (long value) 
      throws Asn1Exception
   {
      setGloY (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloYdot
    */
   public Asn1Integer getGloYdot () {
      return gloYdot;
   }

   public void setGloYdot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8388608 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloYdot = value;
   }

   public void setGloYdot (long value) 
      throws Asn1Exception
   {
      setGloYdot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloYdotdot
    */
   public Asn1Integer getGloYdotdot () {
      return gloYdotdot;
   }

   public void setGloYdotdot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -16 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloYdotdot = value;
   }

   public void setGloYdotdot (long value) 
      throws Asn1Exception
   {
      setGloYdotdot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloZ
    */
   public Asn1Integer getGloZ () {
      return gloZ;
   }

   public void setGloZ (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -67108864 && value.value <= 67108863))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloZ = value;
   }

   public void setGloZ (long value) 
      throws Asn1Exception
   {
      setGloZ (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloZdot
    */
   public Asn1Integer getGloZdot () {
      return gloZdot;
   }

   public void setGloZdot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8388608 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloZdot = value;
   }

   public void setGloZdot (long value) 
      throws Asn1Exception
   {
      setGloZdot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GloZdotdot
    */
   public Asn1Integer getGloZdotdot () {
      return gloZdotdot;
   }

   public void setGloZdotdot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -16 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gloZdotdot = value;
   }

   public void setGloZdotdot (long value) 
      throws Asn1Exception
   {
      setGloZdotdot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gloEn;
         case 1: return gloP1;
         case 2: return gloP2;
         case 3: return gloM;
         case 4: return gloX;
         case 5: return gloXdot;
         case 6: return gloXdotdot;
         case 7: return gloY;
         case 8: return gloYdot;
         case 9: return gloYdotdot;
         case 10: return gloZ;
         case 11: return gloZdot;
         case 12: return gloZdotdot;
         case 13: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gloEn";
         case 1: return "gloP1";
         case 2: return "gloP2";
         case 3: return "gloM";
         case 4: return "gloX";
         case 5: return "gloXdot";
         case 6: return "gloXdotdot";
         case 7: return "gloY";
         case 8: return "gloYdot";
         case 9: return "gloYdotdot";
         case 10: return "gloZ";
         case 11: return "gloZdot";
         case 12: return "gloZdotdot";
         case 13: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode gloEn

      buffer.getContext().eventDispatcher.startElement("gloEn", -1);

      gloEn = new Asn1Integer();
      gloEn.decode (buffer, 0, 31);
      buffer.getContext().eventDispatcher.endElement("gloEn", -1);

      // decode gloP1

      buffer.getContext().eventDispatcher.startElement("gloP1", -1);

      gloP1 = new Asn1BitString();
      gloP1.decode (buffer, 2, 2);
      buffer.getContext().eventDispatcher.endElement("gloP1", -1);

      // decode gloP2

      buffer.getContext().eventDispatcher.startElement("gloP2", -1);

      gloP2 = new Asn1Boolean();
      gloP2.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("gloP2", -1);

      // decode gloM

      buffer.getContext().eventDispatcher.startElement("gloM", -1);

      gloM = new Asn1Integer();
      gloM.decode (buffer, 0, 3);
      buffer.getContext().eventDispatcher.endElement("gloM", -1);

      // decode gloX

      buffer.getContext().eventDispatcher.startElement("gloX", -1);

      gloX = new Asn1Integer();
      gloX.decode (buffer, -67108864, 67108863);
      buffer.getContext().eventDispatcher.endElement("gloX", -1);

      // decode gloXdot

      buffer.getContext().eventDispatcher.startElement("gloXdot", -1);

      gloXdot = new Asn1Integer();
      gloXdot.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("gloXdot", -1);

      // decode gloXdotdot

      buffer.getContext().eventDispatcher.startElement("gloXdotdot", -1);

      gloXdotdot = new Asn1Integer();
      gloXdotdot.decode (buffer, -16, 15);
      buffer.getContext().eventDispatcher.endElement("gloXdotdot", -1);

      // decode gloY

      buffer.getContext().eventDispatcher.startElement("gloY", -1);

      gloY = new Asn1Integer();
      gloY.decode (buffer, -67108864, 67108863);
      buffer.getContext().eventDispatcher.endElement("gloY", -1);

      // decode gloYdot

      buffer.getContext().eventDispatcher.startElement("gloYdot", -1);

      gloYdot = new Asn1Integer();
      gloYdot.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("gloYdot", -1);

      // decode gloYdotdot

      buffer.getContext().eventDispatcher.startElement("gloYdotdot", -1);

      gloYdotdot = new Asn1Integer();
      gloYdotdot.decode (buffer, -16, 15);
      buffer.getContext().eventDispatcher.endElement("gloYdotdot", -1);

      // decode gloZ

      buffer.getContext().eventDispatcher.startElement("gloZ", -1);

      gloZ = new Asn1Integer();
      gloZ.decode (buffer, -67108864, 67108863);
      buffer.getContext().eventDispatcher.endElement("gloZ", -1);

      // decode gloZdot

      buffer.getContext().eventDispatcher.startElement("gloZdot", -1);

      gloZdot = new Asn1Integer();
      gloZdot.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("gloZdot", -1);

      // decode gloZdotdot

      buffer.getContext().eventDispatcher.startElement("gloZdotdot", -1);

      gloZdotdot = new Asn1Integer();
      gloZdotdot.decode (buffer, -16, 15);
      buffer.getContext().eventDispatcher.endElement("gloZdotdot", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode gloEn

      if (gloEn != null) {
         buffer.getContext().eventDispatcher.startElement("gloEn", -1);

         gloEn.encode (buffer, 0, 31);

         buffer.getContext().eventDispatcher.endElement("gloEn", -1);
      }
      else throw new Asn1MissingRequiredException ("gloEn");

      // encode gloP1

      if (gloP1 != null) {
         buffer.getContext().eventDispatcher.startElement("gloP1", -1);

         gloP1.encode (buffer, 2, 2);

         buffer.getContext().eventDispatcher.endElement("gloP1", -1);
      }
      else throw new Asn1MissingRequiredException ("gloP1");

      // encode gloP2

      if (gloP2 != null) {
         buffer.getContext().eventDispatcher.startElement("gloP2", -1);

         gloP2.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gloP2", -1);
      }
      else throw new Asn1MissingRequiredException ("gloP2");

      // encode gloM

      if (gloM != null) {
         buffer.getContext().eventDispatcher.startElement("gloM", -1);

         gloM.encode (buffer, 0, 3);

         buffer.getContext().eventDispatcher.endElement("gloM", -1);
      }
      else throw new Asn1MissingRequiredException ("gloM");

      // encode gloX

      if (gloX != null) {
         buffer.getContext().eventDispatcher.startElement("gloX", -1);

         gloX.encode (buffer, -67108864, 67108863);

         buffer.getContext().eventDispatcher.endElement("gloX", -1);
      }
      else throw new Asn1MissingRequiredException ("gloX");

      // encode gloXdot

      if (gloXdot != null) {
         buffer.getContext().eventDispatcher.startElement("gloXdot", -1);

         gloXdot.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("gloXdot", -1);
      }
      else throw new Asn1MissingRequiredException ("gloXdot");

      // encode gloXdotdot

      if (gloXdotdot != null) {
         buffer.getContext().eventDispatcher.startElement("gloXdotdot", -1);

         gloXdotdot.encode (buffer, -16, 15);

         buffer.getContext().eventDispatcher.endElement("gloXdotdot", -1);
      }
      else throw new Asn1MissingRequiredException ("gloXdotdot");

      // encode gloY

      if (gloY != null) {
         buffer.getContext().eventDispatcher.startElement("gloY", -1);

         gloY.encode (buffer, -67108864, 67108863);

         buffer.getContext().eventDispatcher.endElement("gloY", -1);
      }
      else throw new Asn1MissingRequiredException ("gloY");

      // encode gloYdot

      if (gloYdot != null) {
         buffer.getContext().eventDispatcher.startElement("gloYdot", -1);

         gloYdot.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("gloYdot", -1);
      }
      else throw new Asn1MissingRequiredException ("gloYdot");

      // encode gloYdotdot

      if (gloYdotdot != null) {
         buffer.getContext().eventDispatcher.startElement("gloYdotdot", -1);

         gloYdotdot.encode (buffer, -16, 15);

         buffer.getContext().eventDispatcher.endElement("gloYdotdot", -1);
      }
      else throw new Asn1MissingRequiredException ("gloYdotdot");

      // encode gloZ

      if (gloZ != null) {
         buffer.getContext().eventDispatcher.startElement("gloZ", -1);

         gloZ.encode (buffer, -67108864, 67108863);

         buffer.getContext().eventDispatcher.endElement("gloZ", -1);
      }
      else throw new Asn1MissingRequiredException ("gloZ");

      // encode gloZdot

      if (gloZdot != null) {
         buffer.getContext().eventDispatcher.startElement("gloZdot", -1);

         gloZdot.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("gloZdot", -1);
      }
      else throw new Asn1MissingRequiredException ("gloZdot");

      // encode gloZdotdot

      if (gloZdotdot != null) {
         buffer.getContext().eventDispatcher.startElement("gloZdotdot", -1);

         gloZdotdot.encode (buffer, -16, 15);

         buffer.getContext().eventDispatcher.endElement("gloZdotdot", -1);
      }
      else throw new Asn1MissingRequiredException ("gloZdotdot");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
