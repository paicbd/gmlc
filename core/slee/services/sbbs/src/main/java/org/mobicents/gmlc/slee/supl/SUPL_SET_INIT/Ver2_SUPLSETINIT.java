/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_SET_INIT;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.ULP_Components.SETId;
import org.mobicents.gmlc.slee.supl.ULP_Components.QoP;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.ApplicationID;

public class Ver2_SUPLSETINIT extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_SET_INITRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_SET_INITRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Ver2-SUPLSETINIT";
   }

   protected SETId targetSETID;
   protected QoP qoP;  // optional
   protected ApplicationID applicationID;  // optional
   protected Asn1OpenExt extElem1;

   public Ver2_SUPLSETINIT () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Ver2_SUPLSETINIT (
      SETId targetSETID_,
      QoP qoP_,
      ApplicationID applicationID_
   ) {
      super();
      setTargetSETID (targetSETID_);
      setQoP (qoP_);
      setApplicationID (applicationID_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public Ver2_SUPLSETINIT (
      SETId targetSETID_
   ) {
      super();
      setTargetSETID (targetSETID_);
   }

   public void init () {
      targetSETID = null;
      qoP = null;
      applicationID = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Ver2_SUPLSETINIT) ) return false;

      Ver2_SUPLSETINIT rhs = (Ver2_SUPLSETINIT) obj;

      if (targetSETID == null) {
         if (rhs.targetSETID != null) return false;
      }
      else {
         if (!targetSETID.equals(rhs.targetSETID)) {
            return false;
         }
      }

      if (qoP == null) {
         if (rhs.qoP != null) return false;
      }
      else {
         if (!qoP.equals(rhs.qoP)) {
            return false;
         }
      }

      if (applicationID == null) {
         if (rhs.applicationID != null) return false;
      }
      else {
         if (!applicationID.equals(rhs.applicationID)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (targetSETID != null) __code = 31*__code + targetSETID.hashCode();
      if (qoP != null) __code = 31*__code + qoP.hashCode();
      if (applicationID != null) __code = 31*__code + applicationID.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for TargetSETID
    */
   public SETId getTargetSETID () {
      return targetSETID;
   }

   public void setTargetSETID (SETId value) {
      this.targetSETID = value;
   }

   /**
    * Accessor/mutator methods for QoP
    */
   public QoP getQoP () {
      return qoP;
   }

   public void setQoP (QoP value) {
      this.qoP = value;
   }

   public boolean hasQoP () {
      return (qoP != null);
   }

   /**
    * Accessor/mutator methods for ApplicationID
    */
   public ApplicationID getApplicationID () {
      return applicationID;
   }

   public void setApplicationID (ApplicationID value) {
      this.applicationID = value;
   }

   public boolean hasApplicationID () {
      return (applicationID != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return targetSETID;
         case 1: return qoP;
         case 2: return applicationID;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "targetSETID";
         case 1: return "qoP";
         case 2: return "applicationID";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean qoPPresent = buffer.decodeBit ("qoPPresent");
      boolean applicationIDPresent = buffer.decodeBit ("applicationIDPresent");

      // decode targetSETID

      buffer.getContext().eventDispatcher.startElement("targetSETID", -1);

      targetSETID = new SETId();
      targetSETID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("targetSETID", -1);

      // decode qoP

      if (qoPPresent) {
         buffer.getContext().eventDispatcher.startElement("qoP", -1);

         qoP = new QoP();
         qoP.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("qoP", -1);
      }
      else {
         qoP = null;
      }

      // decode applicationID

      if (applicationIDPresent) {
         buffer.getContext().eventDispatcher.startElement("applicationID", -1);

         applicationID = new ApplicationID();
         applicationID.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("applicationID", -1);
      }
      else {
         applicationID = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((qoP != null), null);
      buffer.encodeBit ((applicationID != null), null);

      // encode targetSETID

      if (targetSETID != null) {
         buffer.getContext().eventDispatcher.startElement("targetSETID", -1);

         targetSETID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("targetSETID", -1);
      }
      else throw new Asn1MissingRequiredException ("targetSETID");

      // encode qoP

      if (qoP != null) {
         buffer.getContext().eventDispatcher.startElement("qoP", -1);

         qoP.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("qoP", -1);
      }

      // encode applicationID

      if (applicationID != null) {
         buffer.getContext().eventDispatcher.startElement("applicationID", -1);

         applicationID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("applicationID", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
