/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NR_PositionCalculationAssistance_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "NR-PositionCalculationAssistance-r16";
   }

   protected NR_TRP_LocationInfo_r16 nr_TRP_LocationInfo_r16;  // optional
   protected NR_DL_PRS_BeamInfo_r16 nr_DL_PRS_BeamInfo_r16;  // optional
   protected NR_RTD_Info_r16 nr_RTD_Info_r16;  // optional
   protected Asn1OpenExt extElem1;

   public NR_PositionCalculationAssistance_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NR_PositionCalculationAssistance_r16 (
      NR_TRP_LocationInfo_r16 nr_TRP_LocationInfo_r16_,
      NR_DL_PRS_BeamInfo_r16 nr_DL_PRS_BeamInfo_r16_,
      NR_RTD_Info_r16 nr_RTD_Info_r16_
   ) throws Asn1Exception {
      super();
      setNr_TRP_LocationInfo_r16 (nr_TRP_LocationInfo_r16_);
      setNr_DL_PRS_BeamInfo_r16 (nr_DL_PRS_BeamInfo_r16_);
      setNr_RTD_Info_r16 (nr_RTD_Info_r16_);
   }

   public void init () {
      nr_TRP_LocationInfo_r16 = null;
      nr_DL_PRS_BeamInfo_r16 = null;
      nr_RTD_Info_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof NR_PositionCalculationAssistance_r16) ) return false;

      NR_PositionCalculationAssistance_r16 rhs = (NR_PositionCalculationAssistance_r16) obj;

      if (nr_TRP_LocationInfo_r16 == null) {
         if (rhs.nr_TRP_LocationInfo_r16 != null) return false;
      }
      else {
         if (!nr_TRP_LocationInfo_r16.equals(rhs.nr_TRP_LocationInfo_r16)) {
            return false;
         }
      }

      if (nr_DL_PRS_BeamInfo_r16 == null) {
         if (rhs.nr_DL_PRS_BeamInfo_r16 != null) return false;
      }
      else {
         if (!nr_DL_PRS_BeamInfo_r16.equals(rhs.nr_DL_PRS_BeamInfo_r16)) {
            return false;
         }
      }

      if (nr_RTD_Info_r16 == null) {
         if (rhs.nr_RTD_Info_r16 != null) return false;
      }
      else {
         if (!nr_RTD_Info_r16.equals(rhs.nr_RTD_Info_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (nr_TRP_LocationInfo_r16 != null) __code = 31*__code + nr_TRP_LocationInfo_r16.hashCode();
      if (nr_DL_PRS_BeamInfo_r16 != null) __code = 31*__code + nr_DL_PRS_BeamInfo_r16.hashCode();
      if (nr_RTD_Info_r16 != null) __code = 31*__code + nr_RTD_Info_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Nr_TRP_LocationInfo_r16
    */
   public NR_TRP_LocationInfo_r16 getNr_TRP_LocationInfo_r16 () {
      return nr_TRP_LocationInfo_r16;
   }

   public void setNr_TRP_LocationInfo_r16 (NR_TRP_LocationInfo_r16 value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 4))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.nr_TRP_LocationInfo_r16 = value;
   }

   public boolean hasNr_TRP_LocationInfo_r16 () {
      return (nr_TRP_LocationInfo_r16 != null);
   }

   /**
    * Accessor/mutator methods for Nr_DL_PRS_BeamInfo_r16
    */
   public NR_DL_PRS_BeamInfo_r16 getNr_DL_PRS_BeamInfo_r16 () {
      return nr_DL_PRS_BeamInfo_r16;
   }

   public void setNr_DL_PRS_BeamInfo_r16 (NR_DL_PRS_BeamInfo_r16 value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 4))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.nr_DL_PRS_BeamInfo_r16 = value;
   }

   public boolean hasNr_DL_PRS_BeamInfo_r16 () {
      return (nr_DL_PRS_BeamInfo_r16 != null);
   }

   /**
    * Accessor/mutator methods for Nr_RTD_Info_r16
    */
   public NR_RTD_Info_r16 getNr_RTD_Info_r16 () {
      return nr_RTD_Info_r16;
   }

   public void setNr_RTD_Info_r16 (NR_RTD_Info_r16 value) {
      this.nr_RTD_Info_r16 = value;
   }

   public boolean hasNr_RTD_Info_r16 () {
      return (nr_RTD_Info_r16 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return nr_TRP_LocationInfo_r16;
         case 1: return nr_DL_PRS_BeamInfo_r16;
         case 2: return nr_RTD_Info_r16;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "nr-TRP-LocationInfo-r16";
         case 1: return "nr-DL-PRS-BeamInfo-r16";
         case 2: return "nr-RTD-Info-r16";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean nr_TRP_LocationInfo_r16Present = buffer.decodeBit ("nr_TRP_LocationInfo_r16Present");
      boolean nr_DL_PRS_BeamInfo_r16Present = buffer.decodeBit ("nr_DL_PRS_BeamInfo_r16Present");
      boolean nr_RTD_Info_r16Present = buffer.decodeBit ("nr_RTD_Info_r16Present");

      // decode nr_TRP_LocationInfo_r16

      if (nr_TRP_LocationInfo_r16Present) {
         buffer.getContext().eventDispatcher.startElement("nr_TRP_LocationInfo_r16", -1);

         nr_TRP_LocationInfo_r16 = new NR_TRP_LocationInfo_r16();
         nr_TRP_LocationInfo_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nr_TRP_LocationInfo_r16", -1);
      }
      else {
         nr_TRP_LocationInfo_r16 = null;
      }

      // decode nr_DL_PRS_BeamInfo_r16

      if (nr_DL_PRS_BeamInfo_r16Present) {
         buffer.getContext().eventDispatcher.startElement("nr_DL_PRS_BeamInfo_r16", -1);

         nr_DL_PRS_BeamInfo_r16 = new NR_DL_PRS_BeamInfo_r16();
         nr_DL_PRS_BeamInfo_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nr_DL_PRS_BeamInfo_r16", -1);
      }
      else {
         nr_DL_PRS_BeamInfo_r16 = null;
      }

      // decode nr_RTD_Info_r16

      if (nr_RTD_Info_r16Present) {
         buffer.getContext().eventDispatcher.startElement("nr_RTD_Info_r16", -1);

         nr_RTD_Info_r16 = new NR_RTD_Info_r16();
         nr_RTD_Info_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nr_RTD_Info_r16", -1);
      }
      else {
         nr_RTD_Info_r16 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((nr_TRP_LocationInfo_r16 != null), null);
      buffer.encodeBit ((nr_DL_PRS_BeamInfo_r16 != null), null);
      buffer.encodeBit ((nr_RTD_Info_r16 != null), null);

      // encode nr_TRP_LocationInfo_r16

      if (nr_TRP_LocationInfo_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nr_TRP_LocationInfo_r16", -1);

         nr_TRP_LocationInfo_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nr_TRP_LocationInfo_r16", -1);
      }

      // encode nr_DL_PRS_BeamInfo_r16

      if (nr_DL_PRS_BeamInfo_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nr_DL_PRS_BeamInfo_r16", -1);

         nr_DL_PRS_BeamInfo_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nr_DL_PRS_BeamInfo_r16", -1);
      }

      // encode nr_RTD_Info_r16

      if (nr_RTD_Info_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nr_RTD_Info_r16", -1);

         nr_RTD_Info_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nr_RTD_Info_r16", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
