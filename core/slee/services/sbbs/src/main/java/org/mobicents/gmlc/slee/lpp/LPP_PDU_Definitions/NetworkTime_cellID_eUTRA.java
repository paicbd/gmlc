/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NetworkTime_cellID_eUTRA extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   protected Asn1Integer physCellId;
   protected CellGlobalIdEUTRA_AndUTRA cellGlobalIdEUTRA;  // optional
   protected ARFCN_ValueEUTRA earfcn;
   protected ARFCN_ValueEUTRA_v9a0 earfcn_v9a0;  // optional
   protected Asn1OpenExt extElem1;

   public NetworkTime_cellID_eUTRA () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NetworkTime_cellID_eUTRA (
      Asn1Integer physCellId_,
      CellGlobalIdEUTRA_AndUTRA cellGlobalIdEUTRA_,
      ARFCN_ValueEUTRA earfcn_,
      ARFCN_ValueEUTRA_v9a0 earfcn_v9a0_
   ) throws Asn1Exception {
      super();
      setPhysCellId (physCellId_);
      setCellGlobalIdEUTRA (cellGlobalIdEUTRA_);
      setEarfcn (earfcn_);
      setEarfcn_v9a0 (earfcn_v9a0_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public NetworkTime_cellID_eUTRA (
      Asn1Integer physCellId_,
      ARFCN_ValueEUTRA earfcn_
   ) throws Asn1Exception {
      super();
      setPhysCellId (physCellId_);
      setEarfcn (earfcn_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NetworkTime_cellID_eUTRA (long physCellId_,
      CellGlobalIdEUTRA_AndUTRA cellGlobalIdEUTRA_,
      long earfcn_,
      long earfcn_v9a0_
   ) throws Asn1Exception {
      super();
      setPhysCellId (physCellId_);
      setCellGlobalIdEUTRA (cellGlobalIdEUTRA_);
      setEarfcn (earfcn_);
      setEarfcn_v9a0 (earfcn_v9a0_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public NetworkTime_cellID_eUTRA (
      long physCellId_,
      long earfcn_
   ) throws Asn1Exception {
      super();
      setPhysCellId (physCellId_);
      setEarfcn (earfcn_);
   }

   public void init () {
      physCellId = null;
      cellGlobalIdEUTRA = null;
      earfcn = null;
      earfcn_v9a0 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof NetworkTime_cellID_eUTRA) ) return false;

      NetworkTime_cellID_eUTRA rhs = (NetworkTime_cellID_eUTRA) obj;

      if (physCellId == null) {
         if (rhs.physCellId != null) return false;
      }
      else {
         if (!physCellId.equals(rhs.physCellId)) {
            return false;
         }
      }

      if (cellGlobalIdEUTRA == null) {
         if (rhs.cellGlobalIdEUTRA != null) return false;
      }
      else {
         if (!cellGlobalIdEUTRA.equals(rhs.cellGlobalIdEUTRA)) {
            return false;
         }
      }

      if (earfcn == null) {
         if (rhs.earfcn != null) return false;
      }
      else {
         if (!earfcn.equals(rhs.earfcn)) {
            return false;
         }
      }

      if (earfcn_v9a0 == null) {
         if (rhs.earfcn_v9a0 != null) return false;
      }
      else {
         if (!earfcn_v9a0.equals(rhs.earfcn_v9a0)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (physCellId != null) __code = 31*__code + physCellId.hashCode();
      if (cellGlobalIdEUTRA != null) __code = 31*__code + cellGlobalIdEUTRA.hashCode();
      if (earfcn != null) __code = 31*__code + earfcn.hashCode();
      if (earfcn_v9a0 != null) __code = 31*__code + earfcn_v9a0.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for PhysCellId
    */
   public Asn1Integer getPhysCellId () {
      return physCellId;
   }

   public void setPhysCellId (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 503))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.physCellId = value;
   }

   public void setPhysCellId (long value) 
      throws Asn1Exception
   {
      setPhysCellId (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CellGlobalIdEUTRA
    */
   public CellGlobalIdEUTRA_AndUTRA getCellGlobalIdEUTRA () {
      return cellGlobalIdEUTRA;
   }

   public void setCellGlobalIdEUTRA (CellGlobalIdEUTRA_AndUTRA value) {
      this.cellGlobalIdEUTRA = value;
   }

   public boolean hasCellGlobalIdEUTRA () {
      return (cellGlobalIdEUTRA != null);
   }

   /**
    * Accessor/mutator methods for Earfcn
    */
   public ARFCN_ValueEUTRA getEarfcn () {
      return earfcn;
   }

   public void setEarfcn (ARFCN_ValueEUTRA value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.earfcn = value;
   }

   public void setEarfcn (long value) 
      throws Asn1Exception
   {
      setEarfcn (new ARFCN_ValueEUTRA(value));
   }

   /**
    * Accessor/mutator methods for Earfcn_v9a0
    */
   public ARFCN_ValueEUTRA_v9a0 getEarfcn_v9a0 () {
      return earfcn_v9a0;
   }

   public void setEarfcn_v9a0 (ARFCN_ValueEUTRA_v9a0 value) 
      throws Asn1Exception
   {
      if (!((value.value >= 65536 && value.value <= 262143))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.earfcn_v9a0 = value;
   }

   public void setEarfcn_v9a0 (long value) 
      throws Asn1Exception
   {
      setEarfcn_v9a0 (new ARFCN_ValueEUTRA_v9a0(value));
   }
   public boolean hasEarfcn_v9a0 () {
      return (earfcn_v9a0 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return physCellId;
         case 1: return cellGlobalIdEUTRA;
         case 2: return earfcn;
         case 3: return earfcn_v9a0;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "physCellId";
         case 1: return "cellGlobalIdEUTRA";
         case 2: return "earfcn";
         case 3: return "earfcn-v9a0";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean cellGlobalIdEUTRAPresent = buffer.decodeBit ("cellGlobalIdEUTRAPresent");

      // decode physCellId

      buffer.getContext().eventDispatcher.startElement("physCellId", -1);

      physCellId = new Asn1Integer();
      physCellId.decode (buffer, 0, 503);
      buffer.getContext().eventDispatcher.endElement("physCellId", -1);

      // decode cellGlobalIdEUTRA

      if (cellGlobalIdEUTRAPresent) {
         buffer.getContext().eventDispatcher.startElement("cellGlobalIdEUTRA", -1);

         cellGlobalIdEUTRA = new CellGlobalIdEUTRA_AndUTRA();
         cellGlobalIdEUTRA.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellGlobalIdEUTRA", -1);
      }
      else {
         cellGlobalIdEUTRA = null;
      }

      // decode earfcn

      buffer.getContext().eventDispatcher.startElement("earfcn", -1);

      earfcn = new ARFCN_ValueEUTRA();
      earfcn.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("earfcn", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("earfcn_v9a0Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode earfcn_v9a0

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("earfcn_v9a0", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            earfcn_v9a0 = new ARFCN_ValueEUTRA_v9a0();
            earfcn_v9a0.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("earfcn_v9a0", -1);

         }
         else {
            earfcn_v9a0 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((earfcn_v9a0 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((cellGlobalIdEUTRA != null), null);

      // encode physCellId

      if (physCellId != null) {
         buffer.getContext().eventDispatcher.startElement("physCellId", -1);

         physCellId.encode (buffer, 0, 503);

         buffer.getContext().eventDispatcher.endElement("physCellId", -1);
      }
      else throw new Asn1MissingRequiredException ("physCellId");

      // encode cellGlobalIdEUTRA

      if (cellGlobalIdEUTRA != null) {
         buffer.getContext().eventDispatcher.startElement("cellGlobalIdEUTRA", -1);

         cellGlobalIdEUTRA.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cellGlobalIdEUTRA", -1);
      }

      // encode earfcn

      if (earfcn != null) {
         buffer.getContext().eventDispatcher.startElement("earfcn", -1);

         earfcn.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("earfcn", -1);
      }
      else throw new Asn1MissingRequiredException ("earfcn");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((earfcn_v9a0 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // earfcn_v9a0

         if (earfcn_v9a0 != null) {
            buffer.reset();
            earfcn_v9a0.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("earfcn_v9a0", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("earfcn_v9a0", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
