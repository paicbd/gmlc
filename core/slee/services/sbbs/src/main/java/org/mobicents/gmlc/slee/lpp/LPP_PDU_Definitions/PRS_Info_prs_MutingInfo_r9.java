/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class PRS_Info_prs_MutingInfo_r9 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _PO2_R9 = 1;
   public final static byte _PO4_R9 = 2;
   public final static byte _PO8_R9 = 3;
   public final static byte _PO16_R9 = 4;
   public final static byte _PO32_V1420 = 5;
   public final static byte _PO64_V1420 = 6;
   public final static byte _PO128_V1420 = 7;
   public final static byte _PO256_V1420 = 8;
   public final static byte _PO512_V1420 = 9;
   public final static byte _PO1024_V1420 = 10;
   public final static byte _EXTELEM1 = 11;

   public PRS_Info_prs_MutingInfo_r9 () {
      super();
   }

   public PRS_Info_prs_MutingInfo_r9 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _PO2_R9: return "po2_r9";
      case _PO4_R9: return "po4_r9";
      case _PO8_R9: return "po8_r9";
      case _PO16_R9: return "po16_r9";
      case _PO32_V1420: return "po32_v1420";
      case _PO64_V1420: return "po64_v1420";
      case _PO128_V1420: return "po128_v1420";
      case _PO256_V1420: return "po256_v1420";
      case _PO512_V1420: return "po512_v1420";
      case _PO1024_V1420: return "po1024_v1420";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for po2_r9
    */
   public Asn1BitString getPo2_r9 () {
      return (choiceID == _PO2_R9) ? (Asn1BitString)element : null;
   }
   public void setPo2_r9 (Asn1BitString value) {
      setElement (_PO2_R9, value);
   }
   public boolean isPo2_r9 () {
      return (choiceID == _PO2_R9);
   }

   /**
    * Accessor/mutator methods for po4_r9
    */
   public Asn1BitString getPo4_r9 () {
      return (choiceID == _PO4_R9) ? (Asn1BitString)element : null;
   }
   public void setPo4_r9 (Asn1BitString value) {
      setElement (_PO4_R9, value);
   }
   public boolean isPo4_r9 () {
      return (choiceID == _PO4_R9);
   }

   /**
    * Accessor/mutator methods for po8_r9
    */
   public Asn1BitString getPo8_r9 () {
      return (choiceID == _PO8_R9) ? (Asn1BitString)element : null;
   }
   public void setPo8_r9 (Asn1BitString value) {
      setElement (_PO8_R9, value);
   }
   public boolean isPo8_r9 () {
      return (choiceID == _PO8_R9);
   }

   /**
    * Accessor/mutator methods for po16_r9
    */
   public Asn1BitString getPo16_r9 () {
      return (choiceID == _PO16_R9) ? (Asn1BitString)element : null;
   }
   public void setPo16_r9 (Asn1BitString value) {
      setElement (_PO16_R9, value);
   }
   public boolean isPo16_r9 () {
      return (choiceID == _PO16_R9);
   }

   /**
    * Accessor/mutator methods for po32_v1420
    */
   public Asn1BitString getPo32_v1420 () {
      return (choiceID == _PO32_V1420) ? (Asn1BitString)element : null;
   }
   public void setPo32_v1420 (Asn1BitString value) {
      setElement (_PO32_V1420, value);
   }
   public boolean isPo32_v1420 () {
      return (choiceID == _PO32_V1420);
   }

   /**
    * Accessor/mutator methods for po64_v1420
    */
   public Asn1BitString getPo64_v1420 () {
      return (choiceID == _PO64_V1420) ? (Asn1BitString)element : null;
   }
   public void setPo64_v1420 (Asn1BitString value) {
      setElement (_PO64_V1420, value);
   }
   public boolean isPo64_v1420 () {
      return (choiceID == _PO64_V1420);
   }

   /**
    * Accessor/mutator methods for po128_v1420
    */
   public Asn1BitString getPo128_v1420 () {
      return (choiceID == _PO128_V1420) ? (Asn1BitString)element : null;
   }
   public void setPo128_v1420 (Asn1BitString value) {
      setElement (_PO128_V1420, value);
   }
   public boolean isPo128_v1420 () {
      return (choiceID == _PO128_V1420);
   }

   /**
    * Accessor/mutator methods for po256_v1420
    */
   public Asn1BitString getPo256_v1420 () {
      return (choiceID == _PO256_V1420) ? (Asn1BitString)element : null;
   }
   public void setPo256_v1420 (Asn1BitString value) {
      setElement (_PO256_V1420, value);
   }
   public boolean isPo256_v1420 () {
      return (choiceID == _PO256_V1420);
   }

   /**
    * Accessor/mutator methods for po512_v1420
    */
   public Asn1BitString getPo512_v1420 () {
      return (choiceID == _PO512_V1420) ? (Asn1BitString)element : null;
   }
   public void setPo512_v1420 (Asn1BitString value) {
      setElement (_PO512_V1420, value);
   }
   public boolean isPo512_v1420 () {
      return (choiceID == _PO512_V1420);
   }

   /**
    * Accessor/mutator methods for po1024_v1420
    */
   public Asn1BitString getPo1024_v1420 () {
      return (choiceID == _PO1024_V1420) ? (Asn1BitString)element : null;
   }
   public void setPo1024_v1420 (Asn1BitString value) {
      setElement (_PO1024_V1420, value);
   }
   public boolean isPo1024_v1420 () {
      return (choiceID == _PO1024_V1420);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (4, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // po2_r9
            case 0: { 
               Asn1BitString po2_r9;
               element = po2_r9 = new Asn1BitString();
               po2_r9.decode (buffer, 2, 2);
               break;
            }

            // po4_r9
            case 1: { 
               Asn1BitString po4_r9;
               element = po4_r9 = new Asn1BitString();
               po4_r9.decode (buffer, 4, 4);
               break;
            }

            // po8_r9
            case 2: { 
               Asn1BitString po8_r9;
               element = po8_r9 = new Asn1BitString();
               po8_r9.decode (buffer, 8, 8);
               break;
            }

            // po16_r9
            case 3: { 
               Asn1BitString po16_r9;
               element = po16_r9 = new Asn1BitString();
               po16_r9.decode (buffer, 16, 16);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 5;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // po32_v1420
            case 0: { 
               Asn1BitString po32_v1420;
               element = po32_v1420 = new Asn1BitString();
               po32_v1420.decode (buffer, 32, 32);
               break;
            }

            // po64_v1420
            case 1: { 
               Asn1BitString po64_v1420;
               element = po64_v1420 = new Asn1BitString();
               po64_v1420.decode (buffer, 64, 64);
               break;
            }

            // po128_v1420
            case 2: { 
               Asn1BitString po128_v1420;
               element = po128_v1420 = new Asn1BitString();
               po128_v1420.decode (buffer, 128, 128);
               break;
            }

            // po256_v1420
            case 3: { 
               Asn1BitString po256_v1420;
               element = po256_v1420 = new Asn1BitString();
               po256_v1420.decode (buffer, 256, 256);
               break;
            }

            // po512_v1420
            case 4: { 
               Asn1BitString po512_v1420;
               element = po512_v1420 = new Asn1BitString();
               po512_v1420.decode (buffer, 512, 512);
               break;
            }

            // po1024_v1420
            case 5: { 
               Asn1BitString po1024_v1420;
               element = po1024_v1420 = new Asn1BitString();
               po1024_v1420.decode (buffer, 1024, 1024);
               break;
            }

            // extElem1
            case 6: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 4);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 4, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // po2_r9
            case _PO2_R9:
               Asn1BitString po2_r9 = (Asn1BitString) element;
               po2_r9.encode (buffer, 2, 2);
               break;

            // po4_r9
            case _PO4_R9:
               Asn1BitString po4_r9 = (Asn1BitString) element;
               po4_r9.encode (buffer, 4, 4);
               break;

            // po8_r9
            case _PO8_R9:
               Asn1BitString po8_r9 = (Asn1BitString) element;
               po8_r9.encode (buffer, 8, 8);
               break;

            // po16_r9
            case _PO16_R9:
               Asn1BitString po16_r9 = (Asn1BitString) element;
               po16_r9.encode (buffer, 16, 16);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 5);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1PerEncodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());
         Asn1OpenType openType;

         switch (choiceID) {
            // po32_v1420
            case _PO32_V1420:
               Asn1BitString po32_v1420 = (Asn1BitString) element;
               po32_v1420.encode (buffer, 32, 32);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            // po64_v1420
            case _PO64_V1420:
               Asn1BitString po64_v1420 = (Asn1BitString) element;
               po64_v1420.encode (buffer, 64, 64);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            // po128_v1420
            case _PO128_V1420:
               Asn1BitString po128_v1420 = (Asn1BitString) element;
               po128_v1420.encode (buffer, 128, 128);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            // po256_v1420
            case _PO256_V1420:
               Asn1BitString po256_v1420 = (Asn1BitString) element;
               po256_v1420.encode (buffer, 256, 256);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            // po512_v1420
            case _PO512_V1420:
               Asn1BitString po512_v1420 = (Asn1BitString) element;
               po512_v1420.encode (buffer, 512, 512);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            // po1024_v1420
            case _PO1024_V1420:
               Asn1BitString po1024_v1420 = (Asn1BitString) element;
               po1024_v1420.encode (buffer, 1024, 1024);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            default:
               openType = (Asn1OpenType)getElement();
         }

         buffer = savedBuffer;
         if (openType != null) {
            buffer.byteAlign();
            openType.encode (buffer);
         }
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
