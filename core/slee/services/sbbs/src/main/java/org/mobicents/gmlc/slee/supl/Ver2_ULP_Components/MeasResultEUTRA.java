/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class MeasResultEUTRA extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "MeasResultEUTRA";
   }

   protected PhysCellId physCellId;
   protected MeasResultEUTRA_cgi_Info cgi_Info;  // optional
   protected MeasResultEUTRA_measResult measResult;

   public MeasResultEUTRA () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasResultEUTRA (
      PhysCellId physCellId_,
      MeasResultEUTRA_cgi_Info cgi_Info_,
      MeasResultEUTRA_measResult measResult_
   ) throws Asn1Exception {
      super();
      setPhysCellId (physCellId_);
      setCgi_Info (cgi_Info_);
      setMeasResult (measResult_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasResultEUTRA (
      PhysCellId physCellId_,
      MeasResultEUTRA_measResult measResult_
   ) throws Asn1Exception {
      super();
      setPhysCellId (physCellId_);
      setMeasResult (measResult_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasResultEUTRA (long physCellId_,
      MeasResultEUTRA_cgi_Info cgi_Info_,
      MeasResultEUTRA_measResult measResult_
   ) throws Asn1Exception {
      super();
      setPhysCellId (physCellId_);
      setCgi_Info (cgi_Info_);
      setMeasResult (measResult_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MeasResultEUTRA (
      long physCellId_,
      MeasResultEUTRA_measResult measResult_
   ) throws Asn1Exception {
      super();
      setPhysCellId (physCellId_);
      setMeasResult (measResult_);
   }

   public void init () {
      physCellId = null;
      cgi_Info = null;
      measResult = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof MeasResultEUTRA) ) return false;

      MeasResultEUTRA rhs = (MeasResultEUTRA) obj;

      if (physCellId == null) {
         if (rhs.physCellId != null) return false;
      }
      else {
         if (!physCellId.equals(rhs.physCellId)) {
            return false;
         }
      }

      if (cgi_Info == null) {
         if (rhs.cgi_Info != null) return false;
      }
      else {
         if (!cgi_Info.equals(rhs.cgi_Info)) {
            return false;
         }
      }

      if (measResult == null) {
         if (rhs.measResult != null) return false;
      }
      else {
         if (!measResult.equals(rhs.measResult)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (physCellId != null) __code = 31*__code + physCellId.hashCode();
      if (cgi_Info != null) __code = 31*__code + cgi_Info.hashCode();
      if (measResult != null) __code = 31*__code + measResult.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for PhysCellId
    */
   public PhysCellId getPhysCellId () {
      return physCellId;
   }

   public void setPhysCellId (PhysCellId value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 503))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.physCellId = value;
   }

   public void setPhysCellId (long value) 
      throws Asn1Exception
   {
      setPhysCellId (new PhysCellId(value));
   }

   /**
    * Accessor/mutator methods for Cgi_Info
    */
   public MeasResultEUTRA_cgi_Info getCgi_Info () {
      return cgi_Info;
   }

   public void setCgi_Info (MeasResultEUTRA_cgi_Info value) {
      this.cgi_Info = value;
   }

   public boolean hasCgi_Info () {
      return (cgi_Info != null);
   }

   /**
    * Accessor/mutator methods for MeasResult
    */
   public MeasResultEUTRA_measResult getMeasResult () {
      return measResult;
   }

   public void setMeasResult (MeasResultEUTRA_measResult value) {
      this.measResult = value;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return physCellId;
         case 1: return cgi_Info;
         case 2: return measResult;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "physCellId";
         case 1: return "cgi-Info";
         case 2: return "measResult";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean cgi_InfoPresent = buffer.decodeBit ("cgi_InfoPresent");

      // decode physCellId

      buffer.getContext().eventDispatcher.startElement("physCellId", -1);

      physCellId = new PhysCellId();
      physCellId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("physCellId", -1);

      // decode cgi_Info

      if (cgi_InfoPresent) {
         buffer.getContext().eventDispatcher.startElement("cgi_Info", -1);

         cgi_Info = new MeasResultEUTRA_cgi_Info();
         cgi_Info.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cgi_Info", -1);
      }
      else {
         cgi_Info = null;
      }

      // decode measResult

      buffer.getContext().eventDispatcher.startElement("measResult", -1);

      measResult = new MeasResultEUTRA_measResult();
      measResult.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("measResult", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((cgi_Info != null), null);

      // encode physCellId

      if (physCellId != null) {
         buffer.getContext().eventDispatcher.startElement("physCellId", -1);

         physCellId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("physCellId", -1);
      }
      else throw new Asn1MissingRequiredException ("physCellId");

      // encode cgi_Info

      if (cgi_Info != null) {
         buffer.getContext().eventDispatcher.startElement("cgi_Info", -1);

         cgi_Info.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cgi_Info", -1);
      }

      // encode measResult

      if (measResult != null) {
         buffer.getContext().eventDispatcher.startElement("measResult", -1);

         measResult.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("measResult", -1);
      }
      else throw new Asn1MissingRequiredException ("measResult");

   }

}
