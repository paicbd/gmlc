/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GPS_TOW_AssistElement extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GPS-TOW-AssistElement";
   }

   protected Asn1Integer satelliteID;
   protected Asn1Integer tlmWord;
   protected Asn1Integer antiSpoof;
   protected Asn1Integer alert;
   protected Asn1Integer tlmRsvdBits;
   protected Asn1OpenExt extElem1;

   public GPS_TOW_AssistElement () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GPS_TOW_AssistElement (
      Asn1Integer satelliteID_,
      Asn1Integer tlmWord_,
      Asn1Integer antiSpoof_,
      Asn1Integer alert_,
      Asn1Integer tlmRsvdBits_
   ) throws Asn1Exception {
      super();
      setSatelliteID (satelliteID_);
      setTlmWord (tlmWord_);
      setAntiSpoof (antiSpoof_);
      setAlert (alert_);
      setTlmRsvdBits (tlmRsvdBits_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GPS_TOW_AssistElement (long satelliteID_,
      long tlmWord_,
      long antiSpoof_,
      long alert_,
      long tlmRsvdBits_
   ) throws Asn1Exception {
      super();
      setSatelliteID (satelliteID_);
      setTlmWord (tlmWord_);
      setAntiSpoof (antiSpoof_);
      setAlert (alert_);
      setTlmRsvdBits (tlmRsvdBits_);
   }

   public void init () {
      satelliteID = null;
      tlmWord = null;
      antiSpoof = null;
      alert = null;
      tlmRsvdBits = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GPS_TOW_AssistElement) ) return false;

      GPS_TOW_AssistElement rhs = (GPS_TOW_AssistElement) obj;

      if (satelliteID == null) {
         if (rhs.satelliteID != null) return false;
      }
      else {
         if (!satelliteID.equals(rhs.satelliteID)) {
            return false;
         }
      }

      if (tlmWord == null) {
         if (rhs.tlmWord != null) return false;
      }
      else {
         if (!tlmWord.equals(rhs.tlmWord)) {
            return false;
         }
      }

      if (antiSpoof == null) {
         if (rhs.antiSpoof != null) return false;
      }
      else {
         if (!antiSpoof.equals(rhs.antiSpoof)) {
            return false;
         }
      }

      if (alert == null) {
         if (rhs.alert != null) return false;
      }
      else {
         if (!alert.equals(rhs.alert)) {
            return false;
         }
      }

      if (tlmRsvdBits == null) {
         if (rhs.tlmRsvdBits != null) return false;
      }
      else {
         if (!tlmRsvdBits.equals(rhs.tlmRsvdBits)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (satelliteID != null) __code = 31*__code + satelliteID.hashCode();
      if (tlmWord != null) __code = 31*__code + tlmWord.hashCode();
      if (antiSpoof != null) __code = 31*__code + antiSpoof.hashCode();
      if (alert != null) __code = 31*__code + alert.hashCode();
      if (tlmRsvdBits != null) __code = 31*__code + tlmRsvdBits.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SatelliteID
    */
   public Asn1Integer getSatelliteID () {
      return satelliteID;
   }

   public void setSatelliteID (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 64))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.satelliteID = value;
   }

   public void setSatelliteID (long value) 
      throws Asn1Exception
   {
      setSatelliteID (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for TlmWord
    */
   public Asn1Integer getTlmWord () {
      return tlmWord;
   }

   public void setTlmWord (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 16383))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.tlmWord = value;
   }

   public void setTlmWord (long value) 
      throws Asn1Exception
   {
      setTlmWord (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for AntiSpoof
    */
   public Asn1Integer getAntiSpoof () {
      return antiSpoof;
   }

   public void setAntiSpoof (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.antiSpoof = value;
   }

   public void setAntiSpoof (long value) 
      throws Asn1Exception
   {
      setAntiSpoof (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Alert
    */
   public Asn1Integer getAlert () {
      return alert;
   }

   public void setAlert (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.alert = value;
   }

   public void setAlert (long value) 
      throws Asn1Exception
   {
      setAlert (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for TlmRsvdBits
    */
   public Asn1Integer getTlmRsvdBits () {
      return tlmRsvdBits;
   }

   public void setTlmRsvdBits (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 3))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.tlmRsvdBits = value;
   }

   public void setTlmRsvdBits (long value) 
      throws Asn1Exception
   {
      setTlmRsvdBits (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return satelliteID;
         case 1: return tlmWord;
         case 2: return antiSpoof;
         case 3: return alert;
         case 4: return tlmRsvdBits;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "satelliteID";
         case 1: return "tlmWord";
         case 2: return "antiSpoof";
         case 3: return "alert";
         case 4: return "tlmRsvdBits";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode satelliteID

      buffer.getContext().eventDispatcher.startElement("satelliteID", -1);

      satelliteID = new Asn1Integer();
      satelliteID.decode (buffer, 1, 64);
      buffer.getContext().eventDispatcher.endElement("satelliteID", -1);

      // decode tlmWord

      buffer.getContext().eventDispatcher.startElement("tlmWord", -1);

      tlmWord = new Asn1Integer();
      tlmWord.decode (buffer, 0, 16383);
      buffer.getContext().eventDispatcher.endElement("tlmWord", -1);

      // decode antiSpoof

      buffer.getContext().eventDispatcher.startElement("antiSpoof", -1);

      antiSpoof = new Asn1Integer();
      antiSpoof.decode (buffer, 0, 1);
      buffer.getContext().eventDispatcher.endElement("antiSpoof", -1);

      // decode alert

      buffer.getContext().eventDispatcher.startElement("alert", -1);

      alert = new Asn1Integer();
      alert.decode (buffer, 0, 1);
      buffer.getContext().eventDispatcher.endElement("alert", -1);

      // decode tlmRsvdBits

      buffer.getContext().eventDispatcher.startElement("tlmRsvdBits", -1);

      tlmRsvdBits = new Asn1Integer();
      tlmRsvdBits.decode (buffer, 0, 3);
      buffer.getContext().eventDispatcher.endElement("tlmRsvdBits", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode satelliteID

      if (satelliteID != null) {
         buffer.getContext().eventDispatcher.startElement("satelliteID", -1);

         satelliteID.encode (buffer, 1, 64);

         buffer.getContext().eventDispatcher.endElement("satelliteID", -1);
      }
      else throw new Asn1MissingRequiredException ("satelliteID");

      // encode tlmWord

      if (tlmWord != null) {
         buffer.getContext().eventDispatcher.startElement("tlmWord", -1);

         tlmWord.encode (buffer, 0, 16383);

         buffer.getContext().eventDispatcher.endElement("tlmWord", -1);
      }
      else throw new Asn1MissingRequiredException ("tlmWord");

      // encode antiSpoof

      if (antiSpoof != null) {
         buffer.getContext().eventDispatcher.startElement("antiSpoof", -1);

         antiSpoof.encode (buffer, 0, 1);

         buffer.getContext().eventDispatcher.endElement("antiSpoof", -1);
      }
      else throw new Asn1MissingRequiredException ("antiSpoof");

      // encode alert

      if (alert != null) {
         buffer.getContext().eventDispatcher.startElement("alert", -1);

         alert.encode (buffer, 0, 1);

         buffer.getContext().eventDispatcher.endElement("alert", -1);
      }
      else throw new Asn1MissingRequiredException ("alert");

      // encode tlmRsvdBits

      if (tlmRsvdBits != null) {
         buffer.getContext().eventDispatcher.startElement("tlmRsvdBits", -1);

         tlmRsvdBits.encode (buffer, 0, 3);

         buffer.getContext().eventDispatcher.endElement("tlmRsvdBits", -1);
      }
      else throw new Asn1MissingRequiredException ("tlmRsvdBits");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
