/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class LocationUncertainty_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "LocationUncertainty-r16";
   }

   protected Asn1Integer horizontalUncertainty_r16;
   protected Asn1Integer horizontalConfidence_r16;
   protected Asn1Integer verticalUncertainty_r16;
   protected Asn1Integer verticalConfidence_r16;

   public LocationUncertainty_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public LocationUncertainty_r16 (
      Asn1Integer horizontalUncertainty_r16_,
      Asn1Integer horizontalConfidence_r16_,
      Asn1Integer verticalUncertainty_r16_,
      Asn1Integer verticalConfidence_r16_
   ) throws Asn1Exception {
      super();
      setHorizontalUncertainty_r16 (horizontalUncertainty_r16_);
      setHorizontalConfidence_r16 (horizontalConfidence_r16_);
      setVerticalUncertainty_r16 (verticalUncertainty_r16_);
      setVerticalConfidence_r16 (verticalConfidence_r16_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public LocationUncertainty_r16 (long horizontalUncertainty_r16_,
      long horizontalConfidence_r16_,
      long verticalUncertainty_r16_,
      long verticalConfidence_r16_
   ) throws Asn1Exception {
      super();
      setHorizontalUncertainty_r16 (horizontalUncertainty_r16_);
      setHorizontalConfidence_r16 (horizontalConfidence_r16_);
      setVerticalUncertainty_r16 (verticalUncertainty_r16_);
      setVerticalConfidence_r16 (verticalConfidence_r16_);
   }

   public void init () {
      horizontalUncertainty_r16 = null;
      horizontalConfidence_r16 = null;
      verticalUncertainty_r16 = null;
      verticalConfidence_r16 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof LocationUncertainty_r16) ) return false;

      LocationUncertainty_r16 rhs = (LocationUncertainty_r16) obj;

      if (horizontalUncertainty_r16 == null) {
         if (rhs.horizontalUncertainty_r16 != null) return false;
      }
      else {
         if (!horizontalUncertainty_r16.equals(rhs.horizontalUncertainty_r16)) {
            return false;
         }
      }

      if (horizontalConfidence_r16 == null) {
         if (rhs.horizontalConfidence_r16 != null) return false;
      }
      else {
         if (!horizontalConfidence_r16.equals(rhs.horizontalConfidence_r16)) {
            return false;
         }
      }

      if (verticalUncertainty_r16 == null) {
         if (rhs.verticalUncertainty_r16 != null) return false;
      }
      else {
         if (!verticalUncertainty_r16.equals(rhs.verticalUncertainty_r16)) {
            return false;
         }
      }

      if (verticalConfidence_r16 == null) {
         if (rhs.verticalConfidence_r16 != null) return false;
      }
      else {
         if (!verticalConfidence_r16.equals(rhs.verticalConfidence_r16)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (horizontalUncertainty_r16 != null) __code = 31*__code + horizontalUncertainty_r16.hashCode();
      if (horizontalConfidence_r16 != null) __code = 31*__code + horizontalConfidence_r16.hashCode();
      if (verticalUncertainty_r16 != null) __code = 31*__code + verticalUncertainty_r16.hashCode();
      if (verticalConfidence_r16 != null) __code = 31*__code + verticalConfidence_r16.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for HorizontalUncertainty_r16
    */
   public Asn1Integer getHorizontalUncertainty_r16 () {
      return horizontalUncertainty_r16;
   }

   public void setHorizontalUncertainty_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.horizontalUncertainty_r16 = value;
   }

   public void setHorizontalUncertainty_r16 (long value) 
      throws Asn1Exception
   {
      setHorizontalUncertainty_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for HorizontalConfidence_r16
    */
   public Asn1Integer getHorizontalConfidence_r16 () {
      return horizontalConfidence_r16;
   }

   public void setHorizontalConfidence_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 100))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.horizontalConfidence_r16 = value;
   }

   public void setHorizontalConfidence_r16 (long value) 
      throws Asn1Exception
   {
      setHorizontalConfidence_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for VerticalUncertainty_r16
    */
   public Asn1Integer getVerticalUncertainty_r16 () {
      return verticalUncertainty_r16;
   }

   public void setVerticalUncertainty_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.verticalUncertainty_r16 = value;
   }

   public void setVerticalUncertainty_r16 (long value) 
      throws Asn1Exception
   {
      setVerticalUncertainty_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for VerticalConfidence_r16
    */
   public Asn1Integer getVerticalConfidence_r16 () {
      return verticalConfidence_r16;
   }

   public void setVerticalConfidence_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 100))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.verticalConfidence_r16 = value;
   }

   public void setVerticalConfidence_r16 (long value) 
      throws Asn1Exception
   {
      setVerticalConfidence_r16 (new Asn1Integer(value));
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return horizontalUncertainty_r16;
         case 1: return horizontalConfidence_r16;
         case 2: return verticalUncertainty_r16;
         case 3: return verticalConfidence_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "horizontalUncertainty-r16";
         case 1: return "horizontalConfidence-r16";
         case 2: return "verticalUncertainty-r16";
         case 3: return "verticalConfidence-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode horizontalUncertainty_r16

      buffer.getContext().eventDispatcher.startElement("horizontalUncertainty_r16", -1);

      horizontalUncertainty_r16 = new Asn1Integer();
      horizontalUncertainty_r16.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("horizontalUncertainty_r16", -1);

      // decode horizontalConfidence_r16

      buffer.getContext().eventDispatcher.startElement("horizontalConfidence_r16", -1);

      horizontalConfidence_r16 = new Asn1Integer();
      horizontalConfidence_r16.decode (buffer, 0, 100);
      buffer.getContext().eventDispatcher.endElement("horizontalConfidence_r16", -1);

      // decode verticalUncertainty_r16

      buffer.getContext().eventDispatcher.startElement("verticalUncertainty_r16", -1);

      verticalUncertainty_r16 = new Asn1Integer();
      verticalUncertainty_r16.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("verticalUncertainty_r16", -1);

      // decode verticalConfidence_r16

      buffer.getContext().eventDispatcher.startElement("verticalConfidence_r16", -1);

      verticalConfidence_r16 = new Asn1Integer();
      verticalConfidence_r16.decode (buffer, 0, 100);
      buffer.getContext().eventDispatcher.endElement("verticalConfidence_r16", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode horizontalUncertainty_r16

      if (horizontalUncertainty_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("horizontalUncertainty_r16", -1);

         horizontalUncertainty_r16.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("horizontalUncertainty_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("horizontalUncertainty_r16");

      // encode horizontalConfidence_r16

      if (horizontalConfidence_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("horizontalConfidence_r16", -1);

         horizontalConfidence_r16.encode (buffer, 0, 100);

         buffer.getContext().eventDispatcher.endElement("horizontalConfidence_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("horizontalConfidence_r16");

      // encode verticalUncertainty_r16

      if (verticalUncertainty_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("verticalUncertainty_r16", -1);

         verticalUncertainty_r16.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("verticalUncertainty_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("verticalUncertainty_r16");

      // encode verticalConfidence_r16

      if (verticalConfidence_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("verticalConfidence_r16", -1);

         verticalConfidence_r16.encode (buffer, 0, 100);

         buffer.getContext().eventDispatcher.endElement("verticalConfidence_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("verticalConfidence_r16");

   }

}
