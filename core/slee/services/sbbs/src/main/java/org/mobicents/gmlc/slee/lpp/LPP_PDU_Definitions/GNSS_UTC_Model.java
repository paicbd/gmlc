/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_UTC_Model extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-UTC-Model";
   }

   // Choice element identifier constants
   public final static byte _UTCMODEL1 = 1;
   public final static byte _UTCMODEL2 = 2;
   public final static byte _UTCMODEL3 = 3;
   public final static byte _UTCMODEL4 = 4;
   public final static byte _UTCMODEL5_R12 = 5;
   public final static byte _EXTELEM1 = 6;

   public GNSS_UTC_Model () {
      super();
   }

   public GNSS_UTC_Model (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _UTCMODEL1: return "utcModel1";
      case _UTCMODEL2: return "utcModel2";
      case _UTCMODEL3: return "utcModel3";
      case _UTCMODEL4: return "utcModel4";
      case _UTCMODEL5_R12: return "utcModel5_r12";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for utcModel1
    */
   public UTC_ModelSet1 getUtcModel1 () {
      return (choiceID == _UTCMODEL1) ? (UTC_ModelSet1)element : null;
   }
   public void setUtcModel1 (UTC_ModelSet1 value) {
      setElement (_UTCMODEL1, value);
   }
   public boolean isUtcModel1 () {
      return (choiceID == _UTCMODEL1);
   }

   /**
    * Accessor/mutator methods for utcModel2
    */
   public UTC_ModelSet2 getUtcModel2 () {
      return (choiceID == _UTCMODEL2) ? (UTC_ModelSet2)element : null;
   }
   public void setUtcModel2 (UTC_ModelSet2 value) {
      setElement (_UTCMODEL2, value);
   }
   public boolean isUtcModel2 () {
      return (choiceID == _UTCMODEL2);
   }

   /**
    * Accessor/mutator methods for utcModel3
    */
   public UTC_ModelSet3 getUtcModel3 () {
      return (choiceID == _UTCMODEL3) ? (UTC_ModelSet3)element : null;
   }
   public void setUtcModel3 (UTC_ModelSet3 value) {
      setElement (_UTCMODEL3, value);
   }
   public boolean isUtcModel3 () {
      return (choiceID == _UTCMODEL3);
   }

   /**
    * Accessor/mutator methods for utcModel4
    */
   public UTC_ModelSet4 getUtcModel4 () {
      return (choiceID == _UTCMODEL4) ? (UTC_ModelSet4)element : null;
   }
   public void setUtcModel4 (UTC_ModelSet4 value) {
      setElement (_UTCMODEL4, value);
   }
   public boolean isUtcModel4 () {
      return (choiceID == _UTCMODEL4);
   }

   /**
    * Accessor/mutator methods for utcModel5_r12
    */
   public UTC_ModelSet5_r12 getUtcModel5_r12 () {
      return (choiceID == _UTCMODEL5_R12) ? (UTC_ModelSet5_r12)element : null;
   }
   public void setUtcModel5_r12 (UTC_ModelSet5_r12 value) {
      setElement (_UTCMODEL5_R12, value);
   }
   public boolean isUtcModel5_r12 () {
      return (choiceID == _UTCMODEL5_R12);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (4, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // utcModel1
            case 0: { 
               UTC_ModelSet1 utcModel1;
               element = utcModel1 = new UTC_ModelSet1();
               utcModel1.decode (buffer);
               break;
            }

            // utcModel2
            case 1: { 
               UTC_ModelSet2 utcModel2;
               element = utcModel2 = new UTC_ModelSet2();
               utcModel2.decode (buffer);
               break;
            }

            // utcModel3
            case 2: { 
               UTC_ModelSet3 utcModel3;
               element = utcModel3 = new UTC_ModelSet3();
               utcModel3.decode (buffer);
               break;
            }

            // utcModel4
            case 3: { 
               UTC_ModelSet4 utcModel4;
               element = utcModel4 = new UTC_ModelSet4();
               utcModel4.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 5;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // utcModel5_r12
            case 0: { 
               UTC_ModelSet5_r12 utcModel5_r12;
               element = utcModel5_r12 = new UTC_ModelSet5_r12();
               utcModel5_r12.decode (buffer);
               break;
            }

            // extElem1
            case 1: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 4);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 4, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // utcModel1
            case _UTCMODEL1:
               UTC_ModelSet1 utcModel1 = (UTC_ModelSet1) element;
               utcModel1.encode (buffer);
               break;

            // utcModel2
            case _UTCMODEL2:
               UTC_ModelSet2 utcModel2 = (UTC_ModelSet2) element;
               utcModel2.encode (buffer);
               break;

            // utcModel3
            case _UTCMODEL3:
               UTC_ModelSet3 utcModel3 = (UTC_ModelSet3) element;
               utcModel3.encode (buffer);
               break;

            // utcModel4
            case _UTCMODEL4:
               UTC_ModelSet4 utcModel4 = (UTC_ModelSet4) element;
               utcModel4.encode (buffer);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 5);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1PerEncodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());
         Asn1OpenType openType;

         switch (choiceID) {
            // utcModel5_r12
            case _UTCMODEL5_R12:
               UTC_ModelSet5_r12 utcModel5_r12 = (UTC_ModelSet5_r12) element;
               utcModel5_r12.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            default:
               openType = (Asn1OpenType)getElement();
         }

         buffer = savedBuffer;
         if (openType != null) {
            buffer.byteAlign();
            openType.encode (buffer);
         }
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
