/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_START;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.ULP_Version_2_parameter_extensions.Ver2_SETCapabilities_extension;

public class SETCapabilities extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_STARTRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_STARTRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SETCapabilities";
   }

   protected PosTechnology posTechnology;
   protected PrefMethod prefMethod = null;
   protected PosProtocol posProtocol;
   protected Ver2_SETCapabilities_extension ver2_SETCapabilities_extension;  // optional
   protected Asn1OpenExt extElem1;

   public SETCapabilities () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SETCapabilities (
      PosTechnology posTechnology_,
      PrefMethod prefMethod_,
      PosProtocol posProtocol_,
      Ver2_SETCapabilities_extension ver2_SETCapabilities_extension_
   ) {
      super();
      setPosTechnology (posTechnology_);
      setPrefMethod (prefMethod_);
      setPosProtocol (posProtocol_);
      setVer2_SETCapabilities_extension (ver2_SETCapabilities_extension_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SETCapabilities (
      PosTechnology posTechnology_,
      PrefMethod prefMethod_,
      PosProtocol posProtocol_
   ) {
      super();
      setPosTechnology (posTechnology_);
      setPrefMethod (prefMethod_);
      setPosProtocol (posProtocol_);
   }

   public void init () {
      posTechnology = null;
      prefMethod = null;
      posProtocol = null;
      ver2_SETCapabilities_extension = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof SETCapabilities) ) return false;

      SETCapabilities rhs = (SETCapabilities) obj;

      if (posTechnology == null) {
         if (rhs.posTechnology != null) return false;
      }
      else {
         if (!posTechnology.equals(rhs.posTechnology)) {
            return false;
         }
      }

      if (prefMethod == null) {
         if (rhs.prefMethod != null) return false;
      }
      else {
         if (!prefMethod.equals(rhs.prefMethod)) {
            return false;
         }
      }

      if (posProtocol == null) {
         if (rhs.posProtocol != null) return false;
      }
      else {
         if (!posProtocol.equals(rhs.posProtocol)) {
            return false;
         }
      }

      if (ver2_SETCapabilities_extension == null) {
         if (rhs.ver2_SETCapabilities_extension != null) return false;
      }
      else {
         if (!ver2_SETCapabilities_extension.equals(rhs.ver2_SETCapabilities_extension)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (posTechnology != null) __code = 31*__code + posTechnology.hashCode();
      if (prefMethod != null) __code = 31*__code + prefMethod.hashCode();
      if (posProtocol != null) __code = 31*__code + posProtocol.hashCode();
      if (ver2_SETCapabilities_extension != null) __code = 31*__code + ver2_SETCapabilities_extension.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for PosTechnology
    */
   public PosTechnology getPosTechnology () {
      return posTechnology;
   }

   public void setPosTechnology (PosTechnology value) {
      this.posTechnology = value;
   }

   /**
    * Accessor/mutator methods for PrefMethod
    */
   public PrefMethod getPrefMethod () {
      return prefMethod;
   }

   public void setPrefMethod (PrefMethod value) {
      this.prefMethod = value;
   }

   /**
    * Accessor/mutator methods for PosProtocol
    */
   public PosProtocol getPosProtocol () {
      return posProtocol;
   }

   public void setPosProtocol (PosProtocol value) {
      this.posProtocol = value;
   }

   /**
    * Accessor/mutator methods for Ver2_SETCapabilities_extension
    */
   public Ver2_SETCapabilities_extension getVer2_SETCapabilities_extension () {
      return ver2_SETCapabilities_extension;
   }

   public void setVer2_SETCapabilities_extension (Ver2_SETCapabilities_extension value) {
      this.ver2_SETCapabilities_extension = value;
   }

   public boolean hasVer2_SETCapabilities_extension () {
      return (ver2_SETCapabilities_extension != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return posTechnology;
         case 1: return prefMethod;
         case 2: return posProtocol;
         case 3: return ver2_SETCapabilities_extension;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "posTechnology";
         case 1: return "prefMethod";
         case 2: return "posProtocol";
         case 3: return "ver2-SETCapabilities-extension";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode posTechnology

      buffer.getContext().eventDispatcher.startElement("posTechnology", -1);

      posTechnology = new PosTechnology();
      posTechnology.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("posTechnology", -1);

      // decode prefMethod

      buffer.getContext().eventDispatcher.startElement("prefMethod", -1);

      {
         int tval = PrefMethod.decodeEnumValue (buffer);
         prefMethod = PrefMethod.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("prefMethod", -1);

      // decode posProtocol

      buffer.getContext().eventDispatcher.startElement("posProtocol", -1);

      posProtocol = new PosProtocol();
      posProtocol.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("posProtocol", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("ver2_SETCapabilities_extensionPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode ver2_SETCapabilities_extension

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("ver2_SETCapabilities_extension", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            ver2_SETCapabilities_extension = new Ver2_SETCapabilities_extension();
            ver2_SETCapabilities_extension.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("ver2_SETCapabilities_extension", -1);

         }
         else {
            ver2_SETCapabilities_extension = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((ver2_SETCapabilities_extension != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode posTechnology

      if (posTechnology != null) {
         buffer.getContext().eventDispatcher.startElement("posTechnology", -1);

         posTechnology.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("posTechnology", -1);
      }
      else throw new Asn1MissingRequiredException ("posTechnology");

      // encode prefMethod

      if (prefMethod != null) {
         buffer.getContext().eventDispatcher.startElement("prefMethod", -1);

         prefMethod.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("prefMethod", -1);
      }
      else throw new Asn1MissingRequiredException ("prefMethod");

      // encode posProtocol

      if (posProtocol != null) {
         buffer.getContext().eventDispatcher.startElement("posProtocol", -1);

         posProtocol.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("posProtocol", -1);
      }
      else throw new Asn1MissingRequiredException ("posProtocol");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((ver2_SETCapabilities_extension != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // ver2_SETCapabilities_extension

         if (ver2_SETCapabilities_extension != null) {
            buffer.reset();
            ver2_SETCapabilities_extension.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("ver2_SETCapabilities_extension", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("ver2_SETCapabilities_extension", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
