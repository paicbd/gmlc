/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasurementReferenceTime extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "MeasurementReferenceTime";
   }

   protected Asn1Integer gnss_TOD_msec;
   protected Asn1Integer gnss_TOD_frac;  // optional
   protected Asn1Integer gnss_TOD_unc;  // optional
   protected GNSS_ID gnss_TimeID;
   protected MeasurementReferenceTime_networkTime networkTime;  // optional
   protected Asn1OpenExt extElem1;

   public MeasurementReferenceTime () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasurementReferenceTime (
      Asn1Integer gnss_TOD_msec_,
      Asn1Integer gnss_TOD_frac_,
      Asn1Integer gnss_TOD_unc_,
      GNSS_ID gnss_TimeID_,
      MeasurementReferenceTime_networkTime networkTime_
   ) throws Asn1Exception {
      super();
      setGnss_TOD_msec (gnss_TOD_msec_);
      setGnss_TOD_frac (gnss_TOD_frac_);
      setGnss_TOD_unc (gnss_TOD_unc_);
      setGnss_TimeID (gnss_TimeID_);
      setNetworkTime (networkTime_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasurementReferenceTime (
      Asn1Integer gnss_TOD_msec_,
      GNSS_ID gnss_TimeID_
   ) throws Asn1Exception {
      super();
      setGnss_TOD_msec (gnss_TOD_msec_);
      setGnss_TimeID (gnss_TimeID_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasurementReferenceTime (long gnss_TOD_msec_,
      long gnss_TOD_frac_,
      long gnss_TOD_unc_,
      GNSS_ID gnss_TimeID_,
      MeasurementReferenceTime_networkTime networkTime_
   ) throws Asn1Exception {
      super();
      setGnss_TOD_msec (gnss_TOD_msec_);
      setGnss_TOD_frac (gnss_TOD_frac_);
      setGnss_TOD_unc (gnss_TOD_unc_);
      setGnss_TimeID (gnss_TimeID_);
      setNetworkTime (networkTime_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MeasurementReferenceTime (
      long gnss_TOD_msec_,
      GNSS_ID gnss_TimeID_
   ) throws Asn1Exception {
      super();
      setGnss_TOD_msec (gnss_TOD_msec_);
      setGnss_TimeID (gnss_TimeID_);
   }

   public void init () {
      gnss_TOD_msec = null;
      gnss_TOD_frac = null;
      gnss_TOD_unc = null;
      gnss_TimeID = null;
      networkTime = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof MeasurementReferenceTime) ) return false;

      MeasurementReferenceTime rhs = (MeasurementReferenceTime) obj;

      if (gnss_TOD_msec == null) {
         if (rhs.gnss_TOD_msec != null) return false;
      }
      else {
         if (!gnss_TOD_msec.equals(rhs.gnss_TOD_msec)) {
            return false;
         }
      }

      if (gnss_TOD_frac == null) {
         if (rhs.gnss_TOD_frac != null) return false;
      }
      else {
         if (!gnss_TOD_frac.equals(rhs.gnss_TOD_frac)) {
            return false;
         }
      }

      if (gnss_TOD_unc == null) {
         if (rhs.gnss_TOD_unc != null) return false;
      }
      else {
         if (!gnss_TOD_unc.equals(rhs.gnss_TOD_unc)) {
            return false;
         }
      }

      if (gnss_TimeID == null) {
         if (rhs.gnss_TimeID != null) return false;
      }
      else {
         if (!gnss_TimeID.equals(rhs.gnss_TimeID)) {
            return false;
         }
      }

      if (networkTime == null) {
         if (rhs.networkTime != null) return false;
      }
      else {
         if (!networkTime.equals(rhs.networkTime)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gnss_TOD_msec != null) __code = 31*__code + gnss_TOD_msec.hashCode();
      if (gnss_TOD_frac != null) __code = 31*__code + gnss_TOD_frac.hashCode();
      if (gnss_TOD_unc != null) __code = 31*__code + gnss_TOD_unc.hashCode();
      if (gnss_TimeID != null) __code = 31*__code + gnss_TimeID.hashCode();
      if (networkTime != null) __code = 31*__code + networkTime.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Gnss_TOD_msec
    */
   public Asn1Integer getGnss_TOD_msec () {
      return gnss_TOD_msec;
   }

   public void setGnss_TOD_msec (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 3599999))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gnss_TOD_msec = value;
   }

   public void setGnss_TOD_msec (long value) 
      throws Asn1Exception
   {
      setGnss_TOD_msec (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Gnss_TOD_frac
    */
   public Asn1Integer getGnss_TOD_frac () {
      return gnss_TOD_frac;
   }

   public void setGnss_TOD_frac (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 3999))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gnss_TOD_frac = value;
   }

   public void setGnss_TOD_frac (long value) 
      throws Asn1Exception
   {
      setGnss_TOD_frac (new Asn1Integer(value));
   }
   public boolean hasGnss_TOD_frac () {
      return (gnss_TOD_frac != null);
   }

   /**
    * Accessor/mutator methods for Gnss_TOD_unc
    */
   public Asn1Integer getGnss_TOD_unc () {
      return gnss_TOD_unc;
   }

   public void setGnss_TOD_unc (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gnss_TOD_unc = value;
   }

   public void setGnss_TOD_unc (long value) 
      throws Asn1Exception
   {
      setGnss_TOD_unc (new Asn1Integer(value));
   }
   public boolean hasGnss_TOD_unc () {
      return (gnss_TOD_unc != null);
   }

   /**
    * Accessor/mutator methods for Gnss_TimeID
    */
   public GNSS_ID getGnss_TimeID () {
      return gnss_TimeID;
   }

   public void setGnss_TimeID (GNSS_ID value) {
      this.gnss_TimeID = value;
   }

   /**
    * Accessor/mutator methods for NetworkTime
    */
   public MeasurementReferenceTime_networkTime getNetworkTime () {
      return networkTime;
   }

   public void setNetworkTime (MeasurementReferenceTime_networkTime value) {
      this.networkTime = value;
   }

   public boolean hasNetworkTime () {
      return (networkTime != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gnss_TOD_msec;
         case 1: return gnss_TOD_frac;
         case 2: return gnss_TOD_unc;
         case 3: return gnss_TimeID;
         case 4: return networkTime;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gnss-TOD-msec";
         case 1: return "gnss-TOD-frac";
         case 2: return "gnss-TOD-unc";
         case 3: return "gnss-TimeID";
         case 4: return "networkTime";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean gnss_TOD_fracPresent = buffer.decodeBit ("gnss_TOD_fracPresent");
      boolean gnss_TOD_uncPresent = buffer.decodeBit ("gnss_TOD_uncPresent");
      boolean networkTimePresent = buffer.decodeBit ("networkTimePresent");

      // decode gnss_TOD_msec

      buffer.getContext().eventDispatcher.startElement("gnss_TOD_msec", -1);

      gnss_TOD_msec = new Asn1Integer();
      gnss_TOD_msec.decode (buffer, 0, 3599999);
      buffer.getContext().eventDispatcher.endElement("gnss_TOD_msec", -1);

      // decode gnss_TOD_frac

      if (gnss_TOD_fracPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_TOD_frac", -1);

         gnss_TOD_frac = new Asn1Integer();
         gnss_TOD_frac.decode (buffer, 0, 3999);
         buffer.getContext().eventDispatcher.endElement("gnss_TOD_frac", -1);
      }
      else {
         gnss_TOD_frac = null;
      }

      // decode gnss_TOD_unc

      if (gnss_TOD_uncPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_TOD_unc", -1);

         gnss_TOD_unc = new Asn1Integer();
         gnss_TOD_unc.decode (buffer, 0, 127);
         buffer.getContext().eventDispatcher.endElement("gnss_TOD_unc", -1);
      }
      else {
         gnss_TOD_unc = null;
      }

      // decode gnss_TimeID

      buffer.getContext().eventDispatcher.startElement("gnss_TimeID", -1);

      gnss_TimeID = new GNSS_ID();
      gnss_TimeID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("gnss_TimeID", -1);

      // decode networkTime

      if (networkTimePresent) {
         buffer.getContext().eventDispatcher.startElement("networkTime", -1);

         networkTime = new MeasurementReferenceTime_networkTime();
         networkTime.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("networkTime", -1);
      }
      else {
         networkTime = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((gnss_TOD_frac != null), null);
      buffer.encodeBit ((gnss_TOD_unc != null), null);
      buffer.encodeBit ((networkTime != null), null);

      // encode gnss_TOD_msec

      if (gnss_TOD_msec != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_TOD_msec", -1);

         gnss_TOD_msec.encode (buffer, 0, 3599999);

         buffer.getContext().eventDispatcher.endElement("gnss_TOD_msec", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_TOD_msec");

      // encode gnss_TOD_frac

      if (gnss_TOD_frac != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_TOD_frac", -1);

         gnss_TOD_frac.encode (buffer, 0, 3999);

         buffer.getContext().eventDispatcher.endElement("gnss_TOD_frac", -1);
      }

      // encode gnss_TOD_unc

      if (gnss_TOD_unc != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_TOD_unc", -1);

         gnss_TOD_unc.encode (buffer, 0, 127);

         buffer.getContext().eventDispatcher.endElement("gnss_TOD_unc", -1);
      }

      // encode gnss_TimeID

      if (gnss_TimeID != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_TimeID", -1);

         gnss_TimeID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_TimeID", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_TimeID");

      // encode networkTime

      if (networkTime != null) {
         buffer.getContext().eventDispatcher.startElement("networkTime", -1);

         networkTime.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("networkTime", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
