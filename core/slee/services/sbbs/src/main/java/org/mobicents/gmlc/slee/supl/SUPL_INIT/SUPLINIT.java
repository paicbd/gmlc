/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_INIT;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.ULP_Components.PosMethod;
import org.mobicents.gmlc.slee.supl.ULP_Components.SLPAddress;
import org.mobicents.gmlc.slee.supl.ULP_Components.QoP;
import org.mobicents.gmlc.slee.supl.ULP_Version_2_message_extensions.Ver2_SUPL_INIT_extension;

public class SUPLINIT extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_INITRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_INITRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SUPLINIT";
   }

   protected PosMethod posMethod = null;
   protected Notification notification;  // optional
   protected SLPAddress sLPAddress;  // optional
   protected QoP qoP;  // optional
   protected SLPMode sLPMode = null;
   protected MAC mAC;  // optional
   protected KeyIdentity keyIdentity;  // optional
   protected Ver2_SUPL_INIT_extension ver2_SUPL_INIT_extension;  // optional
   protected Asn1OpenExt extElem1;

   public SUPLINIT () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SUPLINIT (
      PosMethod posMethod_,
      Notification notification_,
      SLPAddress sLPAddress_,
      QoP qoP_,
      SLPMode sLPMode_,
      MAC mAC_,
      KeyIdentity keyIdentity_,
      Ver2_SUPL_INIT_extension ver2_SUPL_INIT_extension_
   ) throws Asn1Exception {
      super();
      setPosMethod (posMethod_);
      setNotification (notification_);
      setSLPAddress (sLPAddress_);
      setQoP (qoP_);
      setSLPMode (sLPMode_);
      setMAC (mAC_);
      setKeyIdentity (keyIdentity_);
      setVer2_SUPL_INIT_extension (ver2_SUPL_INIT_extension_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SUPLINIT (
      PosMethod posMethod_,
      SLPMode sLPMode_
   ) throws Asn1Exception {
      super();
      setPosMethod (posMethod_);
      setSLPMode (sLPMode_);
   }

   public void init () {
      posMethod = null;
      notification = null;
      sLPAddress = null;
      qoP = null;
      sLPMode = null;
      mAC = null;
      keyIdentity = null;
      ver2_SUPL_INIT_extension = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof SUPLINIT) ) return false;

      SUPLINIT rhs = (SUPLINIT) obj;

      if (posMethod == null) {
         if (rhs.posMethod != null) return false;
      }
      else {
         if (!posMethod.equals(rhs.posMethod)) {
            return false;
         }
      }

      if (notification == null) {
         if (rhs.notification != null) return false;
      }
      else {
         if (!notification.equals(rhs.notification)) {
            return false;
         }
      }

      if (sLPAddress == null) {
         if (rhs.sLPAddress != null) return false;
      }
      else {
         if (!sLPAddress.equals(rhs.sLPAddress)) {
            return false;
         }
      }

      if (qoP == null) {
         if (rhs.qoP != null) return false;
      }
      else {
         if (!qoP.equals(rhs.qoP)) {
            return false;
         }
      }

      if (sLPMode == null) {
         if (rhs.sLPMode != null) return false;
      }
      else {
         if (!sLPMode.equals(rhs.sLPMode)) {
            return false;
         }
      }

      if (mAC == null) {
         if (rhs.mAC != null) return false;
      }
      else {
         if (!mAC.equals(rhs.mAC)) {
            return false;
         }
      }

      if (keyIdentity == null) {
         if (rhs.keyIdentity != null) return false;
      }
      else {
         if (!keyIdentity.equals(rhs.keyIdentity)) {
            return false;
         }
      }

      if (ver2_SUPL_INIT_extension == null) {
         if (rhs.ver2_SUPL_INIT_extension != null) return false;
      }
      else {
         if (!ver2_SUPL_INIT_extension.equals(rhs.ver2_SUPL_INIT_extension)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (posMethod != null) __code = 31*__code + posMethod.hashCode();
      if (notification != null) __code = 31*__code + notification.hashCode();
      if (sLPAddress != null) __code = 31*__code + sLPAddress.hashCode();
      if (qoP != null) __code = 31*__code + qoP.hashCode();
      if (sLPMode != null) __code = 31*__code + sLPMode.hashCode();
      if (mAC != null) __code = 31*__code + mAC.hashCode();
      if (keyIdentity != null) __code = 31*__code + keyIdentity.hashCode();
      if (ver2_SUPL_INIT_extension != null) __code = 31*__code + ver2_SUPL_INIT_extension.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for PosMethod
    */
   public PosMethod getPosMethod () {
      return posMethod;
   }

   public void setPosMethod (PosMethod value) {
      this.posMethod = value;
   }

   /**
    * Accessor/mutator methods for Notification
    */
   public Notification getNotification () {
      return notification;
   }

   public void setNotification (Notification value) {
      this.notification = value;
   }

   public boolean hasNotification () {
      return (notification != null);
   }

   /**
    * Accessor/mutator methods for SLPAddress
    */
   public SLPAddress getSLPAddress () {
      return sLPAddress;
   }

   public void setSLPAddress (SLPAddress value) {
      this.sLPAddress = value;
   }

   public boolean hasSLPAddress () {
      return (sLPAddress != null);
   }

   /**
    * Accessor/mutator methods for QoP
    */
   public QoP getQoP () {
      return qoP;
   }

   public void setQoP (QoP value) {
      this.qoP = value;
   }

   public boolean hasQoP () {
      return (qoP != null);
   }

   /**
    * Accessor/mutator methods for SLPMode
    */
   public SLPMode getSLPMode () {
      return sLPMode;
   }

   public void setSLPMode (SLPMode value) {
      this.sLPMode = value;
   }

   /**
    * Accessor/mutator methods for MAC
    */
   public MAC getMAC () {
      return mAC;
   }

   public void setMAC (MAC value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 64)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.mAC = value;
   }

   public boolean hasMAC () {
      return (mAC != null);
   }

   /**
    * Accessor/mutator methods for KeyIdentity
    */
   public KeyIdentity getKeyIdentity () {
      return keyIdentity;
   }

   public void setKeyIdentity (KeyIdentity value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 128)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.keyIdentity = value;
   }

   public boolean hasKeyIdentity () {
      return (keyIdentity != null);
   }

   /**
    * Accessor/mutator methods for Ver2_SUPL_INIT_extension
    */
   public Ver2_SUPL_INIT_extension getVer2_SUPL_INIT_extension () {
      return ver2_SUPL_INIT_extension;
   }

   public void setVer2_SUPL_INIT_extension (Ver2_SUPL_INIT_extension value) {
      this.ver2_SUPL_INIT_extension = value;
   }

   public boolean hasVer2_SUPL_INIT_extension () {
      return (ver2_SUPL_INIT_extension != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return posMethod;
         case 1: return notification;
         case 2: return sLPAddress;
         case 3: return qoP;
         case 4: return sLPMode;
         case 5: return mAC;
         case 6: return keyIdentity;
         case 7: return ver2_SUPL_INIT_extension;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "posMethod";
         case 1: return "notification";
         case 2: return "sLPAddress";
         case 3: return "qoP";
         case 4: return "sLPMode";
         case 5: return "mAC";
         case 6: return "keyIdentity";
         case 7: return "ver2-SUPL-INIT-extension";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean notificationPresent = buffer.decodeBit ("notificationPresent");
      boolean sLPAddressPresent = buffer.decodeBit ("sLPAddressPresent");
      boolean qoPPresent = buffer.decodeBit ("qoPPresent");
      boolean mACPresent = buffer.decodeBit ("mACPresent");
      boolean keyIdentityPresent = buffer.decodeBit ("keyIdentityPresent");

      // decode posMethod

      buffer.getContext().eventDispatcher.startElement("posMethod", -1);

      {
         int tval = PosMethod.decodeEnumValue (buffer);
         posMethod = PosMethod.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("posMethod", -1);

      // decode notification

      if (notificationPresent) {
         buffer.getContext().eventDispatcher.startElement("notification", -1);

         notification = new Notification();
         notification.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("notification", -1);
      }
      else {
         notification = null;
      }

      // decode sLPAddress

      if (sLPAddressPresent) {
         buffer.getContext().eventDispatcher.startElement("sLPAddress", -1);

         sLPAddress = new SLPAddress();
         sLPAddress.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sLPAddress", -1);
      }
      else {
         sLPAddress = null;
      }

      // decode qoP

      if (qoPPresent) {
         buffer.getContext().eventDispatcher.startElement("qoP", -1);

         qoP = new QoP();
         qoP.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("qoP", -1);
      }
      else {
         qoP = null;
      }

      // decode sLPMode

      buffer.getContext().eventDispatcher.startElement("sLPMode", -1);

      {
         int tval = SLPMode.decodeEnumValue (buffer);
         sLPMode = SLPMode.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("sLPMode", -1);

      // decode mAC

      if (mACPresent) {
         buffer.getContext().eventDispatcher.startElement("mAC", -1);

         mAC = new MAC();
         mAC.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mAC", -1);
      }
      else {
         mAC = null;
      }

      // decode keyIdentity

      if (keyIdentityPresent) {
         buffer.getContext().eventDispatcher.startElement("keyIdentity", -1);

         keyIdentity = new KeyIdentity();
         keyIdentity.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("keyIdentity", -1);
      }
      else {
         keyIdentity = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("ver2_SUPL_INIT_extensionPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode ver2_SUPL_INIT_extension

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("ver2_SUPL_INIT_extension", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            ver2_SUPL_INIT_extension = new Ver2_SUPL_INIT_extension();
            ver2_SUPL_INIT_extension.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("ver2_SUPL_INIT_extension", -1);

         }
         else {
            ver2_SUPL_INIT_extension = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((ver2_SUPL_INIT_extension != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((notification != null), null);
      buffer.encodeBit ((sLPAddress != null), null);
      buffer.encodeBit ((qoP != null), null);
      buffer.encodeBit ((mAC != null), null);
      buffer.encodeBit ((keyIdentity != null), null);

      // encode posMethod

      if (posMethod != null) {
         buffer.getContext().eventDispatcher.startElement("posMethod", -1);

         posMethod.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("posMethod", -1);
      }
      else throw new Asn1MissingRequiredException ("posMethod");

      // encode notification

      if (notification != null) {
         buffer.getContext().eventDispatcher.startElement("notification", -1);

         notification.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("notification", -1);
      }

      // encode sLPAddress

      if (sLPAddress != null) {
         buffer.getContext().eventDispatcher.startElement("sLPAddress", -1);

         sLPAddress.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sLPAddress", -1);
      }

      // encode qoP

      if (qoP != null) {
         buffer.getContext().eventDispatcher.startElement("qoP", -1);

         qoP.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("qoP", -1);
      }

      // encode sLPMode

      if (sLPMode != null) {
         buffer.getContext().eventDispatcher.startElement("sLPMode", -1);

         sLPMode.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sLPMode", -1);
      }
      else throw new Asn1MissingRequiredException ("sLPMode");

      // encode mAC

      if (mAC != null) {
         buffer.getContext().eventDispatcher.startElement("mAC", -1);

         mAC.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mAC", -1);
      }

      // encode keyIdentity

      if (keyIdentity != null) {
         buffer.getContext().eventDispatcher.startElement("keyIdentity", -1);

         keyIdentity.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("keyIdentity", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((ver2_SUPL_INIT_extension != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // ver2_SUPL_INIT_extension

         if (ver2_SUPL_INIT_extension != null) {
            buffer.reset();
            ver2_SUPL_INIT_extension.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("ver2_SUPL_INIT_extension", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("ver2_SUPL_INIT_extension", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
