/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class CommonIEsRequestLocationInformation extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "CommonIEsRequestLocationInformation";
   }

   protected LocationInformationType locationInformationType = null;
   protected TriggeredReportingCriteria triggeredReporting;  // optional
   protected PeriodicalReportingCriteria periodicalReporting;  // optional
   protected AdditionalInformation additionalInformation = null;  // optional
   protected QoS qos;  // optional
   protected Environment environment = null;  // optional
   protected LocationCoordinateTypes locationCoordinateTypes;  // optional
   protected VelocityTypes velocityTypes;  // optional
   protected MessageSizeLimitNB_r14 messageSizeLimitNB_r14;  // optional
   protected SegmentationInfo_r14 segmentationInfo_r14 = null;  // optional
   protected Asn1OpenExt extElem1;

   public CommonIEsRequestLocationInformation () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CommonIEsRequestLocationInformation (
      LocationInformationType locationInformationType_,
      TriggeredReportingCriteria triggeredReporting_,
      PeriodicalReportingCriteria periodicalReporting_,
      AdditionalInformation additionalInformation_,
      QoS qos_,
      Environment environment_,
      LocationCoordinateTypes locationCoordinateTypes_,
      VelocityTypes velocityTypes_,
      MessageSizeLimitNB_r14 messageSizeLimitNB_r14_,
      SegmentationInfo_r14 segmentationInfo_r14_
   ) {
      super();
      setLocationInformationType (locationInformationType_);
      setTriggeredReporting (triggeredReporting_);
      setPeriodicalReporting (periodicalReporting_);
      setAdditionalInformation (additionalInformation_);
      setQos (qos_);
      setEnvironment (environment_);
      setLocationCoordinateTypes (locationCoordinateTypes_);
      setVelocityTypes (velocityTypes_);
      setMessageSizeLimitNB_r14 (messageSizeLimitNB_r14_);
      setSegmentationInfo_r14 (segmentationInfo_r14_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CommonIEsRequestLocationInformation (
      LocationInformationType locationInformationType_
   ) {
      super();
      setLocationInformationType (locationInformationType_);
   }

   public void init () {
      locationInformationType = null;
      triggeredReporting = null;
      periodicalReporting = null;
      additionalInformation = null;
      qos = null;
      environment = null;
      locationCoordinateTypes = null;
      velocityTypes = null;
      messageSizeLimitNB_r14 = null;
      segmentationInfo_r14 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof CommonIEsRequestLocationInformation) ) return false;

      CommonIEsRequestLocationInformation rhs = (CommonIEsRequestLocationInformation) obj;

      if (locationInformationType == null) {
         if (rhs.locationInformationType != null) return false;
      }
      else {
         if (!locationInformationType.equals(rhs.locationInformationType)) {
            return false;
         }
      }

      if (triggeredReporting == null) {
         if (rhs.triggeredReporting != null) return false;
      }
      else {
         if (!triggeredReporting.equals(rhs.triggeredReporting)) {
            return false;
         }
      }

      if (periodicalReporting == null) {
         if (rhs.periodicalReporting != null) return false;
      }
      else {
         if (!periodicalReporting.equals(rhs.periodicalReporting)) {
            return false;
         }
      }

      if (additionalInformation == null) {
         if (rhs.additionalInformation != null) return false;
      }
      else {
         if (!additionalInformation.equals(rhs.additionalInformation)) {
            return false;
         }
      }

      if (qos == null) {
         if (rhs.qos != null) return false;
      }
      else {
         if (!qos.equals(rhs.qos)) {
            return false;
         }
      }

      if (environment == null) {
         if (rhs.environment != null) return false;
      }
      else {
         if (!environment.equals(rhs.environment)) {
            return false;
         }
      }

      if (locationCoordinateTypes == null) {
         if (rhs.locationCoordinateTypes != null) return false;
      }
      else {
         if (!locationCoordinateTypes.equals(rhs.locationCoordinateTypes)) {
            return false;
         }
      }

      if (velocityTypes == null) {
         if (rhs.velocityTypes != null) return false;
      }
      else {
         if (!velocityTypes.equals(rhs.velocityTypes)) {
            return false;
         }
      }

      if (messageSizeLimitNB_r14 == null) {
         if (rhs.messageSizeLimitNB_r14 != null) return false;
      }
      else {
         if (!messageSizeLimitNB_r14.equals(rhs.messageSizeLimitNB_r14)) {
            return false;
         }
      }

      if (segmentationInfo_r14 == null) {
         if (rhs.segmentationInfo_r14 != null) return false;
      }
      else {
         if (!segmentationInfo_r14.equals(rhs.segmentationInfo_r14)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (locationInformationType != null) __code = 31*__code + locationInformationType.hashCode();
      if (triggeredReporting != null) __code = 31*__code + triggeredReporting.hashCode();
      if (periodicalReporting != null) __code = 31*__code + periodicalReporting.hashCode();
      if (additionalInformation != null) __code = 31*__code + additionalInformation.hashCode();
      if (qos != null) __code = 31*__code + qos.hashCode();
      if (environment != null) __code = 31*__code + environment.hashCode();
      if (locationCoordinateTypes != null) __code = 31*__code + locationCoordinateTypes.hashCode();
      if (velocityTypes != null) __code = 31*__code + velocityTypes.hashCode();
      if (messageSizeLimitNB_r14 != null) __code = 31*__code + messageSizeLimitNB_r14.hashCode();
      if (segmentationInfo_r14 != null) __code = 31*__code + segmentationInfo_r14.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for LocationInformationType
    */
   public LocationInformationType getLocationInformationType () {
      return locationInformationType;
   }

   public void setLocationInformationType (LocationInformationType value) {
      this.locationInformationType = value;
   }

   /**
    * Accessor/mutator methods for TriggeredReporting
    */
   public TriggeredReportingCriteria getTriggeredReporting () {
      return triggeredReporting;
   }

   public void setTriggeredReporting (TriggeredReportingCriteria value) {
      this.triggeredReporting = value;
   }

   public boolean hasTriggeredReporting () {
      return (triggeredReporting != null);
   }

   /**
    * Accessor/mutator methods for PeriodicalReporting
    */
   public PeriodicalReportingCriteria getPeriodicalReporting () {
      return periodicalReporting;
   }

   public void setPeriodicalReporting (PeriodicalReportingCriteria value) {
      this.periodicalReporting = value;
   }

   public boolean hasPeriodicalReporting () {
      return (periodicalReporting != null);
   }

   /**
    * Accessor/mutator methods for AdditionalInformation
    */
   public AdditionalInformation getAdditionalInformation () {
      return additionalInformation;
   }

   public void setAdditionalInformation (AdditionalInformation value) {
      this.additionalInformation = value;
   }

   public boolean hasAdditionalInformation () {
      return (additionalInformation != null);
   }

   /**
    * Accessor/mutator methods for Qos
    */
   public QoS getQos () {
      return qos;
   }

   public void setQos (QoS value) {
      this.qos = value;
   }

   public boolean hasQos () {
      return (qos != null);
   }

   /**
    * Accessor/mutator methods for Environment
    */
   public Environment getEnvironment () {
      return environment;
   }

   public void setEnvironment (Environment value) {
      this.environment = value;
   }

   public boolean hasEnvironment () {
      return (environment != null);
   }

   /**
    * Accessor/mutator methods for LocationCoordinateTypes
    */
   public LocationCoordinateTypes getLocationCoordinateTypes () {
      return locationCoordinateTypes;
   }

   public void setLocationCoordinateTypes (LocationCoordinateTypes value) {
      this.locationCoordinateTypes = value;
   }

   public boolean hasLocationCoordinateTypes () {
      return (locationCoordinateTypes != null);
   }

   /**
    * Accessor/mutator methods for VelocityTypes
    */
   public VelocityTypes getVelocityTypes () {
      return velocityTypes;
   }

   public void setVelocityTypes (VelocityTypes value) {
      this.velocityTypes = value;
   }

   public boolean hasVelocityTypes () {
      return (velocityTypes != null);
   }

   /**
    * Accessor/mutator methods for MessageSizeLimitNB_r14
    */
   public MessageSizeLimitNB_r14 getMessageSizeLimitNB_r14 () {
      return messageSizeLimitNB_r14;
   }

   public void setMessageSizeLimitNB_r14 (MessageSizeLimitNB_r14 value) {
      this.messageSizeLimitNB_r14 = value;
   }

   public boolean hasMessageSizeLimitNB_r14 () {
      return (messageSizeLimitNB_r14 != null);
   }

   /**
    * Accessor/mutator methods for SegmentationInfo_r14
    */
   public SegmentationInfo_r14 getSegmentationInfo_r14 () {
      return segmentationInfo_r14;
   }

   public void setSegmentationInfo_r14 (SegmentationInfo_r14 value) {
      this.segmentationInfo_r14 = value;
   }

   public boolean hasSegmentationInfo_r14 () {
      return (segmentationInfo_r14 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 11; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return locationInformationType;
         case 1: return triggeredReporting;
         case 2: return periodicalReporting;
         case 3: return additionalInformation;
         case 4: return qos;
         case 5: return environment;
         case 6: return locationCoordinateTypes;
         case 7: return velocityTypes;
         case 8: return messageSizeLimitNB_r14;
         case 9: return segmentationInfo_r14;
         case 10: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "locationInformationType";
         case 1: return "triggeredReporting";
         case 2: return "periodicalReporting";
         case 3: return "additionalInformation";
         case 4: return "qos";
         case 5: return "environment";
         case 6: return "locationCoordinateTypes";
         case 7: return "velocityTypes";
         case 8: return "messageSizeLimitNB-r14";
         case 9: return "segmentationInfo-r14";
         case 10: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean triggeredReportingPresent = buffer.decodeBit ("triggeredReportingPresent");
      boolean periodicalReportingPresent = buffer.decodeBit ("periodicalReportingPresent");
      boolean additionalInformationPresent = buffer.decodeBit ("additionalInformationPresent");
      boolean qosPresent = buffer.decodeBit ("qosPresent");
      boolean environmentPresent = buffer.decodeBit ("environmentPresent");
      boolean locationCoordinateTypesPresent = buffer.decodeBit ("locationCoordinateTypesPresent");
      boolean velocityTypesPresent = buffer.decodeBit ("velocityTypesPresent");

      // decode locationInformationType

      buffer.getContext().eventDispatcher.startElement("locationInformationType", -1);

      {
         int tval = LocationInformationType.decodeEnumValue (buffer);
         locationInformationType = LocationInformationType.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("locationInformationType", -1);

      // decode triggeredReporting

      if (triggeredReportingPresent) {
         buffer.getContext().eventDispatcher.startElement("triggeredReporting", -1);

         triggeredReporting = new TriggeredReportingCriteria();
         triggeredReporting.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("triggeredReporting", -1);
      }
      else {
         triggeredReporting = null;
      }

      // decode periodicalReporting

      if (periodicalReportingPresent) {
         buffer.getContext().eventDispatcher.startElement("periodicalReporting", -1);

         periodicalReporting = new PeriodicalReportingCriteria();
         periodicalReporting.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("periodicalReporting", -1);
      }
      else {
         periodicalReporting = null;
      }

      // decode additionalInformation

      if (additionalInformationPresent) {
         buffer.getContext().eventDispatcher.startElement("additionalInformation", -1);

         int tval = AdditionalInformation.decodeEnumValue (buffer);
         additionalInformation = AdditionalInformation.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("additionalInformation", -1);
      }
      else {
         additionalInformation = null;
      }

      // decode qos

      if (qosPresent) {
         buffer.getContext().eventDispatcher.startElement("qos", -1);

         qos = new QoS();
         qos.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("qos", -1);
      }
      else {
         qos = null;
      }

      // decode environment

      if (environmentPresent) {
         buffer.getContext().eventDispatcher.startElement("environment", -1);

         int tval = Environment.decodeEnumValue (buffer);
         environment = Environment.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("environment", -1);
      }
      else {
         environment = null;
      }

      // decode locationCoordinateTypes

      if (locationCoordinateTypesPresent) {
         buffer.getContext().eventDispatcher.startElement("locationCoordinateTypes", -1);

         locationCoordinateTypes = new LocationCoordinateTypes();
         locationCoordinateTypes.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("locationCoordinateTypes", -1);
      }
      else {
         locationCoordinateTypes = null;
      }

      // decode velocityTypes

      if (velocityTypesPresent) {
         buffer.getContext().eventDispatcher.startElement("velocityTypes", -1);

         velocityTypes = new VelocityTypes();
         velocityTypes.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("velocityTypes", -1);
      }
      else {
         velocityTypes = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("messageSizeLimitNB_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("segmentationInfo_r14Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode messageSizeLimitNB_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("messageSizeLimitNB_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            messageSizeLimitNB_r14 = new MessageSizeLimitNB_r14();
            messageSizeLimitNB_r14.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("messageSizeLimitNB_r14", -1);

         }
         else {
            messageSizeLimitNB_r14 = null;
         }

         // decode segmentationInfo_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("segmentationInfo_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = SegmentationInfo_r14.decodeEnumValue (buffer);
               segmentationInfo_r14 = SegmentationInfo_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("segmentationInfo_r14", -1);

         }
         else {
            segmentationInfo_r14 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((messageSizeLimitNB_r14 != null) ||
      (segmentationInfo_r14 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((triggeredReporting != null), null);
      buffer.encodeBit ((periodicalReporting != null), null);
      buffer.encodeBit ((additionalInformation != null), null);
      buffer.encodeBit ((qos != null), null);
      buffer.encodeBit ((environment != null), null);
      buffer.encodeBit ((locationCoordinateTypes != null), null);
      buffer.encodeBit ((velocityTypes != null), null);

      // encode locationInformationType

      if (locationInformationType != null) {
         buffer.getContext().eventDispatcher.startElement("locationInformationType", -1);

         locationInformationType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("locationInformationType", -1);
      }
      else throw new Asn1MissingRequiredException ("locationInformationType");

      // encode triggeredReporting

      if (triggeredReporting != null) {
         buffer.getContext().eventDispatcher.startElement("triggeredReporting", -1);

         triggeredReporting.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("triggeredReporting", -1);
      }

      // encode periodicalReporting

      if (periodicalReporting != null) {
         buffer.getContext().eventDispatcher.startElement("periodicalReporting", -1);

         periodicalReporting.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("periodicalReporting", -1);
      }

      // encode additionalInformation

      if (additionalInformation != null) {
         buffer.getContext().eventDispatcher.startElement("additionalInformation", -1);

         additionalInformation.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("additionalInformation", -1);
      }

      // encode qos

      if (qos != null) {
         buffer.getContext().eventDispatcher.startElement("qos", -1);

         qos.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("qos", -1);
      }

      // encode environment

      if (environment != null) {
         buffer.getContext().eventDispatcher.startElement("environment", -1);

         environment.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("environment", -1);
      }

      // encode locationCoordinateTypes

      if (locationCoordinateTypes != null) {
         buffer.getContext().eventDispatcher.startElement("locationCoordinateTypes", -1);

         locationCoordinateTypes.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("locationCoordinateTypes", -1);
      }

      // encode velocityTypes

      if (velocityTypes != null) {
         buffer.getContext().eventDispatcher.startElement("velocityTypes", -1);

         velocityTypes.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("velocityTypes", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 2;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((messageSizeLimitNB_r14 != null), null);
         buffer.encodeBit ((segmentationInfo_r14 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // messageSizeLimitNB_r14

         if (messageSizeLimitNB_r14 != null) {
            buffer.reset();
            messageSizeLimitNB_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("messageSizeLimitNB_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("messageSizeLimitNB_r14", -1);
         }

         // segmentationInfo_r14

         if (segmentationInfo_r14 != null) {
            buffer.reset();
            segmentationInfo_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("segmentationInfo_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("segmentationInfo_r14", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
