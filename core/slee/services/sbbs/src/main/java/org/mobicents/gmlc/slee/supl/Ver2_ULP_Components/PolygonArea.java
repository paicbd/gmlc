/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class PolygonArea extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "PolygonArea";
   }

   protected PolygonDescription polygonDescription;
   protected Asn1Integer polygonHysteresis;  // optional

   public PolygonArea () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PolygonArea (
      PolygonDescription polygonDescription_,
      Asn1Integer polygonHysteresis_
   ) throws Asn1Exception {
      super();
      setPolygonDescription (polygonDescription_);
      setPolygonHysteresis (polygonHysteresis_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PolygonArea (
      PolygonDescription polygonDescription_
   ) throws Asn1Exception {
      super();
      setPolygonDescription (polygonDescription_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PolygonArea (PolygonDescription polygonDescription_,
      long polygonHysteresis_
   ) throws Asn1Exception {
      super();
      setPolygonDescription (polygonDescription_);
      setPolygonHysteresis (polygonHysteresis_);
   }

   public void init () {
      polygonDescription = null;
      polygonHysteresis = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof PolygonArea) ) return false;

      PolygonArea rhs = (PolygonArea) obj;

      if (polygonDescription == null) {
         if (rhs.polygonDescription != null) return false;
      }
      else {
         if (!polygonDescription.equals(rhs.polygonDescription)) {
            return false;
         }
      }

      if (polygonHysteresis == null) {
         if (rhs.polygonHysteresis != null) return false;
      }
      else {
         if (!polygonHysteresis.equals(rhs.polygonHysteresis)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (polygonDescription != null) __code = 31*__code + polygonDescription.hashCode();
      if (polygonHysteresis != null) __code = 31*__code + polygonHysteresis.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for PolygonDescription
    */
   public PolygonDescription getPolygonDescription () {
      return polygonDescription;
   }

   public void setPolygonDescription (PolygonDescription value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 3 && value.getElements().length <= 15))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.polygonDescription = value;
   }

   /**
    * Accessor/mutator methods for PolygonHysteresis
    */
   public Asn1Integer getPolygonHysteresis () {
      return polygonHysteresis;
   }

   public void setPolygonHysteresis (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 100000))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.polygonHysteresis = value;
   }

   public void setPolygonHysteresis (long value) 
      throws Asn1Exception
   {
      setPolygonHysteresis (new Asn1Integer(value));
   }
   public boolean hasPolygonHysteresis () {
      return (polygonHysteresis != null);
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return polygonDescription;
         case 1: return polygonHysteresis;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "polygonDescription";
         case 1: return "polygonHysteresis";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean polygonHysteresisPresent = buffer.decodeBit ("polygonHysteresisPresent");

      // decode polygonDescription

      buffer.getContext().eventDispatcher.startElement("polygonDescription", -1);

      polygonDescription = new PolygonDescription();
      polygonDescription.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("polygonDescription", -1);

      // decode polygonHysteresis

      if (polygonHysteresisPresent) {
         buffer.getContext().eventDispatcher.startElement("polygonHysteresis", -1);

         polygonHysteresis = new Asn1Integer();
         polygonHysteresis.decode (buffer, 1, 100000);
         buffer.getContext().eventDispatcher.endElement("polygonHysteresis", -1);
      }
      else {
         polygonHysteresis = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((polygonHysteresis != null), null);

      // encode polygonDescription

      if (polygonDescription != null) {
         buffer.getContext().eventDispatcher.startElement("polygonDescription", -1);

         polygonDescription.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("polygonDescription", -1);
      }
      else throw new Asn1MissingRequiredException ("polygonDescription");

      // encode polygonHysteresis

      if (polygonHysteresis != null) {
         buffer.getContext().eventDispatcher.startElement("polygonHysteresis", -1);

         polygonHysteresis.encode (buffer, 1, 100000);

         buffer.getContext().eventDispatcher.endElement("polygonHysteresis", -1);
      }

   }

}
