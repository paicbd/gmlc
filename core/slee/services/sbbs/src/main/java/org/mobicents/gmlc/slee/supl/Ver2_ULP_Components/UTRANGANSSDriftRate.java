/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class UTRANGANSSDriftRate extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "UTRANGANSSDriftRate";
   }

   // Integer constants for switch-case
   public static final int _UTRAN_GANSSDRIFT0 = 0;
   public static final int _UTRAN_GANSSDRIFT1 = 1;
   public static final int _UTRAN_GANSSDRIFT2 = 2;
   public static final int _UTRAN_GANSSDRIFT5 = 3;
   public static final int _UTRAN_GANSSDRIFT10 = 4;
   public static final int _UTRAN_GANSSDRIFT15 = 5;
   public static final int _UTRAN_GANSSDRIFT25 = 6;
   public static final int _UTRAN_GANSSDRIFT50 = 7;
   public static final int _UTRAN_GANSSDRIFT_1 = 8;
   public static final int _UTRAN_GANSSDRIFT_2 = 9;
   public static final int _UTRAN_GANSSDRIFT_5 = 10;
   public static final int _UTRAN_GANSSDRIFT_10 = 11;
   public static final int _UTRAN_GANSSDRIFT_15 = 12;
   public static final int _UTRAN_GANSSDRIFT_25 = 13;
   public static final int _UTRAN_GANSSDRIFT_50 = 14;

   // Singleton instances of UTRANGANSSDriftRate
   protected static final UTRANGANSSDriftRate _utran_GANSSDrift0 = new UTRANGANSSDriftRate(0);
   protected static final UTRANGANSSDriftRate _utran_GANSSDrift1 = new UTRANGANSSDriftRate(1);
   protected static final UTRANGANSSDriftRate _utran_GANSSDrift2 = new UTRANGANSSDriftRate(2);
   protected static final UTRANGANSSDriftRate _utran_GANSSDrift5 = new UTRANGANSSDriftRate(3);
   protected static final UTRANGANSSDriftRate _utran_GANSSDrift10 = new UTRANGANSSDriftRate(4);
   protected static final UTRANGANSSDriftRate _utran_GANSSDrift15 = new UTRANGANSSDriftRate(5);
   protected static final UTRANGANSSDriftRate _utran_GANSSDrift25 = new UTRANGANSSDriftRate(6);
   protected static final UTRANGANSSDriftRate _utran_GANSSDrift50 = new UTRANGANSSDriftRate(7);
   protected static final UTRANGANSSDriftRate _utran_GANSSDrift_1 = new UTRANGANSSDriftRate(8);
   protected static final UTRANGANSSDriftRate _utran_GANSSDrift_2 = new UTRANGANSSDriftRate(9);
   protected static final UTRANGANSSDriftRate _utran_GANSSDrift_5 = new UTRANGANSSDriftRate(10);
   protected static final UTRANGANSSDriftRate _utran_GANSSDrift_10 = new UTRANGANSSDriftRate(11);
   protected static final UTRANGANSSDriftRate _utran_GANSSDrift_15 = new UTRANGANSSDriftRate(12);
   protected static final UTRANGANSSDriftRate _utran_GANSSDrift_25 = new UTRANGANSSDriftRate(13);
   protected static final UTRANGANSSDriftRate _utran_GANSSDrift_50 = new UTRANGANSSDriftRate(14);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    */
   protected UTRANGANSSDriftRate (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for utran_GANSSDrift0.
    */
   public static UTRANGANSSDriftRate utran_GANSSDrift0() {
      return _utran_GANSSDrift0;
   }

   /**
    * Singleton accessor method for utran_GANSSDrift1.
    */
   public static UTRANGANSSDriftRate utran_GANSSDrift1() {
      return _utran_GANSSDrift1;
   }

   /**
    * Singleton accessor method for utran_GANSSDrift2.
    */
   public static UTRANGANSSDriftRate utran_GANSSDrift2() {
      return _utran_GANSSDrift2;
   }

   /**
    * Singleton accessor method for utran_GANSSDrift5.
    */
   public static UTRANGANSSDriftRate utran_GANSSDrift5() {
      return _utran_GANSSDrift5;
   }

   /**
    * Singleton accessor method for utran_GANSSDrift10.
    */
   public static UTRANGANSSDriftRate utran_GANSSDrift10() {
      return _utran_GANSSDrift10;
   }

   /**
    * Singleton accessor method for utran_GANSSDrift15.
    */
   public static UTRANGANSSDriftRate utran_GANSSDrift15() {
      return _utran_GANSSDrift15;
   }

   /**
    * Singleton accessor method for utran_GANSSDrift25.
    */
   public static UTRANGANSSDriftRate utran_GANSSDrift25() {
      return _utran_GANSSDrift25;
   }

   /**
    * Singleton accessor method for utran_GANSSDrift50.
    */
   public static UTRANGANSSDriftRate utran_GANSSDrift50() {
      return _utran_GANSSDrift50;
   }

   /**
    * Singleton accessor method for utran_GANSSDrift_1.
    */
   public static UTRANGANSSDriftRate utran_GANSSDrift_1() {
      return _utran_GANSSDrift_1;
   }

   /**
    * Singleton accessor method for utran_GANSSDrift_2.
    */
   public static UTRANGANSSDriftRate utran_GANSSDrift_2() {
      return _utran_GANSSDrift_2;
   }

   /**
    * Singleton accessor method for utran_GANSSDrift_5.
    */
   public static UTRANGANSSDriftRate utran_GANSSDrift_5() {
      return _utran_GANSSDrift_5;
   }

   /**
    * Singleton accessor method for utran_GANSSDrift_10.
    */
   public static UTRANGANSSDriftRate utran_GANSSDrift_10() {
      return _utran_GANSSDrift_10;
   }

   /**
    * Singleton accessor method for utran_GANSSDrift_15.
    */
   public static UTRANGANSSDriftRate utran_GANSSDrift_15() {
      return _utran_GANSSDrift_15;
   }

   /**
    * Singleton accessor method for utran_GANSSDrift_25.
    */
   public static UTRANGANSSDriftRate utran_GANSSDrift_25() {
      return _utran_GANSSDrift_25;
   }

   /**
    * Singleton accessor method for utran_GANSSDrift_50.
    */
   public static UTRANGANSSDriftRate utran_GANSSDrift_50() {
      return _utran_GANSSDrift_50;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return UTRANGANSSDriftRate.valueOf( UTRANGANSSDriftRate.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static UTRANGANSSDriftRate valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return utran_GANSSDrift0();
         case 1: return utran_GANSSDrift1();
         case 2: return utran_GANSSDrift2();
         case 3: return utran_GANSSDrift5();
         case 4: return utran_GANSSDrift10();
         case 5: return utran_GANSSDrift15();
         case 6: return utran_GANSSDrift25();
         case 7: return utran_GANSSDrift50();
         case 8: return utran_GANSSDrift_1();
         case 9: return utran_GANSSDrift_2();
         case 10: return utran_GANSSDrift_5();
         case 11: return utran_GANSSDrift_10();
         case 12: return utran_GANSSDrift_15();
         case 13: return utran_GANSSDrift_25();
         case 14: return utran_GANSSDrift_50();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (15);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         case 13: ret =  13; break;
         case 14: ret =  14; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      switch ((int)value) {
         case 0: ui = 0; /* utran_GANSSDrift0 */break;
         case 1: ui = 1; /* utran_GANSSDrift1 */break;
         case 2: ui = 2; /* utran_GANSSDrift2 */break;
         case 3: ui = 3; /* utran_GANSSDrift5 */break;
         case 4: ui = 4; /* utran_GANSSDrift10 */break;
         case 5: ui = 5; /* utran_GANSSDrift15 */break;
         case 6: ui = 6; /* utran_GANSSDrift25 */break;
         case 7: ui = 7; /* utran_GANSSDrift50 */break;
         case 8: ui = 8; /* utran_GANSSDrift_1 */break;
         case 9: ui = 9; /* utran_GANSSDrift_2 */break;
         case 10: ui = 10; /* utran_GANSSDrift_5 */break;
         case 11: ui = 11; /* utran_GANSSDrift_10 */break;
         case 12: ui = 12; /* utran_GANSSDrift_15 */break;
         case 13: ui = 13; /* utran_GANSSDrift_25 */break;
         case 14: ui = 14; /* utran_GANSSDrift_50 */break;
         default:
            throw new Asn1InvalidEnumException (value);
      }

      buffer.encodeConsWholeNumber (ui, 15);
   }

}
