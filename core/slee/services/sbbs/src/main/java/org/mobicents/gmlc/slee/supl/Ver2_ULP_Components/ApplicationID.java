/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class ApplicationID extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ApplicationID";
   }

   protected Asn1IA5String appProvider;
   protected Asn1IA5String appName;
   protected Asn1IA5String appVersion;  // optional
   protected Asn1OpenExt extElem1;

   public ApplicationID () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ApplicationID (
      Asn1IA5String appProvider_,
      Asn1IA5String appName_,
      Asn1IA5String appVersion_
   ) throws Asn1Exception {
      super();
      setAppProvider (appProvider_);
      setAppName (appName_);
      setAppVersion (appVersion_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ApplicationID (
      Asn1IA5String appProvider_,
      Asn1IA5String appName_
   ) throws Asn1Exception {
      super();
      setAppProvider (appProvider_);
      setAppName (appName_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ApplicationID (String appProvider_,
      String appName_,
      String appVersion_
   ) throws Asn1Exception {
      super();
      setAppProvider (appProvider_);
      setAppName (appName_);
      setAppVersion (appVersion_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ApplicationID (
      String appProvider_,
      String appName_
   ) throws Asn1Exception {
      super();
      setAppProvider (appProvider_);
      setAppName (appName_);
   }

   public void init () {
      appProvider = null;
      appName = null;
      appVersion = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof ApplicationID) ) return false;

      ApplicationID rhs = (ApplicationID) obj;

      if (appProvider == null) {
         if (rhs.appProvider != null) return false;
      }
      else {
         if (!appProvider.equals(rhs.appProvider)) {
            return false;
         }
      }

      if (appName == null) {
         if (rhs.appName != null) return false;
      }
      else {
         if (!appName.equals(rhs.appName)) {
            return false;
         }
      }

      if (appVersion == null) {
         if (rhs.appVersion != null) return false;
      }
      else {
         if (!appVersion.equals(rhs.appVersion)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (appProvider != null) __code = 31*__code + appProvider.hashCode();
      if (appName != null) __code = 31*__code + appName.hashCode();
      if (appVersion != null) __code = 31*__code + appVersion.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for AppProvider
    */
   public Asn1IA5String getAppProvider () {
      return appProvider;
   }

   public void setAppProvider (Asn1IA5String value) 
      throws Asn1Exception
   {
      if (!((value.getLength() >= 1 && value.getLength() <= 24))) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.appProvider = value;
   }

   public void setAppProvider (String value) 
      throws Asn1Exception
   {
      setAppProvider (new Asn1IA5String(value));
   }

   /**
    * Accessor/mutator methods for AppName
    */
   public Asn1IA5String getAppName () {
      return appName;
   }

   public void setAppName (Asn1IA5String value) 
      throws Asn1Exception
   {
      if (!((value.getLength() >= 1 && value.getLength() <= 32))) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.appName = value;
   }

   public void setAppName (String value) 
      throws Asn1Exception
   {
      setAppName (new Asn1IA5String(value));
   }

   /**
    * Accessor/mutator methods for AppVersion
    */
   public Asn1IA5String getAppVersion () {
      return appVersion;
   }

   public void setAppVersion (Asn1IA5String value) 
      throws Asn1Exception
   {
      if (!((value.getLength() >= 1 && value.getLength() <= 8))) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.appVersion = value;
   }

   public void setAppVersion (String value) 
      throws Asn1Exception
   {
      setAppVersion (new Asn1IA5String(value));
   }
   public boolean hasAppVersion () {
      return (appVersion != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return appProvider;
         case 1: return appName;
         case 2: return appVersion;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "appProvider";
         case 1: return "appName";
         case 2: return "appVersion";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean appVersionPresent = buffer.decodeBit ("appVersionPresent");

      // decode appProvider

      buffer.getContext().eventDispatcher.startElement("appProvider", -1);

      appProvider = new Asn1IA5String();
      appProvider.decode (buffer, (Asn1CharSet)null, 1, 24);
      buffer.getContext().eventDispatcher.endElement("appProvider", -1);

      // decode appName

      buffer.getContext().eventDispatcher.startElement("appName", -1);

      appName = new Asn1IA5String();
      appName.decode (buffer, (Asn1CharSet)null, 1, 32);
      buffer.getContext().eventDispatcher.endElement("appName", -1);

      // decode appVersion

      if (appVersionPresent) {
         buffer.getContext().eventDispatcher.startElement("appVersion", -1);

         appVersion = new Asn1IA5String();
         appVersion.decode (buffer, (Asn1CharSet)null, 1, 8);
         buffer.getContext().eventDispatcher.endElement("appVersion", -1);
      }
      else {
         appVersion = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((appVersion != null), null);

      // encode appProvider

      if (appProvider != null) {
         buffer.getContext().eventDispatcher.startElement("appProvider", -1);

         appProvider.encode (buffer, (Asn1CharSet)null, 1, 24);

         buffer.getContext().eventDispatcher.endElement("appProvider", -1);
      }
      else throw new Asn1MissingRequiredException ("appProvider");

      // encode appName

      if (appName != null) {
         buffer.getContext().eventDispatcher.startElement("appName", -1);

         appName.encode (buffer, (Asn1CharSet)null, 1, 32);

         buffer.getContext().eventDispatcher.endElement("appName", -1);
      }
      else throw new Asn1MissingRequiredException ("appName");

      // encode appVersion

      if (appVersion != null) {
         buffer.getContext().eventDispatcher.startElement("appVersion", -1);

         appVersion.encode (buffer, (Asn1CharSet)null, 1, 8);

         buffer.getContext().eventDispatcher.endElement("appVersion", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
