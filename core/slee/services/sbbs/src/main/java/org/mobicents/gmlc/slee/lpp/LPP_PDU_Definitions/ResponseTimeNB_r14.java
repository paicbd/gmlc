/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class ResponseTimeNB_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ResponseTimeNB-r14";
   }

   protected Asn1Integer timeNB_r14;
   protected Asn1Integer responseTimeEarlyFixNB_r14;  // optional
   protected ResponseTimeNB_r14_unitNB_r15 unitNB_r15 = null;  // optional
   protected Asn1OpenExt extElem1;

   public ResponseTimeNB_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ResponseTimeNB_r14 (
      Asn1Integer timeNB_r14_,
      Asn1Integer responseTimeEarlyFixNB_r14_,
      ResponseTimeNB_r14_unitNB_r15 unitNB_r15_
   ) throws Asn1Exception {
      super();
      setTimeNB_r14 (timeNB_r14_);
      setResponseTimeEarlyFixNB_r14 (responseTimeEarlyFixNB_r14_);
      setUnitNB_r15 (unitNB_r15_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ResponseTimeNB_r14 (
      Asn1Integer timeNB_r14_
   ) throws Asn1Exception {
      super();
      setTimeNB_r14 (timeNB_r14_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ResponseTimeNB_r14 (long timeNB_r14_,
      long responseTimeEarlyFixNB_r14_,
      ResponseTimeNB_r14_unitNB_r15 unitNB_r15_
   ) throws Asn1Exception {
      super();
      setTimeNB_r14 (timeNB_r14_);
      setResponseTimeEarlyFixNB_r14 (responseTimeEarlyFixNB_r14_);
      setUnitNB_r15 (unitNB_r15_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ResponseTimeNB_r14 (
      long timeNB_r14_
   ) throws Asn1Exception {
      super();
      setTimeNB_r14 (timeNB_r14_);
   }

   public void init () {
      timeNB_r14 = null;
      responseTimeEarlyFixNB_r14 = null;
      unitNB_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof ResponseTimeNB_r14) ) return false;

      ResponseTimeNB_r14 rhs = (ResponseTimeNB_r14) obj;

      if (timeNB_r14 == null) {
         if (rhs.timeNB_r14 != null) return false;
      }
      else {
         if (!timeNB_r14.equals(rhs.timeNB_r14)) {
            return false;
         }
      }

      if (responseTimeEarlyFixNB_r14 == null) {
         if (rhs.responseTimeEarlyFixNB_r14 != null) return false;
      }
      else {
         if (!responseTimeEarlyFixNB_r14.equals(rhs.responseTimeEarlyFixNB_r14)) {
            return false;
         }
      }

      if (unitNB_r15 == null) {
         if (rhs.unitNB_r15 != null) return false;
      }
      else {
         if (!unitNB_r15.equals(rhs.unitNB_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (timeNB_r14 != null) __code = 31*__code + timeNB_r14.hashCode();
      if (responseTimeEarlyFixNB_r14 != null) __code = 31*__code + responseTimeEarlyFixNB_r14.hashCode();
      if (unitNB_r15 != null) __code = 31*__code + unitNB_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for TimeNB_r14
    */
   public Asn1Integer getTimeNB_r14 () {
      return timeNB_r14;
   }

   public void setTimeNB_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 512))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.timeNB_r14 = value;
   }

   public void setTimeNB_r14 (long value) 
      throws Asn1Exception
   {
      setTimeNB_r14 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ResponseTimeEarlyFixNB_r14
    */
   public Asn1Integer getResponseTimeEarlyFixNB_r14 () {
      return responseTimeEarlyFixNB_r14;
   }

   public void setResponseTimeEarlyFixNB_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 512))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.responseTimeEarlyFixNB_r14 = value;
   }

   public void setResponseTimeEarlyFixNB_r14 (long value) 
      throws Asn1Exception
   {
      setResponseTimeEarlyFixNB_r14 (new Asn1Integer(value));
   }
   public boolean hasResponseTimeEarlyFixNB_r14 () {
      return (responseTimeEarlyFixNB_r14 != null);
   }

   /**
    * Accessor/mutator methods for UnitNB_r15
    */
   public ResponseTimeNB_r14_unitNB_r15 getUnitNB_r15 () {
      return unitNB_r15;
   }

   public void setUnitNB_r15 (ResponseTimeNB_r14_unitNB_r15 value) {
      this.unitNB_r15 = value;
   }

   public boolean hasUnitNB_r15 () {
      return (unitNB_r15 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return timeNB_r14;
         case 1: return responseTimeEarlyFixNB_r14;
         case 2: return unitNB_r15;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "timeNB-r14";
         case 1: return "responseTimeEarlyFixNB-r14";
         case 2: return "unitNB-r15";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean responseTimeEarlyFixNB_r14Present = buffer.decodeBit ("responseTimeEarlyFixNB_r14Present");

      // decode timeNB_r14

      buffer.getContext().eventDispatcher.startElement("timeNB_r14", -1);

      timeNB_r14 = new Asn1Integer();
      timeNB_r14.decode (buffer, 1, 512);
      buffer.getContext().eventDispatcher.endElement("timeNB_r14", -1);

      // decode responseTimeEarlyFixNB_r14

      if (responseTimeEarlyFixNB_r14Present) {
         buffer.getContext().eventDispatcher.startElement("responseTimeEarlyFixNB_r14", -1);

         responseTimeEarlyFixNB_r14 = new Asn1Integer();
         responseTimeEarlyFixNB_r14.decode (buffer, 1, 512);
         buffer.getContext().eventDispatcher.endElement("responseTimeEarlyFixNB_r14", -1);
      }
      else {
         responseTimeEarlyFixNB_r14 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("unitNB_r15Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unitNB_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("unitNB_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = ResponseTimeNB_r14_unitNB_r15.decodeEnumValue (buffer);
               unitNB_r15 = ResponseTimeNB_r14_unitNB_r15.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("unitNB_r15", -1);

         }
         else {
            unitNB_r15 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((unitNB_r15 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((responseTimeEarlyFixNB_r14 != null), null);

      // encode timeNB_r14

      if (timeNB_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("timeNB_r14", -1);

         timeNB_r14.encode (buffer, 1, 512);

         buffer.getContext().eventDispatcher.endElement("timeNB_r14", -1);
      }
      else throw new Asn1MissingRequiredException ("timeNB_r14");

      // encode responseTimeEarlyFixNB_r14

      if (responseTimeEarlyFixNB_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("responseTimeEarlyFixNB_r14", -1);

         responseTimeEarlyFixNB_r14.encode (buffer, 1, 512);

         buffer.getContext().eventDispatcher.endElement("responseTimeEarlyFixNB_r14", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((unitNB_r15 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // unitNB_r15

         if (unitNB_r15 != null) {
            buffer.reset();
            unitNB_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("unitNB_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("unitNB_r15", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
