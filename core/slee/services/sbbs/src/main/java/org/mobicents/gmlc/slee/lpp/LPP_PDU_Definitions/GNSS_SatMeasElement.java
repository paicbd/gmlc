/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_SatMeasElement extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-SatMeasElement";
   }

   protected SV_ID svID;
   protected Asn1Integer cNo;
   protected GNSS_SatMeasElement_mpathDet mpathDet = null;
   protected Asn1Integer carrierQualityInd;  // optional
   protected Asn1Integer codePhase;
   protected Asn1Integer integerCodePhase;  // optional
   protected Asn1Integer codePhaseRMSError;
   protected Asn1Integer doppler;  // optional
   protected Asn1Integer adr;  // optional
   protected Asn1Integer adrMSB_r15;  // optional
   protected GNSS_SatMeasElement_adrSign_r15 adrSign_r15 = null;  // optional
   protected Asn1Integer adrRMSerror_r15;  // optional
   protected Asn1Integer delta_codePhase_r15;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_SatMeasElement () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_SatMeasElement (
      SV_ID svID_,
      Asn1Integer cNo_,
      GNSS_SatMeasElement_mpathDet mpathDet_,
      Asn1Integer carrierQualityInd_,
      Asn1Integer codePhase_,
      Asn1Integer integerCodePhase_,
      Asn1Integer codePhaseRMSError_,
      Asn1Integer doppler_,
      Asn1Integer adr_,
      Asn1Integer adrMSB_r15_,
      GNSS_SatMeasElement_adrSign_r15 adrSign_r15_,
      Asn1Integer adrRMSerror_r15_,
      Asn1Integer delta_codePhase_r15_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setCNo (cNo_);
      setMpathDet (mpathDet_);
      setCarrierQualityInd (carrierQualityInd_);
      setCodePhase (codePhase_);
      setIntegerCodePhase (integerCodePhase_);
      setCodePhaseRMSError (codePhaseRMSError_);
      setDoppler (doppler_);
      setAdr (adr_);
      setAdrMSB_r15 (adrMSB_r15_);
      setAdrSign_r15 (adrSign_r15_);
      setAdrRMSerror_r15 (adrRMSerror_r15_);
      setDelta_codePhase_r15 (delta_codePhase_r15_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GNSS_SatMeasElement (
      SV_ID svID_,
      Asn1Integer cNo_,
      GNSS_SatMeasElement_mpathDet mpathDet_,
      Asn1Integer codePhase_,
      Asn1Integer codePhaseRMSError_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setCNo (cNo_);
      setMpathDet (mpathDet_);
      setCodePhase (codePhase_);
      setCodePhaseRMSError (codePhaseRMSError_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GNSS_SatMeasElement (SV_ID svID_,
      long cNo_,
      GNSS_SatMeasElement_mpathDet mpathDet_,
      long carrierQualityInd_,
      long codePhase_,
      long integerCodePhase_,
      long codePhaseRMSError_,
      long doppler_,
      long adr_,
      long adrMSB_r15_,
      GNSS_SatMeasElement_adrSign_r15 adrSign_r15_,
      long adrRMSerror_r15_,
      long delta_codePhase_r15_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setCNo (cNo_);
      setMpathDet (mpathDet_);
      setCarrierQualityInd (carrierQualityInd_);
      setCodePhase (codePhase_);
      setIntegerCodePhase (integerCodePhase_);
      setCodePhaseRMSError (codePhaseRMSError_);
      setDoppler (doppler_);
      setAdr (adr_);
      setAdrMSB_r15 (adrMSB_r15_);
      setAdrSign_r15 (adrSign_r15_);
      setAdrRMSerror_r15 (adrRMSerror_r15_);
      setDelta_codePhase_r15 (delta_codePhase_r15_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public GNSS_SatMeasElement (
      SV_ID svID_,
      long cNo_,
      GNSS_SatMeasElement_mpathDet mpathDet_,
      long codePhase_,
      long codePhaseRMSError_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setCNo (cNo_);
      setMpathDet (mpathDet_);
      setCodePhase (codePhase_);
      setCodePhaseRMSError (codePhaseRMSError_);
   }

   public void init () {
      svID = null;
      cNo = null;
      mpathDet = null;
      carrierQualityInd = null;
      codePhase = null;
      integerCodePhase = null;
      codePhaseRMSError = null;
      doppler = null;
      adr = null;
      adrMSB_r15 = null;
      adrSign_r15 = null;
      adrRMSerror_r15 = null;
      delta_codePhase_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_SatMeasElement) ) return false;

      GNSS_SatMeasElement rhs = (GNSS_SatMeasElement) obj;

      if (svID == null) {
         if (rhs.svID != null) return false;
      }
      else {
         if (!svID.equals(rhs.svID)) {
            return false;
         }
      }

      if (cNo == null) {
         if (rhs.cNo != null) return false;
      }
      else {
         if (!cNo.equals(rhs.cNo)) {
            return false;
         }
      }

      if (mpathDet == null) {
         if (rhs.mpathDet != null) return false;
      }
      else {
         if (!mpathDet.equals(rhs.mpathDet)) {
            return false;
         }
      }

      if (carrierQualityInd == null) {
         if (rhs.carrierQualityInd != null) return false;
      }
      else {
         if (!carrierQualityInd.equals(rhs.carrierQualityInd)) {
            return false;
         }
      }

      if (codePhase == null) {
         if (rhs.codePhase != null) return false;
      }
      else {
         if (!codePhase.equals(rhs.codePhase)) {
            return false;
         }
      }

      if (integerCodePhase == null) {
         if (rhs.integerCodePhase != null) return false;
      }
      else {
         if (!integerCodePhase.equals(rhs.integerCodePhase)) {
            return false;
         }
      }

      if (codePhaseRMSError == null) {
         if (rhs.codePhaseRMSError != null) return false;
      }
      else {
         if (!codePhaseRMSError.equals(rhs.codePhaseRMSError)) {
            return false;
         }
      }

      if (doppler == null) {
         if (rhs.doppler != null) return false;
      }
      else {
         if (!doppler.equals(rhs.doppler)) {
            return false;
         }
      }

      if (adr == null) {
         if (rhs.adr != null) return false;
      }
      else {
         if (!adr.equals(rhs.adr)) {
            return false;
         }
      }

      if (adrMSB_r15 == null) {
         if (rhs.adrMSB_r15 != null) return false;
      }
      else {
         if (!adrMSB_r15.equals(rhs.adrMSB_r15)) {
            return false;
         }
      }

      if (adrSign_r15 == null) {
         if (rhs.adrSign_r15 != null) return false;
      }
      else {
         if (!adrSign_r15.equals(rhs.adrSign_r15)) {
            return false;
         }
      }

      if (adrRMSerror_r15 == null) {
         if (rhs.adrRMSerror_r15 != null) return false;
      }
      else {
         if (!adrRMSerror_r15.equals(rhs.adrRMSerror_r15)) {
            return false;
         }
      }

      if (delta_codePhase_r15 == null) {
         if (rhs.delta_codePhase_r15 != null) return false;
      }
      else {
         if (!delta_codePhase_r15.equals(rhs.delta_codePhase_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (svID != null) __code = 31*__code + svID.hashCode();
      if (cNo != null) __code = 31*__code + cNo.hashCode();
      if (mpathDet != null) __code = 31*__code + mpathDet.hashCode();
      if (carrierQualityInd != null) __code = 31*__code + carrierQualityInd.hashCode();
      if (codePhase != null) __code = 31*__code + codePhase.hashCode();
      if (integerCodePhase != null) __code = 31*__code + integerCodePhase.hashCode();
      if (codePhaseRMSError != null) __code = 31*__code + codePhaseRMSError.hashCode();
      if (doppler != null) __code = 31*__code + doppler.hashCode();
      if (adr != null) __code = 31*__code + adr.hashCode();
      if (adrMSB_r15 != null) __code = 31*__code + adrMSB_r15.hashCode();
      if (adrSign_r15 != null) __code = 31*__code + adrSign_r15.hashCode();
      if (adrRMSerror_r15 != null) __code = 31*__code + adrRMSerror_r15.hashCode();
      if (delta_codePhase_r15 != null) __code = 31*__code + delta_codePhase_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SvID
    */
   public SV_ID getSvID () {
      return svID;
   }

   public void setSvID (SV_ID value) {
      this.svID = value;
   }

   /**
    * Accessor/mutator methods for CNo
    */
   public Asn1Integer getCNo () {
      return cNo;
   }

   public void setCNo (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 63))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cNo = value;
   }

   public void setCNo (long value) 
      throws Asn1Exception
   {
      setCNo (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for MpathDet
    */
   public GNSS_SatMeasElement_mpathDet getMpathDet () {
      return mpathDet;
   }

   public void setMpathDet (GNSS_SatMeasElement_mpathDet value) {
      this.mpathDet = value;
   }

   /**
    * Accessor/mutator methods for CarrierQualityInd
    */
   public Asn1Integer getCarrierQualityInd () {
      return carrierQualityInd;
   }

   public void setCarrierQualityInd (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 3))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.carrierQualityInd = value;
   }

   public void setCarrierQualityInd (long value) 
      throws Asn1Exception
   {
      setCarrierQualityInd (new Asn1Integer(value));
   }
   public boolean hasCarrierQualityInd () {
      return (carrierQualityInd != null);
   }

   /**
    * Accessor/mutator methods for CodePhase
    */
   public Asn1Integer getCodePhase () {
      return codePhase;
   }

   public void setCodePhase (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 2097151))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.codePhase = value;
   }

   public void setCodePhase (long value) 
      throws Asn1Exception
   {
      setCodePhase (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for IntegerCodePhase
    */
   public Asn1Integer getIntegerCodePhase () {
      return integerCodePhase;
   }

   public void setIntegerCodePhase (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.integerCodePhase = value;
   }

   public void setIntegerCodePhase (long value) 
      throws Asn1Exception
   {
      setIntegerCodePhase (new Asn1Integer(value));
   }
   public boolean hasIntegerCodePhase () {
      return (integerCodePhase != null);
   }

   /**
    * Accessor/mutator methods for CodePhaseRMSError
    */
   public Asn1Integer getCodePhaseRMSError () {
      return codePhaseRMSError;
   }

   public void setCodePhaseRMSError (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 63))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.codePhaseRMSError = value;
   }

   public void setCodePhaseRMSError (long value) 
      throws Asn1Exception
   {
      setCodePhaseRMSError (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Doppler
    */
   public Asn1Integer getDoppler () {
      return doppler;
   }

   public void setDoppler (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.doppler = value;
   }

   public void setDoppler (long value) 
      throws Asn1Exception
   {
      setDoppler (new Asn1Integer(value));
   }
   public boolean hasDoppler () {
      return (doppler != null);
   }

   /**
    * Accessor/mutator methods for Adr
    */
   public Asn1Integer getAdr () {
      return adr;
   }

   public void setAdr (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 33554431))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.adr = value;
   }

   public void setAdr (long value) 
      throws Asn1Exception
   {
      setAdr (new Asn1Integer(value));
   }
   public boolean hasAdr () {
      return (adr != null);
   }

   /**
    * Accessor/mutator methods for AdrMSB_r15
    */
   public Asn1Integer getAdrMSB_r15 () {
      return adrMSB_r15;
   }

   public void setAdrMSB_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.adrMSB_r15 = value;
   }

   public void setAdrMSB_r15 (long value) 
      throws Asn1Exception
   {
      setAdrMSB_r15 (new Asn1Integer(value));
   }
   public boolean hasAdrMSB_r15 () {
      return (adrMSB_r15 != null);
   }

   /**
    * Accessor/mutator methods for AdrSign_r15
    */
   public GNSS_SatMeasElement_adrSign_r15 getAdrSign_r15 () {
      return adrSign_r15;
   }

   public void setAdrSign_r15 (GNSS_SatMeasElement_adrSign_r15 value) {
      this.adrSign_r15 = value;
   }

   public boolean hasAdrSign_r15 () {
      return (adrSign_r15 != null);
   }

   /**
    * Accessor/mutator methods for AdrRMSerror_r15
    */
   public Asn1Integer getAdrRMSerror_r15 () {
      return adrRMSerror_r15;
   }

   public void setAdrRMSerror_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.adrRMSerror_r15 = value;
   }

   public void setAdrRMSerror_r15 (long value) 
      throws Asn1Exception
   {
      setAdrRMSerror_r15 (new Asn1Integer(value));
   }
   public boolean hasAdrRMSerror_r15 () {
      return (adrRMSerror_r15 != null);
   }

   /**
    * Accessor/mutator methods for Delta_codePhase_r15
    */
   public Asn1Integer getDelta_codePhase_r15 () {
      return delta_codePhase_r15;
   }

   public void setDelta_codePhase_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 7))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.delta_codePhase_r15 = value;
   }

   public void setDelta_codePhase_r15 (long value) 
      throws Asn1Exception
   {
      setDelta_codePhase_r15 (new Asn1Integer(value));
   }
   public boolean hasDelta_codePhase_r15 () {
      return (delta_codePhase_r15 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return svID;
         case 1: return cNo;
         case 2: return mpathDet;
         case 3: return carrierQualityInd;
         case 4: return codePhase;
         case 5: return integerCodePhase;
         case 6: return codePhaseRMSError;
         case 7: return doppler;
         case 8: return adr;
         case 9: return adrMSB_r15;
         case 10: return adrSign_r15;
         case 11: return adrRMSerror_r15;
         case 12: return delta_codePhase_r15;
         case 13: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "svID";
         case 1: return "cNo";
         case 2: return "mpathDet";
         case 3: return "carrierQualityInd";
         case 4: return "codePhase";
         case 5: return "integerCodePhase";
         case 6: return "codePhaseRMSError";
         case 7: return "doppler";
         case 8: return "adr";
         case 9: return "adrMSB-r15";
         case 10: return "adrSign-r15";
         case 11: return "adrRMSerror-r15";
         case 12: return "delta-codePhase-r15";
         case 13: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean carrierQualityIndPresent = buffer.decodeBit ("carrierQualityIndPresent");
      boolean integerCodePhasePresent = buffer.decodeBit ("integerCodePhasePresent");
      boolean dopplerPresent = buffer.decodeBit ("dopplerPresent");
      boolean adrPresent = buffer.decodeBit ("adrPresent");

      // decode svID

      buffer.getContext().eventDispatcher.startElement("svID", -1);

      svID = new SV_ID();
      svID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("svID", -1);

      // decode cNo

      buffer.getContext().eventDispatcher.startElement("cNo", -1);

      cNo = new Asn1Integer();
      cNo.decode (buffer, 0, 63);
      buffer.getContext().eventDispatcher.endElement("cNo", -1);

      // decode mpathDet

      buffer.getContext().eventDispatcher.startElement("mpathDet", -1);

      {
         int tval = GNSS_SatMeasElement_mpathDet.decodeEnumValue (buffer);
         mpathDet = GNSS_SatMeasElement_mpathDet.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("mpathDet", -1);

      // decode carrierQualityInd

      if (carrierQualityIndPresent) {
         buffer.getContext().eventDispatcher.startElement("carrierQualityInd", -1);

         carrierQualityInd = new Asn1Integer();
         carrierQualityInd.decode (buffer, 0, 3);
         buffer.getContext().eventDispatcher.endElement("carrierQualityInd", -1);
      }
      else {
         carrierQualityInd = null;
      }

      // decode codePhase

      buffer.getContext().eventDispatcher.startElement("codePhase", -1);

      codePhase = new Asn1Integer();
      codePhase.decode (buffer, 0, 2097151);
      buffer.getContext().eventDispatcher.endElement("codePhase", -1);

      // decode integerCodePhase

      if (integerCodePhasePresent) {
         buffer.getContext().eventDispatcher.startElement("integerCodePhase", -1);

         integerCodePhase = new Asn1Integer();
         integerCodePhase.decode (buffer, 0, 127);
         buffer.getContext().eventDispatcher.endElement("integerCodePhase", -1);
      }
      else {
         integerCodePhase = null;
      }

      // decode codePhaseRMSError

      buffer.getContext().eventDispatcher.startElement("codePhaseRMSError", -1);

      codePhaseRMSError = new Asn1Integer();
      codePhaseRMSError.decode (buffer, 0, 63);
      buffer.getContext().eventDispatcher.endElement("codePhaseRMSError", -1);

      // decode doppler

      if (dopplerPresent) {
         buffer.getContext().eventDispatcher.startElement("doppler", -1);

         doppler = new Asn1Integer();
         doppler.decode (buffer, -32768, 32767);
         buffer.getContext().eventDispatcher.endElement("doppler", -1);
      }
      else {
         doppler = null;
      }

      // decode adr

      if (adrPresent) {
         buffer.getContext().eventDispatcher.startElement("adr", -1);

         adr = new Asn1Integer();
         adr.decode (buffer, 0, 33554431);
         buffer.getContext().eventDispatcher.endElement("adr", -1);
      }
      else {
         adr = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("adrMSB_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("adrSign_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("adrRMSerror_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("delta_codePhase_r15Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode adrMSB_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("adrMSB_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            adrMSB_r15 = new Asn1Integer();
            adrMSB_r15.decode (buffer, 0, 15);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("adrMSB_r15", -1);

         }
         else {
            adrMSB_r15 = null;
         }

         // decode adrSign_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("adrSign_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = GNSS_SatMeasElement_adrSign_r15.decodeEnumValue (buffer);
               adrSign_r15 = GNSS_SatMeasElement_adrSign_r15.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("adrSign_r15", -1);

         }
         else {
            adrSign_r15 = null;
         }

         // decode adrRMSerror_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("adrRMSerror_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            adrRMSerror_r15 = new Asn1Integer();
            adrRMSerror_r15.decode (buffer, 0, 127);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("adrRMSerror_r15", -1);

         }
         else {
            adrRMSerror_r15 = null;
         }

         // decode delta_codePhase_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("delta_codePhase_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            delta_codePhase_r15 = new Asn1Integer();
            delta_codePhase_r15.decode (buffer, 0, 7);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("delta_codePhase_r15", -1);

         }
         else {
            delta_codePhase_r15 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((adrMSB_r15 != null) ||
      (adrSign_r15 != null) ||
      (adrRMSerror_r15 != null) ||
      (delta_codePhase_r15 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((carrierQualityInd != null), null);
      buffer.encodeBit ((integerCodePhase != null), null);
      buffer.encodeBit ((doppler != null), null);
      buffer.encodeBit ((adr != null), null);

      // encode svID

      if (svID != null) {
         buffer.getContext().eventDispatcher.startElement("svID", -1);

         svID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("svID", -1);
      }
      else throw new Asn1MissingRequiredException ("svID");

      // encode cNo

      if (cNo != null) {
         buffer.getContext().eventDispatcher.startElement("cNo", -1);

         cNo.encode (buffer, 0, 63);

         buffer.getContext().eventDispatcher.endElement("cNo", -1);
      }
      else throw new Asn1MissingRequiredException ("cNo");

      // encode mpathDet

      if (mpathDet != null) {
         buffer.getContext().eventDispatcher.startElement("mpathDet", -1);

         mpathDet.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mpathDet", -1);
      }
      else throw new Asn1MissingRequiredException ("mpathDet");

      // encode carrierQualityInd

      if (carrierQualityInd != null) {
         buffer.getContext().eventDispatcher.startElement("carrierQualityInd", -1);

         carrierQualityInd.encode (buffer, 0, 3);

         buffer.getContext().eventDispatcher.endElement("carrierQualityInd", -1);
      }

      // encode codePhase

      if (codePhase != null) {
         buffer.getContext().eventDispatcher.startElement("codePhase", -1);

         codePhase.encode (buffer, 0, 2097151);

         buffer.getContext().eventDispatcher.endElement("codePhase", -1);
      }
      else throw new Asn1MissingRequiredException ("codePhase");

      // encode integerCodePhase

      if (integerCodePhase != null) {
         buffer.getContext().eventDispatcher.startElement("integerCodePhase", -1);

         integerCodePhase.encode (buffer, 0, 127);

         buffer.getContext().eventDispatcher.endElement("integerCodePhase", -1);
      }

      // encode codePhaseRMSError

      if (codePhaseRMSError != null) {
         buffer.getContext().eventDispatcher.startElement("codePhaseRMSError", -1);

         codePhaseRMSError.encode (buffer, 0, 63);

         buffer.getContext().eventDispatcher.endElement("codePhaseRMSError", -1);
      }
      else throw new Asn1MissingRequiredException ("codePhaseRMSError");

      // encode doppler

      if (doppler != null) {
         buffer.getContext().eventDispatcher.startElement("doppler", -1);

         doppler.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("doppler", -1);
      }

      // encode adr

      if (adr != null) {
         buffer.getContext().eventDispatcher.startElement("adr", -1);

         adr.encode (buffer, 0, 33554431);

         buffer.getContext().eventDispatcher.endElement("adr", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 4;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((adrMSB_r15 != null), null);
         buffer.encodeBit ((adrSign_r15 != null), null);
         buffer.encodeBit ((adrRMSerror_r15 != null), null);
         buffer.encodeBit ((delta_codePhase_r15 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // adrMSB_r15

         if (adrMSB_r15 != null) {
            buffer.reset();
            adrMSB_r15.encode (buffer, 0, 15);
            buffer.getContext().eventDispatcher.startElement("adrMSB_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("adrMSB_r15", -1);
         }

         // adrSign_r15

         if (adrSign_r15 != null) {
            buffer.reset();
            adrSign_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("adrSign_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("adrSign_r15", -1);
         }

         // adrRMSerror_r15

         if (adrRMSerror_r15 != null) {
            buffer.reset();
            adrRMSerror_r15.encode (buffer, 0, 127);
            buffer.getContext().eventDispatcher.startElement("adrRMSerror_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("adrRMSerror_r15", -1);
         }

         // delta_codePhase_r15

         if (delta_codePhase_r15 != null) {
            buffer.reset();
            delta_codePhase_r15.encode (buffer, 0, 7);
            buffer.getContext().eventDispatcher.startElement("delta_codePhase_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("delta_codePhase_r15", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
