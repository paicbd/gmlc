/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class StandardClockModelElement extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "StandardClockModelElement";
   }

   protected Asn1Integer stanClockToc;
   protected Asn1Integer stanClockAF2;
   protected Asn1Integer stanClockAF1;
   protected Asn1Integer stanClockAF0;
   protected Asn1Integer stanClockTgd;  // optional
   protected Asn1Integer sisa;
   protected Asn1Integer stanModelID;  // optional
   protected Asn1OpenExt extElem1;

   public StandardClockModelElement () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public StandardClockModelElement (
      Asn1Integer stanClockToc_,
      Asn1Integer stanClockAF2_,
      Asn1Integer stanClockAF1_,
      Asn1Integer stanClockAF0_,
      Asn1Integer stanClockTgd_,
      Asn1Integer sisa_,
      Asn1Integer stanModelID_
   ) throws Asn1Exception {
      super();
      setStanClockToc (stanClockToc_);
      setStanClockAF2 (stanClockAF2_);
      setStanClockAF1 (stanClockAF1_);
      setStanClockAF0 (stanClockAF0_);
      setStanClockTgd (stanClockTgd_);
      setSisa (sisa_);
      setStanModelID (stanModelID_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public StandardClockModelElement (
      Asn1Integer stanClockToc_,
      Asn1Integer stanClockAF2_,
      Asn1Integer stanClockAF1_,
      Asn1Integer stanClockAF0_,
      Asn1Integer sisa_
   ) throws Asn1Exception {
      super();
      setStanClockToc (stanClockToc_);
      setStanClockAF2 (stanClockAF2_);
      setStanClockAF1 (stanClockAF1_);
      setStanClockAF0 (stanClockAF0_);
      setSisa (sisa_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public StandardClockModelElement (long stanClockToc_,
      long stanClockAF2_,
      long stanClockAF1_,
      long stanClockAF0_,
      long stanClockTgd_,
      long sisa_,
      long stanModelID_
   ) throws Asn1Exception {
      super();
      setStanClockToc (stanClockToc_);
      setStanClockAF2 (stanClockAF2_);
      setStanClockAF1 (stanClockAF1_);
      setStanClockAF0 (stanClockAF0_);
      setStanClockTgd (stanClockTgd_);
      setSisa (sisa_);
      setStanModelID (stanModelID_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public StandardClockModelElement (
      long stanClockToc_,
      long stanClockAF2_,
      long stanClockAF1_,
      long stanClockAF0_,
      long sisa_
   ) throws Asn1Exception {
      super();
      setStanClockToc (stanClockToc_);
      setStanClockAF2 (stanClockAF2_);
      setStanClockAF1 (stanClockAF1_);
      setStanClockAF0 (stanClockAF0_);
      setSisa (sisa_);
   }

   public void init () {
      stanClockToc = null;
      stanClockAF2 = null;
      stanClockAF1 = null;
      stanClockAF0 = null;
      stanClockTgd = null;
      sisa = null;
      stanModelID = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof StandardClockModelElement) ) return false;

      StandardClockModelElement rhs = (StandardClockModelElement) obj;

      if (stanClockToc == null) {
         if (rhs.stanClockToc != null) return false;
      }
      else {
         if (!stanClockToc.equals(rhs.stanClockToc)) {
            return false;
         }
      }

      if (stanClockAF2 == null) {
         if (rhs.stanClockAF2 != null) return false;
      }
      else {
         if (!stanClockAF2.equals(rhs.stanClockAF2)) {
            return false;
         }
      }

      if (stanClockAF1 == null) {
         if (rhs.stanClockAF1 != null) return false;
      }
      else {
         if (!stanClockAF1.equals(rhs.stanClockAF1)) {
            return false;
         }
      }

      if (stanClockAF0 == null) {
         if (rhs.stanClockAF0 != null) return false;
      }
      else {
         if (!stanClockAF0.equals(rhs.stanClockAF0)) {
            return false;
         }
      }

      if (stanClockTgd == null) {
         if (rhs.stanClockTgd != null) return false;
      }
      else {
         if (!stanClockTgd.equals(rhs.stanClockTgd)) {
            return false;
         }
      }

      if (sisa == null) {
         if (rhs.sisa != null) return false;
      }
      else {
         if (!sisa.equals(rhs.sisa)) {
            return false;
         }
      }

      if (stanModelID == null) {
         if (rhs.stanModelID != null) return false;
      }
      else {
         if (!stanModelID.equals(rhs.stanModelID)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (stanClockToc != null) __code = 31*__code + stanClockToc.hashCode();
      if (stanClockAF2 != null) __code = 31*__code + stanClockAF2.hashCode();
      if (stanClockAF1 != null) __code = 31*__code + stanClockAF1.hashCode();
      if (stanClockAF0 != null) __code = 31*__code + stanClockAF0.hashCode();
      if (stanClockTgd != null) __code = 31*__code + stanClockTgd.hashCode();
      if (sisa != null) __code = 31*__code + sisa.hashCode();
      if (stanModelID != null) __code = 31*__code + stanModelID.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for StanClockToc
    */
   public Asn1Integer getStanClockToc () {
      return stanClockToc;
   }

   public void setStanClockToc (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 16383))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.stanClockToc = value;
   }

   public void setStanClockToc (long value) 
      throws Asn1Exception
   {
      setStanClockToc (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for StanClockAF2
    */
   public Asn1Integer getStanClockAF2 () {
      return stanClockAF2;
   }

   public void setStanClockAF2 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32 && value.value <= 31))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.stanClockAF2 = value;
   }

   public void setStanClockAF2 (long value) 
      throws Asn1Exception
   {
      setStanClockAF2 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for StanClockAF1
    */
   public Asn1Integer getStanClockAF1 () {
      return stanClockAF1;
   }

   public void setStanClockAF1 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1048576 && value.value <= 1048575))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.stanClockAF1 = value;
   }

   public void setStanClockAF1 (long value) 
      throws Asn1Exception
   {
      setStanClockAF1 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for StanClockAF0
    */
   public Asn1Integer getStanClockAF0 () {
      return stanClockAF0;
   }

   public void setStanClockAF0 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1073741824 && value.value <= 1073741823))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.stanClockAF0 = value;
   }

   public void setStanClockAF0 (long value) 
      throws Asn1Exception
   {
      setStanClockAF0 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for StanClockTgd
    */
   public Asn1Integer getStanClockTgd () {
      return stanClockTgd;
   }

   public void setStanClockTgd (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -512 && value.value <= 511))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.stanClockTgd = value;
   }

   public void setStanClockTgd (long value) 
      throws Asn1Exception
   {
      setStanClockTgd (new Asn1Integer(value));
   }
   public boolean hasStanClockTgd () {
      return (stanClockTgd != null);
   }

   /**
    * Accessor/mutator methods for Sisa
    */
   public Asn1Integer getSisa () {
      return sisa;
   }

   public void setSisa (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sisa = value;
   }

   public void setSisa (long value) 
      throws Asn1Exception
   {
      setSisa (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for StanModelID
    */
   public Asn1Integer getStanModelID () {
      return stanModelID;
   }

   public void setStanModelID (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.stanModelID = value;
   }

   public void setStanModelID (long value) 
      throws Asn1Exception
   {
      setStanModelID (new Asn1Integer(value));
   }
   public boolean hasStanModelID () {
      return (stanModelID != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return stanClockToc;
         case 1: return stanClockAF2;
         case 2: return stanClockAF1;
         case 3: return stanClockAF0;
         case 4: return stanClockTgd;
         case 5: return sisa;
         case 6: return stanModelID;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "stanClockToc";
         case 1: return "stanClockAF2";
         case 2: return "stanClockAF1";
         case 3: return "stanClockAF0";
         case 4: return "stanClockTgd";
         case 5: return "sisa";
         case 6: return "stanModelID";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean stanClockTgdPresent = buffer.decodeBit ("stanClockTgdPresent");
      boolean stanModelIDPresent = buffer.decodeBit ("stanModelIDPresent");

      // decode stanClockToc

      buffer.getContext().eventDispatcher.startElement("stanClockToc", -1);

      stanClockToc = new Asn1Integer();
      stanClockToc.decode (buffer, 0, 16383);
      buffer.getContext().eventDispatcher.endElement("stanClockToc", -1);

      // decode stanClockAF2

      buffer.getContext().eventDispatcher.startElement("stanClockAF2", -1);

      stanClockAF2 = new Asn1Integer();
      stanClockAF2.decode (buffer, -32, 31);
      buffer.getContext().eventDispatcher.endElement("stanClockAF2", -1);

      // decode stanClockAF1

      buffer.getContext().eventDispatcher.startElement("stanClockAF1", -1);

      stanClockAF1 = new Asn1Integer();
      stanClockAF1.decode (buffer, -1048576, 1048575);
      buffer.getContext().eventDispatcher.endElement("stanClockAF1", -1);

      // decode stanClockAF0

      buffer.getContext().eventDispatcher.startElement("stanClockAF0", -1);

      stanClockAF0 = new Asn1Integer();
      stanClockAF0.decode (buffer, -1073741824, 1073741823);
      buffer.getContext().eventDispatcher.endElement("stanClockAF0", -1);

      // decode stanClockTgd

      if (stanClockTgdPresent) {
         buffer.getContext().eventDispatcher.startElement("stanClockTgd", -1);

         stanClockTgd = new Asn1Integer();
         stanClockTgd.decode (buffer, -512, 511);
         buffer.getContext().eventDispatcher.endElement("stanClockTgd", -1);
      }
      else {
         stanClockTgd = null;
      }

      // decode sisa

      buffer.getContext().eventDispatcher.startElement("sisa", -1);

      sisa = new Asn1Integer();
      sisa.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("sisa", -1);

      // decode stanModelID

      if (stanModelIDPresent) {
         buffer.getContext().eventDispatcher.startElement("stanModelID", -1);

         stanModelID = new Asn1Integer();
         stanModelID.decode (buffer, 0, 1);
         buffer.getContext().eventDispatcher.endElement("stanModelID", -1);
      }
      else {
         stanModelID = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((stanClockTgd != null), null);
      buffer.encodeBit ((stanModelID != null), null);

      // encode stanClockToc

      if (stanClockToc != null) {
         buffer.getContext().eventDispatcher.startElement("stanClockToc", -1);

         stanClockToc.encode (buffer, 0, 16383);

         buffer.getContext().eventDispatcher.endElement("stanClockToc", -1);
      }
      else throw new Asn1MissingRequiredException ("stanClockToc");

      // encode stanClockAF2

      if (stanClockAF2 != null) {
         buffer.getContext().eventDispatcher.startElement("stanClockAF2", -1);

         stanClockAF2.encode (buffer, -32, 31);

         buffer.getContext().eventDispatcher.endElement("stanClockAF2", -1);
      }
      else throw new Asn1MissingRequiredException ("stanClockAF2");

      // encode stanClockAF1

      if (stanClockAF1 != null) {
         buffer.getContext().eventDispatcher.startElement("stanClockAF1", -1);

         stanClockAF1.encode (buffer, -1048576, 1048575);

         buffer.getContext().eventDispatcher.endElement("stanClockAF1", -1);
      }
      else throw new Asn1MissingRequiredException ("stanClockAF1");

      // encode stanClockAF0

      if (stanClockAF0 != null) {
         buffer.getContext().eventDispatcher.startElement("stanClockAF0", -1);

         stanClockAF0.encode (buffer, -1073741824, 1073741823);

         buffer.getContext().eventDispatcher.endElement("stanClockAF0", -1);
      }
      else throw new Asn1MissingRequiredException ("stanClockAF0");

      // encode stanClockTgd

      if (stanClockTgd != null) {
         buffer.getContext().eventDispatcher.startElement("stanClockTgd", -1);

         stanClockTgd.encode (buffer, -512, 511);

         buffer.getContext().eventDispatcher.endElement("stanClockTgd", -1);
      }

      // encode sisa

      if (sisa != null) {
         buffer.getContext().eventDispatcher.startElement("sisa", -1);

         sisa.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("sisa", -1);
      }
      else throw new Asn1MissingRequiredException ("sisa");

      // encode stanModelID

      if (stanModelID != null) {
         buffer.getContext().eventDispatcher.startElement("stanModelID", -1);

         stanModelID.encode (buffer, 0, 1);

         buffer.getContext().eventDispatcher.endElement("stanModelID", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
