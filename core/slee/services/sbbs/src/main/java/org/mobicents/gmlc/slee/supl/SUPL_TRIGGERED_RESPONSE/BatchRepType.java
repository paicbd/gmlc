/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_TRIGGERED_RESPONSE;

import com.objsys.asn1j.runtime.*;

public class BatchRepType extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_TRIGGERED_RESPONSERtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_TRIGGERED_RESPONSERtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "BatchRepType";
   }

   protected Asn1Boolean reportPosition;
   protected Asn1Boolean reportMeasurements;
   protected Asn1Boolean intermediateReports;
   protected Asn1Boolean discardOldest;  // optional
   protected Asn1OpenExt extElem1;

   public BatchRepType () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BatchRepType (
      Asn1Boolean reportPosition_,
      Asn1Boolean reportMeasurements_,
      Asn1Boolean intermediateReports_,
      Asn1Boolean discardOldest_
   ) {
      super();
      setReportPosition (reportPosition_);
      setReportMeasurements (reportMeasurements_);
      setIntermediateReports (intermediateReports_);
      setDiscardOldest (discardOldest_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public BatchRepType (
      Asn1Boolean reportPosition_,
      Asn1Boolean reportMeasurements_,
      Asn1Boolean intermediateReports_
   ) {
      super();
      setReportPosition (reportPosition_);
      setReportMeasurements (reportMeasurements_);
      setIntermediateReports (intermediateReports_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public BatchRepType (boolean reportPosition_,
      boolean reportMeasurements_,
      boolean intermediateReports_,
      boolean discardOldest_
   ) {
      super();
      setReportPosition (reportPosition_);
      setReportMeasurements (reportMeasurements_);
      setIntermediateReports (intermediateReports_);
      setDiscardOldest (discardOldest_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public BatchRepType (
      boolean reportPosition_,
      boolean reportMeasurements_,
      boolean intermediateReports_
   ) {
      super();
      setReportPosition (reportPosition_);
      setReportMeasurements (reportMeasurements_);
      setIntermediateReports (intermediateReports_);
   }

   public void init () {
      reportPosition = null;
      reportMeasurements = null;
      intermediateReports = null;
      discardOldest = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof BatchRepType) ) return false;

      BatchRepType rhs = (BatchRepType) obj;

      if (reportPosition == null) {
         if (rhs.reportPosition != null) return false;
      }
      else {
         if (!reportPosition.equals(rhs.reportPosition)) {
            return false;
         }
      }

      if (reportMeasurements == null) {
         if (rhs.reportMeasurements != null) return false;
      }
      else {
         if (!reportMeasurements.equals(rhs.reportMeasurements)) {
            return false;
         }
      }

      if (intermediateReports == null) {
         if (rhs.intermediateReports != null) return false;
      }
      else {
         if (!intermediateReports.equals(rhs.intermediateReports)) {
            return false;
         }
      }

      if (discardOldest == null) {
         if (rhs.discardOldest != null) return false;
      }
      else {
         if (!discardOldest.equals(rhs.discardOldest)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (reportPosition != null) __code = 31*__code + reportPosition.hashCode();
      if (reportMeasurements != null) __code = 31*__code + reportMeasurements.hashCode();
      if (intermediateReports != null) __code = 31*__code + intermediateReports.hashCode();
      if (discardOldest != null) __code = 31*__code + discardOldest.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for ReportPosition
    */
   public Asn1Boolean getReportPosition () {
      return reportPosition;
   }

   public void setReportPosition (Asn1Boolean value) {
      this.reportPosition = value;
   }

   public void setReportPosition (boolean value) {
      setReportPosition (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for ReportMeasurements
    */
   public Asn1Boolean getReportMeasurements () {
      return reportMeasurements;
   }

   public void setReportMeasurements (Asn1Boolean value) {
      this.reportMeasurements = value;
   }

   public void setReportMeasurements (boolean value) {
      setReportMeasurements (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for IntermediateReports
    */
   public Asn1Boolean getIntermediateReports () {
      return intermediateReports;
   }

   public void setIntermediateReports (Asn1Boolean value) {
      this.intermediateReports = value;
   }

   public void setIntermediateReports (boolean value) {
      setIntermediateReports (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for DiscardOldest
    */
   public Asn1Boolean getDiscardOldest () {
      return discardOldest;
   }

   public void setDiscardOldest (Asn1Boolean value) {
      this.discardOldest = value;
   }

   public void setDiscardOldest (boolean value) {
      setDiscardOldest (new Asn1Boolean(value));
   }
   public boolean hasDiscardOldest () {
      return (discardOldest != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return reportPosition;
         case 1: return reportMeasurements;
         case 2: return intermediateReports;
         case 3: return discardOldest;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "reportPosition";
         case 1: return "reportMeasurements";
         case 2: return "intermediateReports";
         case 3: return "discardOldest";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean discardOldestPresent = buffer.decodeBit ("discardOldestPresent");

      // decode reportPosition

      buffer.getContext().eventDispatcher.startElement("reportPosition", -1);

      reportPosition = new Asn1Boolean();
      reportPosition.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("reportPosition", -1);

      // decode reportMeasurements

      buffer.getContext().eventDispatcher.startElement("reportMeasurements", -1);

      reportMeasurements = new Asn1Boolean();
      reportMeasurements.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("reportMeasurements", -1);

      // decode intermediateReports

      buffer.getContext().eventDispatcher.startElement("intermediateReports", -1);

      intermediateReports = new Asn1Boolean();
      intermediateReports.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("intermediateReports", -1);

      // decode discardOldest

      if (discardOldestPresent) {
         buffer.getContext().eventDispatcher.startElement("discardOldest", -1);

         discardOldest = new Asn1Boolean();
         discardOldest.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discardOldest", -1);
      }
      else {
         discardOldest = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((discardOldest != null), null);

      // encode reportPosition

      if (reportPosition != null) {
         buffer.getContext().eventDispatcher.startElement("reportPosition", -1);

         reportPosition.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportPosition", -1);
      }
      else throw new Asn1MissingRequiredException ("reportPosition");

      // encode reportMeasurements

      if (reportMeasurements != null) {
         buffer.getContext().eventDispatcher.startElement("reportMeasurements", -1);

         reportMeasurements.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportMeasurements", -1);
      }
      else throw new Asn1MissingRequiredException ("reportMeasurements");

      // encode intermediateReports

      if (intermediateReports != null) {
         buffer.getContext().eventDispatcher.startElement("intermediateReports", -1);

         intermediateReports.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("intermediateReports", -1);
      }
      else throw new Asn1MissingRequiredException ("intermediateReports");

      // encode discardOldest

      if (discardOldest != null) {
         buffer.getContext().eventDispatcher.startElement("discardOldest", -1);

         discardOldest.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("discardOldest", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
