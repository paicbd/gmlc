/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Components;

import com.objsys.asn1j.runtime.*;

public class CellMeasuredResults_modeSpecificInfo_fdd extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   protected PrimaryCPICH_Info primaryCPICH_Info;
   protected CPICH_Ec_N0 cpich_Ec_N0;  // optional
   protected CPICH_RSCP cpich_RSCP;  // optional
   protected Pathloss pathloss;  // optional

   public CellMeasuredResults_modeSpecificInfo_fdd () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CellMeasuredResults_modeSpecificInfo_fdd (
      PrimaryCPICH_Info primaryCPICH_Info_,
      CPICH_Ec_N0 cpich_Ec_N0_,
      CPICH_RSCP cpich_RSCP_,
      Pathloss pathloss_
   ) throws Asn1Exception {
      super();
      setPrimaryCPICH_Info (primaryCPICH_Info_);
      setCpich_Ec_N0 (cpich_Ec_N0_);
      setCpich_RSCP (cpich_RSCP_);
      setPathloss (pathloss_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CellMeasuredResults_modeSpecificInfo_fdd (
      PrimaryCPICH_Info primaryCPICH_Info_
   ) throws Asn1Exception {
      super();
      setPrimaryCPICH_Info (primaryCPICH_Info_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CellMeasuredResults_modeSpecificInfo_fdd (PrimaryCPICH_Info primaryCPICH_Info_,
      long cpich_Ec_N0_,
      long cpich_RSCP_,
      long pathloss_
   ) throws Asn1Exception {
      super();
      setPrimaryCPICH_Info (primaryCPICH_Info_);
      setCpich_Ec_N0 (cpich_Ec_N0_);
      setCpich_RSCP (cpich_RSCP_);
      setPathloss (pathloss_);
   }

   public void init () {
      primaryCPICH_Info = null;
      cpich_Ec_N0 = null;
      cpich_RSCP = null;
      pathloss = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof CellMeasuredResults_modeSpecificInfo_fdd) ) return false;

      CellMeasuredResults_modeSpecificInfo_fdd rhs = (CellMeasuredResults_modeSpecificInfo_fdd) obj;

      if (primaryCPICH_Info == null) {
         if (rhs.primaryCPICH_Info != null) return false;
      }
      else {
         if (!primaryCPICH_Info.equals(rhs.primaryCPICH_Info)) {
            return false;
         }
      }

      if (cpich_Ec_N0 == null) {
         if (rhs.cpich_Ec_N0 != null) return false;
      }
      else {
         if (!cpich_Ec_N0.equals(rhs.cpich_Ec_N0)) {
            return false;
         }
      }

      if (cpich_RSCP == null) {
         if (rhs.cpich_RSCP != null) return false;
      }
      else {
         if (!cpich_RSCP.equals(rhs.cpich_RSCP)) {
            return false;
         }
      }

      if (pathloss == null) {
         if (rhs.pathloss != null) return false;
      }
      else {
         if (!pathloss.equals(rhs.pathloss)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (primaryCPICH_Info != null) __code = 31*__code + primaryCPICH_Info.hashCode();
      if (cpich_Ec_N0 != null) __code = 31*__code + cpich_Ec_N0.hashCode();
      if (cpich_RSCP != null) __code = 31*__code + cpich_RSCP.hashCode();
      if (pathloss != null) __code = 31*__code + pathloss.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for PrimaryCPICH_Info
    */
   public PrimaryCPICH_Info getPrimaryCPICH_Info () {
      return primaryCPICH_Info;
   }

   public void setPrimaryCPICH_Info (PrimaryCPICH_Info value) {
      this.primaryCPICH_Info = value;
   }

   /**
    * Accessor/mutator methods for Cpich_Ec_N0
    */
   public CPICH_Ec_N0 getCpich_Ec_N0 () {
      return cpich_Ec_N0;
   }

   public void setCpich_Ec_N0 (CPICH_Ec_N0 value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 63))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cpich_Ec_N0 = value;
   }

   public void setCpich_Ec_N0 (long value) 
      throws Asn1Exception
   {
      setCpich_Ec_N0 (new CPICH_Ec_N0(value));
   }
   public boolean hasCpich_Ec_N0 () {
      return (cpich_Ec_N0 != null);
   }

   /**
    * Accessor/mutator methods for Cpich_RSCP
    */
   public CPICH_RSCP getCpich_RSCP () {
      return cpich_RSCP;
   }

   public void setCpich_RSCP (CPICH_RSCP value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cpich_RSCP = value;
   }

   public void setCpich_RSCP (long value) 
      throws Asn1Exception
   {
      setCpich_RSCP (new CPICH_RSCP(value));
   }
   public boolean hasCpich_RSCP () {
      return (cpich_RSCP != null);
   }

   /**
    * Accessor/mutator methods for Pathloss
    */
   public Pathloss getPathloss () {
      return pathloss;
   }

   public void setPathloss (Pathloss value) 
      throws Asn1Exception
   {
      if (!((value.value >= 46 && value.value <= 173))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.pathloss = value;
   }

   public void setPathloss (long value) 
      throws Asn1Exception
   {
      setPathloss (new Pathloss(value));
   }
   public boolean hasPathloss () {
      return (pathloss != null);
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return primaryCPICH_Info;
         case 1: return cpich_Ec_N0;
         case 2: return cpich_RSCP;
         case 3: return pathloss;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "primaryCPICH-Info";
         case 1: return "cpich-Ec-N0";
         case 2: return "cpich-RSCP";
         case 3: return "pathloss";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean cpich_Ec_N0Present = buffer.decodeBit ("cpich_Ec_N0Present");
      boolean cpich_RSCPPresent = buffer.decodeBit ("cpich_RSCPPresent");
      boolean pathlossPresent = buffer.decodeBit ("pathlossPresent");

      // decode primaryCPICH_Info

      buffer.getContext().eventDispatcher.startElement("primaryCPICH_Info", -1);

      primaryCPICH_Info = new PrimaryCPICH_Info();
      primaryCPICH_Info.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("primaryCPICH_Info", -1);

      // decode cpich_Ec_N0

      if (cpich_Ec_N0Present) {
         buffer.getContext().eventDispatcher.startElement("cpich_Ec_N0", -1);

         cpich_Ec_N0 = new CPICH_Ec_N0();
         cpich_Ec_N0.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cpich_Ec_N0", -1);
      }
      else {
         cpich_Ec_N0 = null;
      }

      // decode cpich_RSCP

      if (cpich_RSCPPresent) {
         buffer.getContext().eventDispatcher.startElement("cpich_RSCP", -1);

         cpich_RSCP = new CPICH_RSCP();
         cpich_RSCP.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cpich_RSCP", -1);
      }
      else {
         cpich_RSCP = null;
      }

      // decode pathloss

      if (pathlossPresent) {
         buffer.getContext().eventDispatcher.startElement("pathloss", -1);

         pathloss = new Pathloss();
         pathloss.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pathloss", -1);
      }
      else {
         pathloss = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((cpich_Ec_N0 != null), null);
      buffer.encodeBit ((cpich_RSCP != null), null);
      buffer.encodeBit ((pathloss != null), null);

      // encode primaryCPICH_Info

      if (primaryCPICH_Info != null) {
         buffer.getContext().eventDispatcher.startElement("primaryCPICH_Info", -1);

         primaryCPICH_Info.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("primaryCPICH_Info", -1);
      }
      else throw new Asn1MissingRequiredException ("primaryCPICH_Info");

      // encode cpich_Ec_N0

      if (cpich_Ec_N0 != null) {
         buffer.getContext().eventDispatcher.startElement("cpich_Ec_N0", -1);

         cpich_Ec_N0.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cpich_Ec_N0", -1);
      }

      // encode cpich_RSCP

      if (cpich_RSCP != null) {
         buffer.getContext().eventDispatcher.startElement("cpich_RSCP", -1);

         cpich_RSCP.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cpich_RSCP", -1);
      }

      // encode pathloss

      if (pathloss != null) {
         buffer.getContext().eventDispatcher.startElement("pathloss", -1);

         pathloss.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pathloss", -1);
      }

   }

}
