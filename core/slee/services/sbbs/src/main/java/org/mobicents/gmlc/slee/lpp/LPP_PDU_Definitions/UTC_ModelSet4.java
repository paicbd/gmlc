/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class UTC_ModelSet4 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "UTC-ModelSet4";
   }

   protected Asn1Integer utcA1wnt;
   protected Asn1Integer utcA0wnt;
   protected Asn1Integer utcTot;
   protected Asn1Integer utcWNt;
   protected Asn1Integer utcDeltaTls;
   protected Asn1Integer utcWNlsf;
   protected Asn1Integer utcDN;
   protected Asn1Integer utcDeltaTlsf;
   protected Asn1Integer utcStandardID;
   protected Asn1OpenExt extElem1;

   public UTC_ModelSet4 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UTC_ModelSet4 (
      Asn1Integer utcA1wnt_,
      Asn1Integer utcA0wnt_,
      Asn1Integer utcTot_,
      Asn1Integer utcWNt_,
      Asn1Integer utcDeltaTls_,
      Asn1Integer utcWNlsf_,
      Asn1Integer utcDN_,
      Asn1Integer utcDeltaTlsf_,
      Asn1Integer utcStandardID_
   ) throws Asn1Exception {
      super();
      setUtcA1wnt (utcA1wnt_);
      setUtcA0wnt (utcA0wnt_);
      setUtcTot (utcTot_);
      setUtcWNt (utcWNt_);
      setUtcDeltaTls (utcDeltaTls_);
      setUtcWNlsf (utcWNlsf_);
      setUtcDN (utcDN_);
      setUtcDeltaTlsf (utcDeltaTlsf_);
      setUtcStandardID (utcStandardID_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UTC_ModelSet4 (long utcA1wnt_,
      long utcA0wnt_,
      long utcTot_,
      long utcWNt_,
      long utcDeltaTls_,
      long utcWNlsf_,
      long utcDN_,
      long utcDeltaTlsf_,
      long utcStandardID_
   ) throws Asn1Exception {
      super();
      setUtcA1wnt (utcA1wnt_);
      setUtcA0wnt (utcA0wnt_);
      setUtcTot (utcTot_);
      setUtcWNt (utcWNt_);
      setUtcDeltaTls (utcDeltaTls_);
      setUtcWNlsf (utcWNlsf_);
      setUtcDN (utcDN_);
      setUtcDeltaTlsf (utcDeltaTlsf_);
      setUtcStandardID (utcStandardID_);
   }

   public void init () {
      utcA1wnt = null;
      utcA0wnt = null;
      utcTot = null;
      utcWNt = null;
      utcDeltaTls = null;
      utcWNlsf = null;
      utcDN = null;
      utcDeltaTlsf = null;
      utcStandardID = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof UTC_ModelSet4) ) return false;

      UTC_ModelSet4 rhs = (UTC_ModelSet4) obj;

      if (utcA1wnt == null) {
         if (rhs.utcA1wnt != null) return false;
      }
      else {
         if (!utcA1wnt.equals(rhs.utcA1wnt)) {
            return false;
         }
      }

      if (utcA0wnt == null) {
         if (rhs.utcA0wnt != null) return false;
      }
      else {
         if (!utcA0wnt.equals(rhs.utcA0wnt)) {
            return false;
         }
      }

      if (utcTot == null) {
         if (rhs.utcTot != null) return false;
      }
      else {
         if (!utcTot.equals(rhs.utcTot)) {
            return false;
         }
      }

      if (utcWNt == null) {
         if (rhs.utcWNt != null) return false;
      }
      else {
         if (!utcWNt.equals(rhs.utcWNt)) {
            return false;
         }
      }

      if (utcDeltaTls == null) {
         if (rhs.utcDeltaTls != null) return false;
      }
      else {
         if (!utcDeltaTls.equals(rhs.utcDeltaTls)) {
            return false;
         }
      }

      if (utcWNlsf == null) {
         if (rhs.utcWNlsf != null) return false;
      }
      else {
         if (!utcWNlsf.equals(rhs.utcWNlsf)) {
            return false;
         }
      }

      if (utcDN == null) {
         if (rhs.utcDN != null) return false;
      }
      else {
         if (!utcDN.equals(rhs.utcDN)) {
            return false;
         }
      }

      if (utcDeltaTlsf == null) {
         if (rhs.utcDeltaTlsf != null) return false;
      }
      else {
         if (!utcDeltaTlsf.equals(rhs.utcDeltaTlsf)) {
            return false;
         }
      }

      if (utcStandardID == null) {
         if (rhs.utcStandardID != null) return false;
      }
      else {
         if (!utcStandardID.equals(rhs.utcStandardID)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (utcA1wnt != null) __code = 31*__code + utcA1wnt.hashCode();
      if (utcA0wnt != null) __code = 31*__code + utcA0wnt.hashCode();
      if (utcTot != null) __code = 31*__code + utcTot.hashCode();
      if (utcWNt != null) __code = 31*__code + utcWNt.hashCode();
      if (utcDeltaTls != null) __code = 31*__code + utcDeltaTls.hashCode();
      if (utcWNlsf != null) __code = 31*__code + utcWNlsf.hashCode();
      if (utcDN != null) __code = 31*__code + utcDN.hashCode();
      if (utcDeltaTlsf != null) __code = 31*__code + utcDeltaTlsf.hashCode();
      if (utcStandardID != null) __code = 31*__code + utcStandardID.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for UtcA1wnt
    */
   public Asn1Integer getUtcA1wnt () {
      return utcA1wnt;
   }

   public void setUtcA1wnt (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8388608 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.utcA1wnt = value;
   }

   public void setUtcA1wnt (long value) 
      throws Asn1Exception
   {
      setUtcA1wnt (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for UtcA0wnt
    */
   public Asn1Integer getUtcA0wnt () {
      return utcA0wnt;
   }

   public void setUtcA0wnt (Asn1Integer value) 
      throws Asn1Exception
   {
      this.utcA0wnt = value;
   }

   public void setUtcA0wnt (long value) 
      throws Asn1Exception
   {
      setUtcA0wnt (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for UtcTot
    */
   public Asn1Integer getUtcTot () {
      return utcTot;
   }

   public void setUtcTot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.utcTot = value;
   }

   public void setUtcTot (long value) 
      throws Asn1Exception
   {
      setUtcTot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for UtcWNt
    */
   public Asn1Integer getUtcWNt () {
      return utcWNt;
   }

   public void setUtcWNt (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.utcWNt = value;
   }

   public void setUtcWNt (long value) 
      throws Asn1Exception
   {
      setUtcWNt (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for UtcDeltaTls
    */
   public Asn1Integer getUtcDeltaTls () {
      return utcDeltaTls;
   }

   public void setUtcDeltaTls (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.utcDeltaTls = value;
   }

   public void setUtcDeltaTls (long value) 
      throws Asn1Exception
   {
      setUtcDeltaTls (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for UtcWNlsf
    */
   public Asn1Integer getUtcWNlsf () {
      return utcWNlsf;
   }

   public void setUtcWNlsf (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.utcWNlsf = value;
   }

   public void setUtcWNlsf (long value) 
      throws Asn1Exception
   {
      setUtcWNlsf (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for UtcDN
    */
   public Asn1Integer getUtcDN () {
      return utcDN;
   }

   public void setUtcDN (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.utcDN = value;
   }

   public void setUtcDN (long value) 
      throws Asn1Exception
   {
      setUtcDN (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for UtcDeltaTlsf
    */
   public Asn1Integer getUtcDeltaTlsf () {
      return utcDeltaTlsf;
   }

   public void setUtcDeltaTlsf (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.utcDeltaTlsf = value;
   }

   public void setUtcDeltaTlsf (long value) 
      throws Asn1Exception
   {
      setUtcDeltaTlsf (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for UtcStandardID
    */
   public Asn1Integer getUtcStandardID () {
      return utcStandardID;
   }

   public void setUtcStandardID (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 7))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.utcStandardID = value;
   }

   public void setUtcStandardID (long value) 
      throws Asn1Exception
   {
      setUtcStandardID (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return utcA1wnt;
         case 1: return utcA0wnt;
         case 2: return utcTot;
         case 3: return utcWNt;
         case 4: return utcDeltaTls;
         case 5: return utcWNlsf;
         case 6: return utcDN;
         case 7: return utcDeltaTlsf;
         case 8: return utcStandardID;
         case 9: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "utcA1wnt";
         case 1: return "utcA0wnt";
         case 2: return "utcTot";
         case 3: return "utcWNt";
         case 4: return "utcDeltaTls";
         case 5: return "utcWNlsf";
         case 6: return "utcDN";
         case 7: return "utcDeltaTlsf";
         case 8: return "utcStandardID";
         case 9: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode utcA1wnt

      buffer.getContext().eventDispatcher.startElement("utcA1wnt", -1);

      utcA1wnt = new Asn1Integer();
      utcA1wnt.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("utcA1wnt", -1);

      // decode utcA0wnt

      buffer.getContext().eventDispatcher.startElement("utcA0wnt", -1);

      utcA0wnt = new Asn1Integer();
      utcA0wnt.decode (buffer, -2147483648, 2147483647);
      buffer.getContext().eventDispatcher.endElement("utcA0wnt", -1);

      // decode utcTot

      buffer.getContext().eventDispatcher.startElement("utcTot", -1);

      utcTot = new Asn1Integer();
      utcTot.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("utcTot", -1);

      // decode utcWNt

      buffer.getContext().eventDispatcher.startElement("utcWNt", -1);

      utcWNt = new Asn1Integer();
      utcWNt.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("utcWNt", -1);

      // decode utcDeltaTls

      buffer.getContext().eventDispatcher.startElement("utcDeltaTls", -1);

      utcDeltaTls = new Asn1Integer();
      utcDeltaTls.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("utcDeltaTls", -1);

      // decode utcWNlsf

      buffer.getContext().eventDispatcher.startElement("utcWNlsf", -1);

      utcWNlsf = new Asn1Integer();
      utcWNlsf.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("utcWNlsf", -1);

      // decode utcDN

      buffer.getContext().eventDispatcher.startElement("utcDN", -1);

      utcDN = new Asn1Integer();
      utcDN.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("utcDN", -1);

      // decode utcDeltaTlsf

      buffer.getContext().eventDispatcher.startElement("utcDeltaTlsf", -1);

      utcDeltaTlsf = new Asn1Integer();
      utcDeltaTlsf.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("utcDeltaTlsf", -1);

      // decode utcStandardID

      buffer.getContext().eventDispatcher.startElement("utcStandardID", -1);

      utcStandardID = new Asn1Integer();
      utcStandardID.decode (buffer, 0, 7);
      buffer.getContext().eventDispatcher.endElement("utcStandardID", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode utcA1wnt

      if (utcA1wnt != null) {
         buffer.getContext().eventDispatcher.startElement("utcA1wnt", -1);

         utcA1wnt.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("utcA1wnt", -1);
      }
      else throw new Asn1MissingRequiredException ("utcA1wnt");

      // encode utcA0wnt

      if (utcA0wnt != null) {
         buffer.getContext().eventDispatcher.startElement("utcA0wnt", -1);

         utcA0wnt.encode (buffer, -2147483648, 2147483647);

         buffer.getContext().eventDispatcher.endElement("utcA0wnt", -1);
      }
      else throw new Asn1MissingRequiredException ("utcA0wnt");

      // encode utcTot

      if (utcTot != null) {
         buffer.getContext().eventDispatcher.startElement("utcTot", -1);

         utcTot.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("utcTot", -1);
      }
      else throw new Asn1MissingRequiredException ("utcTot");

      // encode utcWNt

      if (utcWNt != null) {
         buffer.getContext().eventDispatcher.startElement("utcWNt", -1);

         utcWNt.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("utcWNt", -1);
      }
      else throw new Asn1MissingRequiredException ("utcWNt");

      // encode utcDeltaTls

      if (utcDeltaTls != null) {
         buffer.getContext().eventDispatcher.startElement("utcDeltaTls", -1);

         utcDeltaTls.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("utcDeltaTls", -1);
      }
      else throw new Asn1MissingRequiredException ("utcDeltaTls");

      // encode utcWNlsf

      if (utcWNlsf != null) {
         buffer.getContext().eventDispatcher.startElement("utcWNlsf", -1);

         utcWNlsf.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("utcWNlsf", -1);
      }
      else throw new Asn1MissingRequiredException ("utcWNlsf");

      // encode utcDN

      if (utcDN != null) {
         buffer.getContext().eventDispatcher.startElement("utcDN", -1);

         utcDN.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("utcDN", -1);
      }
      else throw new Asn1MissingRequiredException ("utcDN");

      // encode utcDeltaTlsf

      if (utcDeltaTlsf != null) {
         buffer.getContext().eventDispatcher.startElement("utcDeltaTlsf", -1);

         utcDeltaTlsf.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("utcDeltaTlsf", -1);
      }
      else throw new Asn1MissingRequiredException ("utcDeltaTlsf");

      // encode utcStandardID

      if (utcStandardID != null) {
         buffer.getContext().eventDispatcher.startElement("utcStandardID", -1);

         utcStandardID.encode (buffer, 0, 7);

         buffer.getContext().eventDispatcher.endElement("utcStandardID", -1);
      }
      else throw new Asn1MissingRequiredException ("utcStandardID");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
