/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class VelocityTypes extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "VelocityTypes";
   }

   protected Asn1Boolean horizontalVelocity;
   protected Asn1Boolean horizontalWithVerticalVelocity;
   protected Asn1Boolean horizontalVelocityWithUncertainty;
   protected Asn1Boolean horizontalWithVerticalVelocityAndUncertainty;
   protected Asn1OpenExt extElem1;

   public VelocityTypes () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public VelocityTypes (
      Asn1Boolean horizontalVelocity_,
      Asn1Boolean horizontalWithVerticalVelocity_,
      Asn1Boolean horizontalVelocityWithUncertainty_,
      Asn1Boolean horizontalWithVerticalVelocityAndUncertainty_
   ) {
      super();
      setHorizontalVelocity (horizontalVelocity_);
      setHorizontalWithVerticalVelocity (horizontalWithVerticalVelocity_);
      setHorizontalVelocityWithUncertainty (horizontalVelocityWithUncertainty_);
      setHorizontalWithVerticalVelocityAndUncertainty (horizontalWithVerticalVelocityAndUncertainty_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public VelocityTypes (boolean horizontalVelocity_,
      boolean horizontalWithVerticalVelocity_,
      boolean horizontalVelocityWithUncertainty_,
      boolean horizontalWithVerticalVelocityAndUncertainty_
   ) {
      super();
      setHorizontalVelocity (horizontalVelocity_);
      setHorizontalWithVerticalVelocity (horizontalWithVerticalVelocity_);
      setHorizontalVelocityWithUncertainty (horizontalVelocityWithUncertainty_);
      setHorizontalWithVerticalVelocityAndUncertainty (horizontalWithVerticalVelocityAndUncertainty_);
   }

   public void init () {
      horizontalVelocity = null;
      horizontalWithVerticalVelocity = null;
      horizontalVelocityWithUncertainty = null;
      horizontalWithVerticalVelocityAndUncertainty = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof VelocityTypes) ) return false;

      VelocityTypes rhs = (VelocityTypes) obj;

      if (horizontalVelocity == null) {
         if (rhs.horizontalVelocity != null) return false;
      }
      else {
         if (!horizontalVelocity.equals(rhs.horizontalVelocity)) {
            return false;
         }
      }

      if (horizontalWithVerticalVelocity == null) {
         if (rhs.horizontalWithVerticalVelocity != null) return false;
      }
      else {
         if (!horizontalWithVerticalVelocity.equals(rhs.horizontalWithVerticalVelocity)) {
            return false;
         }
      }

      if (horizontalVelocityWithUncertainty == null) {
         if (rhs.horizontalVelocityWithUncertainty != null) return false;
      }
      else {
         if (!horizontalVelocityWithUncertainty.equals(rhs.horizontalVelocityWithUncertainty)) {
            return false;
         }
      }

      if (horizontalWithVerticalVelocityAndUncertainty == null) {
         if (rhs.horizontalWithVerticalVelocityAndUncertainty != null) return false;
      }
      else {
         if (!horizontalWithVerticalVelocityAndUncertainty.equals(rhs.horizontalWithVerticalVelocityAndUncertainty)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (horizontalVelocity != null) __code = 31*__code + horizontalVelocity.hashCode();
      if (horizontalWithVerticalVelocity != null) __code = 31*__code + horizontalWithVerticalVelocity.hashCode();
      if (horizontalVelocityWithUncertainty != null) __code = 31*__code + horizontalVelocityWithUncertainty.hashCode();
      if (horizontalWithVerticalVelocityAndUncertainty != null) __code = 31*__code + horizontalWithVerticalVelocityAndUncertainty.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for HorizontalVelocity
    */
   public Asn1Boolean getHorizontalVelocity () {
      return horizontalVelocity;
   }

   public void setHorizontalVelocity (Asn1Boolean value) {
      this.horizontalVelocity = value;
   }

   public void setHorizontalVelocity (boolean value) {
      setHorizontalVelocity (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for HorizontalWithVerticalVelocity
    */
   public Asn1Boolean getHorizontalWithVerticalVelocity () {
      return horizontalWithVerticalVelocity;
   }

   public void setHorizontalWithVerticalVelocity (Asn1Boolean value) {
      this.horizontalWithVerticalVelocity = value;
   }

   public void setHorizontalWithVerticalVelocity (boolean value) {
      setHorizontalWithVerticalVelocity (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for HorizontalVelocityWithUncertainty
    */
   public Asn1Boolean getHorizontalVelocityWithUncertainty () {
      return horizontalVelocityWithUncertainty;
   }

   public void setHorizontalVelocityWithUncertainty (Asn1Boolean value) {
      this.horizontalVelocityWithUncertainty = value;
   }

   public void setHorizontalVelocityWithUncertainty (boolean value) {
      setHorizontalVelocityWithUncertainty (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for HorizontalWithVerticalVelocityAndUncertainty
    */
   public Asn1Boolean getHorizontalWithVerticalVelocityAndUncertainty () {
      return horizontalWithVerticalVelocityAndUncertainty;
   }

   public void setHorizontalWithVerticalVelocityAndUncertainty (Asn1Boolean value) {
      this.horizontalWithVerticalVelocityAndUncertainty = value;
   }

   public void setHorizontalWithVerticalVelocityAndUncertainty (boolean value) {
      setHorizontalWithVerticalVelocityAndUncertainty (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return horizontalVelocity;
         case 1: return horizontalWithVerticalVelocity;
         case 2: return horizontalVelocityWithUncertainty;
         case 3: return horizontalWithVerticalVelocityAndUncertainty;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "horizontalVelocity";
         case 1: return "horizontalWithVerticalVelocity";
         case 2: return "horizontalVelocityWithUncertainty";
         case 3: return "horizontalWithVerticalVelocityAndUncertainty";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode horizontalVelocity

      buffer.getContext().eventDispatcher.startElement("horizontalVelocity", -1);

      horizontalVelocity = new Asn1Boolean();
      horizontalVelocity.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("horizontalVelocity", -1);

      // decode horizontalWithVerticalVelocity

      buffer.getContext().eventDispatcher.startElement("horizontalWithVerticalVelocity", -1);

      horizontalWithVerticalVelocity = new Asn1Boolean();
      horizontalWithVerticalVelocity.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("horizontalWithVerticalVelocity", -1);

      // decode horizontalVelocityWithUncertainty

      buffer.getContext().eventDispatcher.startElement("horizontalVelocityWithUncertainty", -1);

      horizontalVelocityWithUncertainty = new Asn1Boolean();
      horizontalVelocityWithUncertainty.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("horizontalVelocityWithUncertainty", -1);

      // decode horizontalWithVerticalVelocityAndUncertainty

      buffer.getContext().eventDispatcher.startElement("horizontalWithVerticalVelocityAndUncertainty", -1);

      horizontalWithVerticalVelocityAndUncertainty = new Asn1Boolean();
      horizontalWithVerticalVelocityAndUncertainty.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("horizontalWithVerticalVelocityAndUncertainty", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode horizontalVelocity

      if (horizontalVelocity != null) {
         buffer.getContext().eventDispatcher.startElement("horizontalVelocity", -1);

         horizontalVelocity.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("horizontalVelocity", -1);
      }
      else throw new Asn1MissingRequiredException ("horizontalVelocity");

      // encode horizontalWithVerticalVelocity

      if (horizontalWithVerticalVelocity != null) {
         buffer.getContext().eventDispatcher.startElement("horizontalWithVerticalVelocity", -1);

         horizontalWithVerticalVelocity.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("horizontalWithVerticalVelocity", -1);
      }
      else throw new Asn1MissingRequiredException ("horizontalWithVerticalVelocity");

      // encode horizontalVelocityWithUncertainty

      if (horizontalVelocityWithUncertainty != null) {
         buffer.getContext().eventDispatcher.startElement("horizontalVelocityWithUncertainty", -1);

         horizontalVelocityWithUncertainty.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("horizontalVelocityWithUncertainty", -1);
      }
      else throw new Asn1MissingRequiredException ("horizontalVelocityWithUncertainty");

      // encode horizontalWithVerticalVelocityAndUncertainty

      if (horizontalWithVerticalVelocityAndUncertainty != null) {
         buffer.getContext().eventDispatcher.startElement("horizontalWithVerticalVelocityAndUncertainty", -1);

         horizontalWithVerticalVelocityAndUncertainty.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("horizontalWithVerticalVelocityAndUncertainty", -1);
      }
      else throw new Asn1MissingRequiredException ("horizontalWithVerticalVelocityAndUncertainty");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
