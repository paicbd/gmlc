/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class OTDOA_ProvideAssistanceData extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "OTDOA-ProvideAssistanceData";
   }

   protected OTDOA_ReferenceCellInfo otdoa_ReferenceCellInfo;  // optional
   protected OTDOA_NeighbourCellInfoList otdoa_NeighbourCellInfo;  // optional
   protected OTDOA_Error otdoa_Error;  // optional
   protected OTDOA_ReferenceCellInfoNB_r14 otdoa_ReferenceCellInfoNB_r14;  // optional
   protected OTDOA_NeighbourCellInfoListNB_r14 otdoa_NeighbourCellInfoNB_r14;  // optional
   protected Asn1OpenExt extElem1;

   public OTDOA_ProvideAssistanceData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public OTDOA_ProvideAssistanceData (
      OTDOA_ReferenceCellInfo otdoa_ReferenceCellInfo_,
      OTDOA_NeighbourCellInfoList otdoa_NeighbourCellInfo_,
      OTDOA_Error otdoa_Error_,
      OTDOA_ReferenceCellInfoNB_r14 otdoa_ReferenceCellInfoNB_r14_,
      OTDOA_NeighbourCellInfoListNB_r14 otdoa_NeighbourCellInfoNB_r14_
   ) throws Asn1Exception {
      super();
      setOtdoa_ReferenceCellInfo (otdoa_ReferenceCellInfo_);
      setOtdoa_NeighbourCellInfo (otdoa_NeighbourCellInfo_);
      setOtdoa_Error (otdoa_Error_);
      setOtdoa_ReferenceCellInfoNB_r14 (otdoa_ReferenceCellInfoNB_r14_);
      setOtdoa_NeighbourCellInfoNB_r14 (otdoa_NeighbourCellInfoNB_r14_);
   }

   public void init () {
      otdoa_ReferenceCellInfo = null;
      otdoa_NeighbourCellInfo = null;
      otdoa_Error = null;
      otdoa_ReferenceCellInfoNB_r14 = null;
      otdoa_NeighbourCellInfoNB_r14 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof OTDOA_ProvideAssistanceData) ) return false;

      OTDOA_ProvideAssistanceData rhs = (OTDOA_ProvideAssistanceData) obj;

      if (otdoa_ReferenceCellInfo == null) {
         if (rhs.otdoa_ReferenceCellInfo != null) return false;
      }
      else {
         if (!otdoa_ReferenceCellInfo.equals(rhs.otdoa_ReferenceCellInfo)) {
            return false;
         }
      }

      if (otdoa_NeighbourCellInfo == null) {
         if (rhs.otdoa_NeighbourCellInfo != null) return false;
      }
      else {
         if (!otdoa_NeighbourCellInfo.equals(rhs.otdoa_NeighbourCellInfo)) {
            return false;
         }
      }

      if (otdoa_Error == null) {
         if (rhs.otdoa_Error != null) return false;
      }
      else {
         if (!otdoa_Error.equals(rhs.otdoa_Error)) {
            return false;
         }
      }

      if (otdoa_ReferenceCellInfoNB_r14 == null) {
         if (rhs.otdoa_ReferenceCellInfoNB_r14 != null) return false;
      }
      else {
         if (!otdoa_ReferenceCellInfoNB_r14.equals(rhs.otdoa_ReferenceCellInfoNB_r14)) {
            return false;
         }
      }

      if (otdoa_NeighbourCellInfoNB_r14 == null) {
         if (rhs.otdoa_NeighbourCellInfoNB_r14 != null) return false;
      }
      else {
         if (!otdoa_NeighbourCellInfoNB_r14.equals(rhs.otdoa_NeighbourCellInfoNB_r14)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (otdoa_ReferenceCellInfo != null) __code = 31*__code + otdoa_ReferenceCellInfo.hashCode();
      if (otdoa_NeighbourCellInfo != null) __code = 31*__code + otdoa_NeighbourCellInfo.hashCode();
      if (otdoa_Error != null) __code = 31*__code + otdoa_Error.hashCode();
      if (otdoa_ReferenceCellInfoNB_r14 != null) __code = 31*__code + otdoa_ReferenceCellInfoNB_r14.hashCode();
      if (otdoa_NeighbourCellInfoNB_r14 != null) __code = 31*__code + otdoa_NeighbourCellInfoNB_r14.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Otdoa_ReferenceCellInfo
    */
   public OTDOA_ReferenceCellInfo getOtdoa_ReferenceCellInfo () {
      return otdoa_ReferenceCellInfo;
   }

   public void setOtdoa_ReferenceCellInfo (OTDOA_ReferenceCellInfo value) {
      this.otdoa_ReferenceCellInfo = value;
   }

   public boolean hasOtdoa_ReferenceCellInfo () {
      return (otdoa_ReferenceCellInfo != null);
   }

   /**
    * Accessor/mutator methods for Otdoa_NeighbourCellInfo
    */
   public OTDOA_NeighbourCellInfoList getOtdoa_NeighbourCellInfo () {
      return otdoa_NeighbourCellInfo;
   }

   public void setOtdoa_NeighbourCellInfo (OTDOA_NeighbourCellInfoList value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 3))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.otdoa_NeighbourCellInfo = value;
   }

   public boolean hasOtdoa_NeighbourCellInfo () {
      return (otdoa_NeighbourCellInfo != null);
   }

   /**
    * Accessor/mutator methods for Otdoa_Error
    */
   public OTDOA_Error getOtdoa_Error () {
      return otdoa_Error;
   }

   public void setOtdoa_Error (OTDOA_Error value) {
      this.otdoa_Error = value;
   }

   public boolean hasOtdoa_Error () {
      return (otdoa_Error != null);
   }

   /**
    * Accessor/mutator methods for Otdoa_ReferenceCellInfoNB_r14
    */
   public OTDOA_ReferenceCellInfoNB_r14 getOtdoa_ReferenceCellInfoNB_r14 () {
      return otdoa_ReferenceCellInfoNB_r14;
   }

   public void setOtdoa_ReferenceCellInfoNB_r14 (OTDOA_ReferenceCellInfoNB_r14 value) {
      this.otdoa_ReferenceCellInfoNB_r14 = value;
   }

   public boolean hasOtdoa_ReferenceCellInfoNB_r14 () {
      return (otdoa_ReferenceCellInfoNB_r14 != null);
   }

   /**
    * Accessor/mutator methods for Otdoa_NeighbourCellInfoNB_r14
    */
   public OTDOA_NeighbourCellInfoListNB_r14 getOtdoa_NeighbourCellInfoNB_r14 () {
      return otdoa_NeighbourCellInfoNB_r14;
   }

   public void setOtdoa_NeighbourCellInfoNB_r14 (OTDOA_NeighbourCellInfoListNB_r14 value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 72))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.otdoa_NeighbourCellInfoNB_r14 = value;
   }

   public boolean hasOtdoa_NeighbourCellInfoNB_r14 () {
      return (otdoa_NeighbourCellInfoNB_r14 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return otdoa_ReferenceCellInfo;
         case 1: return otdoa_NeighbourCellInfo;
         case 2: return otdoa_Error;
         case 3: return otdoa_ReferenceCellInfoNB_r14;
         case 4: return otdoa_NeighbourCellInfoNB_r14;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "otdoa-ReferenceCellInfo";
         case 1: return "otdoa-NeighbourCellInfo";
         case 2: return "otdoa-Error";
         case 3: return "otdoa-ReferenceCellInfoNB-r14";
         case 4: return "otdoa-NeighbourCellInfoNB-r14";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean otdoa_ReferenceCellInfoPresent = buffer.decodeBit ("otdoa_ReferenceCellInfoPresent");
      boolean otdoa_NeighbourCellInfoPresent = buffer.decodeBit ("otdoa_NeighbourCellInfoPresent");
      boolean otdoa_ErrorPresent = buffer.decodeBit ("otdoa_ErrorPresent");

      // decode otdoa_ReferenceCellInfo

      if (otdoa_ReferenceCellInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("otdoa_ReferenceCellInfo", -1);

         otdoa_ReferenceCellInfo = new OTDOA_ReferenceCellInfo();
         otdoa_ReferenceCellInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("otdoa_ReferenceCellInfo", -1);
      }
      else {
         otdoa_ReferenceCellInfo = null;
      }

      // decode otdoa_NeighbourCellInfo

      if (otdoa_NeighbourCellInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("otdoa_NeighbourCellInfo", -1);

         otdoa_NeighbourCellInfo = new OTDOA_NeighbourCellInfoList();
         otdoa_NeighbourCellInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("otdoa_NeighbourCellInfo", -1);
      }
      else {
         otdoa_NeighbourCellInfo = null;
      }

      // decode otdoa_Error

      if (otdoa_ErrorPresent) {
         buffer.getContext().eventDispatcher.startElement("otdoa_Error", -1);

         otdoa_Error = new OTDOA_Error();
         otdoa_Error.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("otdoa_Error", -1);
      }
      else {
         otdoa_Error = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("otdoa_ReferenceCellInfoNB_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("otdoa_NeighbourCellInfoNB_r14Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode otdoa_ReferenceCellInfoNB_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("otdoa_ReferenceCellInfoNB_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            otdoa_ReferenceCellInfoNB_r14 = new OTDOA_ReferenceCellInfoNB_r14();
            otdoa_ReferenceCellInfoNB_r14.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("otdoa_ReferenceCellInfoNB_r14", -1);

         }
         else {
            otdoa_ReferenceCellInfoNB_r14 = null;
         }

         // decode otdoa_NeighbourCellInfoNB_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("otdoa_NeighbourCellInfoNB_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            otdoa_NeighbourCellInfoNB_r14 = new OTDOA_NeighbourCellInfoListNB_r14();
            otdoa_NeighbourCellInfoNB_r14.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("otdoa_NeighbourCellInfoNB_r14", -1);

         }
         else {
            otdoa_NeighbourCellInfoNB_r14 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((otdoa_ReferenceCellInfoNB_r14 != null) ||
      (otdoa_NeighbourCellInfoNB_r14 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((otdoa_ReferenceCellInfo != null), null);
      buffer.encodeBit ((otdoa_NeighbourCellInfo != null), null);
      buffer.encodeBit ((otdoa_Error != null), null);

      // encode otdoa_ReferenceCellInfo

      if (otdoa_ReferenceCellInfo != null) {
         buffer.getContext().eventDispatcher.startElement("otdoa_ReferenceCellInfo", -1);

         otdoa_ReferenceCellInfo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("otdoa_ReferenceCellInfo", -1);
      }

      // encode otdoa_NeighbourCellInfo

      if (otdoa_NeighbourCellInfo != null) {
         buffer.getContext().eventDispatcher.startElement("otdoa_NeighbourCellInfo", -1);

         otdoa_NeighbourCellInfo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("otdoa_NeighbourCellInfo", -1);
      }

      // encode otdoa_Error

      if (otdoa_Error != null) {
         buffer.getContext().eventDispatcher.startElement("otdoa_Error", -1);

         otdoa_Error.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("otdoa_Error", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 2;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((otdoa_ReferenceCellInfoNB_r14 != null), null);
         buffer.encodeBit ((otdoa_NeighbourCellInfoNB_r14 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // otdoa_ReferenceCellInfoNB_r14

         if (otdoa_ReferenceCellInfoNB_r14 != null) {
            buffer.reset();
            otdoa_ReferenceCellInfoNB_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("otdoa_ReferenceCellInfoNB_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("otdoa_ReferenceCellInfoNB_r14", -1);
         }

         // otdoa_NeighbourCellInfoNB_r14

         if (otdoa_NeighbourCellInfoNB_r14 != null) {
            buffer.reset();
            otdoa_NeighbourCellInfoNB_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("otdoa_NeighbourCellInfoNB_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("otdoa_NeighbourCellInfoNB_r14", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
