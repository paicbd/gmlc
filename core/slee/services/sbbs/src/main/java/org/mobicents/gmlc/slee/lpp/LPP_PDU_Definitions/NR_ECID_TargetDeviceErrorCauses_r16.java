/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NR_ECID_TargetDeviceErrorCauses_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "NR-ECID-TargetDeviceErrorCauses-r16";
   }

   protected NR_ECID_TargetDeviceErrorCauses_r16_cause_r16 cause_r16 = null;
   protected Asn1Null ss_RSRPMeasurementNotPossible_r16;  // optional
   protected Asn1Null ss_RSRQMeasurementNotPossible_r16;  // optional
   protected Asn1Null csi_RSRPMeasurementNotPossible_r16;  // optional
   protected Asn1Null csi_RSRQMeasurementNotPossible_r16;  // optional
   protected Asn1OpenExt extElem1;

   public NR_ECID_TargetDeviceErrorCauses_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NR_ECID_TargetDeviceErrorCauses_r16 (
      NR_ECID_TargetDeviceErrorCauses_r16_cause_r16 cause_r16_,
      Asn1Null ss_RSRPMeasurementNotPossible_r16_,
      Asn1Null ss_RSRQMeasurementNotPossible_r16_,
      Asn1Null csi_RSRPMeasurementNotPossible_r16_,
      Asn1Null csi_RSRQMeasurementNotPossible_r16_
   ) {
      super();
      setCause_r16 (cause_r16_);
      setSs_RSRPMeasurementNotPossible_r16 (ss_RSRPMeasurementNotPossible_r16_);
      setSs_RSRQMeasurementNotPossible_r16 (ss_RSRQMeasurementNotPossible_r16_);
      setCsi_RSRPMeasurementNotPossible_r16 (csi_RSRPMeasurementNotPossible_r16_);
      setCsi_RSRQMeasurementNotPossible_r16 (csi_RSRQMeasurementNotPossible_r16_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public NR_ECID_TargetDeviceErrorCauses_r16 (
      NR_ECID_TargetDeviceErrorCauses_r16_cause_r16 cause_r16_
   ) {
      super();
      setCause_r16 (cause_r16_);
   }

   public void init () {
      cause_r16 = null;
      ss_RSRPMeasurementNotPossible_r16 = null;
      ss_RSRQMeasurementNotPossible_r16 = null;
      csi_RSRPMeasurementNotPossible_r16 = null;
      csi_RSRQMeasurementNotPossible_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof NR_ECID_TargetDeviceErrorCauses_r16) ) return false;

      NR_ECID_TargetDeviceErrorCauses_r16 rhs = (NR_ECID_TargetDeviceErrorCauses_r16) obj;

      if (cause_r16 == null) {
         if (rhs.cause_r16 != null) return false;
      }
      else {
         if (!cause_r16.equals(rhs.cause_r16)) {
            return false;
         }
      }

      if (ss_RSRPMeasurementNotPossible_r16 == null) {
         if (rhs.ss_RSRPMeasurementNotPossible_r16 != null) return false;
      }
      else {
         if (!ss_RSRPMeasurementNotPossible_r16.equals(rhs.ss_RSRPMeasurementNotPossible_r16)) {
            return false;
         }
      }

      if (ss_RSRQMeasurementNotPossible_r16 == null) {
         if (rhs.ss_RSRQMeasurementNotPossible_r16 != null) return false;
      }
      else {
         if (!ss_RSRQMeasurementNotPossible_r16.equals(rhs.ss_RSRQMeasurementNotPossible_r16)) {
            return false;
         }
      }

      if (csi_RSRPMeasurementNotPossible_r16 == null) {
         if (rhs.csi_RSRPMeasurementNotPossible_r16 != null) return false;
      }
      else {
         if (!csi_RSRPMeasurementNotPossible_r16.equals(rhs.csi_RSRPMeasurementNotPossible_r16)) {
            return false;
         }
      }

      if (csi_RSRQMeasurementNotPossible_r16 == null) {
         if (rhs.csi_RSRQMeasurementNotPossible_r16 != null) return false;
      }
      else {
         if (!csi_RSRQMeasurementNotPossible_r16.equals(rhs.csi_RSRQMeasurementNotPossible_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (cause_r16 != null) __code = 31*__code + cause_r16.hashCode();
      if (ss_RSRPMeasurementNotPossible_r16 != null) __code = 31*__code + ss_RSRPMeasurementNotPossible_r16.hashCode();
      if (ss_RSRQMeasurementNotPossible_r16 != null) __code = 31*__code + ss_RSRQMeasurementNotPossible_r16.hashCode();
      if (csi_RSRPMeasurementNotPossible_r16 != null) __code = 31*__code + csi_RSRPMeasurementNotPossible_r16.hashCode();
      if (csi_RSRQMeasurementNotPossible_r16 != null) __code = 31*__code + csi_RSRQMeasurementNotPossible_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Cause_r16
    */
   public NR_ECID_TargetDeviceErrorCauses_r16_cause_r16 getCause_r16 () {
      return cause_r16;
   }

   public void setCause_r16 (NR_ECID_TargetDeviceErrorCauses_r16_cause_r16 value) {
      this.cause_r16 = value;
   }

   /**
    * Accessor/mutator methods for Ss_RSRPMeasurementNotPossible_r16
    */
   public Asn1Null getSs_RSRPMeasurementNotPossible_r16 () {
      return ss_RSRPMeasurementNotPossible_r16;
   }

   public void setSs_RSRPMeasurementNotPossible_r16 (Asn1Null value) {
      this.ss_RSRPMeasurementNotPossible_r16 = value;
   }

   public boolean hasSs_RSRPMeasurementNotPossible_r16 () {
      return (ss_RSRPMeasurementNotPossible_r16 != null);
   }

   /**
    * Accessor/mutator methods for Ss_RSRQMeasurementNotPossible_r16
    */
   public Asn1Null getSs_RSRQMeasurementNotPossible_r16 () {
      return ss_RSRQMeasurementNotPossible_r16;
   }

   public void setSs_RSRQMeasurementNotPossible_r16 (Asn1Null value) {
      this.ss_RSRQMeasurementNotPossible_r16 = value;
   }

   public boolean hasSs_RSRQMeasurementNotPossible_r16 () {
      return (ss_RSRQMeasurementNotPossible_r16 != null);
   }

   /**
    * Accessor/mutator methods for Csi_RSRPMeasurementNotPossible_r16
    */
   public Asn1Null getCsi_RSRPMeasurementNotPossible_r16 () {
      return csi_RSRPMeasurementNotPossible_r16;
   }

   public void setCsi_RSRPMeasurementNotPossible_r16 (Asn1Null value) {
      this.csi_RSRPMeasurementNotPossible_r16 = value;
   }

   public boolean hasCsi_RSRPMeasurementNotPossible_r16 () {
      return (csi_RSRPMeasurementNotPossible_r16 != null);
   }

   /**
    * Accessor/mutator methods for Csi_RSRQMeasurementNotPossible_r16
    */
   public Asn1Null getCsi_RSRQMeasurementNotPossible_r16 () {
      return csi_RSRQMeasurementNotPossible_r16;
   }

   public void setCsi_RSRQMeasurementNotPossible_r16 (Asn1Null value) {
      this.csi_RSRQMeasurementNotPossible_r16 = value;
   }

   public boolean hasCsi_RSRQMeasurementNotPossible_r16 () {
      return (csi_RSRQMeasurementNotPossible_r16 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cause_r16;
         case 1: return ss_RSRPMeasurementNotPossible_r16;
         case 2: return ss_RSRQMeasurementNotPossible_r16;
         case 3: return csi_RSRPMeasurementNotPossible_r16;
         case 4: return csi_RSRQMeasurementNotPossible_r16;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cause-r16";
         case 1: return "ss-RSRPMeasurementNotPossible-r16";
         case 2: return "ss-RSRQMeasurementNotPossible-r16";
         case 3: return "csi-RSRPMeasurementNotPossible-r16";
         case 4: return "csi-RSRQMeasurementNotPossible-r16";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean ss_RSRPMeasurementNotPossible_r16Present = buffer.decodeBit ("ss_RSRPMeasurementNotPossible_r16Present");
      boolean ss_RSRQMeasurementNotPossible_r16Present = buffer.decodeBit ("ss_RSRQMeasurementNotPossible_r16Present");
      boolean csi_RSRPMeasurementNotPossible_r16Present = buffer.decodeBit ("csi_RSRPMeasurementNotPossible_r16Present");
      boolean csi_RSRQMeasurementNotPossible_r16Present = buffer.decodeBit ("csi_RSRQMeasurementNotPossible_r16Present");

      // decode cause_r16

      buffer.getContext().eventDispatcher.startElement("cause_r16", -1);

      {
         int tval = NR_ECID_TargetDeviceErrorCauses_r16_cause_r16.decodeEnumValue (buffer);
         cause_r16 = NR_ECID_TargetDeviceErrorCauses_r16_cause_r16.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("cause_r16", -1);

      // decode ss_RSRPMeasurementNotPossible_r16

      if (ss_RSRPMeasurementNotPossible_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ss_RSRPMeasurementNotPossible_r16", -1);

         ss_RSRPMeasurementNotPossible_r16 = Asn1Null.NULL_VALUE;
         ss_RSRPMeasurementNotPossible_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ss_RSRPMeasurementNotPossible_r16", -1);
      }
      else {
         ss_RSRPMeasurementNotPossible_r16 = null;
      }

      // decode ss_RSRQMeasurementNotPossible_r16

      if (ss_RSRQMeasurementNotPossible_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ss_RSRQMeasurementNotPossible_r16", -1);

         ss_RSRQMeasurementNotPossible_r16 = Asn1Null.NULL_VALUE;
         ss_RSRQMeasurementNotPossible_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ss_RSRQMeasurementNotPossible_r16", -1);
      }
      else {
         ss_RSRQMeasurementNotPossible_r16 = null;
      }

      // decode csi_RSRPMeasurementNotPossible_r16

      if (csi_RSRPMeasurementNotPossible_r16Present) {
         buffer.getContext().eventDispatcher.startElement("csi_RSRPMeasurementNotPossible_r16", -1);

         csi_RSRPMeasurementNotPossible_r16 = Asn1Null.NULL_VALUE;
         csi_RSRPMeasurementNotPossible_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_RSRPMeasurementNotPossible_r16", -1);
      }
      else {
         csi_RSRPMeasurementNotPossible_r16 = null;
      }

      // decode csi_RSRQMeasurementNotPossible_r16

      if (csi_RSRQMeasurementNotPossible_r16Present) {
         buffer.getContext().eventDispatcher.startElement("csi_RSRQMeasurementNotPossible_r16", -1);

         csi_RSRQMeasurementNotPossible_r16 = Asn1Null.NULL_VALUE;
         csi_RSRQMeasurementNotPossible_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_RSRQMeasurementNotPossible_r16", -1);
      }
      else {
         csi_RSRQMeasurementNotPossible_r16 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((ss_RSRPMeasurementNotPossible_r16 != null), null);
      buffer.encodeBit ((ss_RSRQMeasurementNotPossible_r16 != null), null);
      buffer.encodeBit ((csi_RSRPMeasurementNotPossible_r16 != null), null);
      buffer.encodeBit ((csi_RSRQMeasurementNotPossible_r16 != null), null);

      // encode cause_r16

      if (cause_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("cause_r16", -1);

         cause_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cause_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("cause_r16");

      // encode ss_RSRPMeasurementNotPossible_r16

      if (ss_RSRPMeasurementNotPossible_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("ss_RSRPMeasurementNotPossible_r16", -1);

         ss_RSRPMeasurementNotPossible_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ss_RSRPMeasurementNotPossible_r16", -1);
      }

      // encode ss_RSRQMeasurementNotPossible_r16

      if (ss_RSRQMeasurementNotPossible_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("ss_RSRQMeasurementNotPossible_r16", -1);

         ss_RSRQMeasurementNotPossible_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ss_RSRQMeasurementNotPossible_r16", -1);
      }

      // encode csi_RSRPMeasurementNotPossible_r16

      if (csi_RSRPMeasurementNotPossible_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("csi_RSRPMeasurementNotPossible_r16", -1);

         csi_RSRPMeasurementNotPossible_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_RSRPMeasurementNotPossible_r16", -1);
      }

      // encode csi_RSRQMeasurementNotPossible_r16

      if (csi_RSRQMeasurementNotPossible_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("csi_RSRQMeasurementNotPossible_r16", -1);

         csi_RSRQMeasurementNotPossible_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_RSRQMeasurementNotPossible_r16", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
