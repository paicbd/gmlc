/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class WlanAPInformation extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "WlanAPInformation";
   }

   protected Asn1BitString apMACAddress;
   protected Asn1Integer apTransmitPower;  // optional
   protected Asn1Integer apAntennaGain;  // optional
   protected Asn1Integer apSignaltoNoise;  // optional
   protected WlanAPInformation_apDeviceType apDeviceType = null;  // optional
   protected Asn1Integer apSignalStrength;  // optional
   protected Asn1Integer apChannelFrequency;  // optional
   protected RTD apRoundTripDelay;  // optional
   protected Asn1Integer setTransmitPower;  // optional
   protected Asn1Integer setAntennaGain;  // optional
   protected Asn1Integer setSignaltoNoise;  // optional
   protected Asn1Integer setSignalStrength;  // optional
   protected ReportedLocation apReportedLocation;  // optional
   protected RepLocation apRepLocation;  // optional
   protected Asn1Integer apSignalStrengthDelta;  // optional
   protected Asn1Integer apSignaltoNoiseDelta;  // optional
   protected Asn1Integer setSignalStrengthDelta;  // optional
   protected Asn1Integer setSignaltoNoiseDelta;  // optional
   protected Asn1Integer operatingClass;  // optional
   protected Asn1OctetString apSSID;  // optional
   protected WlanAPInformation_apPHYType apPHYType = null;  // optional
   protected Asn1BitString setMACAddress;  // optional
   protected Asn1OpenExt extElem1;

   public WlanAPInformation () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public WlanAPInformation (
      Asn1BitString apMACAddress_,
      Asn1Integer apTransmitPower_,
      Asn1Integer apAntennaGain_,
      Asn1Integer apSignaltoNoise_,
      WlanAPInformation_apDeviceType apDeviceType_,
      Asn1Integer apSignalStrength_,
      Asn1Integer apChannelFrequency_,
      RTD apRoundTripDelay_,
      Asn1Integer setTransmitPower_,
      Asn1Integer setAntennaGain_,
      Asn1Integer setSignaltoNoise_,
      Asn1Integer setSignalStrength_,
      ReportedLocation apReportedLocation_,
      RepLocation apRepLocation_,
      Asn1Integer apSignalStrengthDelta_,
      Asn1Integer apSignaltoNoiseDelta_,
      Asn1Integer setSignalStrengthDelta_,
      Asn1Integer setSignaltoNoiseDelta_,
      Asn1Integer operatingClass_,
      Asn1OctetString apSSID_,
      WlanAPInformation_apPHYType apPHYType_,
      Asn1BitString setMACAddress_
   ) throws Asn1Exception {
      super();
      setApMACAddress (apMACAddress_);
      setApTransmitPower (apTransmitPower_);
      setApAntennaGain (apAntennaGain_);
      setApSignaltoNoise (apSignaltoNoise_);
      setApDeviceType (apDeviceType_);
      setApSignalStrength (apSignalStrength_);
      setApChannelFrequency (apChannelFrequency_);
      setApRoundTripDelay (apRoundTripDelay_);
      setSetTransmitPower (setTransmitPower_);
      setSetAntennaGain (setAntennaGain_);
      setSetSignaltoNoise (setSignaltoNoise_);
      setSetSignalStrength (setSignalStrength_);
      setApReportedLocation (apReportedLocation_);
      setApRepLocation (apRepLocation_);
      setApSignalStrengthDelta (apSignalStrengthDelta_);
      setApSignaltoNoiseDelta (apSignaltoNoiseDelta_);
      setSetSignalStrengthDelta (setSignalStrengthDelta_);
      setSetSignaltoNoiseDelta (setSignaltoNoiseDelta_);
      setOperatingClass (operatingClass_);
      setApSSID (apSSID_);
      setApPHYType (apPHYType_);
      setSetMACAddress (setMACAddress_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public WlanAPInformation (
      Asn1BitString apMACAddress_
   ) throws Asn1Exception {
      super();
      setApMACAddress (apMACAddress_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public WlanAPInformation (Asn1BitString apMACAddress_,
      long apTransmitPower_,
      long apAntennaGain_,
      long apSignaltoNoise_,
      WlanAPInformation_apDeviceType apDeviceType_,
      long apSignalStrength_,
      long apChannelFrequency_,
      RTD apRoundTripDelay_,
      long setTransmitPower_,
      long setAntennaGain_,
      long setSignaltoNoise_,
      long setSignalStrength_,
      ReportedLocation apReportedLocation_,
      RepLocation apRepLocation_,
      long apSignalStrengthDelta_,
      long apSignaltoNoiseDelta_,
      long setSignalStrengthDelta_,
      long setSignaltoNoiseDelta_,
      long operatingClass_,
      byte[] apSSID_,
      WlanAPInformation_apPHYType apPHYType_,
      Asn1BitString setMACAddress_
   ) throws Asn1Exception {
      super();
      setApMACAddress (apMACAddress_);
      setApTransmitPower (apTransmitPower_);
      setApAntennaGain (apAntennaGain_);
      setApSignaltoNoise (apSignaltoNoise_);
      setApDeviceType (apDeviceType_);
      setApSignalStrength (apSignalStrength_);
      setApChannelFrequency (apChannelFrequency_);
      setApRoundTripDelay (apRoundTripDelay_);
      setSetTransmitPower (setTransmitPower_);
      setSetAntennaGain (setAntennaGain_);
      setSetSignaltoNoise (setSignaltoNoise_);
      setSetSignalStrength (setSignalStrength_);
      setApReportedLocation (apReportedLocation_);
      setApRepLocation (apRepLocation_);
      setApSignalStrengthDelta (apSignalStrengthDelta_);
      setApSignaltoNoiseDelta (apSignaltoNoiseDelta_);
      setSetSignalStrengthDelta (setSignalStrengthDelta_);
      setSetSignaltoNoiseDelta (setSignaltoNoiseDelta_);
      setOperatingClass (operatingClass_);
      setApSSID (apSSID_);
      setApPHYType (apPHYType_);
      setSetMACAddress (setMACAddress_);
   }

   public void init () {
      apMACAddress = null;
      apTransmitPower = null;
      apAntennaGain = null;
      apSignaltoNoise = null;
      apDeviceType = null;
      apSignalStrength = null;
      apChannelFrequency = null;
      apRoundTripDelay = null;
      setTransmitPower = null;
      setAntennaGain = null;
      setSignaltoNoise = null;
      setSignalStrength = null;
      apReportedLocation = null;
      apRepLocation = null;
      apSignalStrengthDelta = null;
      apSignaltoNoiseDelta = null;
      setSignalStrengthDelta = null;
      setSignaltoNoiseDelta = null;
      operatingClass = null;
      apSSID = null;
      apPHYType = null;
      setMACAddress = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof WlanAPInformation) ) return false;

      WlanAPInformation rhs = (WlanAPInformation) obj;

      if (apMACAddress == null) {
         if (rhs.apMACAddress != null) return false;
      }
      else {
         if (!apMACAddress.equals(rhs.apMACAddress)) {
            return false;
         }
      }

      if (apTransmitPower == null) {
         if (rhs.apTransmitPower != null) return false;
      }
      else {
         if (!apTransmitPower.equals(rhs.apTransmitPower)) {
            return false;
         }
      }

      if (apAntennaGain == null) {
         if (rhs.apAntennaGain != null) return false;
      }
      else {
         if (!apAntennaGain.equals(rhs.apAntennaGain)) {
            return false;
         }
      }

      if (apSignaltoNoise == null) {
         if (rhs.apSignaltoNoise != null) return false;
      }
      else {
         if (!apSignaltoNoise.equals(rhs.apSignaltoNoise)) {
            return false;
         }
      }

      if (apDeviceType == null) {
         if (rhs.apDeviceType != null) return false;
      }
      else {
         if (!apDeviceType.equals(rhs.apDeviceType)) {
            return false;
         }
      }

      if (apSignalStrength == null) {
         if (rhs.apSignalStrength != null) return false;
      }
      else {
         if (!apSignalStrength.equals(rhs.apSignalStrength)) {
            return false;
         }
      }

      if (apChannelFrequency == null) {
         if (rhs.apChannelFrequency != null) return false;
      }
      else {
         if (!apChannelFrequency.equals(rhs.apChannelFrequency)) {
            return false;
         }
      }

      if (apRoundTripDelay == null) {
         if (rhs.apRoundTripDelay != null) return false;
      }
      else {
         if (!apRoundTripDelay.equals(rhs.apRoundTripDelay)) {
            return false;
         }
      }

      if (setTransmitPower == null) {
         if (rhs.setTransmitPower != null) return false;
      }
      else {
         if (!setTransmitPower.equals(rhs.setTransmitPower)) {
            return false;
         }
      }

      if (setAntennaGain == null) {
         if (rhs.setAntennaGain != null) return false;
      }
      else {
         if (!setAntennaGain.equals(rhs.setAntennaGain)) {
            return false;
         }
      }

      if (setSignaltoNoise == null) {
         if (rhs.setSignaltoNoise != null) return false;
      }
      else {
         if (!setSignaltoNoise.equals(rhs.setSignaltoNoise)) {
            return false;
         }
      }

      if (setSignalStrength == null) {
         if (rhs.setSignalStrength != null) return false;
      }
      else {
         if (!setSignalStrength.equals(rhs.setSignalStrength)) {
            return false;
         }
      }

      if (apReportedLocation == null) {
         if (rhs.apReportedLocation != null) return false;
      }
      else {
         if (!apReportedLocation.equals(rhs.apReportedLocation)) {
            return false;
         }
      }

      if (apRepLocation == null) {
         if (rhs.apRepLocation != null) return false;
      }
      else {
         if (!apRepLocation.equals(rhs.apRepLocation)) {
            return false;
         }
      }

      if (apSignalStrengthDelta == null) {
         if (rhs.apSignalStrengthDelta != null) return false;
      }
      else {
         if (!apSignalStrengthDelta.equals(rhs.apSignalStrengthDelta)) {
            return false;
         }
      }

      if (apSignaltoNoiseDelta == null) {
         if (rhs.apSignaltoNoiseDelta != null) return false;
      }
      else {
         if (!apSignaltoNoiseDelta.equals(rhs.apSignaltoNoiseDelta)) {
            return false;
         }
      }

      if (setSignalStrengthDelta == null) {
         if (rhs.setSignalStrengthDelta != null) return false;
      }
      else {
         if (!setSignalStrengthDelta.equals(rhs.setSignalStrengthDelta)) {
            return false;
         }
      }

      if (setSignaltoNoiseDelta == null) {
         if (rhs.setSignaltoNoiseDelta != null) return false;
      }
      else {
         if (!setSignaltoNoiseDelta.equals(rhs.setSignaltoNoiseDelta)) {
            return false;
         }
      }

      if (operatingClass == null) {
         if (rhs.operatingClass != null) return false;
      }
      else {
         if (!operatingClass.equals(rhs.operatingClass)) {
            return false;
         }
      }

      if (apSSID == null) {
         if (rhs.apSSID != null) return false;
      }
      else {
         if (!apSSID.equals(rhs.apSSID)) {
            return false;
         }
      }

      if (apPHYType == null) {
         if (rhs.apPHYType != null) return false;
      }
      else {
         if (!apPHYType.equals(rhs.apPHYType)) {
            return false;
         }
      }

      if (setMACAddress == null) {
         if (rhs.setMACAddress != null) return false;
      }
      else {
         if (!setMACAddress.equals(rhs.setMACAddress)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (apMACAddress != null) __code = 31*__code + apMACAddress.hashCode();
      if (apTransmitPower != null) __code = 31*__code + apTransmitPower.hashCode();
      if (apAntennaGain != null) __code = 31*__code + apAntennaGain.hashCode();
      if (apSignaltoNoise != null) __code = 31*__code + apSignaltoNoise.hashCode();
      if (apDeviceType != null) __code = 31*__code + apDeviceType.hashCode();
      if (apSignalStrength != null) __code = 31*__code + apSignalStrength.hashCode();
      if (apChannelFrequency != null) __code = 31*__code + apChannelFrequency.hashCode();
      if (apRoundTripDelay != null) __code = 31*__code + apRoundTripDelay.hashCode();
      if (setTransmitPower != null) __code = 31*__code + setTransmitPower.hashCode();
      if (setAntennaGain != null) __code = 31*__code + setAntennaGain.hashCode();
      if (setSignaltoNoise != null) __code = 31*__code + setSignaltoNoise.hashCode();
      if (setSignalStrength != null) __code = 31*__code + setSignalStrength.hashCode();
      if (apReportedLocation != null) __code = 31*__code + apReportedLocation.hashCode();
      if (apRepLocation != null) __code = 31*__code + apRepLocation.hashCode();
      if (apSignalStrengthDelta != null) __code = 31*__code + apSignalStrengthDelta.hashCode();
      if (apSignaltoNoiseDelta != null) __code = 31*__code + apSignaltoNoiseDelta.hashCode();
      if (setSignalStrengthDelta != null) __code = 31*__code + setSignalStrengthDelta.hashCode();
      if (setSignaltoNoiseDelta != null) __code = 31*__code + setSignaltoNoiseDelta.hashCode();
      if (operatingClass != null) __code = 31*__code + operatingClass.hashCode();
      if (apSSID != null) __code = 31*__code + apSSID.hashCode();
      if (apPHYType != null) __code = 31*__code + apPHYType.hashCode();
      if (setMACAddress != null) __code = 31*__code + setMACAddress.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for ApMACAddress
    */
   public Asn1BitString getApMACAddress () {
      return apMACAddress;
   }

   public void setApMACAddress (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 48)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.apMACAddress = value;
   }

   /**
    * Accessor/mutator methods for ApTransmitPower
    */
   public Asn1Integer getApTransmitPower () {
      return apTransmitPower;
   }

   public void setApTransmitPower (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -127 && value.value <= 128))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.apTransmitPower = value;
   }

   public void setApTransmitPower (long value) 
      throws Asn1Exception
   {
      setApTransmitPower (new Asn1Integer(value));
   }
   public boolean hasApTransmitPower () {
      return (apTransmitPower != null);
   }

   /**
    * Accessor/mutator methods for ApAntennaGain
    */
   public Asn1Integer getApAntennaGain () {
      return apAntennaGain;
   }

   public void setApAntennaGain (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -127 && value.value <= 128))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.apAntennaGain = value;
   }

   public void setApAntennaGain (long value) 
      throws Asn1Exception
   {
      setApAntennaGain (new Asn1Integer(value));
   }
   public boolean hasApAntennaGain () {
      return (apAntennaGain != null);
   }

   /**
    * Accessor/mutator methods for ApSignaltoNoise
    */
   public Asn1Integer getApSignaltoNoise () {
      return apSignaltoNoise;
   }

   public void setApSignaltoNoise (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -127 && value.value <= 128))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.apSignaltoNoise = value;
   }

   public void setApSignaltoNoise (long value) 
      throws Asn1Exception
   {
      setApSignaltoNoise (new Asn1Integer(value));
   }
   public boolean hasApSignaltoNoise () {
      return (apSignaltoNoise != null);
   }

   /**
    * Accessor/mutator methods for ApDeviceType
    */
   public WlanAPInformation_apDeviceType getApDeviceType () {
      return apDeviceType;
   }

   public void setApDeviceType (WlanAPInformation_apDeviceType value) {
      this.apDeviceType = value;
   }

   public boolean hasApDeviceType () {
      return (apDeviceType != null);
   }

   /**
    * Accessor/mutator methods for ApSignalStrength
    */
   public Asn1Integer getApSignalStrength () {
      return apSignalStrength;
   }

   public void setApSignalStrength (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -127 && value.value <= 128))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.apSignalStrength = value;
   }

   public void setApSignalStrength (long value) 
      throws Asn1Exception
   {
      setApSignalStrength (new Asn1Integer(value));
   }
   public boolean hasApSignalStrength () {
      return (apSignalStrength != null);
   }

   /**
    * Accessor/mutator methods for ApChannelFrequency
    */
   public Asn1Integer getApChannelFrequency () {
      return apChannelFrequency;
   }

   public void setApChannelFrequency (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 256))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.apChannelFrequency = value;
   }

   public void setApChannelFrequency (long value) 
      throws Asn1Exception
   {
      setApChannelFrequency (new Asn1Integer(value));
   }
   public boolean hasApChannelFrequency () {
      return (apChannelFrequency != null);
   }

   /**
    * Accessor/mutator methods for ApRoundTripDelay
    */
   public RTD getApRoundTripDelay () {
      return apRoundTripDelay;
   }

   public void setApRoundTripDelay (RTD value) {
      this.apRoundTripDelay = value;
   }

   public boolean hasApRoundTripDelay () {
      return (apRoundTripDelay != null);
   }

   /**
    * Accessor/mutator methods for SetTransmitPower
    */
   public Asn1Integer getSetTransmitPower () {
      return setTransmitPower;
   }

   public void setSetTransmitPower (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -127 && value.value <= 128))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.setTransmitPower = value;
   }

   public void setSetTransmitPower (long value) 
      throws Asn1Exception
   {
      setSetTransmitPower (new Asn1Integer(value));
   }
   public boolean hasSetTransmitPower () {
      return (setTransmitPower != null);
   }

   /**
    * Accessor/mutator methods for SetAntennaGain
    */
   public Asn1Integer getSetAntennaGain () {
      return setAntennaGain;
   }

   public void setSetAntennaGain (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -127 && value.value <= 128))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.setAntennaGain = value;
   }

   public void setSetAntennaGain (long value) 
      throws Asn1Exception
   {
      setSetAntennaGain (new Asn1Integer(value));
   }
   public boolean hasSetAntennaGain () {
      return (setAntennaGain != null);
   }

   /**
    * Accessor/mutator methods for SetSignaltoNoise
    */
   public Asn1Integer getSetSignaltoNoise () {
      return setSignaltoNoise;
   }

   public void setSetSignaltoNoise (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -127 && value.value <= 128))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.setSignaltoNoise = value;
   }

   public void setSetSignaltoNoise (long value) 
      throws Asn1Exception
   {
      setSetSignaltoNoise (new Asn1Integer(value));
   }
   public boolean hasSetSignaltoNoise () {
      return (setSignaltoNoise != null);
   }

   /**
    * Accessor/mutator methods for SetSignalStrength
    */
   public Asn1Integer getSetSignalStrength () {
      return setSignalStrength;
   }

   public void setSetSignalStrength (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -127 && value.value <= 128))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.setSignalStrength = value;
   }

   public void setSetSignalStrength (long value) 
      throws Asn1Exception
   {
      setSetSignalStrength (new Asn1Integer(value));
   }
   public boolean hasSetSignalStrength () {
      return (setSignalStrength != null);
   }

   /**
    * Accessor/mutator methods for ApReportedLocation
    */
   public ReportedLocation getApReportedLocation () {
      return apReportedLocation;
   }

   public void setApReportedLocation (ReportedLocation value) {
      this.apReportedLocation = value;
   }

   public boolean hasApReportedLocation () {
      return (apReportedLocation != null);
   }

   /**
    * Accessor/mutator methods for ApRepLocation
    */
   public RepLocation getApRepLocation () {
      return apRepLocation;
   }

   public void setApRepLocation (RepLocation value) {
      this.apRepLocation = value;
   }

   public boolean hasApRepLocation () {
      return (apRepLocation != null);
   }

   /**
    * Accessor/mutator methods for ApSignalStrengthDelta
    */
   public Asn1Integer getApSignalStrengthDelta () {
      return apSignalStrengthDelta;
   }

   public void setApSignalStrengthDelta (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.apSignalStrengthDelta = value;
   }

   public void setApSignalStrengthDelta (long value) 
      throws Asn1Exception
   {
      setApSignalStrengthDelta (new Asn1Integer(value));
   }
   public boolean hasApSignalStrengthDelta () {
      return (apSignalStrengthDelta != null);
   }

   /**
    * Accessor/mutator methods for ApSignaltoNoiseDelta
    */
   public Asn1Integer getApSignaltoNoiseDelta () {
      return apSignaltoNoiseDelta;
   }

   public void setApSignaltoNoiseDelta (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.apSignaltoNoiseDelta = value;
   }

   public void setApSignaltoNoiseDelta (long value) 
      throws Asn1Exception
   {
      setApSignaltoNoiseDelta (new Asn1Integer(value));
   }
   public boolean hasApSignaltoNoiseDelta () {
      return (apSignaltoNoiseDelta != null);
   }

   /**
    * Accessor/mutator methods for SetSignalStrengthDelta
    */
   public Asn1Integer getSetSignalStrengthDelta () {
      return setSignalStrengthDelta;
   }

   public void setSetSignalStrengthDelta (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.setSignalStrengthDelta = value;
   }

   public void setSetSignalStrengthDelta (long value) 
      throws Asn1Exception
   {
      setSetSignalStrengthDelta (new Asn1Integer(value));
   }
   public boolean hasSetSignalStrengthDelta () {
      return (setSignalStrengthDelta != null);
   }

   /**
    * Accessor/mutator methods for SetSignaltoNoiseDelta
    */
   public Asn1Integer getSetSignaltoNoiseDelta () {
      return setSignaltoNoiseDelta;
   }

   public void setSetSignaltoNoiseDelta (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.setSignaltoNoiseDelta = value;
   }

   public void setSetSignaltoNoiseDelta (long value) 
      throws Asn1Exception
   {
      setSetSignaltoNoiseDelta (new Asn1Integer(value));
   }
   public boolean hasSetSignaltoNoiseDelta () {
      return (setSignaltoNoiseDelta != null);
   }

   /**
    * Accessor/mutator methods for OperatingClass
    */
   public Asn1Integer getOperatingClass () {
      return operatingClass;
   }

   public void setOperatingClass (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.operatingClass = value;
   }

   public void setOperatingClass (long value) 
      throws Asn1Exception
   {
      setOperatingClass (new Asn1Integer(value));
   }
   public boolean hasOperatingClass () {
      return (operatingClass != null);
   }

   /**
    * Accessor/mutator methods for ApSSID
    */
   public Asn1OctetString getApSSID () {
      return apSSID;
   }

   public void setApSSID (Asn1OctetString value) 
      throws Asn1Exception
   {
      if (!((value.getLength() >= 1 && value.getLength() <= 32))) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.apSSID = value;
   }

   public void setApSSID (byte[] value) 
      throws Asn1Exception
   {
      setApSSID (new Asn1OctetString(value));
   }
   public boolean hasApSSID () {
      return (apSSID != null);
   }

   /**
    * Accessor/mutator methods for ApPHYType
    */
   public WlanAPInformation_apPHYType getApPHYType () {
      return apPHYType;
   }

   public void setApPHYType (WlanAPInformation_apPHYType value) {
      this.apPHYType = value;
   }

   public boolean hasApPHYType () {
      return (apPHYType != null);
   }

   /**
    * Accessor/mutator methods for SetMACAddress
    */
   public Asn1BitString getSetMACAddress () {
      return setMACAddress;
   }

   public void setSetMACAddress (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 48)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.setMACAddress = value;
   }

   public boolean hasSetMACAddress () {
      return (setMACAddress != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 23; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return apMACAddress;
         case 1: return apTransmitPower;
         case 2: return apAntennaGain;
         case 3: return apSignaltoNoise;
         case 4: return apDeviceType;
         case 5: return apSignalStrength;
         case 6: return apChannelFrequency;
         case 7: return apRoundTripDelay;
         case 8: return setTransmitPower;
         case 9: return setAntennaGain;
         case 10: return setSignaltoNoise;
         case 11: return setSignalStrength;
         case 12: return apReportedLocation;
         case 13: return apRepLocation;
         case 14: return apSignalStrengthDelta;
         case 15: return apSignaltoNoiseDelta;
         case 16: return setSignalStrengthDelta;
         case 17: return setSignaltoNoiseDelta;
         case 18: return operatingClass;
         case 19: return apSSID;
         case 20: return apPHYType;
         case 21: return setMACAddress;
         case 22: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "apMACAddress";
         case 1: return "apTransmitPower";
         case 2: return "apAntennaGain";
         case 3: return "apSignaltoNoise";
         case 4: return "apDeviceType";
         case 5: return "apSignalStrength";
         case 6: return "apChannelFrequency";
         case 7: return "apRoundTripDelay";
         case 8: return "setTransmitPower";
         case 9: return "setAntennaGain";
         case 10: return "setSignaltoNoise";
         case 11: return "setSignalStrength";
         case 12: return "apReportedLocation";
         case 13: return "apRepLocation";
         case 14: return "apSignalStrengthDelta";
         case 15: return "apSignaltoNoiseDelta";
         case 16: return "setSignalStrengthDelta";
         case 17: return "setSignaltoNoiseDelta";
         case 18: return "operatingClass";
         case 19: return "apSSID";
         case 20: return "apPHYType";
         case 21: return "setMACAddress";
         case 22: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean apTransmitPowerPresent = buffer.decodeBit ("apTransmitPowerPresent");
      boolean apAntennaGainPresent = buffer.decodeBit ("apAntennaGainPresent");
      boolean apSignaltoNoisePresent = buffer.decodeBit ("apSignaltoNoisePresent");
      boolean apDeviceTypePresent = buffer.decodeBit ("apDeviceTypePresent");
      boolean apSignalStrengthPresent = buffer.decodeBit ("apSignalStrengthPresent");
      boolean apChannelFrequencyPresent = buffer.decodeBit ("apChannelFrequencyPresent");
      boolean apRoundTripDelayPresent = buffer.decodeBit ("apRoundTripDelayPresent");
      boolean setTransmitPowerPresent = buffer.decodeBit ("setTransmitPowerPresent");
      boolean setAntennaGainPresent = buffer.decodeBit ("setAntennaGainPresent");
      boolean setSignaltoNoisePresent = buffer.decodeBit ("setSignaltoNoisePresent");
      boolean setSignalStrengthPresent = buffer.decodeBit ("setSignalStrengthPresent");
      boolean apReportedLocationPresent = buffer.decodeBit ("apReportedLocationPresent");

      // decode apMACAddress

      buffer.getContext().eventDispatcher.startElement("apMACAddress", -1);

      apMACAddress = new Asn1BitString();
      apMACAddress.decode (buffer, 48, 48);
      buffer.getContext().eventDispatcher.endElement("apMACAddress", -1);

      // decode apTransmitPower

      if (apTransmitPowerPresent) {
         buffer.getContext().eventDispatcher.startElement("apTransmitPower", -1);

         apTransmitPower = new Asn1Integer();
         apTransmitPower.decode (buffer, -127, 128);
         buffer.getContext().eventDispatcher.endElement("apTransmitPower", -1);
      }
      else {
         apTransmitPower = null;
      }

      // decode apAntennaGain

      if (apAntennaGainPresent) {
         buffer.getContext().eventDispatcher.startElement("apAntennaGain", -1);

         apAntennaGain = new Asn1Integer();
         apAntennaGain.decode (buffer, -127, 128);
         buffer.getContext().eventDispatcher.endElement("apAntennaGain", -1);
      }
      else {
         apAntennaGain = null;
      }

      // decode apSignaltoNoise

      if (apSignaltoNoisePresent) {
         buffer.getContext().eventDispatcher.startElement("apSignaltoNoise", -1);

         apSignaltoNoise = new Asn1Integer();
         apSignaltoNoise.decode (buffer, -127, 128);
         buffer.getContext().eventDispatcher.endElement("apSignaltoNoise", -1);
      }
      else {
         apSignaltoNoise = null;
      }

      // decode apDeviceType

      if (apDeviceTypePresent) {
         buffer.getContext().eventDispatcher.startElement("apDeviceType", -1);

         int tval = WlanAPInformation_apDeviceType.decodeEnumValue (buffer);
         apDeviceType = WlanAPInformation_apDeviceType.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("apDeviceType", -1);
      }
      else {
         apDeviceType = null;
      }

      // decode apSignalStrength

      if (apSignalStrengthPresent) {
         buffer.getContext().eventDispatcher.startElement("apSignalStrength", -1);

         apSignalStrength = new Asn1Integer();
         apSignalStrength.decode (buffer, -127, 128);
         buffer.getContext().eventDispatcher.endElement("apSignalStrength", -1);
      }
      else {
         apSignalStrength = null;
      }

      // decode apChannelFrequency

      if (apChannelFrequencyPresent) {
         buffer.getContext().eventDispatcher.startElement("apChannelFrequency", -1);

         apChannelFrequency = new Asn1Integer();
         apChannelFrequency.decode (buffer, 0, 256);
         buffer.getContext().eventDispatcher.endElement("apChannelFrequency", -1);
      }
      else {
         apChannelFrequency = null;
      }

      // decode apRoundTripDelay

      if (apRoundTripDelayPresent) {
         buffer.getContext().eventDispatcher.startElement("apRoundTripDelay", -1);

         apRoundTripDelay = new RTD();
         apRoundTripDelay.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("apRoundTripDelay", -1);
      }
      else {
         apRoundTripDelay = null;
      }

      // decode setTransmitPower

      if (setTransmitPowerPresent) {
         buffer.getContext().eventDispatcher.startElement("setTransmitPower", -1);

         setTransmitPower = new Asn1Integer();
         setTransmitPower.decode (buffer, -127, 128);
         buffer.getContext().eventDispatcher.endElement("setTransmitPower", -1);
      }
      else {
         setTransmitPower = null;
      }

      // decode setAntennaGain

      if (setAntennaGainPresent) {
         buffer.getContext().eventDispatcher.startElement("setAntennaGain", -1);

         setAntennaGain = new Asn1Integer();
         setAntennaGain.decode (buffer, -127, 128);
         buffer.getContext().eventDispatcher.endElement("setAntennaGain", -1);
      }
      else {
         setAntennaGain = null;
      }

      // decode setSignaltoNoise

      if (setSignaltoNoisePresent) {
         buffer.getContext().eventDispatcher.startElement("setSignaltoNoise", -1);

         setSignaltoNoise = new Asn1Integer();
         setSignaltoNoise.decode (buffer, -127, 128);
         buffer.getContext().eventDispatcher.endElement("setSignaltoNoise", -1);
      }
      else {
         setSignaltoNoise = null;
      }

      // decode setSignalStrength

      if (setSignalStrengthPresent) {
         buffer.getContext().eventDispatcher.startElement("setSignalStrength", -1);

         setSignalStrength = new Asn1Integer();
         setSignalStrength.decode (buffer, -127, 128);
         buffer.getContext().eventDispatcher.endElement("setSignalStrength", -1);
      }
      else {
         setSignalStrength = null;
      }

      // decode apReportedLocation

      if (apReportedLocationPresent) {
         buffer.getContext().eventDispatcher.startElement("apReportedLocation", -1);

         apReportedLocation = new ReportedLocation();
         apReportedLocation.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("apReportedLocation", -1);
      }
      else {
         apReportedLocation = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("apRepLocationPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("apSignalStrengthDeltaPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("apSignaltoNoiseDeltaPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("setSignalStrengthDeltaPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("setSignaltoNoiseDeltaPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("operatingClassPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("apSSIDPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("apPHYTypePresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("setMACAddressPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode apRepLocation

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("apRepLocation", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            apRepLocation = new RepLocation();
            apRepLocation.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("apRepLocation", -1);

         }
         else {
            apRepLocation = null;
         }

         // decode apSignalStrengthDelta

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("apSignalStrengthDelta", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            apSignalStrengthDelta = new Asn1Integer();
            apSignalStrengthDelta.decode (buffer, 0, 1);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("apSignalStrengthDelta", -1);

         }
         else {
            apSignalStrengthDelta = null;
         }

         // decode apSignaltoNoiseDelta

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("apSignaltoNoiseDelta", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            apSignaltoNoiseDelta = new Asn1Integer();
            apSignaltoNoiseDelta.decode (buffer, 0, 1);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("apSignaltoNoiseDelta", -1);

         }
         else {
            apSignaltoNoiseDelta = null;
         }

         // decode setSignalStrengthDelta

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("setSignalStrengthDelta", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            setSignalStrengthDelta = new Asn1Integer();
            setSignalStrengthDelta.decode (buffer, 0, 1);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("setSignalStrengthDelta", -1);

         }
         else {
            setSignalStrengthDelta = null;
         }

         // decode setSignaltoNoiseDelta

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("setSignaltoNoiseDelta", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            setSignaltoNoiseDelta = new Asn1Integer();
            setSignaltoNoiseDelta.decode (buffer, 0, 1);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("setSignaltoNoiseDelta", -1);

         }
         else {
            setSignaltoNoiseDelta = null;
         }

         // decode operatingClass

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("operatingClass", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            operatingClass = new Asn1Integer();
            operatingClass.decode (buffer, 0, 255);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("operatingClass", -1);

         }
         else {
            operatingClass = null;
         }

         // decode apSSID

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("apSSID", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            apSSID = new Asn1OctetString();
            apSSID.decode (buffer, 1, 32);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("apSSID", -1);

         }
         else {
            apSSID = null;
         }

         // decode apPHYType

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("apPHYType", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = WlanAPInformation_apPHYType.decodeEnumValue (buffer);
               apPHYType = WlanAPInformation_apPHYType.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("apPHYType", -1);

         }
         else {
            apPHYType = null;
         }

         // decode setMACAddress

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("setMACAddress", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            setMACAddress = new Asn1BitString();
            setMACAddress.decode (buffer, 48, 48);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("setMACAddress", -1);

         }
         else {
            setMACAddress = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((apRepLocation != null) ||
      (apSignalStrengthDelta != null) ||
      (apSignaltoNoiseDelta != null) ||
      (setSignalStrengthDelta != null) ||
      (setSignaltoNoiseDelta != null) ||
      (operatingClass != null) ||
      (apSSID != null) ||
      (apPHYType != null) ||
      (setMACAddress != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((apTransmitPower != null), null);
      buffer.encodeBit ((apAntennaGain != null), null);
      buffer.encodeBit ((apSignaltoNoise != null), null);
      buffer.encodeBit ((apDeviceType != null), null);
      buffer.encodeBit ((apSignalStrength != null), null);
      buffer.encodeBit ((apChannelFrequency != null), null);
      buffer.encodeBit ((apRoundTripDelay != null), null);
      buffer.encodeBit ((setTransmitPower != null), null);
      buffer.encodeBit ((setAntennaGain != null), null);
      buffer.encodeBit ((setSignaltoNoise != null), null);
      buffer.encodeBit ((setSignalStrength != null), null);
      buffer.encodeBit ((apReportedLocation != null), null);

      // encode apMACAddress

      if (apMACAddress != null) {
         buffer.getContext().eventDispatcher.startElement("apMACAddress", -1);

         apMACAddress.encode (buffer, 48, 48);

         buffer.getContext().eventDispatcher.endElement("apMACAddress", -1);
      }
      else throw new Asn1MissingRequiredException ("apMACAddress");

      // encode apTransmitPower

      if (apTransmitPower != null) {
         buffer.getContext().eventDispatcher.startElement("apTransmitPower", -1);

         apTransmitPower.encode (buffer, -127, 128);

         buffer.getContext().eventDispatcher.endElement("apTransmitPower", -1);
      }

      // encode apAntennaGain

      if (apAntennaGain != null) {
         buffer.getContext().eventDispatcher.startElement("apAntennaGain", -1);

         apAntennaGain.encode (buffer, -127, 128);

         buffer.getContext().eventDispatcher.endElement("apAntennaGain", -1);
      }

      // encode apSignaltoNoise

      if (apSignaltoNoise != null) {
         buffer.getContext().eventDispatcher.startElement("apSignaltoNoise", -1);

         apSignaltoNoise.encode (buffer, -127, 128);

         buffer.getContext().eventDispatcher.endElement("apSignaltoNoise", -1);
      }

      // encode apDeviceType

      if (apDeviceType != null) {
         buffer.getContext().eventDispatcher.startElement("apDeviceType", -1);

         apDeviceType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("apDeviceType", -1);
      }

      // encode apSignalStrength

      if (apSignalStrength != null) {
         buffer.getContext().eventDispatcher.startElement("apSignalStrength", -1);

         apSignalStrength.encode (buffer, -127, 128);

         buffer.getContext().eventDispatcher.endElement("apSignalStrength", -1);
      }

      // encode apChannelFrequency

      if (apChannelFrequency != null) {
         buffer.getContext().eventDispatcher.startElement("apChannelFrequency", -1);

         apChannelFrequency.encode (buffer, 0, 256);

         buffer.getContext().eventDispatcher.endElement("apChannelFrequency", -1);
      }

      // encode apRoundTripDelay

      if (apRoundTripDelay != null) {
         buffer.getContext().eventDispatcher.startElement("apRoundTripDelay", -1);

         apRoundTripDelay.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("apRoundTripDelay", -1);
      }

      // encode setTransmitPower

      if (setTransmitPower != null) {
         buffer.getContext().eventDispatcher.startElement("setTransmitPower", -1);

         setTransmitPower.encode (buffer, -127, 128);

         buffer.getContext().eventDispatcher.endElement("setTransmitPower", -1);
      }

      // encode setAntennaGain

      if (setAntennaGain != null) {
         buffer.getContext().eventDispatcher.startElement("setAntennaGain", -1);

         setAntennaGain.encode (buffer, -127, 128);

         buffer.getContext().eventDispatcher.endElement("setAntennaGain", -1);
      }

      // encode setSignaltoNoise

      if (setSignaltoNoise != null) {
         buffer.getContext().eventDispatcher.startElement("setSignaltoNoise", -1);

         setSignaltoNoise.encode (buffer, -127, 128);

         buffer.getContext().eventDispatcher.endElement("setSignaltoNoise", -1);
      }

      // encode setSignalStrength

      if (setSignalStrength != null) {
         buffer.getContext().eventDispatcher.startElement("setSignalStrength", -1);

         setSignalStrength.encode (buffer, -127, 128);

         buffer.getContext().eventDispatcher.endElement("setSignalStrength", -1);
      }

      // encode apReportedLocation

      if (apReportedLocation != null) {
         buffer.getContext().eventDispatcher.startElement("apReportedLocation", -1);

         apReportedLocation.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("apReportedLocation", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 9;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((apRepLocation != null), null);
         buffer.encodeBit ((apSignalStrengthDelta != null), null);
         buffer.encodeBit ((apSignaltoNoiseDelta != null), null);
         buffer.encodeBit ((setSignalStrengthDelta != null), null);
         buffer.encodeBit ((setSignaltoNoiseDelta != null), null);
         buffer.encodeBit ((operatingClass != null), null);
         buffer.encodeBit ((apSSID != null), null);
         buffer.encodeBit ((apPHYType != null), null);
         buffer.encodeBit ((setMACAddress != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // apRepLocation

         if (apRepLocation != null) {
            buffer.reset();
            apRepLocation.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("apRepLocation", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("apRepLocation", -1);
         }

         // apSignalStrengthDelta

         if (apSignalStrengthDelta != null) {
            buffer.reset();
            apSignalStrengthDelta.encode (buffer, 0, 1);
            buffer.getContext().eventDispatcher.startElement("apSignalStrengthDelta", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("apSignalStrengthDelta", -1);
         }

         // apSignaltoNoiseDelta

         if (apSignaltoNoiseDelta != null) {
            buffer.reset();
            apSignaltoNoiseDelta.encode (buffer, 0, 1);
            buffer.getContext().eventDispatcher.startElement("apSignaltoNoiseDelta", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("apSignaltoNoiseDelta", -1);
         }

         // setSignalStrengthDelta

         if (setSignalStrengthDelta != null) {
            buffer.reset();
            setSignalStrengthDelta.encode (buffer, 0, 1);
            buffer.getContext().eventDispatcher.startElement("setSignalStrengthDelta", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("setSignalStrengthDelta", -1);
         }

         // setSignaltoNoiseDelta

         if (setSignaltoNoiseDelta != null) {
            buffer.reset();
            setSignaltoNoiseDelta.encode (buffer, 0, 1);
            buffer.getContext().eventDispatcher.startElement("setSignaltoNoiseDelta", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("setSignaltoNoiseDelta", -1);
         }

         // operatingClass

         if (operatingClass != null) {
            buffer.reset();
            operatingClass.encode (buffer, 0, 255);
            buffer.getContext().eventDispatcher.startElement("operatingClass", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("operatingClass", -1);
         }

         // apSSID

         if (apSSID != null) {
            buffer.reset();
            apSSID.encode (buffer, 1, 32);
            buffer.getContext().eventDispatcher.startElement("apSSID", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("apSSID", -1);
         }

         // apPHYType

         if (apPHYType != null) {
            buffer.reset();
            apPHYType.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("apPHYType", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("apPHYType", -1);
         }

         // setMACAddress

         if (setMACAddress != null) {
            buffer.reset();
            setMACAddress.encode (buffer, 48, 48);
            buffer.getContext().eventDispatcher.startElement("setMACAddress", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("setMACAddress", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
