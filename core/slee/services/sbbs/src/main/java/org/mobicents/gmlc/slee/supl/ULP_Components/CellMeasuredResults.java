/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Components;

import com.objsys.asn1j.runtime.*;

public class CellMeasuredResults extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "CellMeasuredResults";
   }

   protected Asn1Integer cellIdentity;  // optional
   protected CellMeasuredResults_modeSpecificInfo modeSpecificInfo;

   public CellMeasuredResults () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CellMeasuredResults (
      Asn1Integer cellIdentity_,
      CellMeasuredResults_modeSpecificInfo modeSpecificInfo_
   ) throws Asn1Exception {
      super();
      setCellIdentity (cellIdentity_);
      setModeSpecificInfo (modeSpecificInfo_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CellMeasuredResults (
      CellMeasuredResults_modeSpecificInfo modeSpecificInfo_
   ) throws Asn1Exception {
      super();
      setModeSpecificInfo (modeSpecificInfo_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CellMeasuredResults (long cellIdentity_,
      CellMeasuredResults_modeSpecificInfo modeSpecificInfo_
   ) throws Asn1Exception {
      super();
      setCellIdentity (cellIdentity_);
      setModeSpecificInfo (modeSpecificInfo_);
   }

   public void init () {
      cellIdentity = null;
      modeSpecificInfo = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof CellMeasuredResults) ) return false;

      CellMeasuredResults rhs = (CellMeasuredResults) obj;

      if (cellIdentity == null) {
         if (rhs.cellIdentity != null) return false;
      }
      else {
         if (!cellIdentity.equals(rhs.cellIdentity)) {
            return false;
         }
      }

      if (modeSpecificInfo == null) {
         if (rhs.modeSpecificInfo != null) return false;
      }
      else {
         if (!modeSpecificInfo.equals(rhs.modeSpecificInfo)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (cellIdentity != null) __code = 31*__code + cellIdentity.hashCode();
      if (modeSpecificInfo != null) __code = 31*__code + modeSpecificInfo.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for CellIdentity
    */
   public Asn1Integer getCellIdentity () {
      return cellIdentity;
   }

   public void setCellIdentity (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 268435455))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cellIdentity = value;
   }

   public void setCellIdentity (long value) 
      throws Asn1Exception
   {
      setCellIdentity (new Asn1Integer(value));
   }
   public boolean hasCellIdentity () {
      return (cellIdentity != null);
   }

   /**
    * Accessor/mutator methods for ModeSpecificInfo
    */
   public CellMeasuredResults_modeSpecificInfo getModeSpecificInfo () {
      return modeSpecificInfo;
   }

   public void setModeSpecificInfo (CellMeasuredResults_modeSpecificInfo value) {
      this.modeSpecificInfo = value;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cellIdentity;
         case 1: return modeSpecificInfo;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cellIdentity";
         case 1: return "modeSpecificInfo";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean cellIdentityPresent = buffer.decodeBit ("cellIdentityPresent");

      // decode cellIdentity

      if (cellIdentityPresent) {
         buffer.getContext().eventDispatcher.startElement("cellIdentity", -1);

         cellIdentity = new Asn1Integer();
         cellIdentity.decode (buffer, 0, 268435455);
         buffer.getContext().eventDispatcher.endElement("cellIdentity", -1);
      }
      else {
         cellIdentity = null;
      }

      // decode modeSpecificInfo

      buffer.getContext().eventDispatcher.startElement("modeSpecificInfo", -1);

      modeSpecificInfo = new CellMeasuredResults_modeSpecificInfo();
      modeSpecificInfo.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("modeSpecificInfo", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((cellIdentity != null), null);

      // encode cellIdentity

      if (cellIdentity != null) {
         buffer.getContext().eventDispatcher.startElement("cellIdentity", -1);

         cellIdentity.encode (buffer, 0, 268435455);

         buffer.getContext().eventDispatcher.endElement("cellIdentity", -1);
      }

      // encode modeSpecificInfo

      if (modeSpecificInfo != null) {
         buffer.getContext().eventDispatcher.startElement("modeSpecificInfo", -1);

         modeSpecificInfo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("modeSpecificInfo", -1);
      }
      else throw new Asn1MissingRequiredException ("modeSpecificInfo");

   }

}
