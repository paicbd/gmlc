/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NR_TimeStamp_r16_nr_Slot_r16 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _SCS15_R16 = 1;
   public final static byte _SCS30_R16 = 2;
   public final static byte _SCS60_R16 = 3;
   public final static byte _SCS120_R16 = 4;

   public NR_TimeStamp_r16_nr_Slot_r16 () {
      super();
   }

   public NR_TimeStamp_r16_nr_Slot_r16 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _SCS15_R16: return "scs15_r16";
      case _SCS30_R16: return "scs30_r16";
      case _SCS60_R16: return "scs60_r16";
      case _SCS120_R16: return "scs120_r16";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for scs15_r16
    */
   public Asn1Integer getScs15_r16 () {
      return (choiceID == _SCS15_R16) ? (Asn1Integer)element : null;
   }
   public void setScs15_r16 (Asn1Integer value) {
      setElement (_SCS15_R16, value);
   }
   public boolean isScs15_r16 () {
      return (choiceID == _SCS15_R16);
   }

   /**
    * Accessor/mutator methods for scs30_r16
    */
   public Asn1Integer getScs30_r16 () {
      return (choiceID == _SCS30_R16) ? (Asn1Integer)element : null;
   }
   public void setScs30_r16 (Asn1Integer value) {
      setElement (_SCS30_R16, value);
   }
   public boolean isScs30_r16 () {
      return (choiceID == _SCS30_R16);
   }

   /**
    * Accessor/mutator methods for scs60_r16
    */
   public Asn1Integer getScs60_r16 () {
      return (choiceID == _SCS60_R16) ? (Asn1Integer)element : null;
   }
   public void setScs60_r16 (Asn1Integer value) {
      setElement (_SCS60_R16, value);
   }
   public boolean isScs60_r16 () {
      return (choiceID == _SCS60_R16);
   }

   /**
    * Accessor/mutator methods for scs120_r16
    */
   public Asn1Integer getScs120_r16 () {
      return (choiceID == _SCS120_R16) ? (Asn1Integer)element : null;
   }
   public void setScs120_r16 (Asn1Integer value) {
      setElement (_SCS120_R16, value);
   }
   public boolean isScs120_r16 () {
      return (choiceID == _SCS120_R16);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (4, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // scs15_r16
         case 0: { 
            Asn1Integer scs15_r16;
            element = scs15_r16 = new Asn1Integer();
            scs15_r16.decode (buffer, 0, 9);
            break;
         }

         // scs30_r16
         case 1: { 
            Asn1Integer scs30_r16;
            element = scs30_r16 = new Asn1Integer();
            scs30_r16.decode (buffer, 0, 19);
            break;
         }

         // scs60_r16
         case 2: { 
            Asn1Integer scs60_r16;
            element = scs60_r16 = new Asn1Integer();
            scs60_r16.decode (buffer, 0, 39);
            break;
         }

         // scs120_r16
         case 3: { 
            Asn1Integer scs120_r16;
            element = scs120_r16 = new Asn1Integer();
            scs120_r16.decode (buffer, 0, 79);
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // Encode choice index value

      buffer.encodeConsWholeNumber (choiceID - 1, 4, "index");

      buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

      switch (choiceID) {
         // scs15_r16
         case _SCS15_R16:
            Asn1Integer scs15_r16 = (Asn1Integer) element;
            scs15_r16.encode (buffer, 0, 9);
            break;

         // scs30_r16
         case _SCS30_R16:
            Asn1Integer scs30_r16 = (Asn1Integer) element;
            scs30_r16.encode (buffer, 0, 19);
            break;

         // scs60_r16
         case _SCS60_R16:
            Asn1Integer scs60_r16 = (Asn1Integer) element;
            scs60_r16.encode (buffer, 0, 39);
            break;

         // scs120_r16
         case _SCS120_R16:
            Asn1Integer scs120_r16 = (Asn1Integer) element;
            scs120_r16.encode (buffer, 0, 79);
            break;

         default:
         throw new Asn1InvalidChoiceOptionException();
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
