/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class EllipsoidPointWithAltitude_altitudeDirection extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _HEIGHT = 0;
   public static final int _DEPTH = 1;

   // Singleton instances of EllipsoidPointWithAltitude_altitudeDirection
   protected static final EllipsoidPointWithAltitude_altitudeDirection _height = new EllipsoidPointWithAltitude_altitudeDirection(0);
   protected static final EllipsoidPointWithAltitude_altitudeDirection _depth = new EllipsoidPointWithAltitude_altitudeDirection(1);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    */
   protected EllipsoidPointWithAltitude_altitudeDirection (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for height.
    */
   public static EllipsoidPointWithAltitude_altitudeDirection height() {
      return _height;
   }

   /**
    * Singleton accessor method for depth.
    */
   public static EllipsoidPointWithAltitude_altitudeDirection depth() {
      return _depth;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return EllipsoidPointWithAltitude_altitudeDirection.valueOf( EllipsoidPointWithAltitude_altitudeDirection.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static EllipsoidPointWithAltitude_altitudeDirection valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return height();
         case 1: return depth();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (2);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      switch ((int)value) {
         case 0: ui = 0; /* height */break;
         case 1: ui = 1; /* depth */break;
         default:
            throw new Asn1InvalidEnumException (value);
      }

      buffer.encodeConsWholeNumber (ui, 2);
   }

}
