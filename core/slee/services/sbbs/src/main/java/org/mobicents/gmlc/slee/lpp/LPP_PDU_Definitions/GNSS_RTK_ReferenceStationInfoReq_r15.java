/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_RTK_ReferenceStationInfoReq_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-RTK-ReferenceStationInfoReq-r15";
   }

   protected Asn1Boolean antennaDescriptionReq_r15;
   protected Asn1Boolean antennaHeightReq_r15;
   protected Asn1Boolean physicalReferenceStationReq_r15;
   protected GNSS_ReferenceStationID_r15 stationID_r15;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_RTK_ReferenceStationInfoReq_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_RTK_ReferenceStationInfoReq_r15 (
      Asn1Boolean antennaDescriptionReq_r15_,
      Asn1Boolean antennaHeightReq_r15_,
      Asn1Boolean physicalReferenceStationReq_r15_,
      GNSS_ReferenceStationID_r15 stationID_r15_
   ) {
      super();
      setAntennaDescriptionReq_r15 (antennaDescriptionReq_r15_);
      setAntennaHeightReq_r15 (antennaHeightReq_r15_);
      setPhysicalReferenceStationReq_r15 (physicalReferenceStationReq_r15_);
      setStationID_r15 (stationID_r15_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GNSS_RTK_ReferenceStationInfoReq_r15 (
      Asn1Boolean antennaDescriptionReq_r15_,
      Asn1Boolean antennaHeightReq_r15_,
      Asn1Boolean physicalReferenceStationReq_r15_
   ) {
      super();
      setAntennaDescriptionReq_r15 (antennaDescriptionReq_r15_);
      setAntennaHeightReq_r15 (antennaHeightReq_r15_);
      setPhysicalReferenceStationReq_r15 (physicalReferenceStationReq_r15_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GNSS_RTK_ReferenceStationInfoReq_r15 (boolean antennaDescriptionReq_r15_,
      boolean antennaHeightReq_r15_,
      boolean physicalReferenceStationReq_r15_,
      GNSS_ReferenceStationID_r15 stationID_r15_
   ) {
      super();
      setAntennaDescriptionReq_r15 (antennaDescriptionReq_r15_);
      setAntennaHeightReq_r15 (antennaHeightReq_r15_);
      setPhysicalReferenceStationReq_r15 (physicalReferenceStationReq_r15_);
      setStationID_r15 (stationID_r15_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public GNSS_RTK_ReferenceStationInfoReq_r15 (
      boolean antennaDescriptionReq_r15_,
      boolean antennaHeightReq_r15_,
      boolean physicalReferenceStationReq_r15_
   ) {
      super();
      setAntennaDescriptionReq_r15 (antennaDescriptionReq_r15_);
      setAntennaHeightReq_r15 (antennaHeightReq_r15_);
      setPhysicalReferenceStationReq_r15 (physicalReferenceStationReq_r15_);
   }

   public void init () {
      antennaDescriptionReq_r15 = null;
      antennaHeightReq_r15 = null;
      physicalReferenceStationReq_r15 = null;
      stationID_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_RTK_ReferenceStationInfoReq_r15) ) return false;

      GNSS_RTK_ReferenceStationInfoReq_r15 rhs = (GNSS_RTK_ReferenceStationInfoReq_r15) obj;

      if (antennaDescriptionReq_r15 == null) {
         if (rhs.antennaDescriptionReq_r15 != null) return false;
      }
      else {
         if (!antennaDescriptionReq_r15.equals(rhs.antennaDescriptionReq_r15)) {
            return false;
         }
      }

      if (antennaHeightReq_r15 == null) {
         if (rhs.antennaHeightReq_r15 != null) return false;
      }
      else {
         if (!antennaHeightReq_r15.equals(rhs.antennaHeightReq_r15)) {
            return false;
         }
      }

      if (physicalReferenceStationReq_r15 == null) {
         if (rhs.physicalReferenceStationReq_r15 != null) return false;
      }
      else {
         if (!physicalReferenceStationReq_r15.equals(rhs.physicalReferenceStationReq_r15)) {
            return false;
         }
      }

      if (stationID_r15 == null) {
         if (rhs.stationID_r15 != null) return false;
      }
      else {
         if (!stationID_r15.equals(rhs.stationID_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (antennaDescriptionReq_r15 != null) __code = 31*__code + antennaDescriptionReq_r15.hashCode();
      if (antennaHeightReq_r15 != null) __code = 31*__code + antennaHeightReq_r15.hashCode();
      if (physicalReferenceStationReq_r15 != null) __code = 31*__code + physicalReferenceStationReq_r15.hashCode();
      if (stationID_r15 != null) __code = 31*__code + stationID_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for AntennaDescriptionReq_r15
    */
   public Asn1Boolean getAntennaDescriptionReq_r15 () {
      return antennaDescriptionReq_r15;
   }

   public void setAntennaDescriptionReq_r15 (Asn1Boolean value) {
      this.antennaDescriptionReq_r15 = value;
   }

   public void setAntennaDescriptionReq_r15 (boolean value) {
      setAntennaDescriptionReq_r15 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for AntennaHeightReq_r15
    */
   public Asn1Boolean getAntennaHeightReq_r15 () {
      return antennaHeightReq_r15;
   }

   public void setAntennaHeightReq_r15 (Asn1Boolean value) {
      this.antennaHeightReq_r15 = value;
   }

   public void setAntennaHeightReq_r15 (boolean value) {
      setAntennaHeightReq_r15 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for PhysicalReferenceStationReq_r15
    */
   public Asn1Boolean getPhysicalReferenceStationReq_r15 () {
      return physicalReferenceStationReq_r15;
   }

   public void setPhysicalReferenceStationReq_r15 (Asn1Boolean value) {
      this.physicalReferenceStationReq_r15 = value;
   }

   public void setPhysicalReferenceStationReq_r15 (boolean value) {
      setPhysicalReferenceStationReq_r15 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for StationID_r15
    */
   public GNSS_ReferenceStationID_r15 getStationID_r15 () {
      return stationID_r15;
   }

   public void setStationID_r15 (GNSS_ReferenceStationID_r15 value) {
      this.stationID_r15 = value;
   }

   public boolean hasStationID_r15 () {
      return (stationID_r15 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return antennaDescriptionReq_r15;
         case 1: return antennaHeightReq_r15;
         case 2: return physicalReferenceStationReq_r15;
         case 3: return stationID_r15;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "antennaDescriptionReq-r15";
         case 1: return "antennaHeightReq-r15";
         case 2: return "physicalReferenceStationReq-r15";
         case 3: return "stationID-r15";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean stationID_r15Present = buffer.decodeBit ("stationID_r15Present");

      // decode antennaDescriptionReq_r15

      buffer.getContext().eventDispatcher.startElement("antennaDescriptionReq_r15", -1);

      antennaDescriptionReq_r15 = new Asn1Boolean();
      antennaDescriptionReq_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("antennaDescriptionReq_r15", -1);

      // decode antennaHeightReq_r15

      buffer.getContext().eventDispatcher.startElement("antennaHeightReq_r15", -1);

      antennaHeightReq_r15 = new Asn1Boolean();
      antennaHeightReq_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("antennaHeightReq_r15", -1);

      // decode physicalReferenceStationReq_r15

      buffer.getContext().eventDispatcher.startElement("physicalReferenceStationReq_r15", -1);

      physicalReferenceStationReq_r15 = new Asn1Boolean();
      physicalReferenceStationReq_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("physicalReferenceStationReq_r15", -1);

      // decode stationID_r15

      if (stationID_r15Present) {
         buffer.getContext().eventDispatcher.startElement("stationID_r15", -1);

         stationID_r15 = new GNSS_ReferenceStationID_r15();
         stationID_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("stationID_r15", -1);
      }
      else {
         stationID_r15 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((stationID_r15 != null), null);

      // encode antennaDescriptionReq_r15

      if (antennaDescriptionReq_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("antennaDescriptionReq_r15", -1);

         antennaDescriptionReq_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("antennaDescriptionReq_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("antennaDescriptionReq_r15");

      // encode antennaHeightReq_r15

      if (antennaHeightReq_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("antennaHeightReq_r15", -1);

         antennaHeightReq_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("antennaHeightReq_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("antennaHeightReq_r15");

      // encode physicalReferenceStationReq_r15

      if (physicalReferenceStationReq_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("physicalReferenceStationReq_r15", -1);

         physicalReferenceStationReq_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("physicalReferenceStationReq_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("physicalReferenceStationReq_r15");

      // encode stationID_r15

      if (stationID_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("stationID_r15", -1);

         stationID_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("stationID_r15", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
