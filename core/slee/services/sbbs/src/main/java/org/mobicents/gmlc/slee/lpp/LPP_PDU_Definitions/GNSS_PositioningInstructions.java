/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_PositioningInstructions extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-PositioningInstructions";
   }

   protected GNSS_ID_Bitmap gnss_Methods;
   protected Asn1Boolean fineTimeAssistanceMeasReq;
   protected Asn1Boolean adrMeasReq;
   protected Asn1Boolean multiFreqMeasReq;
   protected Asn1Boolean assistanceAvailability;
   protected GNSS_PositioningInstructions_ha_GNSS_Req_r15 ha_GNSS_Req_r15 = null;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_PositioningInstructions () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_PositioningInstructions (
      GNSS_ID_Bitmap gnss_Methods_,
      Asn1Boolean fineTimeAssistanceMeasReq_,
      Asn1Boolean adrMeasReq_,
      Asn1Boolean multiFreqMeasReq_,
      Asn1Boolean assistanceAvailability_,
      GNSS_PositioningInstructions_ha_GNSS_Req_r15 ha_GNSS_Req_r15_
   ) {
      super();
      setGnss_Methods (gnss_Methods_);
      setFineTimeAssistanceMeasReq (fineTimeAssistanceMeasReq_);
      setAdrMeasReq (adrMeasReq_);
      setMultiFreqMeasReq (multiFreqMeasReq_);
      setAssistanceAvailability (assistanceAvailability_);
      setHa_GNSS_Req_r15 (ha_GNSS_Req_r15_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GNSS_PositioningInstructions (
      GNSS_ID_Bitmap gnss_Methods_,
      Asn1Boolean fineTimeAssistanceMeasReq_,
      Asn1Boolean adrMeasReq_,
      Asn1Boolean multiFreqMeasReq_,
      Asn1Boolean assistanceAvailability_
   ) {
      super();
      setGnss_Methods (gnss_Methods_);
      setFineTimeAssistanceMeasReq (fineTimeAssistanceMeasReq_);
      setAdrMeasReq (adrMeasReq_);
      setMultiFreqMeasReq (multiFreqMeasReq_);
      setAssistanceAvailability (assistanceAvailability_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GNSS_PositioningInstructions (GNSS_ID_Bitmap gnss_Methods_,
      boolean fineTimeAssistanceMeasReq_,
      boolean adrMeasReq_,
      boolean multiFreqMeasReq_,
      boolean assistanceAvailability_,
      GNSS_PositioningInstructions_ha_GNSS_Req_r15 ha_GNSS_Req_r15_
   ) {
      super();
      setGnss_Methods (gnss_Methods_);
      setFineTimeAssistanceMeasReq (fineTimeAssistanceMeasReq_);
      setAdrMeasReq (adrMeasReq_);
      setMultiFreqMeasReq (multiFreqMeasReq_);
      setAssistanceAvailability (assistanceAvailability_);
      setHa_GNSS_Req_r15 (ha_GNSS_Req_r15_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public GNSS_PositioningInstructions (
      GNSS_ID_Bitmap gnss_Methods_,
      boolean fineTimeAssistanceMeasReq_,
      boolean adrMeasReq_,
      boolean multiFreqMeasReq_,
      boolean assistanceAvailability_
   ) {
      super();
      setGnss_Methods (gnss_Methods_);
      setFineTimeAssistanceMeasReq (fineTimeAssistanceMeasReq_);
      setAdrMeasReq (adrMeasReq_);
      setMultiFreqMeasReq (multiFreqMeasReq_);
      setAssistanceAvailability (assistanceAvailability_);
   }

   public void init () {
      gnss_Methods = null;
      fineTimeAssistanceMeasReq = null;
      adrMeasReq = null;
      multiFreqMeasReq = null;
      assistanceAvailability = null;
      ha_GNSS_Req_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_PositioningInstructions) ) return false;

      GNSS_PositioningInstructions rhs = (GNSS_PositioningInstructions) obj;

      if (gnss_Methods == null) {
         if (rhs.gnss_Methods != null) return false;
      }
      else {
         if (!gnss_Methods.equals(rhs.gnss_Methods)) {
            return false;
         }
      }

      if (fineTimeAssistanceMeasReq == null) {
         if (rhs.fineTimeAssistanceMeasReq != null) return false;
      }
      else {
         if (!fineTimeAssistanceMeasReq.equals(rhs.fineTimeAssistanceMeasReq)) {
            return false;
         }
      }

      if (adrMeasReq == null) {
         if (rhs.adrMeasReq != null) return false;
      }
      else {
         if (!adrMeasReq.equals(rhs.adrMeasReq)) {
            return false;
         }
      }

      if (multiFreqMeasReq == null) {
         if (rhs.multiFreqMeasReq != null) return false;
      }
      else {
         if (!multiFreqMeasReq.equals(rhs.multiFreqMeasReq)) {
            return false;
         }
      }

      if (assistanceAvailability == null) {
         if (rhs.assistanceAvailability != null) return false;
      }
      else {
         if (!assistanceAvailability.equals(rhs.assistanceAvailability)) {
            return false;
         }
      }

      if (ha_GNSS_Req_r15 == null) {
         if (rhs.ha_GNSS_Req_r15 != null) return false;
      }
      else {
         if (!ha_GNSS_Req_r15.equals(rhs.ha_GNSS_Req_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gnss_Methods != null) __code = 31*__code + gnss_Methods.hashCode();
      if (fineTimeAssistanceMeasReq != null) __code = 31*__code + fineTimeAssistanceMeasReq.hashCode();
      if (adrMeasReq != null) __code = 31*__code + adrMeasReq.hashCode();
      if (multiFreqMeasReq != null) __code = 31*__code + multiFreqMeasReq.hashCode();
      if (assistanceAvailability != null) __code = 31*__code + assistanceAvailability.hashCode();
      if (ha_GNSS_Req_r15 != null) __code = 31*__code + ha_GNSS_Req_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Gnss_Methods
    */
   public GNSS_ID_Bitmap getGnss_Methods () {
      return gnss_Methods;
   }

   public void setGnss_Methods (GNSS_ID_Bitmap value) {
      this.gnss_Methods = value;
   }

   /**
    * Accessor/mutator methods for FineTimeAssistanceMeasReq
    */
   public Asn1Boolean getFineTimeAssistanceMeasReq () {
      return fineTimeAssistanceMeasReq;
   }

   public void setFineTimeAssistanceMeasReq (Asn1Boolean value) {
      this.fineTimeAssistanceMeasReq = value;
   }

   public void setFineTimeAssistanceMeasReq (boolean value) {
      setFineTimeAssistanceMeasReq (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for AdrMeasReq
    */
   public Asn1Boolean getAdrMeasReq () {
      return adrMeasReq;
   }

   public void setAdrMeasReq (Asn1Boolean value) {
      this.adrMeasReq = value;
   }

   public void setAdrMeasReq (boolean value) {
      setAdrMeasReq (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for MultiFreqMeasReq
    */
   public Asn1Boolean getMultiFreqMeasReq () {
      return multiFreqMeasReq;
   }

   public void setMultiFreqMeasReq (Asn1Boolean value) {
      this.multiFreqMeasReq = value;
   }

   public void setMultiFreqMeasReq (boolean value) {
      setMultiFreqMeasReq (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for AssistanceAvailability
    */
   public Asn1Boolean getAssistanceAvailability () {
      return assistanceAvailability;
   }

   public void setAssistanceAvailability (Asn1Boolean value) {
      this.assistanceAvailability = value;
   }

   public void setAssistanceAvailability (boolean value) {
      setAssistanceAvailability (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ha_GNSS_Req_r15
    */
   public GNSS_PositioningInstructions_ha_GNSS_Req_r15 getHa_GNSS_Req_r15 () {
      return ha_GNSS_Req_r15;
   }

   public void setHa_GNSS_Req_r15 (GNSS_PositioningInstructions_ha_GNSS_Req_r15 value) {
      this.ha_GNSS_Req_r15 = value;
   }

   public boolean hasHa_GNSS_Req_r15 () {
      return (ha_GNSS_Req_r15 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gnss_Methods;
         case 1: return fineTimeAssistanceMeasReq;
         case 2: return adrMeasReq;
         case 3: return multiFreqMeasReq;
         case 4: return assistanceAvailability;
         case 5: return ha_GNSS_Req_r15;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gnss-Methods";
         case 1: return "fineTimeAssistanceMeasReq";
         case 2: return "adrMeasReq";
         case 3: return "multiFreqMeasReq";
         case 4: return "assistanceAvailability";
         case 5: return "ha-GNSS-Req-r15";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode gnss_Methods

      buffer.getContext().eventDispatcher.startElement("gnss_Methods", -1);

      gnss_Methods = new GNSS_ID_Bitmap();
      gnss_Methods.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("gnss_Methods", -1);

      // decode fineTimeAssistanceMeasReq

      buffer.getContext().eventDispatcher.startElement("fineTimeAssistanceMeasReq", -1);

      fineTimeAssistanceMeasReq = new Asn1Boolean();
      fineTimeAssistanceMeasReq.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("fineTimeAssistanceMeasReq", -1);

      // decode adrMeasReq

      buffer.getContext().eventDispatcher.startElement("adrMeasReq", -1);

      adrMeasReq = new Asn1Boolean();
      adrMeasReq.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("adrMeasReq", -1);

      // decode multiFreqMeasReq

      buffer.getContext().eventDispatcher.startElement("multiFreqMeasReq", -1);

      multiFreqMeasReq = new Asn1Boolean();
      multiFreqMeasReq.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("multiFreqMeasReq", -1);

      // decode assistanceAvailability

      buffer.getContext().eventDispatcher.startElement("assistanceAvailability", -1);

      assistanceAvailability = new Asn1Boolean();
      assistanceAvailability.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("assistanceAvailability", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("ha_GNSS_Req_r15Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode ha_GNSS_Req_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("ha_GNSS_Req_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = GNSS_PositioningInstructions_ha_GNSS_Req_r15.decodeEnumValue (buffer);
               ha_GNSS_Req_r15 = GNSS_PositioningInstructions_ha_GNSS_Req_r15.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("ha_GNSS_Req_r15", -1);

         }
         else {
            ha_GNSS_Req_r15 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((ha_GNSS_Req_r15 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode gnss_Methods

      if (gnss_Methods != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_Methods", -1);

         gnss_Methods.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_Methods", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_Methods");

      // encode fineTimeAssistanceMeasReq

      if (fineTimeAssistanceMeasReq != null) {
         buffer.getContext().eventDispatcher.startElement("fineTimeAssistanceMeasReq", -1);

         fineTimeAssistanceMeasReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("fineTimeAssistanceMeasReq", -1);
      }
      else throw new Asn1MissingRequiredException ("fineTimeAssistanceMeasReq");

      // encode adrMeasReq

      if (adrMeasReq != null) {
         buffer.getContext().eventDispatcher.startElement("adrMeasReq", -1);

         adrMeasReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("adrMeasReq", -1);
      }
      else throw new Asn1MissingRequiredException ("adrMeasReq");

      // encode multiFreqMeasReq

      if (multiFreqMeasReq != null) {
         buffer.getContext().eventDispatcher.startElement("multiFreqMeasReq", -1);

         multiFreqMeasReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("multiFreqMeasReq", -1);
      }
      else throw new Asn1MissingRequiredException ("multiFreqMeasReq");

      // encode assistanceAvailability

      if (assistanceAvailability != null) {
         buffer.getContext().eventDispatcher.startElement("assistanceAvailability", -1);

         assistanceAvailability.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("assistanceAvailability", -1);
      }
      else throw new Asn1MissingRequiredException ("assistanceAvailability");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((ha_GNSS_Req_r15 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // ha_GNSS_Req_r15

         if (ha_GNSS_Req_r15 != null) {
            buffer.reset();
            ha_GNSS_Req_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("ha_GNSS_Req_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("ha_GNSS_Req_r15", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
