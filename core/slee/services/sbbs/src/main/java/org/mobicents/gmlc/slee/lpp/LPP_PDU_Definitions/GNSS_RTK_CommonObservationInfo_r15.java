/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_RTK_CommonObservationInfo_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-RTK-CommonObservationInfo-r15";
   }

   protected GNSS_ReferenceStationID_r15 referenceStationID_r15;
   protected Asn1Integer clockSteeringIndicator_r15;
   protected Asn1Integer externalClockIndicator_r15;
   protected Asn1BitString smoothingIndicator_r15;
   protected Asn1BitString smoothingInterval_r15;
   protected Asn1OpenExt extElem1;

   public GNSS_RTK_CommonObservationInfo_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_RTK_CommonObservationInfo_r15 (
      GNSS_ReferenceStationID_r15 referenceStationID_r15_,
      Asn1Integer clockSteeringIndicator_r15_,
      Asn1Integer externalClockIndicator_r15_,
      Asn1BitString smoothingIndicator_r15_,
      Asn1BitString smoothingInterval_r15_
   ) throws Asn1Exception {
      super();
      setReferenceStationID_r15 (referenceStationID_r15_);
      setClockSteeringIndicator_r15 (clockSteeringIndicator_r15_);
      setExternalClockIndicator_r15 (externalClockIndicator_r15_);
      setSmoothingIndicator_r15 (smoothingIndicator_r15_);
      setSmoothingInterval_r15 (smoothingInterval_r15_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GNSS_RTK_CommonObservationInfo_r15 (GNSS_ReferenceStationID_r15 referenceStationID_r15_,
      long clockSteeringIndicator_r15_,
      long externalClockIndicator_r15_,
      Asn1BitString smoothingIndicator_r15_,
      Asn1BitString smoothingInterval_r15_
   ) throws Asn1Exception {
      super();
      setReferenceStationID_r15 (referenceStationID_r15_);
      setClockSteeringIndicator_r15 (clockSteeringIndicator_r15_);
      setExternalClockIndicator_r15 (externalClockIndicator_r15_);
      setSmoothingIndicator_r15 (smoothingIndicator_r15_);
      setSmoothingInterval_r15 (smoothingInterval_r15_);
   }

   public void init () {
      referenceStationID_r15 = null;
      clockSteeringIndicator_r15 = null;
      externalClockIndicator_r15 = null;
      smoothingIndicator_r15 = null;
      smoothingInterval_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_RTK_CommonObservationInfo_r15) ) return false;

      GNSS_RTK_CommonObservationInfo_r15 rhs = (GNSS_RTK_CommonObservationInfo_r15) obj;

      if (referenceStationID_r15 == null) {
         if (rhs.referenceStationID_r15 != null) return false;
      }
      else {
         if (!referenceStationID_r15.equals(rhs.referenceStationID_r15)) {
            return false;
         }
      }

      if (clockSteeringIndicator_r15 == null) {
         if (rhs.clockSteeringIndicator_r15 != null) return false;
      }
      else {
         if (!clockSteeringIndicator_r15.equals(rhs.clockSteeringIndicator_r15)) {
            return false;
         }
      }

      if (externalClockIndicator_r15 == null) {
         if (rhs.externalClockIndicator_r15 != null) return false;
      }
      else {
         if (!externalClockIndicator_r15.equals(rhs.externalClockIndicator_r15)) {
            return false;
         }
      }

      if (smoothingIndicator_r15 == null) {
         if (rhs.smoothingIndicator_r15 != null) return false;
      }
      else {
         if (!smoothingIndicator_r15.equals(rhs.smoothingIndicator_r15)) {
            return false;
         }
      }

      if (smoothingInterval_r15 == null) {
         if (rhs.smoothingInterval_r15 != null) return false;
      }
      else {
         if (!smoothingInterval_r15.equals(rhs.smoothingInterval_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (referenceStationID_r15 != null) __code = 31*__code + referenceStationID_r15.hashCode();
      if (clockSteeringIndicator_r15 != null) __code = 31*__code + clockSteeringIndicator_r15.hashCode();
      if (externalClockIndicator_r15 != null) __code = 31*__code + externalClockIndicator_r15.hashCode();
      if (smoothingIndicator_r15 != null) __code = 31*__code + smoothingIndicator_r15.hashCode();
      if (smoothingInterval_r15 != null) __code = 31*__code + smoothingInterval_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for ReferenceStationID_r15
    */
   public GNSS_ReferenceStationID_r15 getReferenceStationID_r15 () {
      return referenceStationID_r15;
   }

   public void setReferenceStationID_r15 (GNSS_ReferenceStationID_r15 value) {
      this.referenceStationID_r15 = value;
   }

   /**
    * Accessor/mutator methods for ClockSteeringIndicator_r15
    */
   public Asn1Integer getClockSteeringIndicator_r15 () {
      return clockSteeringIndicator_r15;
   }

   public void setClockSteeringIndicator_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 3))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.clockSteeringIndicator_r15 = value;
   }

   public void setClockSteeringIndicator_r15 (long value) 
      throws Asn1Exception
   {
      setClockSteeringIndicator_r15 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExternalClockIndicator_r15
    */
   public Asn1Integer getExternalClockIndicator_r15 () {
      return externalClockIndicator_r15;
   }

   public void setExternalClockIndicator_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 3))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.externalClockIndicator_r15 = value;
   }

   public void setExternalClockIndicator_r15 (long value) 
      throws Asn1Exception
   {
      setExternalClockIndicator_r15 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SmoothingIndicator_r15
    */
   public Asn1BitString getSmoothingIndicator_r15 () {
      return smoothingIndicator_r15;
   }

   public void setSmoothingIndicator_r15 (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 1)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.smoothingIndicator_r15 = value;
   }

   /**
    * Accessor/mutator methods for SmoothingInterval_r15
    */
   public Asn1BitString getSmoothingInterval_r15 () {
      return smoothingInterval_r15;
   }

   public void setSmoothingInterval_r15 (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 3)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.smoothingInterval_r15 = value;
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return referenceStationID_r15;
         case 1: return clockSteeringIndicator_r15;
         case 2: return externalClockIndicator_r15;
         case 3: return smoothingIndicator_r15;
         case 4: return smoothingInterval_r15;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "referenceStationID-r15";
         case 1: return "clockSteeringIndicator-r15";
         case 2: return "externalClockIndicator-r15";
         case 3: return "smoothingIndicator-r15";
         case 4: return "smoothingInterval-r15";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode referenceStationID_r15

      buffer.getContext().eventDispatcher.startElement("referenceStationID_r15", -1);

      referenceStationID_r15 = new GNSS_ReferenceStationID_r15();
      referenceStationID_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("referenceStationID_r15", -1);

      // decode clockSteeringIndicator_r15

      buffer.getContext().eventDispatcher.startElement("clockSteeringIndicator_r15", -1);

      clockSteeringIndicator_r15 = new Asn1Integer();
      clockSteeringIndicator_r15.decode (buffer, 0, 3);
      buffer.getContext().eventDispatcher.endElement("clockSteeringIndicator_r15", -1);

      // decode externalClockIndicator_r15

      buffer.getContext().eventDispatcher.startElement("externalClockIndicator_r15", -1);

      externalClockIndicator_r15 = new Asn1Integer();
      externalClockIndicator_r15.decode (buffer, 0, 3);
      buffer.getContext().eventDispatcher.endElement("externalClockIndicator_r15", -1);

      // decode smoothingIndicator_r15

      buffer.getContext().eventDispatcher.startElement("smoothingIndicator_r15", -1);

      smoothingIndicator_r15 = new Asn1BitString();
      smoothingIndicator_r15.decode (buffer, 1, 1);
      buffer.getContext().eventDispatcher.endElement("smoothingIndicator_r15", -1);

      // decode smoothingInterval_r15

      buffer.getContext().eventDispatcher.startElement("smoothingInterval_r15", -1);

      smoothingInterval_r15 = new Asn1BitString();
      smoothingInterval_r15.decode (buffer, 3, 3);
      buffer.getContext().eventDispatcher.endElement("smoothingInterval_r15", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode referenceStationID_r15

      if (referenceStationID_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("referenceStationID_r15", -1);

         referenceStationID_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("referenceStationID_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("referenceStationID_r15");

      // encode clockSteeringIndicator_r15

      if (clockSteeringIndicator_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("clockSteeringIndicator_r15", -1);

         clockSteeringIndicator_r15.encode (buffer, 0, 3);

         buffer.getContext().eventDispatcher.endElement("clockSteeringIndicator_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("clockSteeringIndicator_r15");

      // encode externalClockIndicator_r15

      if (externalClockIndicator_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("externalClockIndicator_r15", -1);

         externalClockIndicator_r15.encode (buffer, 0, 3);

         buffer.getContext().eventDispatcher.endElement("externalClockIndicator_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("externalClockIndicator_r15");

      // encode smoothingIndicator_r15

      if (smoothingIndicator_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("smoothingIndicator_r15", -1);

         smoothingIndicator_r15.encode (buffer, 1, 1);

         buffer.getContext().eventDispatcher.endElement("smoothingIndicator_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("smoothingIndicator_r15");

      // encode smoothingInterval_r15

      if (smoothingInterval_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("smoothingInterval_r15", -1);

         smoothingInterval_r15.encode (buffer, 3, 3);

         buffer.getContext().eventDispatcher.endElement("smoothingInterval_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("smoothingInterval_r15");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
