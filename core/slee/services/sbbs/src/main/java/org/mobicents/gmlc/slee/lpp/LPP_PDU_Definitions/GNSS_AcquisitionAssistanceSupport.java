/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_AcquisitionAssistanceSupport extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-AcquisitionAssistanceSupport";
   }

   protected GNSS_AcquisitionAssistanceSupport_confidenceSupport_r10 confidenceSupport_r10 = null;  // optional
   protected GNSS_AcquisitionAssistanceSupport_dopplerUncertaintyExtSupport_r10 dopplerUncertaintyExtSupport_r10 = null;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_AcquisitionAssistanceSupport () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_AcquisitionAssistanceSupport (
      GNSS_AcquisitionAssistanceSupport_confidenceSupport_r10 confidenceSupport_r10_,
      GNSS_AcquisitionAssistanceSupport_dopplerUncertaintyExtSupport_r10 dopplerUncertaintyExtSupport_r10_
   ) {
      super();
      setConfidenceSupport_r10 (confidenceSupport_r10_);
      setDopplerUncertaintyExtSupport_r10 (dopplerUncertaintyExtSupport_r10_);
   }

   public void init () {
      confidenceSupport_r10 = null;
      dopplerUncertaintyExtSupport_r10 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_AcquisitionAssistanceSupport) ) return false;

      GNSS_AcquisitionAssistanceSupport rhs = (GNSS_AcquisitionAssistanceSupport) obj;

      if (confidenceSupport_r10 == null) {
         if (rhs.confidenceSupport_r10 != null) return false;
      }
      else {
         if (!confidenceSupport_r10.equals(rhs.confidenceSupport_r10)) {
            return false;
         }
      }

      if (dopplerUncertaintyExtSupport_r10 == null) {
         if (rhs.dopplerUncertaintyExtSupport_r10 != null) return false;
      }
      else {
         if (!dopplerUncertaintyExtSupport_r10.equals(rhs.dopplerUncertaintyExtSupport_r10)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (confidenceSupport_r10 != null) __code = 31*__code + confidenceSupport_r10.hashCode();
      if (dopplerUncertaintyExtSupport_r10 != null) __code = 31*__code + dopplerUncertaintyExtSupport_r10.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for ConfidenceSupport_r10
    */
   public GNSS_AcquisitionAssistanceSupport_confidenceSupport_r10 getConfidenceSupport_r10 () {
      return confidenceSupport_r10;
   }

   public void setConfidenceSupport_r10 (GNSS_AcquisitionAssistanceSupport_confidenceSupport_r10 value) {
      this.confidenceSupport_r10 = value;
   }

   public boolean hasConfidenceSupport_r10 () {
      return (confidenceSupport_r10 != null);
   }

   /**
    * Accessor/mutator methods for DopplerUncertaintyExtSupport_r10
    */
   public GNSS_AcquisitionAssistanceSupport_dopplerUncertaintyExtSupport_r10 getDopplerUncertaintyExtSupport_r10 () {
      return dopplerUncertaintyExtSupport_r10;
   }

   public void setDopplerUncertaintyExtSupport_r10 (GNSS_AcquisitionAssistanceSupport_dopplerUncertaintyExtSupport_r10 value) {
      this.dopplerUncertaintyExtSupport_r10 = value;
   }

   public boolean hasDopplerUncertaintyExtSupport_r10 () {
      return (dopplerUncertaintyExtSupport_r10 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return confidenceSupport_r10;
         case 1: return dopplerUncertaintyExtSupport_r10;
         case 2: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "confidenceSupport-r10";
         case 1: return "dopplerUncertaintyExtSupport-r10";
         case 2: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("confidenceSupport_r10Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("dopplerUncertaintyExtSupport_r10Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode confidenceSupport_r10

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("confidenceSupport_r10", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = GNSS_AcquisitionAssistanceSupport_confidenceSupport_r10.decodeEnumValue (buffer);
               confidenceSupport_r10 = GNSS_AcquisitionAssistanceSupport_confidenceSupport_r10.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("confidenceSupport_r10", -1);

         }
         else {
            confidenceSupport_r10 = null;
         }

         // decode dopplerUncertaintyExtSupport_r10

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("dopplerUncertaintyExtSupport_r10", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = GNSS_AcquisitionAssistanceSupport_dopplerUncertaintyExtSupport_r10.decodeEnumValue (buffer);
               dopplerUncertaintyExtSupport_r10 = GNSS_AcquisitionAssistanceSupport_dopplerUncertaintyExtSupport_r10.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("dopplerUncertaintyExtSupport_r10", -1);

         }
         else {
            dopplerUncertaintyExtSupport_r10 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((confidenceSupport_r10 != null) ||
      (dopplerUncertaintyExtSupport_r10 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 2;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((confidenceSupport_r10 != null), null);
         buffer.encodeBit ((dopplerUncertaintyExtSupport_r10 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // confidenceSupport_r10

         if (confidenceSupport_r10 != null) {
            buffer.reset();
            confidenceSupport_r10.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("confidenceSupport_r10", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("confidenceSupport_r10", -1);
         }

         // dopplerUncertaintyExtSupport_r10

         if (dopplerUncertaintyExtSupport_r10 != null) {
            buffer.reset();
            dopplerUncertaintyExtSupport_r10.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("dopplerUncertaintyExtSupport_r10", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("dopplerUncertaintyExtSupport_r10", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
