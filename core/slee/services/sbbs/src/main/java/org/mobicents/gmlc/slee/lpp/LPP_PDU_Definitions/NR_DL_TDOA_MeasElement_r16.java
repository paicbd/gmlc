/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NR_DL_TDOA_MeasElement_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "NR-DL-TDOA-MeasElement-r16";
   }

   protected Asn1Integer dl_PRS_ID_r16;
   protected NR_PhysCellID_r16 nr_PhysCellID_r16;  // optional
   protected NCGI_r15 nr_CellGlobalID_r16;  // optional
   protected ARFCN_ValueNR_r15 nr_ARFCN_r16;  // optional
   protected NR_DL_PRS_ResourceID_r16 nr_DL_PRS_ResourceID_r16;  // optional
   protected NR_DL_PRS_ResourceSetID_r16 nr_DL_PRS_ResourceSetID_r16;  // optional
   protected NR_TimeStamp_r16 nr_TimeStamp_r16;
   protected NR_DL_TDOA_MeasElement_r16_nr_RSTD_r16 nr_RSTD_r16;
   protected NR_AdditionalPathList_r16 nr_AdditionalPathList_r16;  // optional
   protected NR_TimingQuality_r16 nr_TimingQuality_r16;
   protected Asn1Integer nr_DL_PRS_RSRP_Result_r16;  // optional
   protected NR_DL_TDOA_AdditionalMeasurements_r16 nr_DL_TDOA_AdditionalMeasurements_r16;  // optional
   protected Asn1OpenExt extElem1;

   public NR_DL_TDOA_MeasElement_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NR_DL_TDOA_MeasElement_r16 (
      Asn1Integer dl_PRS_ID_r16_,
      NR_PhysCellID_r16 nr_PhysCellID_r16_,
      NCGI_r15 nr_CellGlobalID_r16_,
      ARFCN_ValueNR_r15 nr_ARFCN_r16_,
      NR_DL_PRS_ResourceID_r16 nr_DL_PRS_ResourceID_r16_,
      NR_DL_PRS_ResourceSetID_r16 nr_DL_PRS_ResourceSetID_r16_,
      NR_TimeStamp_r16 nr_TimeStamp_r16_,
      NR_DL_TDOA_MeasElement_r16_nr_RSTD_r16 nr_RSTD_r16_,
      NR_AdditionalPathList_r16 nr_AdditionalPathList_r16_,
      NR_TimingQuality_r16 nr_TimingQuality_r16_,
      Asn1Integer nr_DL_PRS_RSRP_Result_r16_,
      NR_DL_TDOA_AdditionalMeasurements_r16 nr_DL_TDOA_AdditionalMeasurements_r16_
   ) throws Asn1Exception {
      super();
      setDl_PRS_ID_r16 (dl_PRS_ID_r16_);
      setNr_PhysCellID_r16 (nr_PhysCellID_r16_);
      setNr_CellGlobalID_r16 (nr_CellGlobalID_r16_);
      setNr_ARFCN_r16 (nr_ARFCN_r16_);
      setNr_DL_PRS_ResourceID_r16 (nr_DL_PRS_ResourceID_r16_);
      setNr_DL_PRS_ResourceSetID_r16 (nr_DL_PRS_ResourceSetID_r16_);
      setNr_TimeStamp_r16 (nr_TimeStamp_r16_);
      setNr_RSTD_r16 (nr_RSTD_r16_);
      setNr_AdditionalPathList_r16 (nr_AdditionalPathList_r16_);
      setNr_TimingQuality_r16 (nr_TimingQuality_r16_);
      setNr_DL_PRS_RSRP_Result_r16 (nr_DL_PRS_RSRP_Result_r16_);
      setNr_DL_TDOA_AdditionalMeasurements_r16 (nr_DL_TDOA_AdditionalMeasurements_r16_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public NR_DL_TDOA_MeasElement_r16 (
      Asn1Integer dl_PRS_ID_r16_,
      NR_TimeStamp_r16 nr_TimeStamp_r16_,
      NR_DL_TDOA_MeasElement_r16_nr_RSTD_r16 nr_RSTD_r16_,
      NR_TimingQuality_r16 nr_TimingQuality_r16_
   ) throws Asn1Exception {
      super();
      setDl_PRS_ID_r16 (dl_PRS_ID_r16_);
      setNr_TimeStamp_r16 (nr_TimeStamp_r16_);
      setNr_RSTD_r16 (nr_RSTD_r16_);
      setNr_TimingQuality_r16 (nr_TimingQuality_r16_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NR_DL_TDOA_MeasElement_r16 (long dl_PRS_ID_r16_,
      long nr_PhysCellID_r16_,
      NCGI_r15 nr_CellGlobalID_r16_,
      long nr_ARFCN_r16_,
      long nr_DL_PRS_ResourceID_r16_,
      long nr_DL_PRS_ResourceSetID_r16_,
      NR_TimeStamp_r16 nr_TimeStamp_r16_,
      NR_DL_TDOA_MeasElement_r16_nr_RSTD_r16 nr_RSTD_r16_,
      NR_AdditionalPathList_r16 nr_AdditionalPathList_r16_,
      NR_TimingQuality_r16 nr_TimingQuality_r16_,
      long nr_DL_PRS_RSRP_Result_r16_,
      NR_DL_TDOA_AdditionalMeasurements_r16 nr_DL_TDOA_AdditionalMeasurements_r16_
   ) throws Asn1Exception {
      super();
      setDl_PRS_ID_r16 (dl_PRS_ID_r16_);
      setNr_PhysCellID_r16 (nr_PhysCellID_r16_);
      setNr_CellGlobalID_r16 (nr_CellGlobalID_r16_);
      setNr_ARFCN_r16 (nr_ARFCN_r16_);
      setNr_DL_PRS_ResourceID_r16 (nr_DL_PRS_ResourceID_r16_);
      setNr_DL_PRS_ResourceSetID_r16 (nr_DL_PRS_ResourceSetID_r16_);
      setNr_TimeStamp_r16 (nr_TimeStamp_r16_);
      setNr_RSTD_r16 (nr_RSTD_r16_);
      setNr_AdditionalPathList_r16 (nr_AdditionalPathList_r16_);
      setNr_TimingQuality_r16 (nr_TimingQuality_r16_);
      setNr_DL_PRS_RSRP_Result_r16 (nr_DL_PRS_RSRP_Result_r16_);
      setNr_DL_TDOA_AdditionalMeasurements_r16 (nr_DL_TDOA_AdditionalMeasurements_r16_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public NR_DL_TDOA_MeasElement_r16 (
      long dl_PRS_ID_r16_,
      NR_TimeStamp_r16 nr_TimeStamp_r16_,
      NR_DL_TDOA_MeasElement_r16_nr_RSTD_r16 nr_RSTD_r16_,
      NR_TimingQuality_r16 nr_TimingQuality_r16_
   ) throws Asn1Exception {
      super();
      setDl_PRS_ID_r16 (dl_PRS_ID_r16_);
      setNr_TimeStamp_r16 (nr_TimeStamp_r16_);
      setNr_RSTD_r16 (nr_RSTD_r16_);
      setNr_TimingQuality_r16 (nr_TimingQuality_r16_);
   }

   public void init () {
      dl_PRS_ID_r16 = null;
      nr_PhysCellID_r16 = null;
      nr_CellGlobalID_r16 = null;
      nr_ARFCN_r16 = null;
      nr_DL_PRS_ResourceID_r16 = null;
      nr_DL_PRS_ResourceSetID_r16 = null;
      nr_TimeStamp_r16 = null;
      nr_RSTD_r16 = null;
      nr_AdditionalPathList_r16 = null;
      nr_TimingQuality_r16 = null;
      nr_DL_PRS_RSRP_Result_r16 = null;
      nr_DL_TDOA_AdditionalMeasurements_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof NR_DL_TDOA_MeasElement_r16) ) return false;

      NR_DL_TDOA_MeasElement_r16 rhs = (NR_DL_TDOA_MeasElement_r16) obj;

      if (dl_PRS_ID_r16 == null) {
         if (rhs.dl_PRS_ID_r16 != null) return false;
      }
      else {
         if (!dl_PRS_ID_r16.equals(rhs.dl_PRS_ID_r16)) {
            return false;
         }
      }

      if (nr_PhysCellID_r16 == null) {
         if (rhs.nr_PhysCellID_r16 != null) return false;
      }
      else {
         if (!nr_PhysCellID_r16.equals(rhs.nr_PhysCellID_r16)) {
            return false;
         }
      }

      if (nr_CellGlobalID_r16 == null) {
         if (rhs.nr_CellGlobalID_r16 != null) return false;
      }
      else {
         if (!nr_CellGlobalID_r16.equals(rhs.nr_CellGlobalID_r16)) {
            return false;
         }
      }

      if (nr_ARFCN_r16 == null) {
         if (rhs.nr_ARFCN_r16 != null) return false;
      }
      else {
         if (!nr_ARFCN_r16.equals(rhs.nr_ARFCN_r16)) {
            return false;
         }
      }

      if (nr_DL_PRS_ResourceID_r16 == null) {
         if (rhs.nr_DL_PRS_ResourceID_r16 != null) return false;
      }
      else {
         if (!nr_DL_PRS_ResourceID_r16.equals(rhs.nr_DL_PRS_ResourceID_r16)) {
            return false;
         }
      }

      if (nr_DL_PRS_ResourceSetID_r16 == null) {
         if (rhs.nr_DL_PRS_ResourceSetID_r16 != null) return false;
      }
      else {
         if (!nr_DL_PRS_ResourceSetID_r16.equals(rhs.nr_DL_PRS_ResourceSetID_r16)) {
            return false;
         }
      }

      if (nr_TimeStamp_r16 == null) {
         if (rhs.nr_TimeStamp_r16 != null) return false;
      }
      else {
         if (!nr_TimeStamp_r16.equals(rhs.nr_TimeStamp_r16)) {
            return false;
         }
      }

      if (nr_RSTD_r16 == null) {
         if (rhs.nr_RSTD_r16 != null) return false;
      }
      else {
         if (!nr_RSTD_r16.equals(rhs.nr_RSTD_r16)) {
            return false;
         }
      }

      if (nr_AdditionalPathList_r16 == null) {
         if (rhs.nr_AdditionalPathList_r16 != null) return false;
      }
      else {
         if (!nr_AdditionalPathList_r16.equals(rhs.nr_AdditionalPathList_r16)) {
            return false;
         }
      }

      if (nr_TimingQuality_r16 == null) {
         if (rhs.nr_TimingQuality_r16 != null) return false;
      }
      else {
         if (!nr_TimingQuality_r16.equals(rhs.nr_TimingQuality_r16)) {
            return false;
         }
      }

      if (nr_DL_PRS_RSRP_Result_r16 == null) {
         if (rhs.nr_DL_PRS_RSRP_Result_r16 != null) return false;
      }
      else {
         if (!nr_DL_PRS_RSRP_Result_r16.equals(rhs.nr_DL_PRS_RSRP_Result_r16)) {
            return false;
         }
      }

      if (nr_DL_TDOA_AdditionalMeasurements_r16 == null) {
         if (rhs.nr_DL_TDOA_AdditionalMeasurements_r16 != null) return false;
      }
      else {
         if (!nr_DL_TDOA_AdditionalMeasurements_r16.equals(rhs.nr_DL_TDOA_AdditionalMeasurements_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (dl_PRS_ID_r16 != null) __code = 31*__code + dl_PRS_ID_r16.hashCode();
      if (nr_PhysCellID_r16 != null) __code = 31*__code + nr_PhysCellID_r16.hashCode();
      if (nr_CellGlobalID_r16 != null) __code = 31*__code + nr_CellGlobalID_r16.hashCode();
      if (nr_ARFCN_r16 != null) __code = 31*__code + nr_ARFCN_r16.hashCode();
      if (nr_DL_PRS_ResourceID_r16 != null) __code = 31*__code + nr_DL_PRS_ResourceID_r16.hashCode();
      if (nr_DL_PRS_ResourceSetID_r16 != null) __code = 31*__code + nr_DL_PRS_ResourceSetID_r16.hashCode();
      if (nr_TimeStamp_r16 != null) __code = 31*__code + nr_TimeStamp_r16.hashCode();
      if (nr_RSTD_r16 != null) __code = 31*__code + nr_RSTD_r16.hashCode();
      if (nr_AdditionalPathList_r16 != null) __code = 31*__code + nr_AdditionalPathList_r16.hashCode();
      if (nr_TimingQuality_r16 != null) __code = 31*__code + nr_TimingQuality_r16.hashCode();
      if (nr_DL_PRS_RSRP_Result_r16 != null) __code = 31*__code + nr_DL_PRS_RSRP_Result_r16.hashCode();
      if (nr_DL_TDOA_AdditionalMeasurements_r16 != null) __code = 31*__code + nr_DL_TDOA_AdditionalMeasurements_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Dl_PRS_ID_r16
    */
   public Asn1Integer getDl_PRS_ID_r16 () {
      return dl_PRS_ID_r16;
   }

   public void setDl_PRS_ID_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.dl_PRS_ID_r16 = value;
   }

   public void setDl_PRS_ID_r16 (long value) 
      throws Asn1Exception
   {
      setDl_PRS_ID_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Nr_PhysCellID_r16
    */
   public NR_PhysCellID_r16 getNr_PhysCellID_r16 () {
      return nr_PhysCellID_r16;
   }

   public void setNr_PhysCellID_r16 (NR_PhysCellID_r16 value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1007))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nr_PhysCellID_r16 = value;
   }

   public void setNr_PhysCellID_r16 (long value) 
      throws Asn1Exception
   {
      setNr_PhysCellID_r16 (new NR_PhysCellID_r16(value));
   }
   public boolean hasNr_PhysCellID_r16 () {
      return (nr_PhysCellID_r16 != null);
   }

   /**
    * Accessor/mutator methods for Nr_CellGlobalID_r16
    */
   public NCGI_r15 getNr_CellGlobalID_r16 () {
      return nr_CellGlobalID_r16;
   }

   public void setNr_CellGlobalID_r16 (NCGI_r15 value) {
      this.nr_CellGlobalID_r16 = value;
   }

   public boolean hasNr_CellGlobalID_r16 () {
      return (nr_CellGlobalID_r16 != null);
   }

   /**
    * Accessor/mutator methods for Nr_ARFCN_r16
    */
   public ARFCN_ValueNR_r15 getNr_ARFCN_r16 () {
      return nr_ARFCN_r16;
   }

   public void setNr_ARFCN_r16 (ARFCN_ValueNR_r15 value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 3279165))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nr_ARFCN_r16 = value;
   }

   public void setNr_ARFCN_r16 (long value) 
      throws Asn1Exception
   {
      setNr_ARFCN_r16 (new ARFCN_ValueNR_r15(value));
   }
   public boolean hasNr_ARFCN_r16 () {
      return (nr_ARFCN_r16 != null);
   }

   /**
    * Accessor/mutator methods for Nr_DL_PRS_ResourceID_r16
    */
   public NR_DL_PRS_ResourceID_r16 getNr_DL_PRS_ResourceID_r16 () {
      return nr_DL_PRS_ResourceID_r16;
   }

   public void setNr_DL_PRS_ResourceID_r16 (NR_DL_PRS_ResourceID_r16 value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 63))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nr_DL_PRS_ResourceID_r16 = value;
   }

   public void setNr_DL_PRS_ResourceID_r16 (long value) 
      throws Asn1Exception
   {
      setNr_DL_PRS_ResourceID_r16 (new NR_DL_PRS_ResourceID_r16(value));
   }
   public boolean hasNr_DL_PRS_ResourceID_r16 () {
      return (nr_DL_PRS_ResourceID_r16 != null);
   }

   /**
    * Accessor/mutator methods for Nr_DL_PRS_ResourceSetID_r16
    */
   public NR_DL_PRS_ResourceSetID_r16 getNr_DL_PRS_ResourceSetID_r16 () {
      return nr_DL_PRS_ResourceSetID_r16;
   }

   public void setNr_DL_PRS_ResourceSetID_r16 (NR_DL_PRS_ResourceSetID_r16 value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 7))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nr_DL_PRS_ResourceSetID_r16 = value;
   }

   public void setNr_DL_PRS_ResourceSetID_r16 (long value) 
      throws Asn1Exception
   {
      setNr_DL_PRS_ResourceSetID_r16 (new NR_DL_PRS_ResourceSetID_r16(value));
   }
   public boolean hasNr_DL_PRS_ResourceSetID_r16 () {
      return (nr_DL_PRS_ResourceSetID_r16 != null);
   }

   /**
    * Accessor/mutator methods for Nr_TimeStamp_r16
    */
   public NR_TimeStamp_r16 getNr_TimeStamp_r16 () {
      return nr_TimeStamp_r16;
   }

   public void setNr_TimeStamp_r16 (NR_TimeStamp_r16 value) {
      this.nr_TimeStamp_r16 = value;
   }

   /**
    * Accessor/mutator methods for Nr_RSTD_r16
    */
   public NR_DL_TDOA_MeasElement_r16_nr_RSTD_r16 getNr_RSTD_r16 () {
      return nr_RSTD_r16;
   }

   public void setNr_RSTD_r16 (NR_DL_TDOA_MeasElement_r16_nr_RSTD_r16 value) {
      this.nr_RSTD_r16 = value;
   }

   /**
    * Accessor/mutator methods for Nr_AdditionalPathList_r16
    */
   public NR_AdditionalPathList_r16 getNr_AdditionalPathList_r16 () {
      return nr_AdditionalPathList_r16;
   }

   public void setNr_AdditionalPathList_r16 (NR_AdditionalPathList_r16 value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 2))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.nr_AdditionalPathList_r16 = value;
   }

   public boolean hasNr_AdditionalPathList_r16 () {
      return (nr_AdditionalPathList_r16 != null);
   }

   /**
    * Accessor/mutator methods for Nr_TimingQuality_r16
    */
   public NR_TimingQuality_r16 getNr_TimingQuality_r16 () {
      return nr_TimingQuality_r16;
   }

   public void setNr_TimingQuality_r16 (NR_TimingQuality_r16 value) {
      this.nr_TimingQuality_r16 = value;
   }

   /**
    * Accessor/mutator methods for Nr_DL_PRS_RSRP_Result_r16
    */
   public Asn1Integer getNr_DL_PRS_RSRP_Result_r16 () {
      return nr_DL_PRS_RSRP_Result_r16;
   }

   public void setNr_DL_PRS_RSRP_Result_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 126))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nr_DL_PRS_RSRP_Result_r16 = value;
   }

   public void setNr_DL_PRS_RSRP_Result_r16 (long value) 
      throws Asn1Exception
   {
      setNr_DL_PRS_RSRP_Result_r16 (new Asn1Integer(value));
   }
   public boolean hasNr_DL_PRS_RSRP_Result_r16 () {
      return (nr_DL_PRS_RSRP_Result_r16 != null);
   }

   /**
    * Accessor/mutator methods for Nr_DL_TDOA_AdditionalMeasurements_r16
    */
   public NR_DL_TDOA_AdditionalMeasurements_r16 getNr_DL_TDOA_AdditionalMeasurements_r16 () {
      return nr_DL_TDOA_AdditionalMeasurements_r16;
   }

   public void setNr_DL_TDOA_AdditionalMeasurements_r16 (NR_DL_TDOA_AdditionalMeasurements_r16 value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 3))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.nr_DL_TDOA_AdditionalMeasurements_r16 = value;
   }

   public boolean hasNr_DL_TDOA_AdditionalMeasurements_r16 () {
      return (nr_DL_TDOA_AdditionalMeasurements_r16 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 13; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return dl_PRS_ID_r16;
         case 1: return nr_PhysCellID_r16;
         case 2: return nr_CellGlobalID_r16;
         case 3: return nr_ARFCN_r16;
         case 4: return nr_DL_PRS_ResourceID_r16;
         case 5: return nr_DL_PRS_ResourceSetID_r16;
         case 6: return nr_TimeStamp_r16;
         case 7: return nr_RSTD_r16;
         case 8: return nr_AdditionalPathList_r16;
         case 9: return nr_TimingQuality_r16;
         case 10: return nr_DL_PRS_RSRP_Result_r16;
         case 11: return nr_DL_TDOA_AdditionalMeasurements_r16;
         case 12: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "dl-PRS-ID-r16";
         case 1: return "nr-PhysCellID-r16";
         case 2: return "nr-CellGlobalID-r16";
         case 3: return "nr-ARFCN-r16";
         case 4: return "nr-DL-PRS-ResourceID-r16";
         case 5: return "nr-DL-PRS-ResourceSetID-r16";
         case 6: return "nr-TimeStamp-r16";
         case 7: return "nr-RSTD-r16";
         case 8: return "nr-AdditionalPathList-r16";
         case 9: return "nr-TimingQuality-r16";
         case 10: return "nr-DL-PRS-RSRP-Result-r16";
         case 11: return "nr-DL-TDOA-AdditionalMeasurements-r16";
         case 12: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean nr_PhysCellID_r16Present = buffer.decodeBit ("nr_PhysCellID_r16Present");
      boolean nr_CellGlobalID_r16Present = buffer.decodeBit ("nr_CellGlobalID_r16Present");
      boolean nr_ARFCN_r16Present = buffer.decodeBit ("nr_ARFCN_r16Present");
      boolean nr_DL_PRS_ResourceID_r16Present = buffer.decodeBit ("nr_DL_PRS_ResourceID_r16Present");
      boolean nr_DL_PRS_ResourceSetID_r16Present = buffer.decodeBit ("nr_DL_PRS_ResourceSetID_r16Present");
      boolean nr_AdditionalPathList_r16Present = buffer.decodeBit ("nr_AdditionalPathList_r16Present");
      boolean nr_DL_PRS_RSRP_Result_r16Present = buffer.decodeBit ("nr_DL_PRS_RSRP_Result_r16Present");
      boolean nr_DL_TDOA_AdditionalMeasurements_r16Present = buffer.decodeBit ("nr_DL_TDOA_AdditionalMeasurements_r16Present");

      // decode dl_PRS_ID_r16

      buffer.getContext().eventDispatcher.startElement("dl_PRS_ID_r16", -1);

      dl_PRS_ID_r16 = new Asn1Integer();
      dl_PRS_ID_r16.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("dl_PRS_ID_r16", -1);

      // decode nr_PhysCellID_r16

      if (nr_PhysCellID_r16Present) {
         buffer.getContext().eventDispatcher.startElement("nr_PhysCellID_r16", -1);

         nr_PhysCellID_r16 = new NR_PhysCellID_r16();
         nr_PhysCellID_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nr_PhysCellID_r16", -1);
      }
      else {
         nr_PhysCellID_r16 = null;
      }

      // decode nr_CellGlobalID_r16

      if (nr_CellGlobalID_r16Present) {
         buffer.getContext().eventDispatcher.startElement("nr_CellGlobalID_r16", -1);

         nr_CellGlobalID_r16 = new NCGI_r15();
         nr_CellGlobalID_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nr_CellGlobalID_r16", -1);
      }
      else {
         nr_CellGlobalID_r16 = null;
      }

      // decode nr_ARFCN_r16

      if (nr_ARFCN_r16Present) {
         buffer.getContext().eventDispatcher.startElement("nr_ARFCN_r16", -1);

         nr_ARFCN_r16 = new ARFCN_ValueNR_r15();
         nr_ARFCN_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nr_ARFCN_r16", -1);
      }
      else {
         nr_ARFCN_r16 = null;
      }

      // decode nr_DL_PRS_ResourceID_r16

      if (nr_DL_PRS_ResourceID_r16Present) {
         buffer.getContext().eventDispatcher.startElement("nr_DL_PRS_ResourceID_r16", -1);

         nr_DL_PRS_ResourceID_r16 = new NR_DL_PRS_ResourceID_r16();
         nr_DL_PRS_ResourceID_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nr_DL_PRS_ResourceID_r16", -1);
      }
      else {
         nr_DL_PRS_ResourceID_r16 = null;
      }

      // decode nr_DL_PRS_ResourceSetID_r16

      if (nr_DL_PRS_ResourceSetID_r16Present) {
         buffer.getContext().eventDispatcher.startElement("nr_DL_PRS_ResourceSetID_r16", -1);

         nr_DL_PRS_ResourceSetID_r16 = new NR_DL_PRS_ResourceSetID_r16();
         nr_DL_PRS_ResourceSetID_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nr_DL_PRS_ResourceSetID_r16", -1);
      }
      else {
         nr_DL_PRS_ResourceSetID_r16 = null;
      }

      // decode nr_TimeStamp_r16

      buffer.getContext().eventDispatcher.startElement("nr_TimeStamp_r16", -1);

      nr_TimeStamp_r16 = new NR_TimeStamp_r16();
      nr_TimeStamp_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("nr_TimeStamp_r16", -1);

      // decode nr_RSTD_r16

      buffer.getContext().eventDispatcher.startElement("nr_RSTD_r16", -1);

      nr_RSTD_r16 = new NR_DL_TDOA_MeasElement_r16_nr_RSTD_r16();
      nr_RSTD_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("nr_RSTD_r16", -1);

      // decode nr_AdditionalPathList_r16

      if (nr_AdditionalPathList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("nr_AdditionalPathList_r16", -1);

         nr_AdditionalPathList_r16 = new NR_AdditionalPathList_r16();
         nr_AdditionalPathList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nr_AdditionalPathList_r16", -1);
      }
      else {
         nr_AdditionalPathList_r16 = null;
      }

      // decode nr_TimingQuality_r16

      buffer.getContext().eventDispatcher.startElement("nr_TimingQuality_r16", -1);

      nr_TimingQuality_r16 = new NR_TimingQuality_r16();
      nr_TimingQuality_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("nr_TimingQuality_r16", -1);

      // decode nr_DL_PRS_RSRP_Result_r16

      if (nr_DL_PRS_RSRP_Result_r16Present) {
         buffer.getContext().eventDispatcher.startElement("nr_DL_PRS_RSRP_Result_r16", -1);

         nr_DL_PRS_RSRP_Result_r16 = new Asn1Integer();
         nr_DL_PRS_RSRP_Result_r16.decode (buffer, 0, 126);
         buffer.getContext().eventDispatcher.endElement("nr_DL_PRS_RSRP_Result_r16", -1);
      }
      else {
         nr_DL_PRS_RSRP_Result_r16 = null;
      }

      // decode nr_DL_TDOA_AdditionalMeasurements_r16

      if (nr_DL_TDOA_AdditionalMeasurements_r16Present) {
         buffer.getContext().eventDispatcher.startElement("nr_DL_TDOA_AdditionalMeasurements_r16", -1);

         nr_DL_TDOA_AdditionalMeasurements_r16 = new NR_DL_TDOA_AdditionalMeasurements_r16();
         nr_DL_TDOA_AdditionalMeasurements_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nr_DL_TDOA_AdditionalMeasurements_r16", -1);
      }
      else {
         nr_DL_TDOA_AdditionalMeasurements_r16 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((nr_PhysCellID_r16 != null), null);
      buffer.encodeBit ((nr_CellGlobalID_r16 != null), null);
      buffer.encodeBit ((nr_ARFCN_r16 != null), null);
      buffer.encodeBit ((nr_DL_PRS_ResourceID_r16 != null), null);
      buffer.encodeBit ((nr_DL_PRS_ResourceSetID_r16 != null), null);
      buffer.encodeBit ((nr_AdditionalPathList_r16 != null), null);
      buffer.encodeBit ((nr_DL_PRS_RSRP_Result_r16 != null), null);
      buffer.encodeBit ((nr_DL_TDOA_AdditionalMeasurements_r16 != null), null);

      // encode dl_PRS_ID_r16

      if (dl_PRS_ID_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("dl_PRS_ID_r16", -1);

         dl_PRS_ID_r16.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("dl_PRS_ID_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("dl_PRS_ID_r16");

      // encode nr_PhysCellID_r16

      if (nr_PhysCellID_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nr_PhysCellID_r16", -1);

         nr_PhysCellID_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nr_PhysCellID_r16", -1);
      }

      // encode nr_CellGlobalID_r16

      if (nr_CellGlobalID_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nr_CellGlobalID_r16", -1);

         nr_CellGlobalID_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nr_CellGlobalID_r16", -1);
      }

      // encode nr_ARFCN_r16

      if (nr_ARFCN_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nr_ARFCN_r16", -1);

         nr_ARFCN_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nr_ARFCN_r16", -1);
      }

      // encode nr_DL_PRS_ResourceID_r16

      if (nr_DL_PRS_ResourceID_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nr_DL_PRS_ResourceID_r16", -1);

         nr_DL_PRS_ResourceID_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nr_DL_PRS_ResourceID_r16", -1);
      }

      // encode nr_DL_PRS_ResourceSetID_r16

      if (nr_DL_PRS_ResourceSetID_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nr_DL_PRS_ResourceSetID_r16", -1);

         nr_DL_PRS_ResourceSetID_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nr_DL_PRS_ResourceSetID_r16", -1);
      }

      // encode nr_TimeStamp_r16

      if (nr_TimeStamp_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nr_TimeStamp_r16", -1);

         nr_TimeStamp_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nr_TimeStamp_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("nr_TimeStamp_r16");

      // encode nr_RSTD_r16

      if (nr_RSTD_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nr_RSTD_r16", -1);

         nr_RSTD_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nr_RSTD_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("nr_RSTD_r16");

      // encode nr_AdditionalPathList_r16

      if (nr_AdditionalPathList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nr_AdditionalPathList_r16", -1);

         nr_AdditionalPathList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nr_AdditionalPathList_r16", -1);
      }

      // encode nr_TimingQuality_r16

      if (nr_TimingQuality_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nr_TimingQuality_r16", -1);

         nr_TimingQuality_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nr_TimingQuality_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("nr_TimingQuality_r16");

      // encode nr_DL_PRS_RSRP_Result_r16

      if (nr_DL_PRS_RSRP_Result_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nr_DL_PRS_RSRP_Result_r16", -1);

         nr_DL_PRS_RSRP_Result_r16.encode (buffer, 0, 126);

         buffer.getContext().eventDispatcher.endElement("nr_DL_PRS_RSRP_Result_r16", -1);
      }

      // encode nr_DL_TDOA_AdditionalMeasurements_r16

      if (nr_DL_TDOA_AdditionalMeasurements_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nr_DL_TDOA_AdditionalMeasurements_r16", -1);

         nr_DL_TDOA_AdditionalMeasurements_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nr_DL_TDOA_AdditionalMeasurements_r16", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
