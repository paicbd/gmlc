/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NPRS_Info_r14_partB_r14_nprs_NumSF_r14 extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _SF10 = 0;
   public static final int _SF20 = 1;
   public static final int _SF40 = 2;
   public static final int _SF80 = 3;
   public static final int _SF160 = 4;
   public static final int _SF320 = 5;
   public static final int _SF640 = 6;
   public static final int _SF1280 = 7;
   public static final int _SF2560_V1510 = 8;

   // Singleton instances of NPRS_Info_r14_partB_r14_nprs_NumSF_r14
   protected static final NPRS_Info_r14_partB_r14_nprs_NumSF_r14 _sf10 = new NPRS_Info_r14_partB_r14_nprs_NumSF_r14(0);
   protected static final NPRS_Info_r14_partB_r14_nprs_NumSF_r14 _sf20 = new NPRS_Info_r14_partB_r14_nprs_NumSF_r14(1);
   protected static final NPRS_Info_r14_partB_r14_nprs_NumSF_r14 _sf40 = new NPRS_Info_r14_partB_r14_nprs_NumSF_r14(2);
   protected static final NPRS_Info_r14_partB_r14_nprs_NumSF_r14 _sf80 = new NPRS_Info_r14_partB_r14_nprs_NumSF_r14(3);
   protected static final NPRS_Info_r14_partB_r14_nprs_NumSF_r14 _sf160 = new NPRS_Info_r14_partB_r14_nprs_NumSF_r14(4);
   protected static final NPRS_Info_r14_partB_r14_nprs_NumSF_r14 _sf320 = new NPRS_Info_r14_partB_r14_nprs_NumSF_r14(5);
   protected static final NPRS_Info_r14_partB_r14_nprs_NumSF_r14 _sf640 = new NPRS_Info_r14_partB_r14_nprs_NumSF_r14(6);
   protected static final NPRS_Info_r14_partB_r14_nprs_NumSF_r14 _sf1280 = new NPRS_Info_r14_partB_r14_nprs_NumSF_r14(7);
   protected static final NPRS_Info_r14_partB_r14_nprs_NumSF_r14 _sf2560_v1510 = new NPRS_Info_r14_partB_r14_nprs_NumSF_r14(8);
   private static NPRS_Info_r14_partB_r14_nprs_NumSF_r14 __undefined = new NPRS_Info_r14_partB_r14_nprs_NumSF_r14(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    */
   protected NPRS_Info_r14_partB_r14_nprs_NumSF_r14 (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for sf10.
    */
   public static NPRS_Info_r14_partB_r14_nprs_NumSF_r14 sf10() {
      return _sf10;
   }

   /**
    * Singleton accessor method for sf20.
    */
   public static NPRS_Info_r14_partB_r14_nprs_NumSF_r14 sf20() {
      return _sf20;
   }

   /**
    * Singleton accessor method for sf40.
    */
   public static NPRS_Info_r14_partB_r14_nprs_NumSF_r14 sf40() {
      return _sf40;
   }

   /**
    * Singleton accessor method for sf80.
    */
   public static NPRS_Info_r14_partB_r14_nprs_NumSF_r14 sf80() {
      return _sf80;
   }

   /**
    * Singleton accessor method for sf160.
    */
   public static NPRS_Info_r14_partB_r14_nprs_NumSF_r14 sf160() {
      return _sf160;
   }

   /**
    * Singleton accessor method for sf320.
    */
   public static NPRS_Info_r14_partB_r14_nprs_NumSF_r14 sf320() {
      return _sf320;
   }

   /**
    * Singleton accessor method for sf640.
    */
   public static NPRS_Info_r14_partB_r14_nprs_NumSF_r14 sf640() {
      return _sf640;
   }

   /**
    * Singleton accessor method for sf1280.
    */
   public static NPRS_Info_r14_partB_r14_nprs_NumSF_r14 sf1280() {
      return _sf1280;
   }

   /**
    * Singleton accessor method for sf2560_v1510.
    */
   public static NPRS_Info_r14_partB_r14_nprs_NumSF_r14 sf2560_v1510() {
      return _sf2560_v1510;
   }

   /** Undefined value. */
   protected static NPRS_Info_r14_partB_r14_nprs_NumSF_r14 __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return NPRS_Info_r14_partB_r14_nprs_NumSF_r14.valueOf( NPRS_Info_r14_partB_r14_nprs_NumSF_r14.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static NPRS_Info_r14_partB_r14_nprs_NumSF_r14 valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return sf10();
         case 1: return sf20();
         case 2: return sf40();
         case 3: return sf80();
         case 4: return sf160();
         case 5: return sf320();
         case 6: return sf640();
         case 7: return sf1280();
         case 8: return sf2560_v1510();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         switch (ui) {
            case 0: ret = 8; break;
            default: ret = 0x7fffffff; break;
         }
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (8);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            case 3: ret =  3; break;
            case 4: ret =  4; break;
            case 5: ret =  5; break;
            case 6: ret =  6; break;
            case 7: ret =  7; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      boolean extbit = false;

      switch ((int)value) {
         case 0: ui = 0; /* sf10 */break;
         case 1: ui = 1; /* sf20 */break;
         case 2: ui = 2; /* sf40 */break;
         case 3: ui = 3; /* sf80 */break;
         case 4: ui = 4; /* sf160 */break;
         case 5: ui = 5; /* sf320 */break;
         case 6: ui = 6; /* sf640 */break;
         case 7: ui = 7; /* sf1280 */break;
         case 8: ui = 0; /* sf2560_v1510 */extbit = true; break;
         default:
            ui = (int) value;
            extbit = true;
      }

      buffer.encodeBit (extbit, "extbit");

      if (extbit) {
         buffer.encodeSmallNonNegWholeNumber (ui);
      }
      else {
         buffer.encodeConsWholeNumber (ui, 8);
      }
   }

}
