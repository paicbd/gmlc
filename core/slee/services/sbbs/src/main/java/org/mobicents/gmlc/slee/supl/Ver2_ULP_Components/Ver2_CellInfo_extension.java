/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class Ver2_CellInfo_extension extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Ver2-CellInfo-extension";
   }

   // Choice element identifier constants
   public final static byte _HRPDCELL = 1;
   public final static byte _UMBCELL = 2;
   public final static byte _LTECELL = 3;
   public final static byte _WLANAP = 4;
   public final static byte _WIMAXBS = 5;
   public final static byte _NRCELL = 6;
   public final static byte _EXTELEM1 = 7;

   public Ver2_CellInfo_extension () {
      super();
   }

   public Ver2_CellInfo_extension (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _HRPDCELL: return "hrpdCell";
      case _UMBCELL: return "umbCell";
      case _LTECELL: return "lteCell";
      case _WLANAP: return "wlanAP";
      case _WIMAXBS: return "wimaxBS";
      case _NRCELL: return "nrCell";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for hrpdCell
    */
   public HrpdCellInformation getHrpdCell () {
      return (choiceID == _HRPDCELL) ? (HrpdCellInformation)element : null;
   }
   public void setHrpdCell (HrpdCellInformation value) {
      setElement (_HRPDCELL, value);
   }
   public boolean isHrpdCell () {
      return (choiceID == _HRPDCELL);
   }

   /**
    * Accessor/mutator methods for umbCell
    */
   public UmbCellInformation getUmbCell () {
      return (choiceID == _UMBCELL) ? (UmbCellInformation)element : null;
   }
   public void setUmbCell (UmbCellInformation value) {
      setElement (_UMBCELL, value);
   }
   public boolean isUmbCell () {
      return (choiceID == _UMBCELL);
   }

   /**
    * Accessor/mutator methods for lteCell
    */
   public LteCellInformation getLteCell () {
      return (choiceID == _LTECELL) ? (LteCellInformation)element : null;
   }
   public void setLteCell (LteCellInformation value) {
      setElement (_LTECELL, value);
   }
   public boolean isLteCell () {
      return (choiceID == _LTECELL);
   }

   /**
    * Accessor/mutator methods for wlanAP
    */
   public WlanAPInformation getWlanAP () {
      return (choiceID == _WLANAP) ? (WlanAPInformation)element : null;
   }
   public void setWlanAP (WlanAPInformation value) {
      setElement (_WLANAP, value);
   }
   public boolean isWlanAP () {
      return (choiceID == _WLANAP);
   }

   /**
    * Accessor/mutator methods for wimaxBS
    */
   public WimaxBSInformation getWimaxBS () {
      return (choiceID == _WIMAXBS) ? (WimaxBSInformation)element : null;
   }
   public void setWimaxBS (WimaxBSInformation value) {
      setElement (_WIMAXBS, value);
   }
   public boolean isWimaxBS () {
      return (choiceID == _WIMAXBS);
   }

   /**
    * Accessor/mutator methods for nrCell
    */
   public NRCellInformation getNrCell () {
      return (choiceID == _NRCELL) ? (NRCellInformation)element : null;
   }
   public void setNrCell (NRCellInformation value) {
      setElement (_NRCELL, value);
   }
   public boolean isNrCell () {
      return (choiceID == _NRCELL);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (5, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // hrpdCell
            case 0: { 
               HrpdCellInformation hrpdCell;
               element = hrpdCell = new HrpdCellInformation();
               hrpdCell.decode (buffer);
               break;
            }

            // umbCell
            case 1: { 
               UmbCellInformation umbCell;
               element = umbCell = new UmbCellInformation();
               umbCell.decode (buffer);
               break;
            }

            // lteCell
            case 2: { 
               LteCellInformation lteCell;
               element = lteCell = new LteCellInformation();
               lteCell.decode (buffer);
               break;
            }

            // wlanAP
            case 3: { 
               WlanAPInformation wlanAP;
               element = wlanAP = new WlanAPInformation();
               wlanAP.decode (buffer);
               break;
            }

            // wimaxBS
            case 4: { 
               WimaxBSInformation wimaxBS;
               element = wimaxBS = new WimaxBSInformation();
               wimaxBS.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 6;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // nrCell
            case 0: { 
               NRCellInformation nrCell;
               element = nrCell = new NRCellInformation();
               nrCell.decode (buffer);
               break;
            }

            // extElem1
            case 1: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 5);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 5, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // hrpdCell
            case _HRPDCELL:
               HrpdCellInformation hrpdCell = (HrpdCellInformation) element;
               hrpdCell.encode (buffer);
               break;

            // umbCell
            case _UMBCELL:
               UmbCellInformation umbCell = (UmbCellInformation) element;
               umbCell.encode (buffer);
               break;

            // lteCell
            case _LTECELL:
               LteCellInformation lteCell = (LteCellInformation) element;
               lteCell.encode (buffer);
               break;

            // wlanAP
            case _WLANAP:
               WlanAPInformation wlanAP = (WlanAPInformation) element;
               wlanAP.encode (buffer);
               break;

            // wimaxBS
            case _WIMAXBS:
               WimaxBSInformation wimaxBS = (WimaxBSInformation) element;
               wimaxBS.encode (buffer);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 6);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1PerEncodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());
         Asn1OpenType openType;

         switch (choiceID) {
            // nrCell
            case _NRCELL:
               NRCellInformation nrCell = (NRCellInformation) element;
               nrCell.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            default:
               openType = (Asn1OpenType)getElement();
         }

         buffer = savedBuffer;
         if (openType != null) {
            buffer.byteAlign();
            openType.encode (buffer);
         }
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
