/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class PressureValidityPeriod_v1520 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "PressureValidityPeriod-v1520";
   }

   protected GNSS_SystemTime beginTime_v1520;
   protected Asn1Integer beginTimeAlt_v1520;  // optional
   protected Asn1Integer duration_v1520;
   protected Asn1OpenExt extElem1;

   public PressureValidityPeriod_v1520 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PressureValidityPeriod_v1520 (
      GNSS_SystemTime beginTime_v1520_,
      Asn1Integer beginTimeAlt_v1520_,
      Asn1Integer duration_v1520_
   ) throws Asn1Exception {
      super();
      setBeginTime_v1520 (beginTime_v1520_);
      setBeginTimeAlt_v1520 (beginTimeAlt_v1520_);
      setDuration_v1520 (duration_v1520_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PressureValidityPeriod_v1520 (
      GNSS_SystemTime beginTime_v1520_,
      Asn1Integer duration_v1520_
   ) throws Asn1Exception {
      super();
      setBeginTime_v1520 (beginTime_v1520_);
      setDuration_v1520 (duration_v1520_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PressureValidityPeriod_v1520 (GNSS_SystemTime beginTime_v1520_,
      long beginTimeAlt_v1520_,
      long duration_v1520_
   ) throws Asn1Exception {
      super();
      setBeginTime_v1520 (beginTime_v1520_);
      setBeginTimeAlt_v1520 (beginTimeAlt_v1520_);
      setDuration_v1520 (duration_v1520_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public PressureValidityPeriod_v1520 (
      GNSS_SystemTime beginTime_v1520_,
      long duration_v1520_
   ) throws Asn1Exception {
      super();
      setBeginTime_v1520 (beginTime_v1520_);
      setDuration_v1520 (duration_v1520_);
   }

   public void init () {
      beginTime_v1520 = null;
      beginTimeAlt_v1520 = null;
      duration_v1520 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof PressureValidityPeriod_v1520) ) return false;

      PressureValidityPeriod_v1520 rhs = (PressureValidityPeriod_v1520) obj;

      if (beginTime_v1520 == null) {
         if (rhs.beginTime_v1520 != null) return false;
      }
      else {
         if (!beginTime_v1520.equals(rhs.beginTime_v1520)) {
            return false;
         }
      }

      if (beginTimeAlt_v1520 == null) {
         if (rhs.beginTimeAlt_v1520 != null) return false;
      }
      else {
         if (!beginTimeAlt_v1520.equals(rhs.beginTimeAlt_v1520)) {
            return false;
         }
      }

      if (duration_v1520 == null) {
         if (rhs.duration_v1520 != null) return false;
      }
      else {
         if (!duration_v1520.equals(rhs.duration_v1520)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (beginTime_v1520 != null) __code = 31*__code + beginTime_v1520.hashCode();
      if (beginTimeAlt_v1520 != null) __code = 31*__code + beginTimeAlt_v1520.hashCode();
      if (duration_v1520 != null) __code = 31*__code + duration_v1520.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for BeginTime_v1520
    */
   public GNSS_SystemTime getBeginTime_v1520 () {
      return beginTime_v1520;
   }

   public void setBeginTime_v1520 (GNSS_SystemTime value) {
      this.beginTime_v1520 = value;
   }

   /**
    * Accessor/mutator methods for BeginTimeAlt_v1520
    */
   public Asn1Integer getBeginTimeAlt_v1520 () {
      return beginTimeAlt_v1520;
   }

   public void setBeginTimeAlt_v1520 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 2881))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.beginTimeAlt_v1520 = value;
   }

   public void setBeginTimeAlt_v1520 (long value) 
      throws Asn1Exception
   {
      setBeginTimeAlt_v1520 (new Asn1Integer(value));
   }
   public boolean hasBeginTimeAlt_v1520 () {
      return (beginTimeAlt_v1520 != null);
   }

   /**
    * Accessor/mutator methods for Duration_v1520
    */
   public Asn1Integer getDuration_v1520 () {
      return duration_v1520;
   }

   public void setDuration_v1520 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 2881))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.duration_v1520 = value;
   }

   public void setDuration_v1520 (long value) 
      throws Asn1Exception
   {
      setDuration_v1520 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return beginTime_v1520;
         case 1: return beginTimeAlt_v1520;
         case 2: return duration_v1520;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "beginTime-v1520";
         case 1: return "beginTimeAlt-v1520";
         case 2: return "duration-v1520";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean beginTimeAlt_v1520Present = buffer.decodeBit ("beginTimeAlt_v1520Present");

      // decode beginTime_v1520

      buffer.getContext().eventDispatcher.startElement("beginTime_v1520", -1);

      beginTime_v1520 = new GNSS_SystemTime();
      beginTime_v1520.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("beginTime_v1520", -1);

      // decode beginTimeAlt_v1520

      if (beginTimeAlt_v1520Present) {
         buffer.getContext().eventDispatcher.startElement("beginTimeAlt_v1520", -1);

         beginTimeAlt_v1520 = new Asn1Integer();
         beginTimeAlt_v1520.decode (buffer, 0, 2881);
         buffer.getContext().eventDispatcher.endElement("beginTimeAlt_v1520", -1);
      }
      else {
         beginTimeAlt_v1520 = null;
      }

      // decode duration_v1520

      buffer.getContext().eventDispatcher.startElement("duration_v1520", -1);

      duration_v1520 = new Asn1Integer();
      duration_v1520.decode (buffer, 1, 2881);
      buffer.getContext().eventDispatcher.endElement("duration_v1520", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((beginTimeAlt_v1520 != null), null);

      // encode beginTime_v1520

      if (beginTime_v1520 != null) {
         buffer.getContext().eventDispatcher.startElement("beginTime_v1520", -1);

         beginTime_v1520.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("beginTime_v1520", -1);
      }
      else throw new Asn1MissingRequiredException ("beginTime_v1520");

      // encode beginTimeAlt_v1520

      if (beginTimeAlt_v1520 != null) {
         buffer.getContext().eventDispatcher.startElement("beginTimeAlt_v1520", -1);

         beginTimeAlt_v1520.encode (buffer, 0, 2881);

         buffer.getContext().eventDispatcher.endElement("beginTimeAlt_v1520", -1);
      }

      // encode duration_v1520

      if (duration_v1520 != null) {
         buffer.getContext().eventDispatcher.startElement("duration_v1520", -1);

         duration_v1520.encode (buffer, 1, 2881);

         buffer.getContext().eventDispatcher.endElement("duration_v1520", -1);
      }
      else throw new Asn1MissingRequiredException ("duration_v1520");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
