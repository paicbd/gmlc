/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_TRIGGERED_RESPONSE;

import com.objsys.asn1j.runtime.*;

public class ReportingMode extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_TRIGGERED_RESPONSERtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_TRIGGERED_RESPONSERtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ReportingMode";
   }

   protected RepModee repMode = null;
   protected BatchRepConditions batchRepConditions;  // optional
   protected BatchRepType batchRepType;  // optional
   protected Asn1OpenExt extElem1;

   public ReportingMode () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ReportingMode (
      RepModee repMode_,
      BatchRepConditions batchRepConditions_,
      BatchRepType batchRepType_
   ) {
      super();
      setRepMode (repMode_);
      setBatchRepConditions (batchRepConditions_);
      setBatchRepType (batchRepType_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ReportingMode (
      RepModee repMode_
   ) {
      super();
      setRepMode (repMode_);
   }

   public void init () {
      repMode = null;
      batchRepConditions = null;
      batchRepType = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof ReportingMode) ) return false;

      ReportingMode rhs = (ReportingMode) obj;

      if (repMode == null) {
         if (rhs.repMode != null) return false;
      }
      else {
         if (!repMode.equals(rhs.repMode)) {
            return false;
         }
      }

      if (batchRepConditions == null) {
         if (rhs.batchRepConditions != null) return false;
      }
      else {
         if (!batchRepConditions.equals(rhs.batchRepConditions)) {
            return false;
         }
      }

      if (batchRepType == null) {
         if (rhs.batchRepType != null) return false;
      }
      else {
         if (!batchRepType.equals(rhs.batchRepType)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (repMode != null) __code = 31*__code + repMode.hashCode();
      if (batchRepConditions != null) __code = 31*__code + batchRepConditions.hashCode();
      if (batchRepType != null) __code = 31*__code + batchRepType.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for RepMode
    */
   public RepModee getRepMode () {
      return repMode;
   }

   public void setRepMode (RepModee value) {
      this.repMode = value;
   }

   /**
    * Accessor/mutator methods for BatchRepConditions
    */
   public BatchRepConditions getBatchRepConditions () {
      return batchRepConditions;
   }

   public void setBatchRepConditions (BatchRepConditions value) {
      this.batchRepConditions = value;
   }

   public boolean hasBatchRepConditions () {
      return (batchRepConditions != null);
   }

   /**
    * Accessor/mutator methods for BatchRepType
    */
   public BatchRepType getBatchRepType () {
      return batchRepType;
   }

   public void setBatchRepType (BatchRepType value) {
      this.batchRepType = value;
   }

   public boolean hasBatchRepType () {
      return (batchRepType != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return repMode;
         case 1: return batchRepConditions;
         case 2: return batchRepType;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "repMode";
         case 1: return "batchRepConditions";
         case 2: return "batchRepType";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean batchRepConditionsPresent = buffer.decodeBit ("batchRepConditionsPresent");
      boolean batchRepTypePresent = buffer.decodeBit ("batchRepTypePresent");

      // decode repMode

      buffer.getContext().eventDispatcher.startElement("repMode", -1);

      {
         int tval = RepModee.decodeEnumValue (buffer);
         repMode = RepModee.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("repMode", -1);

      // decode batchRepConditions

      if (batchRepConditionsPresent) {
         buffer.getContext().eventDispatcher.startElement("batchRepConditions", -1);

         batchRepConditions = new BatchRepConditions();
         batchRepConditions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("batchRepConditions", -1);
      }
      else {
         batchRepConditions = null;
      }

      // decode batchRepType

      if (batchRepTypePresent) {
         buffer.getContext().eventDispatcher.startElement("batchRepType", -1);

         batchRepType = new BatchRepType();
         batchRepType.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("batchRepType", -1);
      }
      else {
         batchRepType = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((batchRepConditions != null), null);
      buffer.encodeBit ((batchRepType != null), null);

      // encode repMode

      if (repMode != null) {
         buffer.getContext().eventDispatcher.startElement("repMode", -1);

         repMode.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("repMode", -1);
      }
      else throw new Asn1MissingRequiredException ("repMode");

      // encode batchRepConditions

      if (batchRepConditions != null) {
         buffer.getContext().eventDispatcher.startElement("batchRepConditions", -1);

         batchRepConditions.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("batchRepConditions", -1);
      }

      // encode batchRepType

      if (batchRepType != null) {
         buffer.getContext().eventDispatcher.startElement("batchRepType", -1);

         batchRepType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("batchRepType", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
