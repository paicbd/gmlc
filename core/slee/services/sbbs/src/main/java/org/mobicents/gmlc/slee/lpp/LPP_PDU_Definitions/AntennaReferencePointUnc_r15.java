/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class AntennaReferencePointUnc_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "AntennaReferencePointUnc-r15";
   }

   protected Asn1Integer uncertainty_X_r15;
   protected Asn1Integer confidence_X_r15;
   protected Asn1Integer uncertainty_Y_r15;
   protected Asn1Integer confidence_Y_r15;
   protected Asn1Integer uncertainty_Z_r15;
   protected Asn1Integer confidence_Z_r15;
   protected Asn1OpenExt extElem1;

   public AntennaReferencePointUnc_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AntennaReferencePointUnc_r15 (
      Asn1Integer uncertainty_X_r15_,
      Asn1Integer confidence_X_r15_,
      Asn1Integer uncertainty_Y_r15_,
      Asn1Integer confidence_Y_r15_,
      Asn1Integer uncertainty_Z_r15_,
      Asn1Integer confidence_Z_r15_
   ) throws Asn1Exception {
      super();
      setUncertainty_X_r15 (uncertainty_X_r15_);
      setConfidence_X_r15 (confidence_X_r15_);
      setUncertainty_Y_r15 (uncertainty_Y_r15_);
      setConfidence_Y_r15 (confidence_Y_r15_);
      setUncertainty_Z_r15 (uncertainty_Z_r15_);
      setConfidence_Z_r15 (confidence_Z_r15_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AntennaReferencePointUnc_r15 (long uncertainty_X_r15_,
      long confidence_X_r15_,
      long uncertainty_Y_r15_,
      long confidence_Y_r15_,
      long uncertainty_Z_r15_,
      long confidence_Z_r15_
   ) throws Asn1Exception {
      super();
      setUncertainty_X_r15 (uncertainty_X_r15_);
      setConfidence_X_r15 (confidence_X_r15_);
      setUncertainty_Y_r15 (uncertainty_Y_r15_);
      setConfidence_Y_r15 (confidence_Y_r15_);
      setUncertainty_Z_r15 (uncertainty_Z_r15_);
      setConfidence_Z_r15 (confidence_Z_r15_);
   }

   public void init () {
      uncertainty_X_r15 = null;
      confidence_X_r15 = null;
      uncertainty_Y_r15 = null;
      confidence_Y_r15 = null;
      uncertainty_Z_r15 = null;
      confidence_Z_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof AntennaReferencePointUnc_r15) ) return false;

      AntennaReferencePointUnc_r15 rhs = (AntennaReferencePointUnc_r15) obj;

      if (uncertainty_X_r15 == null) {
         if (rhs.uncertainty_X_r15 != null) return false;
      }
      else {
         if (!uncertainty_X_r15.equals(rhs.uncertainty_X_r15)) {
            return false;
         }
      }

      if (confidence_X_r15 == null) {
         if (rhs.confidence_X_r15 != null) return false;
      }
      else {
         if (!confidence_X_r15.equals(rhs.confidence_X_r15)) {
            return false;
         }
      }

      if (uncertainty_Y_r15 == null) {
         if (rhs.uncertainty_Y_r15 != null) return false;
      }
      else {
         if (!uncertainty_Y_r15.equals(rhs.uncertainty_Y_r15)) {
            return false;
         }
      }

      if (confidence_Y_r15 == null) {
         if (rhs.confidence_Y_r15 != null) return false;
      }
      else {
         if (!confidence_Y_r15.equals(rhs.confidence_Y_r15)) {
            return false;
         }
      }

      if (uncertainty_Z_r15 == null) {
         if (rhs.uncertainty_Z_r15 != null) return false;
      }
      else {
         if (!uncertainty_Z_r15.equals(rhs.uncertainty_Z_r15)) {
            return false;
         }
      }

      if (confidence_Z_r15 == null) {
         if (rhs.confidence_Z_r15 != null) return false;
      }
      else {
         if (!confidence_Z_r15.equals(rhs.confidence_Z_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (uncertainty_X_r15 != null) __code = 31*__code + uncertainty_X_r15.hashCode();
      if (confidence_X_r15 != null) __code = 31*__code + confidence_X_r15.hashCode();
      if (uncertainty_Y_r15 != null) __code = 31*__code + uncertainty_Y_r15.hashCode();
      if (confidence_Y_r15 != null) __code = 31*__code + confidence_Y_r15.hashCode();
      if (uncertainty_Z_r15 != null) __code = 31*__code + uncertainty_Z_r15.hashCode();
      if (confidence_Z_r15 != null) __code = 31*__code + confidence_Z_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Uncertainty_X_r15
    */
   public Asn1Integer getUncertainty_X_r15 () {
      return uncertainty_X_r15;
   }

   public void setUncertainty_X_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.uncertainty_X_r15 = value;
   }

   public void setUncertainty_X_r15 (long value) 
      throws Asn1Exception
   {
      setUncertainty_X_r15 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Confidence_X_r15
    */
   public Asn1Integer getConfidence_X_r15 () {
      return confidence_X_r15;
   }

   public void setConfidence_X_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 100))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.confidence_X_r15 = value;
   }

   public void setConfidence_X_r15 (long value) 
      throws Asn1Exception
   {
      setConfidence_X_r15 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Uncertainty_Y_r15
    */
   public Asn1Integer getUncertainty_Y_r15 () {
      return uncertainty_Y_r15;
   }

   public void setUncertainty_Y_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.uncertainty_Y_r15 = value;
   }

   public void setUncertainty_Y_r15 (long value) 
      throws Asn1Exception
   {
      setUncertainty_Y_r15 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Confidence_Y_r15
    */
   public Asn1Integer getConfidence_Y_r15 () {
      return confidence_Y_r15;
   }

   public void setConfidence_Y_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 100))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.confidence_Y_r15 = value;
   }

   public void setConfidence_Y_r15 (long value) 
      throws Asn1Exception
   {
      setConfidence_Y_r15 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Uncertainty_Z_r15
    */
   public Asn1Integer getUncertainty_Z_r15 () {
      return uncertainty_Z_r15;
   }

   public void setUncertainty_Z_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.uncertainty_Z_r15 = value;
   }

   public void setUncertainty_Z_r15 (long value) 
      throws Asn1Exception
   {
      setUncertainty_Z_r15 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Confidence_Z_r15
    */
   public Asn1Integer getConfidence_Z_r15 () {
      return confidence_Z_r15;
   }

   public void setConfidence_Z_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 100))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.confidence_Z_r15 = value;
   }

   public void setConfidence_Z_r15 (long value) 
      throws Asn1Exception
   {
      setConfidence_Z_r15 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return uncertainty_X_r15;
         case 1: return confidence_X_r15;
         case 2: return uncertainty_Y_r15;
         case 3: return confidence_Y_r15;
         case 4: return uncertainty_Z_r15;
         case 5: return confidence_Z_r15;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "uncertainty-X-r15";
         case 1: return "confidence-X-r15";
         case 2: return "uncertainty-Y-r15";
         case 3: return "confidence-Y-r15";
         case 4: return "uncertainty-Z-r15";
         case 5: return "confidence-Z-r15";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode uncertainty_X_r15

      buffer.getContext().eventDispatcher.startElement("uncertainty_X_r15", -1);

      uncertainty_X_r15 = new Asn1Integer();
      uncertainty_X_r15.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("uncertainty_X_r15", -1);

      // decode confidence_X_r15

      buffer.getContext().eventDispatcher.startElement("confidence_X_r15", -1);

      confidence_X_r15 = new Asn1Integer();
      confidence_X_r15.decode (buffer, 0, 100);
      buffer.getContext().eventDispatcher.endElement("confidence_X_r15", -1);

      // decode uncertainty_Y_r15

      buffer.getContext().eventDispatcher.startElement("uncertainty_Y_r15", -1);

      uncertainty_Y_r15 = new Asn1Integer();
      uncertainty_Y_r15.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("uncertainty_Y_r15", -1);

      // decode confidence_Y_r15

      buffer.getContext().eventDispatcher.startElement("confidence_Y_r15", -1);

      confidence_Y_r15 = new Asn1Integer();
      confidence_Y_r15.decode (buffer, 0, 100);
      buffer.getContext().eventDispatcher.endElement("confidence_Y_r15", -1);

      // decode uncertainty_Z_r15

      buffer.getContext().eventDispatcher.startElement("uncertainty_Z_r15", -1);

      uncertainty_Z_r15 = new Asn1Integer();
      uncertainty_Z_r15.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("uncertainty_Z_r15", -1);

      // decode confidence_Z_r15

      buffer.getContext().eventDispatcher.startElement("confidence_Z_r15", -1);

      confidence_Z_r15 = new Asn1Integer();
      confidence_Z_r15.decode (buffer, 0, 100);
      buffer.getContext().eventDispatcher.endElement("confidence_Z_r15", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode uncertainty_X_r15

      if (uncertainty_X_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("uncertainty_X_r15", -1);

         uncertainty_X_r15.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("uncertainty_X_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("uncertainty_X_r15");

      // encode confidence_X_r15

      if (confidence_X_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("confidence_X_r15", -1);

         confidence_X_r15.encode (buffer, 0, 100);

         buffer.getContext().eventDispatcher.endElement("confidence_X_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("confidence_X_r15");

      // encode uncertainty_Y_r15

      if (uncertainty_Y_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("uncertainty_Y_r15", -1);

         uncertainty_Y_r15.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("uncertainty_Y_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("uncertainty_Y_r15");

      // encode confidence_Y_r15

      if (confidence_Y_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("confidence_Y_r15", -1);

         confidence_Y_r15.encode (buffer, 0, 100);

         buffer.getContext().eventDispatcher.endElement("confidence_Y_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("confidence_Y_r15");

      // encode uncertainty_Z_r15

      if (uncertainty_Z_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("uncertainty_Z_r15", -1);

         uncertainty_Z_r15.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("uncertainty_Z_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("uncertainty_Z_r15");

      // encode confidence_Z_r15

      if (confidence_Z_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("confidence_Z_r15", -1);

         confidence_Z_r15.encode (buffer, 0, 100);

         buffer.getContext().eventDispatcher.endElement("confidence_Z_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("confidence_Z_r15");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
