/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_START;

import com.objsys.asn1j.runtime.*;

public class PrefMethod extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_STARTRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_STARTRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "PrefMethod";
   }

   // Integer constants for switch-case
   public static final int _AGPSSETASSISTEDPREFERRED = 0;
   public static final int _AGPSSETBASEDPREFERRED = 1;
   public static final int _NOPREFERENCE = 2;

   // Singleton instances of PrefMethod
   protected static final PrefMethod _agpsSETassistedPreferred = new PrefMethod(0);
   protected static final PrefMethod _agpsSETBasedPreferred = new PrefMethod(1);
   protected static final PrefMethod _noPreference = new PrefMethod(2);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    */
   protected PrefMethod (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for agpsSETassistedPreferred.
    */
   public static PrefMethod agpsSETassistedPreferred() {
      return _agpsSETassistedPreferred;
   }

   /**
    * Singleton accessor method for agpsSETBasedPreferred.
    */
   public static PrefMethod agpsSETBasedPreferred() {
      return _agpsSETBasedPreferred;
   }

   /**
    * Singleton accessor method for noPreference.
    */
   public static PrefMethod noPreference() {
      return _noPreference;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return PrefMethod.valueOf( PrefMethod.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static PrefMethod valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return agpsSETassistedPreferred();
         case 1: return agpsSETBasedPreferred();
         case 2: return noPreference();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (3);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      switch ((int)value) {
         case 0: ui = 0; /* agpsSETassistedPreferred */break;
         case 1: ui = 1; /* agpsSETBasedPreferred */break;
         case 2: ui = 2; /* noPreference */break;
         default:
            throw new Asn1InvalidEnumException (value);
      }

      buffer.encodeConsWholeNumber (ui, 3);
   }

}
