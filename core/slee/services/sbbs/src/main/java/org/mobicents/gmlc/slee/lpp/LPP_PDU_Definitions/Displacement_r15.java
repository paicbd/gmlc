/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class Displacement_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Displacement-r15";
   }

   protected Asn1Integer bearing_r15;
   protected Asn1Integer bearingUncConfidence_r15;  // optional
   protected Displacement_r15_bearingRef_r15 bearingRef_r15 = null;
   protected Asn1Integer horizontalDistance_r15;
   protected Asn1Integer horizontalDistanceUnc_r15;  // optional
   protected Asn1Integer horizontalUncConfidence_r15;  // optional
   protected Displacement_r15_verticalDirection_r15 verticalDirection_r15 = null;  // optional
   protected Asn1Integer verticalDistance_r15;  // optional
   protected Asn1Integer verticalDistanceUnc_r15;  // optional
   protected Asn1Integer verticalUncConfidence_r15;  // optional
   protected Asn1OpenExt extElem1;

   public Displacement_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Displacement_r15 (
      Asn1Integer bearing_r15_,
      Asn1Integer bearingUncConfidence_r15_,
      Displacement_r15_bearingRef_r15 bearingRef_r15_,
      Asn1Integer horizontalDistance_r15_,
      Asn1Integer horizontalDistanceUnc_r15_,
      Asn1Integer horizontalUncConfidence_r15_,
      Displacement_r15_verticalDirection_r15 verticalDirection_r15_,
      Asn1Integer verticalDistance_r15_,
      Asn1Integer verticalDistanceUnc_r15_,
      Asn1Integer verticalUncConfidence_r15_
   ) throws Asn1Exception {
      super();
      setBearing_r15 (bearing_r15_);
      setBearingUncConfidence_r15 (bearingUncConfidence_r15_);
      setBearingRef_r15 (bearingRef_r15_);
      setHorizontalDistance_r15 (horizontalDistance_r15_);
      setHorizontalDistanceUnc_r15 (horizontalDistanceUnc_r15_);
      setHorizontalUncConfidence_r15 (horizontalUncConfidence_r15_);
      setVerticalDirection_r15 (verticalDirection_r15_);
      setVerticalDistance_r15 (verticalDistance_r15_);
      setVerticalDistanceUnc_r15 (verticalDistanceUnc_r15_);
      setVerticalUncConfidence_r15 (verticalUncConfidence_r15_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public Displacement_r15 (
      Asn1Integer bearing_r15_,
      Displacement_r15_bearingRef_r15 bearingRef_r15_,
      Asn1Integer horizontalDistance_r15_
   ) throws Asn1Exception {
      super();
      setBearing_r15 (bearing_r15_);
      setBearingRef_r15 (bearingRef_r15_);
      setHorizontalDistance_r15 (horizontalDistance_r15_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Displacement_r15 (long bearing_r15_,
      long bearingUncConfidence_r15_,
      Displacement_r15_bearingRef_r15 bearingRef_r15_,
      long horizontalDistance_r15_,
      long horizontalDistanceUnc_r15_,
      long horizontalUncConfidence_r15_,
      Displacement_r15_verticalDirection_r15 verticalDirection_r15_,
      long verticalDistance_r15_,
      long verticalDistanceUnc_r15_,
      long verticalUncConfidence_r15_
   ) throws Asn1Exception {
      super();
      setBearing_r15 (bearing_r15_);
      setBearingUncConfidence_r15 (bearingUncConfidence_r15_);
      setBearingRef_r15 (bearingRef_r15_);
      setHorizontalDistance_r15 (horizontalDistance_r15_);
      setHorizontalDistanceUnc_r15 (horizontalDistanceUnc_r15_);
      setHorizontalUncConfidence_r15 (horizontalUncConfidence_r15_);
      setVerticalDirection_r15 (verticalDirection_r15_);
      setVerticalDistance_r15 (verticalDistance_r15_);
      setVerticalDistanceUnc_r15 (verticalDistanceUnc_r15_);
      setVerticalUncConfidence_r15 (verticalUncConfidence_r15_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public Displacement_r15 (
      long bearing_r15_,
      Displacement_r15_bearingRef_r15 bearingRef_r15_,
      long horizontalDistance_r15_
   ) throws Asn1Exception {
      super();
      setBearing_r15 (bearing_r15_);
      setBearingRef_r15 (bearingRef_r15_);
      setHorizontalDistance_r15 (horizontalDistance_r15_);
   }

   public void init () {
      bearing_r15 = null;
      bearingUncConfidence_r15 = null;
      bearingRef_r15 = null;
      horizontalDistance_r15 = null;
      horizontalDistanceUnc_r15 = null;
      horizontalUncConfidence_r15 = null;
      verticalDirection_r15 = null;
      verticalDistance_r15 = null;
      verticalDistanceUnc_r15 = null;
      verticalUncConfidence_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Displacement_r15) ) return false;

      Displacement_r15 rhs = (Displacement_r15) obj;

      if (bearing_r15 == null) {
         if (rhs.bearing_r15 != null) return false;
      }
      else {
         if (!bearing_r15.equals(rhs.bearing_r15)) {
            return false;
         }
      }

      if (bearingUncConfidence_r15 == null) {
         if (rhs.bearingUncConfidence_r15 != null) return false;
      }
      else {
         if (!bearingUncConfidence_r15.equals(rhs.bearingUncConfidence_r15)) {
            return false;
         }
      }

      if (bearingRef_r15 == null) {
         if (rhs.bearingRef_r15 != null) return false;
      }
      else {
         if (!bearingRef_r15.equals(rhs.bearingRef_r15)) {
            return false;
         }
      }

      if (horizontalDistance_r15 == null) {
         if (rhs.horizontalDistance_r15 != null) return false;
      }
      else {
         if (!horizontalDistance_r15.equals(rhs.horizontalDistance_r15)) {
            return false;
         }
      }

      if (horizontalDistanceUnc_r15 == null) {
         if (rhs.horizontalDistanceUnc_r15 != null) return false;
      }
      else {
         if (!horizontalDistanceUnc_r15.equals(rhs.horizontalDistanceUnc_r15)) {
            return false;
         }
      }

      if (horizontalUncConfidence_r15 == null) {
         if (rhs.horizontalUncConfidence_r15 != null) return false;
      }
      else {
         if (!horizontalUncConfidence_r15.equals(rhs.horizontalUncConfidence_r15)) {
            return false;
         }
      }

      if (verticalDirection_r15 == null) {
         if (rhs.verticalDirection_r15 != null) return false;
      }
      else {
         if (!verticalDirection_r15.equals(rhs.verticalDirection_r15)) {
            return false;
         }
      }

      if (verticalDistance_r15 == null) {
         if (rhs.verticalDistance_r15 != null) return false;
      }
      else {
         if (!verticalDistance_r15.equals(rhs.verticalDistance_r15)) {
            return false;
         }
      }

      if (verticalDistanceUnc_r15 == null) {
         if (rhs.verticalDistanceUnc_r15 != null) return false;
      }
      else {
         if (!verticalDistanceUnc_r15.equals(rhs.verticalDistanceUnc_r15)) {
            return false;
         }
      }

      if (verticalUncConfidence_r15 == null) {
         if (rhs.verticalUncConfidence_r15 != null) return false;
      }
      else {
         if (!verticalUncConfidence_r15.equals(rhs.verticalUncConfidence_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (bearing_r15 != null) __code = 31*__code + bearing_r15.hashCode();
      if (bearingUncConfidence_r15 != null) __code = 31*__code + bearingUncConfidence_r15.hashCode();
      if (bearingRef_r15 != null) __code = 31*__code + bearingRef_r15.hashCode();
      if (horizontalDistance_r15 != null) __code = 31*__code + horizontalDistance_r15.hashCode();
      if (horizontalDistanceUnc_r15 != null) __code = 31*__code + horizontalDistanceUnc_r15.hashCode();
      if (horizontalUncConfidence_r15 != null) __code = 31*__code + horizontalUncConfidence_r15.hashCode();
      if (verticalDirection_r15 != null) __code = 31*__code + verticalDirection_r15.hashCode();
      if (verticalDistance_r15 != null) __code = 31*__code + verticalDistance_r15.hashCode();
      if (verticalDistanceUnc_r15 != null) __code = 31*__code + verticalDistanceUnc_r15.hashCode();
      if (verticalUncConfidence_r15 != null) __code = 31*__code + verticalUncConfidence_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Bearing_r15
    */
   public Asn1Integer getBearing_r15 () {
      return bearing_r15;
   }

   public void setBearing_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 3599))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.bearing_r15 = value;
   }

   public void setBearing_r15 (long value) 
      throws Asn1Exception
   {
      setBearing_r15 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for BearingUncConfidence_r15
    */
   public Asn1Integer getBearingUncConfidence_r15 () {
      return bearingUncConfidence_r15;
   }

   public void setBearingUncConfidence_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 100))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.bearingUncConfidence_r15 = value;
   }

   public void setBearingUncConfidence_r15 (long value) 
      throws Asn1Exception
   {
      setBearingUncConfidence_r15 (new Asn1Integer(value));
   }
   public boolean hasBearingUncConfidence_r15 () {
      return (bearingUncConfidence_r15 != null);
   }

   /**
    * Accessor/mutator methods for BearingRef_r15
    */
   public Displacement_r15_bearingRef_r15 getBearingRef_r15 () {
      return bearingRef_r15;
   }

   public void setBearingRef_r15 (Displacement_r15_bearingRef_r15 value) {
      this.bearingRef_r15 = value;
   }

   /**
    * Accessor/mutator methods for HorizontalDistance_r15
    */
   public Asn1Integer getHorizontalDistance_r15 () {
      return horizontalDistance_r15;
   }

   public void setHorizontalDistance_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 8191))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.horizontalDistance_r15 = value;
   }

   public void setHorizontalDistance_r15 (long value) 
      throws Asn1Exception
   {
      setHorizontalDistance_r15 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for HorizontalDistanceUnc_r15
    */
   public Asn1Integer getHorizontalDistanceUnc_r15 () {
      return horizontalDistanceUnc_r15;
   }

   public void setHorizontalDistanceUnc_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.horizontalDistanceUnc_r15 = value;
   }

   public void setHorizontalDistanceUnc_r15 (long value) 
      throws Asn1Exception
   {
      setHorizontalDistanceUnc_r15 (new Asn1Integer(value));
   }
   public boolean hasHorizontalDistanceUnc_r15 () {
      return (horizontalDistanceUnc_r15 != null);
   }

   /**
    * Accessor/mutator methods for HorizontalUncConfidence_r15
    */
   public Asn1Integer getHorizontalUncConfidence_r15 () {
      return horizontalUncConfidence_r15;
   }

   public void setHorizontalUncConfidence_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 100))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.horizontalUncConfidence_r15 = value;
   }

   public void setHorizontalUncConfidence_r15 (long value) 
      throws Asn1Exception
   {
      setHorizontalUncConfidence_r15 (new Asn1Integer(value));
   }
   public boolean hasHorizontalUncConfidence_r15 () {
      return (horizontalUncConfidence_r15 != null);
   }

   /**
    * Accessor/mutator methods for VerticalDirection_r15
    */
   public Displacement_r15_verticalDirection_r15 getVerticalDirection_r15 () {
      return verticalDirection_r15;
   }

   public void setVerticalDirection_r15 (Displacement_r15_verticalDirection_r15 value) {
      this.verticalDirection_r15 = value;
   }

   public boolean hasVerticalDirection_r15 () {
      return (verticalDirection_r15 != null);
   }

   /**
    * Accessor/mutator methods for VerticalDistance_r15
    */
   public Asn1Integer getVerticalDistance_r15 () {
      return verticalDistance_r15;
   }

   public void setVerticalDistance_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 8191))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.verticalDistance_r15 = value;
   }

   public void setVerticalDistance_r15 (long value) 
      throws Asn1Exception
   {
      setVerticalDistance_r15 (new Asn1Integer(value));
   }
   public boolean hasVerticalDistance_r15 () {
      return (verticalDistance_r15 != null);
   }

   /**
    * Accessor/mutator methods for VerticalDistanceUnc_r15
    */
   public Asn1Integer getVerticalDistanceUnc_r15 () {
      return verticalDistanceUnc_r15;
   }

   public void setVerticalDistanceUnc_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.verticalDistanceUnc_r15 = value;
   }

   public void setVerticalDistanceUnc_r15 (long value) 
      throws Asn1Exception
   {
      setVerticalDistanceUnc_r15 (new Asn1Integer(value));
   }
   public boolean hasVerticalDistanceUnc_r15 () {
      return (verticalDistanceUnc_r15 != null);
   }

   /**
    * Accessor/mutator methods for VerticalUncConfidence_r15
    */
   public Asn1Integer getVerticalUncConfidence_r15 () {
      return verticalUncConfidence_r15;
   }

   public void setVerticalUncConfidence_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 100))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.verticalUncConfidence_r15 = value;
   }

   public void setVerticalUncConfidence_r15 (long value) 
      throws Asn1Exception
   {
      setVerticalUncConfidence_r15 (new Asn1Integer(value));
   }
   public boolean hasVerticalUncConfidence_r15 () {
      return (verticalUncConfidence_r15 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 11; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return bearing_r15;
         case 1: return bearingUncConfidence_r15;
         case 2: return bearingRef_r15;
         case 3: return horizontalDistance_r15;
         case 4: return horizontalDistanceUnc_r15;
         case 5: return horizontalUncConfidence_r15;
         case 6: return verticalDirection_r15;
         case 7: return verticalDistance_r15;
         case 8: return verticalDistanceUnc_r15;
         case 9: return verticalUncConfidence_r15;
         case 10: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "bearing-r15";
         case 1: return "bearingUncConfidence-r15";
         case 2: return "bearingRef-r15";
         case 3: return "horizontalDistance-r15";
         case 4: return "horizontalDistanceUnc-r15";
         case 5: return "horizontalUncConfidence-r15";
         case 6: return "verticalDirection-r15";
         case 7: return "verticalDistance-r15";
         case 8: return "verticalDistanceUnc-r15";
         case 9: return "verticalUncConfidence-r15";
         case 10: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean bearingUncConfidence_r15Present = buffer.decodeBit ("bearingUncConfidence_r15Present");
      boolean horizontalDistanceUnc_r15Present = buffer.decodeBit ("horizontalDistanceUnc_r15Present");
      boolean horizontalUncConfidence_r15Present = buffer.decodeBit ("horizontalUncConfidence_r15Present");
      boolean verticalDirection_r15Present = buffer.decodeBit ("verticalDirection_r15Present");
      boolean verticalDistance_r15Present = buffer.decodeBit ("verticalDistance_r15Present");
      boolean verticalDistanceUnc_r15Present = buffer.decodeBit ("verticalDistanceUnc_r15Present");
      boolean verticalUncConfidence_r15Present = buffer.decodeBit ("verticalUncConfidence_r15Present");

      // decode bearing_r15

      buffer.getContext().eventDispatcher.startElement("bearing_r15", -1);

      bearing_r15 = new Asn1Integer();
      bearing_r15.decode (buffer, 0, 3599);
      buffer.getContext().eventDispatcher.endElement("bearing_r15", -1);

      // decode bearingUncConfidence_r15

      if (bearingUncConfidence_r15Present) {
         buffer.getContext().eventDispatcher.startElement("bearingUncConfidence_r15", -1);

         bearingUncConfidence_r15 = new Asn1Integer();
         bearingUncConfidence_r15.decode (buffer, 0, 100);
         buffer.getContext().eventDispatcher.endElement("bearingUncConfidence_r15", -1);
      }
      else {
         bearingUncConfidence_r15 = null;
      }

      // decode bearingRef_r15

      buffer.getContext().eventDispatcher.startElement("bearingRef_r15", -1);

      {
         int tval = Displacement_r15_bearingRef_r15.decodeEnumValue (buffer);
         bearingRef_r15 = Displacement_r15_bearingRef_r15.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("bearingRef_r15", -1);

      // decode horizontalDistance_r15

      buffer.getContext().eventDispatcher.startElement("horizontalDistance_r15", -1);

      horizontalDistance_r15 = new Asn1Integer();
      horizontalDistance_r15.decode (buffer, 0, 8191);
      buffer.getContext().eventDispatcher.endElement("horizontalDistance_r15", -1);

      // decode horizontalDistanceUnc_r15

      if (horizontalDistanceUnc_r15Present) {
         buffer.getContext().eventDispatcher.startElement("horizontalDistanceUnc_r15", -1);

         horizontalDistanceUnc_r15 = new Asn1Integer();
         horizontalDistanceUnc_r15.decode (buffer, 0, 255);
         buffer.getContext().eventDispatcher.endElement("horizontalDistanceUnc_r15", -1);
      }
      else {
         horizontalDistanceUnc_r15 = null;
      }

      // decode horizontalUncConfidence_r15

      if (horizontalUncConfidence_r15Present) {
         buffer.getContext().eventDispatcher.startElement("horizontalUncConfidence_r15", -1);

         horizontalUncConfidence_r15 = new Asn1Integer();
         horizontalUncConfidence_r15.decode (buffer, 0, 100);
         buffer.getContext().eventDispatcher.endElement("horizontalUncConfidence_r15", -1);
      }
      else {
         horizontalUncConfidence_r15 = null;
      }

      // decode verticalDirection_r15

      if (verticalDirection_r15Present) {
         buffer.getContext().eventDispatcher.startElement("verticalDirection_r15", -1);

         int tval = Displacement_r15_verticalDirection_r15.decodeEnumValue (buffer);
         verticalDirection_r15 = Displacement_r15_verticalDirection_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("verticalDirection_r15", -1);
      }
      else {
         verticalDirection_r15 = null;
      }

      // decode verticalDistance_r15

      if (verticalDistance_r15Present) {
         buffer.getContext().eventDispatcher.startElement("verticalDistance_r15", -1);

         verticalDistance_r15 = new Asn1Integer();
         verticalDistance_r15.decode (buffer, 0, 8191);
         buffer.getContext().eventDispatcher.endElement("verticalDistance_r15", -1);
      }
      else {
         verticalDistance_r15 = null;
      }

      // decode verticalDistanceUnc_r15

      if (verticalDistanceUnc_r15Present) {
         buffer.getContext().eventDispatcher.startElement("verticalDistanceUnc_r15", -1);

         verticalDistanceUnc_r15 = new Asn1Integer();
         verticalDistanceUnc_r15.decode (buffer, 0, 255);
         buffer.getContext().eventDispatcher.endElement("verticalDistanceUnc_r15", -1);
      }
      else {
         verticalDistanceUnc_r15 = null;
      }

      // decode verticalUncConfidence_r15

      if (verticalUncConfidence_r15Present) {
         buffer.getContext().eventDispatcher.startElement("verticalUncConfidence_r15", -1);

         verticalUncConfidence_r15 = new Asn1Integer();
         verticalUncConfidence_r15.decode (buffer, 0, 100);
         buffer.getContext().eventDispatcher.endElement("verticalUncConfidence_r15", -1);
      }
      else {
         verticalUncConfidence_r15 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((bearingUncConfidence_r15 != null), null);
      buffer.encodeBit ((horizontalDistanceUnc_r15 != null), null);
      buffer.encodeBit ((horizontalUncConfidence_r15 != null), null);
      buffer.encodeBit ((verticalDirection_r15 != null), null);
      buffer.encodeBit ((verticalDistance_r15 != null), null);
      buffer.encodeBit ((verticalDistanceUnc_r15 != null), null);
      buffer.encodeBit ((verticalUncConfidence_r15 != null), null);

      // encode bearing_r15

      if (bearing_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("bearing_r15", -1);

         bearing_r15.encode (buffer, 0, 3599);

         buffer.getContext().eventDispatcher.endElement("bearing_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("bearing_r15");

      // encode bearingUncConfidence_r15

      if (bearingUncConfidence_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("bearingUncConfidence_r15", -1);

         bearingUncConfidence_r15.encode (buffer, 0, 100);

         buffer.getContext().eventDispatcher.endElement("bearingUncConfidence_r15", -1);
      }

      // encode bearingRef_r15

      if (bearingRef_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("bearingRef_r15", -1);

         bearingRef_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("bearingRef_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("bearingRef_r15");

      // encode horizontalDistance_r15

      if (horizontalDistance_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("horizontalDistance_r15", -1);

         horizontalDistance_r15.encode (buffer, 0, 8191);

         buffer.getContext().eventDispatcher.endElement("horizontalDistance_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("horizontalDistance_r15");

      // encode horizontalDistanceUnc_r15

      if (horizontalDistanceUnc_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("horizontalDistanceUnc_r15", -1);

         horizontalDistanceUnc_r15.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("horizontalDistanceUnc_r15", -1);
      }

      // encode horizontalUncConfidence_r15

      if (horizontalUncConfidence_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("horizontalUncConfidence_r15", -1);

         horizontalUncConfidence_r15.encode (buffer, 0, 100);

         buffer.getContext().eventDispatcher.endElement("horizontalUncConfidence_r15", -1);
      }

      // encode verticalDirection_r15

      if (verticalDirection_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("verticalDirection_r15", -1);

         verticalDirection_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("verticalDirection_r15", -1);
      }

      // encode verticalDistance_r15

      if (verticalDistance_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("verticalDistance_r15", -1);

         verticalDistance_r15.encode (buffer, 0, 8191);

         buffer.getContext().eventDispatcher.endElement("verticalDistance_r15", -1);
      }

      // encode verticalDistanceUnc_r15

      if (verticalDistanceUnc_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("verticalDistanceUnc_r15", -1);

         verticalDistanceUnc_r15.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("verticalDistanceUnc_r15", -1);
      }

      // encode verticalUncConfidence_r15

      if (verticalUncConfidence_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("verticalUncConfidence_r15", -1);

         verticalUncConfidence_r15.encode (buffer, 0, 100);

         buffer.getContext().eventDispatcher.endElement("verticalUncConfidence_r15", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
