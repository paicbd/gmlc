/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class LocationDataLCI extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "LocationDataLCI";
   }

   protected Asn1BitString latitudeResolution;
   protected Asn1BitString latitude;
   protected Asn1BitString longitudeResolution;
   protected Asn1BitString longitude;
   protected Asn1BitString altitudeType;
   protected Asn1BitString altitudeResolution;
   protected Asn1BitString altitude;
   protected Asn1BitString datum;
   protected Asn1OpenExt extElem1;

   public LocationDataLCI () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public LocationDataLCI (
      Asn1BitString latitudeResolution_,
      Asn1BitString latitude_,
      Asn1BitString longitudeResolution_,
      Asn1BitString longitude_,
      Asn1BitString altitudeType_,
      Asn1BitString altitudeResolution_,
      Asn1BitString altitude_,
      Asn1BitString datum_
   ) throws Asn1Exception {
      super();
      setLatitudeResolution (latitudeResolution_);
      setLatitude (latitude_);
      setLongitudeResolution (longitudeResolution_);
      setLongitude (longitude_);
      setAltitudeType (altitudeType_);
      setAltitudeResolution (altitudeResolution_);
      setAltitude (altitude_);
      setDatum (datum_);
   }

   public void init () {
      latitudeResolution = null;
      latitude = null;
      longitudeResolution = null;
      longitude = null;
      altitudeType = null;
      altitudeResolution = null;
      altitude = null;
      datum = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof LocationDataLCI) ) return false;

      LocationDataLCI rhs = (LocationDataLCI) obj;

      if (latitudeResolution == null) {
         if (rhs.latitudeResolution != null) return false;
      }
      else {
         if (!latitudeResolution.equals(rhs.latitudeResolution)) {
            return false;
         }
      }

      if (latitude == null) {
         if (rhs.latitude != null) return false;
      }
      else {
         if (!latitude.equals(rhs.latitude)) {
            return false;
         }
      }

      if (longitudeResolution == null) {
         if (rhs.longitudeResolution != null) return false;
      }
      else {
         if (!longitudeResolution.equals(rhs.longitudeResolution)) {
            return false;
         }
      }

      if (longitude == null) {
         if (rhs.longitude != null) return false;
      }
      else {
         if (!longitude.equals(rhs.longitude)) {
            return false;
         }
      }

      if (altitudeType == null) {
         if (rhs.altitudeType != null) return false;
      }
      else {
         if (!altitudeType.equals(rhs.altitudeType)) {
            return false;
         }
      }

      if (altitudeResolution == null) {
         if (rhs.altitudeResolution != null) return false;
      }
      else {
         if (!altitudeResolution.equals(rhs.altitudeResolution)) {
            return false;
         }
      }

      if (altitude == null) {
         if (rhs.altitude != null) return false;
      }
      else {
         if (!altitude.equals(rhs.altitude)) {
            return false;
         }
      }

      if (datum == null) {
         if (rhs.datum != null) return false;
      }
      else {
         if (!datum.equals(rhs.datum)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (latitudeResolution != null) __code = 31*__code + latitudeResolution.hashCode();
      if (latitude != null) __code = 31*__code + latitude.hashCode();
      if (longitudeResolution != null) __code = 31*__code + longitudeResolution.hashCode();
      if (longitude != null) __code = 31*__code + longitude.hashCode();
      if (altitudeType != null) __code = 31*__code + altitudeType.hashCode();
      if (altitudeResolution != null) __code = 31*__code + altitudeResolution.hashCode();
      if (altitude != null) __code = 31*__code + altitude.hashCode();
      if (datum != null) __code = 31*__code + datum.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for LatitudeResolution
    */
   public Asn1BitString getLatitudeResolution () {
      return latitudeResolution;
   }

   public void setLatitudeResolution (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 6)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.latitudeResolution = value;
   }

   /**
    * Accessor/mutator methods for Latitude
    */
   public Asn1BitString getLatitude () {
      return latitude;
   }

   public void setLatitude (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 34)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.latitude = value;
   }

   /**
    * Accessor/mutator methods for LongitudeResolution
    */
   public Asn1BitString getLongitudeResolution () {
      return longitudeResolution;
   }

   public void setLongitudeResolution (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 6)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.longitudeResolution = value;
   }

   /**
    * Accessor/mutator methods for Longitude
    */
   public Asn1BitString getLongitude () {
      return longitude;
   }

   public void setLongitude (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 34)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.longitude = value;
   }

   /**
    * Accessor/mutator methods for AltitudeType
    */
   public Asn1BitString getAltitudeType () {
      return altitudeType;
   }

   public void setAltitudeType (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 4)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.altitudeType = value;
   }

   /**
    * Accessor/mutator methods for AltitudeResolution
    */
   public Asn1BitString getAltitudeResolution () {
      return altitudeResolution;
   }

   public void setAltitudeResolution (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 6)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.altitudeResolution = value;
   }

   /**
    * Accessor/mutator methods for Altitude
    */
   public Asn1BitString getAltitude () {
      return altitude;
   }

   public void setAltitude (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 30)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.altitude = value;
   }

   /**
    * Accessor/mutator methods for Datum
    */
   public Asn1BitString getDatum () {
      return datum;
   }

   public void setDatum (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 8)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.datum = value;
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return latitudeResolution;
         case 1: return latitude;
         case 2: return longitudeResolution;
         case 3: return longitude;
         case 4: return altitudeType;
         case 5: return altitudeResolution;
         case 6: return altitude;
         case 7: return datum;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "latitudeResolution";
         case 1: return "latitude";
         case 2: return "longitudeResolution";
         case 3: return "longitude";
         case 4: return "altitudeType";
         case 5: return "altitudeResolution";
         case 6: return "altitude";
         case 7: return "datum";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode latitudeResolution

      buffer.getContext().eventDispatcher.startElement("latitudeResolution", -1);

      latitudeResolution = new Asn1BitString();
      latitudeResolution.decode (buffer, 6, 6);
      buffer.getContext().eventDispatcher.endElement("latitudeResolution", -1);

      // decode latitude

      buffer.getContext().eventDispatcher.startElement("latitude", -1);

      latitude = new Asn1BitString();
      latitude.decode (buffer, 34, 34);
      buffer.getContext().eventDispatcher.endElement("latitude", -1);

      // decode longitudeResolution

      buffer.getContext().eventDispatcher.startElement("longitudeResolution", -1);

      longitudeResolution = new Asn1BitString();
      longitudeResolution.decode (buffer, 6, 6);
      buffer.getContext().eventDispatcher.endElement("longitudeResolution", -1);

      // decode longitude

      buffer.getContext().eventDispatcher.startElement("longitude", -1);

      longitude = new Asn1BitString();
      longitude.decode (buffer, 34, 34);
      buffer.getContext().eventDispatcher.endElement("longitude", -1);

      // decode altitudeType

      buffer.getContext().eventDispatcher.startElement("altitudeType", -1);

      altitudeType = new Asn1BitString();
      altitudeType.decode (buffer, 4, 4);
      buffer.getContext().eventDispatcher.endElement("altitudeType", -1);

      // decode altitudeResolution

      buffer.getContext().eventDispatcher.startElement("altitudeResolution", -1);

      altitudeResolution = new Asn1BitString();
      altitudeResolution.decode (buffer, 6, 6);
      buffer.getContext().eventDispatcher.endElement("altitudeResolution", -1);

      // decode altitude

      buffer.getContext().eventDispatcher.startElement("altitude", -1);

      altitude = new Asn1BitString();
      altitude.decode (buffer, 30, 30);
      buffer.getContext().eventDispatcher.endElement("altitude", -1);

      // decode datum

      buffer.getContext().eventDispatcher.startElement("datum", -1);

      datum = new Asn1BitString();
      datum.decode (buffer, 8, 8);
      buffer.getContext().eventDispatcher.endElement("datum", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode latitudeResolution

      if (latitudeResolution != null) {
         buffer.getContext().eventDispatcher.startElement("latitudeResolution", -1);

         latitudeResolution.encode (buffer, 6, 6);

         buffer.getContext().eventDispatcher.endElement("latitudeResolution", -1);
      }
      else throw new Asn1MissingRequiredException ("latitudeResolution");

      // encode latitude

      if (latitude != null) {
         buffer.getContext().eventDispatcher.startElement("latitude", -1);

         latitude.encode (buffer, 34, 34);

         buffer.getContext().eventDispatcher.endElement("latitude", -1);
      }
      else throw new Asn1MissingRequiredException ("latitude");

      // encode longitudeResolution

      if (longitudeResolution != null) {
         buffer.getContext().eventDispatcher.startElement("longitudeResolution", -1);

         longitudeResolution.encode (buffer, 6, 6);

         buffer.getContext().eventDispatcher.endElement("longitudeResolution", -1);
      }
      else throw new Asn1MissingRequiredException ("longitudeResolution");

      // encode longitude

      if (longitude != null) {
         buffer.getContext().eventDispatcher.startElement("longitude", -1);

         longitude.encode (buffer, 34, 34);

         buffer.getContext().eventDispatcher.endElement("longitude", -1);
      }
      else throw new Asn1MissingRequiredException ("longitude");

      // encode altitudeType

      if (altitudeType != null) {
         buffer.getContext().eventDispatcher.startElement("altitudeType", -1);

         altitudeType.encode (buffer, 4, 4);

         buffer.getContext().eventDispatcher.endElement("altitudeType", -1);
      }
      else throw new Asn1MissingRequiredException ("altitudeType");

      // encode altitudeResolution

      if (altitudeResolution != null) {
         buffer.getContext().eventDispatcher.startElement("altitudeResolution", -1);

         altitudeResolution.encode (buffer, 6, 6);

         buffer.getContext().eventDispatcher.endElement("altitudeResolution", -1);
      }
      else throw new Asn1MissingRequiredException ("altitudeResolution");

      // encode altitude

      if (altitude != null) {
         buffer.getContext().eventDispatcher.startElement("altitude", -1);

         altitude.encode (buffer, 30, 30);

         buffer.getContext().eventDispatcher.endElement("altitude", -1);
      }
      else throw new Asn1MissingRequiredException ("altitude");

      // encode datum

      if (datum != null) {
         buffer.getContext().eventDispatcher.startElement("datum", -1);

         datum.encode (buffer, 8, 8);

         buffer.getContext().eventDispatcher.endElement("datum", -1);
      }
      else throw new Asn1MissingRequiredException ("datum");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
