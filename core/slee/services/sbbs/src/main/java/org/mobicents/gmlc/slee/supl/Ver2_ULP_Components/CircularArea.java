/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class CircularArea extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "CircularArea";
   }

   protected Coordinate coordinate;
   protected Asn1Integer radius;
   protected Asn1Integer radius_min;  // optional
   protected Asn1Integer radius_max;  // optional

   public CircularArea () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CircularArea (
      Coordinate coordinate_,
      Asn1Integer radius_,
      Asn1Integer radius_min_,
      Asn1Integer radius_max_
   ) throws Asn1Exception {
      super();
      setCoordinate (coordinate_);
      setRadius (radius_);
      setRadius_min (radius_min_);
      setRadius_max (radius_max_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CircularArea (
      Coordinate coordinate_,
      Asn1Integer radius_
   ) throws Asn1Exception {
      super();
      setCoordinate (coordinate_);
      setRadius (radius_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CircularArea (Coordinate coordinate_,
      long radius_,
      long radius_min_,
      long radius_max_
   ) throws Asn1Exception {
      super();
      setCoordinate (coordinate_);
      setRadius (radius_);
      setRadius_min (radius_min_);
      setRadius_max (radius_max_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CircularArea (
      Coordinate coordinate_,
      long radius_
   ) throws Asn1Exception {
      super();
      setCoordinate (coordinate_);
      setRadius (radius_);
   }

   public void init () {
      coordinate = null;
      radius = null;
      radius_min = null;
      radius_max = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof CircularArea) ) return false;

      CircularArea rhs = (CircularArea) obj;

      if (coordinate == null) {
         if (rhs.coordinate != null) return false;
      }
      else {
         if (!coordinate.equals(rhs.coordinate)) {
            return false;
         }
      }

      if (radius == null) {
         if (rhs.radius != null) return false;
      }
      else {
         if (!radius.equals(rhs.radius)) {
            return false;
         }
      }

      if (radius_min == null) {
         if (rhs.radius_min != null) return false;
      }
      else {
         if (!radius_min.equals(rhs.radius_min)) {
            return false;
         }
      }

      if (radius_max == null) {
         if (rhs.radius_max != null) return false;
      }
      else {
         if (!radius_max.equals(rhs.radius_max)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (coordinate != null) __code = 31*__code + coordinate.hashCode();
      if (radius != null) __code = 31*__code + radius.hashCode();
      if (radius_min != null) __code = 31*__code + radius_min.hashCode();
      if (radius_max != null) __code = 31*__code + radius_max.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Coordinate
    */
   public Coordinate getCoordinate () {
      return coordinate;
   }

   public void setCoordinate (Coordinate value) {
      this.coordinate = value;
   }

   /**
    * Accessor/mutator methods for Radius
    */
   public Asn1Integer getRadius () {
      return radius;
   }

   public void setRadius (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 1000000))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.radius = value;
   }

   public void setRadius (long value) 
      throws Asn1Exception
   {
      setRadius (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Radius_min
    */
   public Asn1Integer getRadius_min () {
      return radius_min;
   }

   public void setRadius_min (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 1000000))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.radius_min = value;
   }

   public void setRadius_min (long value) 
      throws Asn1Exception
   {
      setRadius_min (new Asn1Integer(value));
   }
   public boolean hasRadius_min () {
      return (radius_min != null);
   }

   /**
    * Accessor/mutator methods for Radius_max
    */
   public Asn1Integer getRadius_max () {
      return radius_max;
   }

   public void setRadius_max (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 1500000))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.radius_max = value;
   }

   public void setRadius_max (long value) 
      throws Asn1Exception
   {
      setRadius_max (new Asn1Integer(value));
   }
   public boolean hasRadius_max () {
      return (radius_max != null);
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return coordinate;
         case 1: return radius;
         case 2: return radius_min;
         case 3: return radius_max;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "coordinate";
         case 1: return "radius";
         case 2: return "radius-min";
         case 3: return "radius-max";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean radius_minPresent = buffer.decodeBit ("radius_minPresent");
      boolean radius_maxPresent = buffer.decodeBit ("radius_maxPresent");

      // decode coordinate

      buffer.getContext().eventDispatcher.startElement("coordinate", -1);

      coordinate = new Coordinate();
      coordinate.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("coordinate", -1);

      // decode radius

      buffer.getContext().eventDispatcher.startElement("radius", -1);

      radius = new Asn1Integer();
      radius.decode (buffer, 1, 1000000);
      buffer.getContext().eventDispatcher.endElement("radius", -1);

      // decode radius_min

      if (radius_minPresent) {
         buffer.getContext().eventDispatcher.startElement("radius_min", -1);

         radius_min = new Asn1Integer();
         radius_min.decode (buffer, 1, 1000000);
         buffer.getContext().eventDispatcher.endElement("radius_min", -1);
      }
      else {
         radius_min = null;
      }

      // decode radius_max

      if (radius_maxPresent) {
         buffer.getContext().eventDispatcher.startElement("radius_max", -1);

         radius_max = new Asn1Integer();
         radius_max.decode (buffer, 1, 1500000);
         buffer.getContext().eventDispatcher.endElement("radius_max", -1);
      }
      else {
         radius_max = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((radius_min != null), null);
      buffer.encodeBit ((radius_max != null), null);

      // encode coordinate

      if (coordinate != null) {
         buffer.getContext().eventDispatcher.startElement("coordinate", -1);

         coordinate.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("coordinate", -1);
      }
      else throw new Asn1MissingRequiredException ("coordinate");

      // encode radius

      if (radius != null) {
         buffer.getContext().eventDispatcher.startElement("radius", -1);

         radius.encode (buffer, 1, 1000000);

         buffer.getContext().eventDispatcher.endElement("radius", -1);
      }
      else throw new Asn1MissingRequiredException ("radius");

      // encode radius_min

      if (radius_min != null) {
         buffer.getContext().eventDispatcher.startElement("radius_min", -1);

         radius_min.encode (buffer, 1, 1000000);

         buffer.getContext().eventDispatcher.endElement("radius_min", -1);
      }

      // encode radius_max

      if (radius_max != null) {
         buffer.getContext().eventDispatcher.startElement("radius_max", -1);

         radius_max.encode (buffer, 1, 1500000);

         buffer.getContext().eventDispatcher.endElement("radius_max", -1);
      }

   }

}
