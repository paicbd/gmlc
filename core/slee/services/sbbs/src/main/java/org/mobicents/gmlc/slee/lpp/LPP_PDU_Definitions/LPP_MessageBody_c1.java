/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class LPP_MessageBody_c1 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _REQUESTCAPABILITIES = 1;
   public final static byte _PROVIDECAPABILITIES = 2;
   public final static byte _REQUESTASSISTANCEDATA = 3;
   public final static byte _PROVIDEASSISTANCEDATA = 4;
   public final static byte _REQUESTLOCATIONINFORMATION = 5;
   public final static byte _PROVIDELOCATIONINFORMATION = 6;
   public final static byte _ABORT = 7;
   public final static byte _ERROR = 8;
   public final static byte _SPARE7 = 9;
   public final static byte _SPARE6 = 10;
   public final static byte _SPARE5 = 11;
   public final static byte _SPARE4 = 12;
   public final static byte _SPARE3 = 13;
   public final static byte _SPARE2 = 14;
   public final static byte _SPARE1 = 15;
   public final static byte _SPARE0 = 16;

   public LPP_MessageBody_c1 () {
      super();
   }

   public LPP_MessageBody_c1 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _REQUESTCAPABILITIES: return "requestCapabilities";
      case _PROVIDECAPABILITIES: return "provideCapabilities";
      case _REQUESTASSISTANCEDATA: return "requestAssistanceData";
      case _PROVIDEASSISTANCEDATA: return "provideAssistanceData";
      case _REQUESTLOCATIONINFORMATION: return "requestLocationInformation";
      case _PROVIDELOCATIONINFORMATION: return "provideLocationInformation";
      case _ABORT: return "abort";
      case _ERROR: return "error";
      case _SPARE7: return "spare7";
      case _SPARE6: return "spare6";
      case _SPARE5: return "spare5";
      case _SPARE4: return "spare4";
      case _SPARE3: return "spare3";
      case _SPARE2: return "spare2";
      case _SPARE1: return "spare1";
      case _SPARE0: return "spare0";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for requestCapabilities
    */
   public RequestCapabilities getRequestCapabilities () {
      return (choiceID == _REQUESTCAPABILITIES) ? (RequestCapabilities)element : null;
   }
   public void setRequestCapabilities (RequestCapabilities value) {
      setElement (_REQUESTCAPABILITIES, value);
   }
   public boolean isRequestCapabilities () {
      return (choiceID == _REQUESTCAPABILITIES);
   }

   /**
    * Accessor/mutator methods for provideCapabilities
    */
   public ProvideCapabilities getProvideCapabilities () {
      return (choiceID == _PROVIDECAPABILITIES) ? (ProvideCapabilities)element : null;
   }
   public void setProvideCapabilities (ProvideCapabilities value) {
      setElement (_PROVIDECAPABILITIES, value);
   }
   public boolean isProvideCapabilities () {
      return (choiceID == _PROVIDECAPABILITIES);
   }

   /**
    * Accessor/mutator methods for requestAssistanceData
    */
   public RequestAssistanceData getRequestAssistanceData () {
      return (choiceID == _REQUESTASSISTANCEDATA) ? (RequestAssistanceData)element : null;
   }
   public void setRequestAssistanceData (RequestAssistanceData value) {
      setElement (_REQUESTASSISTANCEDATA, value);
   }
   public boolean isRequestAssistanceData () {
      return (choiceID == _REQUESTASSISTANCEDATA);
   }

   /**
    * Accessor/mutator methods for provideAssistanceData
    */
   public ProvideAssistanceData getProvideAssistanceData () {
      return (choiceID == _PROVIDEASSISTANCEDATA) ? (ProvideAssistanceData)element : null;
   }
   public void setProvideAssistanceData (ProvideAssistanceData value) {
      setElement (_PROVIDEASSISTANCEDATA, value);
   }
   public boolean isProvideAssistanceData () {
      return (choiceID == _PROVIDEASSISTANCEDATA);
   }

   /**
    * Accessor/mutator methods for requestLocationInformation
    */
   public RequestLocationInformation getRequestLocationInformation () {
      return (choiceID == _REQUESTLOCATIONINFORMATION) ? (RequestLocationInformation)element : null;
   }
   public void setRequestLocationInformation (RequestLocationInformation value) {
      setElement (_REQUESTLOCATIONINFORMATION, value);
   }
   public boolean isRequestLocationInformation () {
      return (choiceID == _REQUESTLOCATIONINFORMATION);
   }

   /**
    * Accessor/mutator methods for provideLocationInformation
    */
   public ProvideLocationInformation getProvideLocationInformation () {
      return (choiceID == _PROVIDELOCATIONINFORMATION) ? (ProvideLocationInformation)element : null;
   }
   public void setProvideLocationInformation (ProvideLocationInformation value) {
      setElement (_PROVIDELOCATIONINFORMATION, value);
   }
   public boolean isProvideLocationInformation () {
      return (choiceID == _PROVIDELOCATIONINFORMATION);
   }

   /**
    * Accessor/mutator methods for abort
    */
   public Abort getAbort () {
      return (choiceID == _ABORT) ? (Abort)element : null;
   }
   public void setAbort (Abort value) {
      setElement (_ABORT, value);
   }
   public boolean isAbort () {
      return (choiceID == _ABORT);
   }

   /**
    * Accessor/mutator methods for error
    */
   public Error getError () {
      return (choiceID == _ERROR) ? (Error)element : null;
   }
   public void setError (Error value) {
      setElement (_ERROR, value);
   }
   public boolean isError () {
      return (choiceID == _ERROR);
   }

   /**
    * Accessor/mutator methods for spare7
    */
   public void setSpare7 () {
      setElement (_SPARE7, Asn1Null.NULL_VALUE);
   }
   public boolean isSpare7 () {
      return (choiceID == _SPARE7);
   }

   /**
    * Accessor/mutator methods for spare6
    */
   public void setSpare6 () {
      setElement (_SPARE6, Asn1Null.NULL_VALUE);
   }
   public boolean isSpare6 () {
      return (choiceID == _SPARE6);
   }

   /**
    * Accessor/mutator methods for spare5
    */
   public void setSpare5 () {
      setElement (_SPARE5, Asn1Null.NULL_VALUE);
   }
   public boolean isSpare5 () {
      return (choiceID == _SPARE5);
   }

   /**
    * Accessor/mutator methods for spare4
    */
   public void setSpare4 () {
      setElement (_SPARE4, Asn1Null.NULL_VALUE);
   }
   public boolean isSpare4 () {
      return (choiceID == _SPARE4);
   }

   /**
    * Accessor/mutator methods for spare3
    */
   public void setSpare3 () {
      setElement (_SPARE3, Asn1Null.NULL_VALUE);
   }
   public boolean isSpare3 () {
      return (choiceID == _SPARE3);
   }

   /**
    * Accessor/mutator methods for spare2
    */
   public void setSpare2 () {
      setElement (_SPARE2, Asn1Null.NULL_VALUE);
   }
   public boolean isSpare2 () {
      return (choiceID == _SPARE2);
   }

   /**
    * Accessor/mutator methods for spare1
    */
   public void setSpare1 () {
      setElement (_SPARE1, Asn1Null.NULL_VALUE);
   }
   public boolean isSpare1 () {
      return (choiceID == _SPARE1);
   }

   /**
    * Accessor/mutator methods for spare0
    */
   public void setSpare0 () {
      setElement (_SPARE0, Asn1Null.NULL_VALUE);
   }
   public boolean isSpare0 () {
      return (choiceID == _SPARE0);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (16, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // requestCapabilities
         case 0: { 
            RequestCapabilities requestCapabilities;
            element = requestCapabilities = new RequestCapabilities();
            requestCapabilities.decode (buffer);
            break;
         }

         // provideCapabilities
         case 1: { 
            ProvideCapabilities provideCapabilities;
            element = provideCapabilities = new ProvideCapabilities();
            provideCapabilities.decode (buffer);
            break;
         }

         // requestAssistanceData
         case 2: { 
            RequestAssistanceData requestAssistanceData;
            element = requestAssistanceData = new RequestAssistanceData();
            requestAssistanceData.decode (buffer);
            break;
         }

         // provideAssistanceData
         case 3: { 
            ProvideAssistanceData provideAssistanceData;
            element = provideAssistanceData = new ProvideAssistanceData();
            provideAssistanceData.decode (buffer);
            break;
         }

         // requestLocationInformation
         case 4: { 
            RequestLocationInformation requestLocationInformation;
            element = requestLocationInformation = new RequestLocationInformation();
            requestLocationInformation.decode (buffer);
            break;
         }

         // provideLocationInformation
         case 5: { 
            ProvideLocationInformation provideLocationInformation;
            element = provideLocationInformation = new ProvideLocationInformation();
            provideLocationInformation.decode (buffer);
            break;
         }

         // abort
         case 6: { 
            Abort abort;
            element = abort = new Abort();
            abort.decode (buffer);
            break;
         }

         // error
         case 7: { 
            Error error;
            element = error = new Error();
            error.decode (buffer);
            break;
         }

         // spare7
         case 8: { 
            Asn1Null spare7;
            element = spare7 = Asn1Null.NULL_VALUE;
            spare7.decode (buffer);
            break;
         }

         // spare6
         case 9: { 
            Asn1Null spare6;
            element = spare6 = Asn1Null.NULL_VALUE;
            spare6.decode (buffer);
            break;
         }

         // spare5
         case 10: { 
            Asn1Null spare5;
            element = spare5 = Asn1Null.NULL_VALUE;
            spare5.decode (buffer);
            break;
         }

         // spare4
         case 11: { 
            Asn1Null spare4;
            element = spare4 = Asn1Null.NULL_VALUE;
            spare4.decode (buffer);
            break;
         }

         // spare3
         case 12: { 
            Asn1Null spare3;
            element = spare3 = Asn1Null.NULL_VALUE;
            spare3.decode (buffer);
            break;
         }

         // spare2
         case 13: { 
            Asn1Null spare2;
            element = spare2 = Asn1Null.NULL_VALUE;
            spare2.decode (buffer);
            break;
         }

         // spare1
         case 14: { 
            Asn1Null spare1;
            element = spare1 = Asn1Null.NULL_VALUE;
            spare1.decode (buffer);
            break;
         }

         // spare0
         case 15: { 
            Asn1Null spare0;
            element = spare0 = Asn1Null.NULL_VALUE;
            spare0.decode (buffer);
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // Encode choice index value

      buffer.encodeConsWholeNumber (choiceID - 1, 16, "index");

      buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

      switch (choiceID) {
         // requestCapabilities
         case _REQUESTCAPABILITIES:
            RequestCapabilities requestCapabilities = (RequestCapabilities) element;
            requestCapabilities.encode (buffer);
            break;

         // provideCapabilities
         case _PROVIDECAPABILITIES:
            ProvideCapabilities provideCapabilities = (ProvideCapabilities) element;
            provideCapabilities.encode (buffer);
            break;

         // requestAssistanceData
         case _REQUESTASSISTANCEDATA:
            RequestAssistanceData requestAssistanceData = (RequestAssistanceData) element;
            requestAssistanceData.encode (buffer);
            break;

         // provideAssistanceData
         case _PROVIDEASSISTANCEDATA:
            ProvideAssistanceData provideAssistanceData = (ProvideAssistanceData) element;
            provideAssistanceData.encode (buffer);
            break;

         // requestLocationInformation
         case _REQUESTLOCATIONINFORMATION:
            RequestLocationInformation requestLocationInformation = (RequestLocationInformation) element;
            requestLocationInformation.encode (buffer);
            break;

         // provideLocationInformation
         case _PROVIDELOCATIONINFORMATION:
            ProvideLocationInformation provideLocationInformation = (ProvideLocationInformation) element;
            provideLocationInformation.encode (buffer);
            break;

         // abort
         case _ABORT:
            Abort abort = (Abort) element;
            abort.encode (buffer);
            break;

         // error
         case _ERROR:
            Error error = (Error) element;
            error.encode (buffer);
            break;

         // spare7
         case _SPARE7:
            Asn1Null spare7 = (Asn1Null) element;
            spare7.encode (buffer);
            break;

         // spare6
         case _SPARE6:
            Asn1Null spare6 = (Asn1Null) element;
            spare6.encode (buffer);
            break;

         // spare5
         case _SPARE5:
            Asn1Null spare5 = (Asn1Null) element;
            spare5.encode (buffer);
            break;

         // spare4
         case _SPARE4:
            Asn1Null spare4 = (Asn1Null) element;
            spare4.encode (buffer);
            break;

         // spare3
         case _SPARE3:
            Asn1Null spare3 = (Asn1Null) element;
            spare3.encode (buffer);
            break;

         // spare2
         case _SPARE2:
            Asn1Null spare2 = (Asn1Null) element;
            spare2.encode (buffer);
            break;

         // spare1
         case _SPARE1:
            Asn1Null spare1 = (Asn1Null) element;
            spare1.encode (buffer);
            break;

         // spare0
         case _SPARE0:
            Asn1Null spare0 = (Asn1Null) element;
            spare0.encode (buffer);
            break;

         default:
         throw new Asn1InvalidChoiceOptionException();
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
