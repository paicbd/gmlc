/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_POS;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.ULP_Components.Velocity;
import org.mobicents.gmlc.slee.supl.ULP_Version_2_message_extensions.Ver2_SUPL_POS_extension;

public class SUPLPOS extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_POSRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_POSRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SUPLPOS";
   }

   protected PosPayLoad posPayLoad;
   protected Velocity velocity;  // optional
   protected Ver2_SUPL_POS_extension ver2_SUPL_POS_extension;  // optional
   protected Asn1OpenExt extElem1;

   public SUPLPOS () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SUPLPOS (
      PosPayLoad posPayLoad_,
      Velocity velocity_,
      Ver2_SUPL_POS_extension ver2_SUPL_POS_extension_
   ) {
      super();
      setPosPayLoad (posPayLoad_);
      setVelocity (velocity_);
      setVer2_SUPL_POS_extension (ver2_SUPL_POS_extension_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SUPLPOS (
      PosPayLoad posPayLoad_
   ) {
      super();
      setPosPayLoad (posPayLoad_);
   }

   public void init () {
      posPayLoad = null;
      velocity = null;
      ver2_SUPL_POS_extension = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof SUPLPOS) ) return false;

      SUPLPOS rhs = (SUPLPOS) obj;

      if (posPayLoad == null) {
         if (rhs.posPayLoad != null) return false;
      }
      else {
         if (!posPayLoad.equals(rhs.posPayLoad)) {
            return false;
         }
      }

      if (velocity == null) {
         if (rhs.velocity != null) return false;
      }
      else {
         if (!velocity.equals(rhs.velocity)) {
            return false;
         }
      }

      if (ver2_SUPL_POS_extension == null) {
         if (rhs.ver2_SUPL_POS_extension != null) return false;
      }
      else {
         if (!ver2_SUPL_POS_extension.equals(rhs.ver2_SUPL_POS_extension)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (posPayLoad != null) __code = 31*__code + posPayLoad.hashCode();
      if (velocity != null) __code = 31*__code + velocity.hashCode();
      if (ver2_SUPL_POS_extension != null) __code = 31*__code + ver2_SUPL_POS_extension.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for PosPayLoad
    */
   public PosPayLoad getPosPayLoad () {
      return posPayLoad;
   }

   public void setPosPayLoad (PosPayLoad value) {
      this.posPayLoad = value;
   }

   /**
    * Accessor/mutator methods for Velocity
    */
   public Velocity getVelocity () {
      return velocity;
   }

   public void setVelocity (Velocity value) {
      this.velocity = value;
   }

   public boolean hasVelocity () {
      return (velocity != null);
   }

   /**
    * Accessor/mutator methods for Ver2_SUPL_POS_extension
    */
   public Ver2_SUPL_POS_extension getVer2_SUPL_POS_extension () {
      return ver2_SUPL_POS_extension;
   }

   public void setVer2_SUPL_POS_extension (Ver2_SUPL_POS_extension value) {
      this.ver2_SUPL_POS_extension = value;
   }

   public boolean hasVer2_SUPL_POS_extension () {
      return (ver2_SUPL_POS_extension != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return posPayLoad;
         case 1: return velocity;
         case 2: return ver2_SUPL_POS_extension;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "posPayLoad";
         case 1: return "velocity";
         case 2: return "ver2-SUPL-POS-extension";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean velocityPresent = buffer.decodeBit ("velocityPresent");

      // decode posPayLoad

      buffer.getContext().eventDispatcher.startElement("posPayLoad", -1);

      posPayLoad = new PosPayLoad();
      posPayLoad.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("posPayLoad", -1);

      // decode velocity

      if (velocityPresent) {
         buffer.getContext().eventDispatcher.startElement("velocity", -1);

         velocity = new Velocity();
         velocity.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("velocity", -1);
      }
      else {
         velocity = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("ver2_SUPL_POS_extensionPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode ver2_SUPL_POS_extension

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("ver2_SUPL_POS_extension", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            ver2_SUPL_POS_extension = new Ver2_SUPL_POS_extension();
            ver2_SUPL_POS_extension.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("ver2_SUPL_POS_extension", -1);

         }
         else {
            ver2_SUPL_POS_extension = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((ver2_SUPL_POS_extension != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((velocity != null), null);

      // encode posPayLoad

      if (posPayLoad != null) {
         buffer.getContext().eventDispatcher.startElement("posPayLoad", -1);

         posPayLoad.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("posPayLoad", -1);
      }
      else throw new Asn1MissingRequiredException ("posPayLoad");

      // encode velocity

      if (velocity != null) {
         buffer.getContext().eventDispatcher.startElement("velocity", -1);

         velocity.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("velocity", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((ver2_SUPL_POS_extension != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // ver2_SUPL_POS_extension

         if (ver2_SUPL_POS_extension != null) {
            buffer.reset();
            ver2_SUPL_POS_extension.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("ver2_SUPL_POS_extension", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("ver2_SUPL_POS_extension", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
