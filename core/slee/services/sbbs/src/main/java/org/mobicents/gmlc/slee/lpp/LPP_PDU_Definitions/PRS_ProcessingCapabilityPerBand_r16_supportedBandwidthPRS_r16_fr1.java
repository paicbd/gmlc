/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1 extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _MHZ5 = 0;
   public static final int _MHZ10 = 1;
   public static final int _MHZ20 = 2;
   public static final int _MHZ40 = 3;
   public static final int _MHZ50 = 4;
   public static final int _MHZ80 = 5;
   public static final int _MHZ100 = 6;

   // Singleton instances of PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1
   protected static final PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1 _mhz5 = new PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1(0);
   protected static final PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1 _mhz10 = new PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1(1);
   protected static final PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1 _mhz20 = new PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1(2);
   protected static final PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1 _mhz40 = new PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1(3);
   protected static final PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1 _mhz50 = new PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1(4);
   protected static final PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1 _mhz80 = new PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1(5);
   protected static final PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1 _mhz100 = new PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1(6);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    */
   protected PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1 (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for mhz5.
    */
   public static PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1 mhz5() {
      return _mhz5;
   }

   /**
    * Singleton accessor method for mhz10.
    */
   public static PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1 mhz10() {
      return _mhz10;
   }

   /**
    * Singleton accessor method for mhz20.
    */
   public static PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1 mhz20() {
      return _mhz20;
   }

   /**
    * Singleton accessor method for mhz40.
    */
   public static PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1 mhz40() {
      return _mhz40;
   }

   /**
    * Singleton accessor method for mhz50.
    */
   public static PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1 mhz50() {
      return _mhz50;
   }

   /**
    * Singleton accessor method for mhz80.
    */
   public static PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1 mhz80() {
      return _mhz80;
   }

   /**
    * Singleton accessor method for mhz100.
    */
   public static PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1 mhz100() {
      return _mhz100;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1.valueOf( PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr1 valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return mhz5();
         case 1: return mhz10();
         case 2: return mhz20();
         case 3: return mhz40();
         case 4: return mhz50();
         case 5: return mhz80();
         case 6: return mhz100();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (7);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      switch ((int)value) {
         case 0: ui = 0; /* mhz5 */break;
         case 1: ui = 1; /* mhz10 */break;
         case 2: ui = 2; /* mhz20 */break;
         case 3: ui = 3; /* mhz40 */break;
         case 4: ui = 4; /* mhz50 */break;
         case 5: ui = 5; /* mhz80 */break;
         case 6: ui = 6; /* mhz100 */break;
         default:
            throw new Asn1InvalidEnumException (value);
      }

      buffer.encodeConsWholeNumber (ui, 7);
   }

}
