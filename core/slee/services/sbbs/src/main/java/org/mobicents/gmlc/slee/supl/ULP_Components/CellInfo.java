/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Components;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.Ver2_CellInfo_extension;

public class CellInfo extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "CellInfo";
   }

   // Choice element identifier constants
   public final static byte _GSMCELL = 1;
   public final static byte _WCDMACELL = 2;
   public final static byte _CDMACELL = 3;
   public final static byte _VER2_CELLINFO_EXTENSION = 4;
   public final static byte _EXTELEM1 = 5;

   public CellInfo () {
      super();
   }

   public CellInfo (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _GSMCELL: return "gsmCell";
      case _WCDMACELL: return "wcdmaCell";
      case _CDMACELL: return "cdmaCell";
      case _VER2_CELLINFO_EXTENSION: return "ver2_CellInfo_extension";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for gsmCell
    */
   public GsmCellInformation getGsmCell () {
      return (choiceID == _GSMCELL) ? (GsmCellInformation)element : null;
   }
   public void setGsmCell (GsmCellInformation value) {
      setElement (_GSMCELL, value);
   }
   public boolean isGsmCell () {
      return (choiceID == _GSMCELL);
   }

   /**
    * Accessor/mutator methods for wcdmaCell
    */
   public WcdmaCellInformation getWcdmaCell () {
      return (choiceID == _WCDMACELL) ? (WcdmaCellInformation)element : null;
   }
   public void setWcdmaCell (WcdmaCellInformation value) {
      setElement (_WCDMACELL, value);
   }
   public boolean isWcdmaCell () {
      return (choiceID == _WCDMACELL);
   }

   /**
    * Accessor/mutator methods for cdmaCell
    */
   public CdmaCellInformation getCdmaCell () {
      return (choiceID == _CDMACELL) ? (CdmaCellInformation)element : null;
   }
   public void setCdmaCell (CdmaCellInformation value) {
      setElement (_CDMACELL, value);
   }
   public boolean isCdmaCell () {
      return (choiceID == _CDMACELL);
   }

   /**
    * Accessor/mutator methods for ver2_CellInfo_extension
    */
   public Ver2_CellInfo_extension getVer2_CellInfo_extension () {
      return (choiceID == _VER2_CELLINFO_EXTENSION) ? (Ver2_CellInfo_extension)element : null;
   }
   public void setVer2_CellInfo_extension (Ver2_CellInfo_extension value) {
      setElement (_VER2_CELLINFO_EXTENSION, value);
   }
   public boolean isVer2_CellInfo_extension () {
      return (choiceID == _VER2_CELLINFO_EXTENSION);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (3, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // gsmCell
            case 0: { 
               GsmCellInformation gsmCell;
               element = gsmCell = new GsmCellInformation();
               gsmCell.decode (buffer);
               break;
            }

            // wcdmaCell
            case 1: { 
               WcdmaCellInformation wcdmaCell;
               element = wcdmaCell = new WcdmaCellInformation();
               wcdmaCell.decode (buffer);
               break;
            }

            // cdmaCell
            case 2: { 
               CdmaCellInformation cdmaCell;
               element = cdmaCell = new CdmaCellInformation();
               cdmaCell.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 4;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // ver2_CellInfo_extension
            case 0: { 
               Ver2_CellInfo_extension ver2_CellInfo_extension;
               element = ver2_CellInfo_extension = new Ver2_CellInfo_extension();
               ver2_CellInfo_extension.decode (buffer);
               break;
            }

            // extElem1
            case 1: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 3);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 3, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // gsmCell
            case _GSMCELL:
               GsmCellInformation gsmCell = (GsmCellInformation) element;
               gsmCell.encode (buffer);
               break;

            // wcdmaCell
            case _WCDMACELL:
               WcdmaCellInformation wcdmaCell = (WcdmaCellInformation) element;
               wcdmaCell.encode (buffer);
               break;

            // cdmaCell
            case _CDMACELL:
               CdmaCellInformation cdmaCell = (CdmaCellInformation) element;
               cdmaCell.encode (buffer);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 4);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1PerEncodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());
         Asn1OpenType openType;

         switch (choiceID) {
            // ver2_CellInfo_extension
            case _VER2_CELLINFO_EXTENSION:
               Ver2_CellInfo_extension ver2_CellInfo_extension = (Ver2_CellInfo_extension) element;
               ver2_CellInfo_extension.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            default:
               openType = (Asn1OpenType)getElement();
         }

         buffer = savedBuffer;
         if (openType != null) {
            buffer.byteAlign();
            openType.encode (buffer);
         }
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
