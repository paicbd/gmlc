/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NavModelCNAV_KeplerianSet extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "NavModelCNAV-KeplerianSet";
   }

   protected Asn1Integer cnavTop;
   protected Asn1Integer cnavURAindex;
   protected Asn1Integer cnavDeltaA;
   protected Asn1Integer cnavAdot;
   protected Asn1Integer cnavDeltaNo;
   protected Asn1Integer cnavDeltaNoDot;
   protected Asn1Integer cnavMo;
   protected Asn1Integer cnavE;
   protected Asn1Integer cnavOmega;
   protected Asn1Integer cnavOMEGA0;
   protected Asn1Integer cnavDeltaOmegaDot;
   protected Asn1Integer cnavIo;
   protected Asn1Integer cnavIoDot;
   protected Asn1Integer cnavCis;
   protected Asn1Integer cnavCic;
   protected Asn1Integer cnavCrs;
   protected Asn1Integer cnavCrc;
   protected Asn1Integer cnavCus;
   protected Asn1Integer cnavCuc;
   protected Asn1OpenExt extElem1;

   public NavModelCNAV_KeplerianSet () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NavModelCNAV_KeplerianSet (
      Asn1Integer cnavTop_,
      Asn1Integer cnavURAindex_,
      Asn1Integer cnavDeltaA_,
      Asn1Integer cnavAdot_,
      Asn1Integer cnavDeltaNo_,
      Asn1Integer cnavDeltaNoDot_,
      Asn1Integer cnavMo_,
      Asn1Integer cnavE_,
      Asn1Integer cnavOmega_,
      Asn1Integer cnavOMEGA0_,
      Asn1Integer cnavDeltaOmegaDot_,
      Asn1Integer cnavIo_,
      Asn1Integer cnavIoDot_,
      Asn1Integer cnavCis_,
      Asn1Integer cnavCic_,
      Asn1Integer cnavCrs_,
      Asn1Integer cnavCrc_,
      Asn1Integer cnavCus_,
      Asn1Integer cnavCuc_
   ) throws Asn1Exception {
      super();
      setCnavTop (cnavTop_);
      setCnavURAindex (cnavURAindex_);
      setCnavDeltaA (cnavDeltaA_);
      setCnavAdot (cnavAdot_);
      setCnavDeltaNo (cnavDeltaNo_);
      setCnavDeltaNoDot (cnavDeltaNoDot_);
      setCnavMo (cnavMo_);
      setCnavE (cnavE_);
      setCnavOmega (cnavOmega_);
      setCnavOMEGA0 (cnavOMEGA0_);
      setCnavDeltaOmegaDot (cnavDeltaOmegaDot_);
      setCnavIo (cnavIo_);
      setCnavIoDot (cnavIoDot_);
      setCnavCis (cnavCis_);
      setCnavCic (cnavCic_);
      setCnavCrs (cnavCrs_);
      setCnavCrc (cnavCrc_);
      setCnavCus (cnavCus_);
      setCnavCuc (cnavCuc_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NavModelCNAV_KeplerianSet (long cnavTop_,
      long cnavURAindex_,
      long cnavDeltaA_,
      long cnavAdot_,
      long cnavDeltaNo_,
      long cnavDeltaNoDot_,
      long cnavMo_,
      long cnavE_,
      long cnavOmega_,
      long cnavOMEGA0_,
      long cnavDeltaOmegaDot_,
      long cnavIo_,
      long cnavIoDot_,
      long cnavCis_,
      long cnavCic_,
      long cnavCrs_,
      long cnavCrc_,
      long cnavCus_,
      long cnavCuc_
   ) throws Asn1Exception {
      super();
      setCnavTop (cnavTop_);
      setCnavURAindex (cnavURAindex_);
      setCnavDeltaA (cnavDeltaA_);
      setCnavAdot (cnavAdot_);
      setCnavDeltaNo (cnavDeltaNo_);
      setCnavDeltaNoDot (cnavDeltaNoDot_);
      setCnavMo (cnavMo_);
      setCnavE (cnavE_);
      setCnavOmega (cnavOmega_);
      setCnavOMEGA0 (cnavOMEGA0_);
      setCnavDeltaOmegaDot (cnavDeltaOmegaDot_);
      setCnavIo (cnavIo_);
      setCnavIoDot (cnavIoDot_);
      setCnavCis (cnavCis_);
      setCnavCic (cnavCic_);
      setCnavCrs (cnavCrs_);
      setCnavCrc (cnavCrc_);
      setCnavCus (cnavCus_);
      setCnavCuc (cnavCuc_);
   }

   public void init () {
      cnavTop = null;
      cnavURAindex = null;
      cnavDeltaA = null;
      cnavAdot = null;
      cnavDeltaNo = null;
      cnavDeltaNoDot = null;
      cnavMo = null;
      cnavE = null;
      cnavOmega = null;
      cnavOMEGA0 = null;
      cnavDeltaOmegaDot = null;
      cnavIo = null;
      cnavIoDot = null;
      cnavCis = null;
      cnavCic = null;
      cnavCrs = null;
      cnavCrc = null;
      cnavCus = null;
      cnavCuc = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof NavModelCNAV_KeplerianSet) ) return false;

      NavModelCNAV_KeplerianSet rhs = (NavModelCNAV_KeplerianSet) obj;

      if (cnavTop == null) {
         if (rhs.cnavTop != null) return false;
      }
      else {
         if (!cnavTop.equals(rhs.cnavTop)) {
            return false;
         }
      }

      if (cnavURAindex == null) {
         if (rhs.cnavURAindex != null) return false;
      }
      else {
         if (!cnavURAindex.equals(rhs.cnavURAindex)) {
            return false;
         }
      }

      if (cnavDeltaA == null) {
         if (rhs.cnavDeltaA != null) return false;
      }
      else {
         if (!cnavDeltaA.equals(rhs.cnavDeltaA)) {
            return false;
         }
      }

      if (cnavAdot == null) {
         if (rhs.cnavAdot != null) return false;
      }
      else {
         if (!cnavAdot.equals(rhs.cnavAdot)) {
            return false;
         }
      }

      if (cnavDeltaNo == null) {
         if (rhs.cnavDeltaNo != null) return false;
      }
      else {
         if (!cnavDeltaNo.equals(rhs.cnavDeltaNo)) {
            return false;
         }
      }

      if (cnavDeltaNoDot == null) {
         if (rhs.cnavDeltaNoDot != null) return false;
      }
      else {
         if (!cnavDeltaNoDot.equals(rhs.cnavDeltaNoDot)) {
            return false;
         }
      }

      if (cnavMo == null) {
         if (rhs.cnavMo != null) return false;
      }
      else {
         if (!cnavMo.equals(rhs.cnavMo)) {
            return false;
         }
      }

      if (cnavE == null) {
         if (rhs.cnavE != null) return false;
      }
      else {
         if (!cnavE.equals(rhs.cnavE)) {
            return false;
         }
      }

      if (cnavOmega == null) {
         if (rhs.cnavOmega != null) return false;
      }
      else {
         if (!cnavOmega.equals(rhs.cnavOmega)) {
            return false;
         }
      }

      if (cnavOMEGA0 == null) {
         if (rhs.cnavOMEGA0 != null) return false;
      }
      else {
         if (!cnavOMEGA0.equals(rhs.cnavOMEGA0)) {
            return false;
         }
      }

      if (cnavDeltaOmegaDot == null) {
         if (rhs.cnavDeltaOmegaDot != null) return false;
      }
      else {
         if (!cnavDeltaOmegaDot.equals(rhs.cnavDeltaOmegaDot)) {
            return false;
         }
      }

      if (cnavIo == null) {
         if (rhs.cnavIo != null) return false;
      }
      else {
         if (!cnavIo.equals(rhs.cnavIo)) {
            return false;
         }
      }

      if (cnavIoDot == null) {
         if (rhs.cnavIoDot != null) return false;
      }
      else {
         if (!cnavIoDot.equals(rhs.cnavIoDot)) {
            return false;
         }
      }

      if (cnavCis == null) {
         if (rhs.cnavCis != null) return false;
      }
      else {
         if (!cnavCis.equals(rhs.cnavCis)) {
            return false;
         }
      }

      if (cnavCic == null) {
         if (rhs.cnavCic != null) return false;
      }
      else {
         if (!cnavCic.equals(rhs.cnavCic)) {
            return false;
         }
      }

      if (cnavCrs == null) {
         if (rhs.cnavCrs != null) return false;
      }
      else {
         if (!cnavCrs.equals(rhs.cnavCrs)) {
            return false;
         }
      }

      if (cnavCrc == null) {
         if (rhs.cnavCrc != null) return false;
      }
      else {
         if (!cnavCrc.equals(rhs.cnavCrc)) {
            return false;
         }
      }

      if (cnavCus == null) {
         if (rhs.cnavCus != null) return false;
      }
      else {
         if (!cnavCus.equals(rhs.cnavCus)) {
            return false;
         }
      }

      if (cnavCuc == null) {
         if (rhs.cnavCuc != null) return false;
      }
      else {
         if (!cnavCuc.equals(rhs.cnavCuc)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (cnavTop != null) __code = 31*__code + cnavTop.hashCode();
      if (cnavURAindex != null) __code = 31*__code + cnavURAindex.hashCode();
      if (cnavDeltaA != null) __code = 31*__code + cnavDeltaA.hashCode();
      if (cnavAdot != null) __code = 31*__code + cnavAdot.hashCode();
      if (cnavDeltaNo != null) __code = 31*__code + cnavDeltaNo.hashCode();
      if (cnavDeltaNoDot != null) __code = 31*__code + cnavDeltaNoDot.hashCode();
      if (cnavMo != null) __code = 31*__code + cnavMo.hashCode();
      if (cnavE != null) __code = 31*__code + cnavE.hashCode();
      if (cnavOmega != null) __code = 31*__code + cnavOmega.hashCode();
      if (cnavOMEGA0 != null) __code = 31*__code + cnavOMEGA0.hashCode();
      if (cnavDeltaOmegaDot != null) __code = 31*__code + cnavDeltaOmegaDot.hashCode();
      if (cnavIo != null) __code = 31*__code + cnavIo.hashCode();
      if (cnavIoDot != null) __code = 31*__code + cnavIoDot.hashCode();
      if (cnavCis != null) __code = 31*__code + cnavCis.hashCode();
      if (cnavCic != null) __code = 31*__code + cnavCic.hashCode();
      if (cnavCrs != null) __code = 31*__code + cnavCrs.hashCode();
      if (cnavCrc != null) __code = 31*__code + cnavCrc.hashCode();
      if (cnavCus != null) __code = 31*__code + cnavCus.hashCode();
      if (cnavCuc != null) __code = 31*__code + cnavCuc.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for CnavTop
    */
   public Asn1Integer getCnavTop () {
      return cnavTop;
   }

   public void setCnavTop (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 2015))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavTop = value;
   }

   public void setCnavTop (long value) 
      throws Asn1Exception
   {
      setCnavTop (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavURAindex
    */
   public Asn1Integer getCnavURAindex () {
      return cnavURAindex;
   }

   public void setCnavURAindex (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -16 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavURAindex = value;
   }

   public void setCnavURAindex (long value) 
      throws Asn1Exception
   {
      setCnavURAindex (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavDeltaA
    */
   public Asn1Integer getCnavDeltaA () {
      return cnavDeltaA;
   }

   public void setCnavDeltaA (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -33554432 && value.value <= 33554431))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavDeltaA = value;
   }

   public void setCnavDeltaA (long value) 
      throws Asn1Exception
   {
      setCnavDeltaA (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavAdot
    */
   public Asn1Integer getCnavAdot () {
      return cnavAdot;
   }

   public void setCnavAdot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -16777216 && value.value <= 16777215))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavAdot = value;
   }

   public void setCnavAdot (long value) 
      throws Asn1Exception
   {
      setCnavAdot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavDeltaNo
    */
   public Asn1Integer getCnavDeltaNo () {
      return cnavDeltaNo;
   }

   public void setCnavDeltaNo (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -65536 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavDeltaNo = value;
   }

   public void setCnavDeltaNo (long value) 
      throws Asn1Exception
   {
      setCnavDeltaNo (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavDeltaNoDot
    */
   public Asn1Integer getCnavDeltaNoDot () {
      return cnavDeltaNoDot;
   }

   public void setCnavDeltaNoDot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -4194304 && value.value <= 4194303))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavDeltaNoDot = value;
   }

   public void setCnavDeltaNoDot (long value) 
      throws Asn1Exception
   {
      setCnavDeltaNoDot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavMo
    */
   public Asn1Integer getCnavMo () {
      return cnavMo;
   }

   public void setCnavMo (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -4294967296L && value.value <= 4294967295L))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavMo = value;
   }

   public void setCnavMo (long value) 
      throws Asn1Exception
   {
      setCnavMo (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavE
    */
   public Asn1Integer getCnavE () {
      return cnavE;
   }

   public void setCnavE (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 8589934591L))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavE = value;
   }

   public void setCnavE (long value) 
      throws Asn1Exception
   {
      setCnavE (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavOmega
    */
   public Asn1Integer getCnavOmega () {
      return cnavOmega;
   }

   public void setCnavOmega (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -4294967296L && value.value <= 4294967295L))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavOmega = value;
   }

   public void setCnavOmega (long value) 
      throws Asn1Exception
   {
      setCnavOmega (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavOMEGA0
    */
   public Asn1Integer getCnavOMEGA0 () {
      return cnavOMEGA0;
   }

   public void setCnavOMEGA0 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -4294967296L && value.value <= 4294967295L))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavOMEGA0 = value;
   }

   public void setCnavOMEGA0 (long value) 
      throws Asn1Exception
   {
      setCnavOMEGA0 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavDeltaOmegaDot
    */
   public Asn1Integer getCnavDeltaOmegaDot () {
      return cnavDeltaOmegaDot;
   }

   public void setCnavDeltaOmegaDot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -65536 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavDeltaOmegaDot = value;
   }

   public void setCnavDeltaOmegaDot (long value) 
      throws Asn1Exception
   {
      setCnavDeltaOmegaDot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavIo
    */
   public Asn1Integer getCnavIo () {
      return cnavIo;
   }

   public void setCnavIo (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -4294967296L && value.value <= 4294967295L))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavIo = value;
   }

   public void setCnavIo (long value) 
      throws Asn1Exception
   {
      setCnavIo (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavIoDot
    */
   public Asn1Integer getCnavIoDot () {
      return cnavIoDot;
   }

   public void setCnavIoDot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -16384 && value.value <= 16383))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavIoDot = value;
   }

   public void setCnavIoDot (long value) 
      throws Asn1Exception
   {
      setCnavIoDot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavCis
    */
   public Asn1Integer getCnavCis () {
      return cnavCis;
   }

   public void setCnavCis (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavCis = value;
   }

   public void setCnavCis (long value) 
      throws Asn1Exception
   {
      setCnavCis (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavCic
    */
   public Asn1Integer getCnavCic () {
      return cnavCic;
   }

   public void setCnavCic (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavCic = value;
   }

   public void setCnavCic (long value) 
      throws Asn1Exception
   {
      setCnavCic (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavCrs
    */
   public Asn1Integer getCnavCrs () {
      return cnavCrs;
   }

   public void setCnavCrs (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8388608 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavCrs = value;
   }

   public void setCnavCrs (long value) 
      throws Asn1Exception
   {
      setCnavCrs (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavCrc
    */
   public Asn1Integer getCnavCrc () {
      return cnavCrc;
   }

   public void setCnavCrc (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8388608 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavCrc = value;
   }

   public void setCnavCrc (long value) 
      throws Asn1Exception
   {
      setCnavCrc (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavCus
    */
   public Asn1Integer getCnavCus () {
      return cnavCus;
   }

   public void setCnavCus (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1048576 && value.value <= 1048575))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavCus = value;
   }

   public void setCnavCus (long value) 
      throws Asn1Exception
   {
      setCnavCus (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CnavCuc
    */
   public Asn1Integer getCnavCuc () {
      return cnavCuc;
   }

   public void setCnavCuc (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1048576 && value.value <= 1048575))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cnavCuc = value;
   }

   public void setCnavCuc (long value) 
      throws Asn1Exception
   {
      setCnavCuc (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 20; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cnavTop;
         case 1: return cnavURAindex;
         case 2: return cnavDeltaA;
         case 3: return cnavAdot;
         case 4: return cnavDeltaNo;
         case 5: return cnavDeltaNoDot;
         case 6: return cnavMo;
         case 7: return cnavE;
         case 8: return cnavOmega;
         case 9: return cnavOMEGA0;
         case 10: return cnavDeltaOmegaDot;
         case 11: return cnavIo;
         case 12: return cnavIoDot;
         case 13: return cnavCis;
         case 14: return cnavCic;
         case 15: return cnavCrs;
         case 16: return cnavCrc;
         case 17: return cnavCus;
         case 18: return cnavCuc;
         case 19: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cnavTop";
         case 1: return "cnavURAindex";
         case 2: return "cnavDeltaA";
         case 3: return "cnavAdot";
         case 4: return "cnavDeltaNo";
         case 5: return "cnavDeltaNoDot";
         case 6: return "cnavMo";
         case 7: return "cnavE";
         case 8: return "cnavOmega";
         case 9: return "cnavOMEGA0";
         case 10: return "cnavDeltaOmegaDot";
         case 11: return "cnavIo";
         case 12: return "cnavIoDot";
         case 13: return "cnavCis";
         case 14: return "cnavCic";
         case 15: return "cnavCrs";
         case 16: return "cnavCrc";
         case 17: return "cnavCus";
         case 18: return "cnavCuc";
         case 19: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode cnavTop

      buffer.getContext().eventDispatcher.startElement("cnavTop", -1);

      cnavTop = new Asn1Integer();
      cnavTop.decode (buffer, 0, 2015);
      buffer.getContext().eventDispatcher.endElement("cnavTop", -1);

      // decode cnavURAindex

      buffer.getContext().eventDispatcher.startElement("cnavURAindex", -1);

      cnavURAindex = new Asn1Integer();
      cnavURAindex.decode (buffer, -16, 15);
      buffer.getContext().eventDispatcher.endElement("cnavURAindex", -1);

      // decode cnavDeltaA

      buffer.getContext().eventDispatcher.startElement("cnavDeltaA", -1);

      cnavDeltaA = new Asn1Integer();
      cnavDeltaA.decode (buffer, -33554432, 33554431);
      buffer.getContext().eventDispatcher.endElement("cnavDeltaA", -1);

      // decode cnavAdot

      buffer.getContext().eventDispatcher.startElement("cnavAdot", -1);

      cnavAdot = new Asn1Integer();
      cnavAdot.decode (buffer, -16777216, 16777215);
      buffer.getContext().eventDispatcher.endElement("cnavAdot", -1);

      // decode cnavDeltaNo

      buffer.getContext().eventDispatcher.startElement("cnavDeltaNo", -1);

      cnavDeltaNo = new Asn1Integer();
      cnavDeltaNo.decode (buffer, -65536, 65535);
      buffer.getContext().eventDispatcher.endElement("cnavDeltaNo", -1);

      // decode cnavDeltaNoDot

      buffer.getContext().eventDispatcher.startElement("cnavDeltaNoDot", -1);

      cnavDeltaNoDot = new Asn1Integer();
      cnavDeltaNoDot.decode (buffer, -4194304, 4194303);
      buffer.getContext().eventDispatcher.endElement("cnavDeltaNoDot", -1);

      // decode cnavMo

      buffer.getContext().eventDispatcher.startElement("cnavMo", -1);

      cnavMo = new Asn1Integer();
      cnavMo.decode (buffer, -4294967296L, 4294967295L);
      buffer.getContext().eventDispatcher.endElement("cnavMo", -1);

      // decode cnavE

      buffer.getContext().eventDispatcher.startElement("cnavE", -1);

      cnavE = new Asn1Integer();
      cnavE.decode (buffer, 0, 8589934591L);
      buffer.getContext().eventDispatcher.endElement("cnavE", -1);

      // decode cnavOmega

      buffer.getContext().eventDispatcher.startElement("cnavOmega", -1);

      cnavOmega = new Asn1Integer();
      cnavOmega.decode (buffer, -4294967296L, 4294967295L);
      buffer.getContext().eventDispatcher.endElement("cnavOmega", -1);

      // decode cnavOMEGA0

      buffer.getContext().eventDispatcher.startElement("cnavOMEGA0", -1);

      cnavOMEGA0 = new Asn1Integer();
      cnavOMEGA0.decode (buffer, -4294967296L, 4294967295L);
      buffer.getContext().eventDispatcher.endElement("cnavOMEGA0", -1);

      // decode cnavDeltaOmegaDot

      buffer.getContext().eventDispatcher.startElement("cnavDeltaOmegaDot", -1);

      cnavDeltaOmegaDot = new Asn1Integer();
      cnavDeltaOmegaDot.decode (buffer, -65536, 65535);
      buffer.getContext().eventDispatcher.endElement("cnavDeltaOmegaDot", -1);

      // decode cnavIo

      buffer.getContext().eventDispatcher.startElement("cnavIo", -1);

      cnavIo = new Asn1Integer();
      cnavIo.decode (buffer, -4294967296L, 4294967295L);
      buffer.getContext().eventDispatcher.endElement("cnavIo", -1);

      // decode cnavIoDot

      buffer.getContext().eventDispatcher.startElement("cnavIoDot", -1);

      cnavIoDot = new Asn1Integer();
      cnavIoDot.decode (buffer, -16384, 16383);
      buffer.getContext().eventDispatcher.endElement("cnavIoDot", -1);

      // decode cnavCis

      buffer.getContext().eventDispatcher.startElement("cnavCis", -1);

      cnavCis = new Asn1Integer();
      cnavCis.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("cnavCis", -1);

      // decode cnavCic

      buffer.getContext().eventDispatcher.startElement("cnavCic", -1);

      cnavCic = new Asn1Integer();
      cnavCic.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("cnavCic", -1);

      // decode cnavCrs

      buffer.getContext().eventDispatcher.startElement("cnavCrs", -1);

      cnavCrs = new Asn1Integer();
      cnavCrs.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("cnavCrs", -1);

      // decode cnavCrc

      buffer.getContext().eventDispatcher.startElement("cnavCrc", -1);

      cnavCrc = new Asn1Integer();
      cnavCrc.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("cnavCrc", -1);

      // decode cnavCus

      buffer.getContext().eventDispatcher.startElement("cnavCus", -1);

      cnavCus = new Asn1Integer();
      cnavCus.decode (buffer, -1048576, 1048575);
      buffer.getContext().eventDispatcher.endElement("cnavCus", -1);

      // decode cnavCuc

      buffer.getContext().eventDispatcher.startElement("cnavCuc", -1);

      cnavCuc = new Asn1Integer();
      cnavCuc.decode (buffer, -1048576, 1048575);
      buffer.getContext().eventDispatcher.endElement("cnavCuc", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode cnavTop

      if (cnavTop != null) {
         buffer.getContext().eventDispatcher.startElement("cnavTop", -1);

         cnavTop.encode (buffer, 0, 2015);

         buffer.getContext().eventDispatcher.endElement("cnavTop", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavTop");

      // encode cnavURAindex

      if (cnavURAindex != null) {
         buffer.getContext().eventDispatcher.startElement("cnavURAindex", -1);

         cnavURAindex.encode (buffer, -16, 15);

         buffer.getContext().eventDispatcher.endElement("cnavURAindex", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavURAindex");

      // encode cnavDeltaA

      if (cnavDeltaA != null) {
         buffer.getContext().eventDispatcher.startElement("cnavDeltaA", -1);

         cnavDeltaA.encode (buffer, -33554432, 33554431);

         buffer.getContext().eventDispatcher.endElement("cnavDeltaA", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavDeltaA");

      // encode cnavAdot

      if (cnavAdot != null) {
         buffer.getContext().eventDispatcher.startElement("cnavAdot", -1);

         cnavAdot.encode (buffer, -16777216, 16777215);

         buffer.getContext().eventDispatcher.endElement("cnavAdot", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavAdot");

      // encode cnavDeltaNo

      if (cnavDeltaNo != null) {
         buffer.getContext().eventDispatcher.startElement("cnavDeltaNo", -1);

         cnavDeltaNo.encode (buffer, -65536, 65535);

         buffer.getContext().eventDispatcher.endElement("cnavDeltaNo", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavDeltaNo");

      // encode cnavDeltaNoDot

      if (cnavDeltaNoDot != null) {
         buffer.getContext().eventDispatcher.startElement("cnavDeltaNoDot", -1);

         cnavDeltaNoDot.encode (buffer, -4194304, 4194303);

         buffer.getContext().eventDispatcher.endElement("cnavDeltaNoDot", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavDeltaNoDot");

      // encode cnavMo

      if (cnavMo != null) {
         buffer.getContext().eventDispatcher.startElement("cnavMo", -1);

         cnavMo.encode (buffer, -4294967296L, 4294967295L);

         buffer.getContext().eventDispatcher.endElement("cnavMo", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavMo");

      // encode cnavE

      if (cnavE != null) {
         buffer.getContext().eventDispatcher.startElement("cnavE", -1);

         cnavE.encode (buffer, 0, 8589934591L);

         buffer.getContext().eventDispatcher.endElement("cnavE", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavE");

      // encode cnavOmega

      if (cnavOmega != null) {
         buffer.getContext().eventDispatcher.startElement("cnavOmega", -1);

         cnavOmega.encode (buffer, -4294967296L, 4294967295L);

         buffer.getContext().eventDispatcher.endElement("cnavOmega", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavOmega");

      // encode cnavOMEGA0

      if (cnavOMEGA0 != null) {
         buffer.getContext().eventDispatcher.startElement("cnavOMEGA0", -1);

         cnavOMEGA0.encode (buffer, -4294967296L, 4294967295L);

         buffer.getContext().eventDispatcher.endElement("cnavOMEGA0", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavOMEGA0");

      // encode cnavDeltaOmegaDot

      if (cnavDeltaOmegaDot != null) {
         buffer.getContext().eventDispatcher.startElement("cnavDeltaOmegaDot", -1);

         cnavDeltaOmegaDot.encode (buffer, -65536, 65535);

         buffer.getContext().eventDispatcher.endElement("cnavDeltaOmegaDot", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavDeltaOmegaDot");

      // encode cnavIo

      if (cnavIo != null) {
         buffer.getContext().eventDispatcher.startElement("cnavIo", -1);

         cnavIo.encode (buffer, -4294967296L, 4294967295L);

         buffer.getContext().eventDispatcher.endElement("cnavIo", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavIo");

      // encode cnavIoDot

      if (cnavIoDot != null) {
         buffer.getContext().eventDispatcher.startElement("cnavIoDot", -1);

         cnavIoDot.encode (buffer, -16384, 16383);

         buffer.getContext().eventDispatcher.endElement("cnavIoDot", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavIoDot");

      // encode cnavCis

      if (cnavCis != null) {
         buffer.getContext().eventDispatcher.startElement("cnavCis", -1);

         cnavCis.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("cnavCis", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavCis");

      // encode cnavCic

      if (cnavCic != null) {
         buffer.getContext().eventDispatcher.startElement("cnavCic", -1);

         cnavCic.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("cnavCic", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavCic");

      // encode cnavCrs

      if (cnavCrs != null) {
         buffer.getContext().eventDispatcher.startElement("cnavCrs", -1);

         cnavCrs.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("cnavCrs", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavCrs");

      // encode cnavCrc

      if (cnavCrc != null) {
         buffer.getContext().eventDispatcher.startElement("cnavCrc", -1);

         cnavCrc.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("cnavCrc", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavCrc");

      // encode cnavCus

      if (cnavCus != null) {
         buffer.getContext().eventDispatcher.startElement("cnavCus", -1);

         cnavCus.encode (buffer, -1048576, 1048575);

         buffer.getContext().eventDispatcher.endElement("cnavCus", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavCus");

      // encode cnavCuc

      if (cnavCuc != null) {
         buffer.getContext().eventDispatcher.startElement("cnavCuc", -1);

         cnavCuc.encode (buffer, -1048576, 1048575);

         buffer.getContext().eventDispatcher.endElement("cnavCuc", -1);
      }
      else throw new Asn1MissingRequiredException ("cnavCuc");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
