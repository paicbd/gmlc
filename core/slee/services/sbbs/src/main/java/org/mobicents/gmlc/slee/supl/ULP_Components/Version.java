/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Components;

import com.objsys.asn1j.runtime.*;

public class Version extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Version";
   }

   protected Asn1Integer maj;
   protected Asn1Integer min;
   protected Asn1Integer servind;

   public Version () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Version (
      Asn1Integer maj_,
      Asn1Integer min_,
      Asn1Integer servind_
   ) throws Asn1Exception {
      super();
      setMaj (maj_);
      setMin (min_);
      setServind (servind_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Version (long maj_,
      long min_,
      long servind_
   ) throws Asn1Exception {
      super();
      setMaj (maj_);
      setMin (min_);
      setServind (servind_);
   }

   public void init () {
      maj = null;
      min = null;
      servind = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Version) ) return false;

      Version rhs = (Version) obj;

      if (maj == null) {
         if (rhs.maj != null) return false;
      }
      else {
         if (!maj.equals(rhs.maj)) {
            return false;
         }
      }

      if (min == null) {
         if (rhs.min != null) return false;
      }
      else {
         if (!min.equals(rhs.min)) {
            return false;
         }
      }

      if (servind == null) {
         if (rhs.servind != null) return false;
      }
      else {
         if (!servind.equals(rhs.servind)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (maj != null) __code = 31*__code + maj.hashCode();
      if (min != null) __code = 31*__code + min.hashCode();
      if (servind != null) __code = 31*__code + servind.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Maj
    */
   public Asn1Integer getMaj () {
      return maj;
   }

   public void setMaj (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.maj = value;
   }

   public void setMaj (long value) 
      throws Asn1Exception
   {
      setMaj (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Min
    */
   public Asn1Integer getMin () {
      return min;
   }

   public void setMin (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.min = value;
   }

   public void setMin (long value) 
      throws Asn1Exception
   {
      setMin (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Servind
    */
   public Asn1Integer getServind () {
      return servind;
   }

   public void setServind (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.servind = value;
   }

   public void setServind (long value) 
      throws Asn1Exception
   {
      setServind (new Asn1Integer(value));
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return maj;
         case 1: return min;
         case 2: return servind;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "maj";
         case 1: return "min";
         case 2: return "servind";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode maj

      buffer.getContext().eventDispatcher.startElement("maj", -1);

      maj = new Asn1Integer();
      maj.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("maj", -1);

      // decode min

      buffer.getContext().eventDispatcher.startElement("min", -1);

      min = new Asn1Integer();
      min.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("min", -1);

      // decode servind

      buffer.getContext().eventDispatcher.startElement("servind", -1);

      servind = new Asn1Integer();
      servind.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("servind", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode maj

      if (maj != null) {
         buffer.getContext().eventDispatcher.startElement("maj", -1);

         maj.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("maj", -1);
      }
      else throw new Asn1MissingRequiredException ("maj");

      // encode min

      if (min != null) {
         buffer.getContext().eventDispatcher.startElement("min", -1);

         min.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("min", -1);
      }
      else throw new Asn1MissingRequiredException ("min");

      // encode servind

      if (servind != null) {
         buffer.getContext().eventDispatcher.startElement("servind", -1);

         servind.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("servind", -1);
      }
      else throw new Asn1MissingRequiredException ("servind");

   }

}
