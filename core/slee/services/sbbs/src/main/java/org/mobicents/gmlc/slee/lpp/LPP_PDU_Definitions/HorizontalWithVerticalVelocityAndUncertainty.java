/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class HorizontalWithVerticalVelocityAndUncertainty extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "HorizontalWithVerticalVelocityAndUncertainty";
   }

   protected Asn1Integer bearing;
   protected Asn1Integer horizontalSpeed;
   protected HorizontalWithVerticalVelocityAndUncertainty_verticalDirection verticalDirection = null;
   protected Asn1Integer verticalSpeed;
   protected Asn1Integer horizontalUncertaintySpeed;
   protected Asn1Integer verticalUncertaintySpeed;

   public HorizontalWithVerticalVelocityAndUncertainty () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public HorizontalWithVerticalVelocityAndUncertainty (
      Asn1Integer bearing_,
      Asn1Integer horizontalSpeed_,
      HorizontalWithVerticalVelocityAndUncertainty_verticalDirection verticalDirection_,
      Asn1Integer verticalSpeed_,
      Asn1Integer horizontalUncertaintySpeed_,
      Asn1Integer verticalUncertaintySpeed_
   ) throws Asn1Exception {
      super();
      setBearing (bearing_);
      setHorizontalSpeed (horizontalSpeed_);
      setVerticalDirection (verticalDirection_);
      setVerticalSpeed (verticalSpeed_);
      setHorizontalUncertaintySpeed (horizontalUncertaintySpeed_);
      setVerticalUncertaintySpeed (verticalUncertaintySpeed_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public HorizontalWithVerticalVelocityAndUncertainty (long bearing_,
      long horizontalSpeed_,
      HorizontalWithVerticalVelocityAndUncertainty_verticalDirection verticalDirection_,
      long verticalSpeed_,
      long horizontalUncertaintySpeed_,
      long verticalUncertaintySpeed_
   ) throws Asn1Exception {
      super();
      setBearing (bearing_);
      setHorizontalSpeed (horizontalSpeed_);
      setVerticalDirection (verticalDirection_);
      setVerticalSpeed (verticalSpeed_);
      setHorizontalUncertaintySpeed (horizontalUncertaintySpeed_);
      setVerticalUncertaintySpeed (verticalUncertaintySpeed_);
   }

   public void init () {
      bearing = null;
      horizontalSpeed = null;
      verticalDirection = null;
      verticalSpeed = null;
      horizontalUncertaintySpeed = null;
      verticalUncertaintySpeed = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof HorizontalWithVerticalVelocityAndUncertainty) ) return false;

      HorizontalWithVerticalVelocityAndUncertainty rhs = (HorizontalWithVerticalVelocityAndUncertainty) obj;

      if (bearing == null) {
         if (rhs.bearing != null) return false;
      }
      else {
         if (!bearing.equals(rhs.bearing)) {
            return false;
         }
      }

      if (horizontalSpeed == null) {
         if (rhs.horizontalSpeed != null) return false;
      }
      else {
         if (!horizontalSpeed.equals(rhs.horizontalSpeed)) {
            return false;
         }
      }

      if (verticalDirection == null) {
         if (rhs.verticalDirection != null) return false;
      }
      else {
         if (!verticalDirection.equals(rhs.verticalDirection)) {
            return false;
         }
      }

      if (verticalSpeed == null) {
         if (rhs.verticalSpeed != null) return false;
      }
      else {
         if (!verticalSpeed.equals(rhs.verticalSpeed)) {
            return false;
         }
      }

      if (horizontalUncertaintySpeed == null) {
         if (rhs.horizontalUncertaintySpeed != null) return false;
      }
      else {
         if (!horizontalUncertaintySpeed.equals(rhs.horizontalUncertaintySpeed)) {
            return false;
         }
      }

      if (verticalUncertaintySpeed == null) {
         if (rhs.verticalUncertaintySpeed != null) return false;
      }
      else {
         if (!verticalUncertaintySpeed.equals(rhs.verticalUncertaintySpeed)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (bearing != null) __code = 31*__code + bearing.hashCode();
      if (horizontalSpeed != null) __code = 31*__code + horizontalSpeed.hashCode();
      if (verticalDirection != null) __code = 31*__code + verticalDirection.hashCode();
      if (verticalSpeed != null) __code = 31*__code + verticalSpeed.hashCode();
      if (horizontalUncertaintySpeed != null) __code = 31*__code + horizontalUncertaintySpeed.hashCode();
      if (verticalUncertaintySpeed != null) __code = 31*__code + verticalUncertaintySpeed.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Bearing
    */
   public Asn1Integer getBearing () {
      return bearing;
   }

   public void setBearing (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 359))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.bearing = value;
   }

   public void setBearing (long value) 
      throws Asn1Exception
   {
      setBearing (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for HorizontalSpeed
    */
   public Asn1Integer getHorizontalSpeed () {
      return horizontalSpeed;
   }

   public void setHorizontalSpeed (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 2047))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.horizontalSpeed = value;
   }

   public void setHorizontalSpeed (long value) 
      throws Asn1Exception
   {
      setHorizontalSpeed (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for VerticalDirection
    */
   public HorizontalWithVerticalVelocityAndUncertainty_verticalDirection getVerticalDirection () {
      return verticalDirection;
   }

   public void setVerticalDirection (HorizontalWithVerticalVelocityAndUncertainty_verticalDirection value) {
      this.verticalDirection = value;
   }

   /**
    * Accessor/mutator methods for VerticalSpeed
    */
   public Asn1Integer getVerticalSpeed () {
      return verticalSpeed;
   }

   public void setVerticalSpeed (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.verticalSpeed = value;
   }

   public void setVerticalSpeed (long value) 
      throws Asn1Exception
   {
      setVerticalSpeed (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for HorizontalUncertaintySpeed
    */
   public Asn1Integer getHorizontalUncertaintySpeed () {
      return horizontalUncertaintySpeed;
   }

   public void setHorizontalUncertaintySpeed (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.horizontalUncertaintySpeed = value;
   }

   public void setHorizontalUncertaintySpeed (long value) 
      throws Asn1Exception
   {
      setHorizontalUncertaintySpeed (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for VerticalUncertaintySpeed
    */
   public Asn1Integer getVerticalUncertaintySpeed () {
      return verticalUncertaintySpeed;
   }

   public void setVerticalUncertaintySpeed (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.verticalUncertaintySpeed = value;
   }

   public void setVerticalUncertaintySpeed (long value) 
      throws Asn1Exception
   {
      setVerticalUncertaintySpeed (new Asn1Integer(value));
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return bearing;
         case 1: return horizontalSpeed;
         case 2: return verticalDirection;
         case 3: return verticalSpeed;
         case 4: return horizontalUncertaintySpeed;
         case 5: return verticalUncertaintySpeed;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "bearing";
         case 1: return "horizontalSpeed";
         case 2: return "verticalDirection";
         case 3: return "verticalSpeed";
         case 4: return "horizontalUncertaintySpeed";
         case 5: return "verticalUncertaintySpeed";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode bearing

      buffer.getContext().eventDispatcher.startElement("bearing", -1);

      bearing = new Asn1Integer();
      bearing.decode (buffer, 0, 359);
      buffer.getContext().eventDispatcher.endElement("bearing", -1);

      // decode horizontalSpeed

      buffer.getContext().eventDispatcher.startElement("horizontalSpeed", -1);

      horizontalSpeed = new Asn1Integer();
      horizontalSpeed.decode (buffer, 0, 2047);
      buffer.getContext().eventDispatcher.endElement("horizontalSpeed", -1);

      // decode verticalDirection

      buffer.getContext().eventDispatcher.startElement("verticalDirection", -1);

      {
         int tval = HorizontalWithVerticalVelocityAndUncertainty_verticalDirection.decodeEnumValue (buffer);
         verticalDirection = HorizontalWithVerticalVelocityAndUncertainty_verticalDirection.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("verticalDirection", -1);

      // decode verticalSpeed

      buffer.getContext().eventDispatcher.startElement("verticalSpeed", -1);

      verticalSpeed = new Asn1Integer();
      verticalSpeed.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("verticalSpeed", -1);

      // decode horizontalUncertaintySpeed

      buffer.getContext().eventDispatcher.startElement("horizontalUncertaintySpeed", -1);

      horizontalUncertaintySpeed = new Asn1Integer();
      horizontalUncertaintySpeed.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("horizontalUncertaintySpeed", -1);

      // decode verticalUncertaintySpeed

      buffer.getContext().eventDispatcher.startElement("verticalUncertaintySpeed", -1);

      verticalUncertaintySpeed = new Asn1Integer();
      verticalUncertaintySpeed.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("verticalUncertaintySpeed", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode bearing

      if (bearing != null) {
         buffer.getContext().eventDispatcher.startElement("bearing", -1);

         bearing.encode (buffer, 0, 359);

         buffer.getContext().eventDispatcher.endElement("bearing", -1);
      }
      else throw new Asn1MissingRequiredException ("bearing");

      // encode horizontalSpeed

      if (horizontalSpeed != null) {
         buffer.getContext().eventDispatcher.startElement("horizontalSpeed", -1);

         horizontalSpeed.encode (buffer, 0, 2047);

         buffer.getContext().eventDispatcher.endElement("horizontalSpeed", -1);
      }
      else throw new Asn1MissingRequiredException ("horizontalSpeed");

      // encode verticalDirection

      if (verticalDirection != null) {
         buffer.getContext().eventDispatcher.startElement("verticalDirection", -1);

         verticalDirection.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("verticalDirection", -1);
      }
      else throw new Asn1MissingRequiredException ("verticalDirection");

      // encode verticalSpeed

      if (verticalSpeed != null) {
         buffer.getContext().eventDispatcher.startElement("verticalSpeed", -1);

         verticalSpeed.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("verticalSpeed", -1);
      }
      else throw new Asn1MissingRequiredException ("verticalSpeed");

      // encode horizontalUncertaintySpeed

      if (horizontalUncertaintySpeed != null) {
         buffer.getContext().eventDispatcher.startElement("horizontalUncertaintySpeed", -1);

         horizontalUncertaintySpeed.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("horizontalUncertaintySpeed", -1);
      }
      else throw new Asn1MissingRequiredException ("horizontalUncertaintySpeed");

      // encode verticalUncertaintySpeed

      if (verticalUncertaintySpeed != null) {
         buffer.getContext().eventDispatcher.startElement("verticalUncertaintySpeed", -1);

         verticalUncertaintySpeed.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("verticalUncertaintySpeed", -1);
      }
      else throw new Asn1MissingRequiredException ("verticalUncertaintySpeed");

   }

}
