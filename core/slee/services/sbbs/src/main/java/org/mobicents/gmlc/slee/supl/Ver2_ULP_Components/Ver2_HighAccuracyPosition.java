/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.ULP_Components.Velocity;

public class Ver2_HighAccuracyPosition extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Ver2-HighAccuracyPosition";
   }

   protected Asn1UTCTime timestamp;
   protected HighAccuracyPositionEstimate highAccuracyPositionEstimate;
   protected Velocity velocity;  // optional
   protected Asn1OpenExt extElem1;

   public Ver2_HighAccuracyPosition () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Ver2_HighAccuracyPosition (
      Asn1UTCTime timestamp_,
      HighAccuracyPositionEstimate highAccuracyPositionEstimate_,
      Velocity velocity_
   ) {
      super();
      setTimestamp (timestamp_);
      setHighAccuracyPositionEstimate (highAccuracyPositionEstimate_);
      setVelocity (velocity_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public Ver2_HighAccuracyPosition (
      Asn1UTCTime timestamp_,
      HighAccuracyPositionEstimate highAccuracyPositionEstimate_
   ) {
      super();
      setTimestamp (timestamp_);
      setHighAccuracyPositionEstimate (highAccuracyPositionEstimate_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Ver2_HighAccuracyPosition (String timestamp_,
      HighAccuracyPositionEstimate highAccuracyPositionEstimate_,
      Velocity velocity_
   ) {
      super();
      setTimestamp (timestamp_);
      setHighAccuracyPositionEstimate (highAccuracyPositionEstimate_);
      setVelocity (velocity_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public Ver2_HighAccuracyPosition (
      String timestamp_,
      HighAccuracyPositionEstimate highAccuracyPositionEstimate_
   ) {
      super();
      setTimestamp (timestamp_);
      setHighAccuracyPositionEstimate (highAccuracyPositionEstimate_);
   }

   public void init () {
      timestamp = null;
      highAccuracyPositionEstimate = null;
      velocity = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Ver2_HighAccuracyPosition) ) return false;

      Ver2_HighAccuracyPosition rhs = (Ver2_HighAccuracyPosition) obj;

      if (timestamp == null) {
         if (rhs.timestamp != null) return false;
      }
      else {
         if (!timestamp.equals(rhs.timestamp)) {
            return false;
         }
      }

      if (highAccuracyPositionEstimate == null) {
         if (rhs.highAccuracyPositionEstimate != null) return false;
      }
      else {
         if (!highAccuracyPositionEstimate.equals(rhs.highAccuracyPositionEstimate)) {
            return false;
         }
      }

      if (velocity == null) {
         if (rhs.velocity != null) return false;
      }
      else {
         if (!velocity.equals(rhs.velocity)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (timestamp != null) __code = 31*__code + timestamp.hashCode();
      if (highAccuracyPositionEstimate != null) __code = 31*__code + highAccuracyPositionEstimate.hashCode();
      if (velocity != null) __code = 31*__code + velocity.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Timestamp
    */
   public Asn1UTCTime getTimestamp () {
      return timestamp;
   }

   public void setTimestamp (Asn1UTCTime value) {
      this.timestamp = value;
   }

   public void setTimestamp (String value) {
      setTimestamp (new Asn1UTCTime(value));
   }

   /**
    * Accessor/mutator methods for HighAccuracyPositionEstimate
    */
   public HighAccuracyPositionEstimate getHighAccuracyPositionEstimate () {
      return highAccuracyPositionEstimate;
   }

   public void setHighAccuracyPositionEstimate (HighAccuracyPositionEstimate value) {
      this.highAccuracyPositionEstimate = value;
   }

   /**
    * Accessor/mutator methods for Velocity
    */
   public Velocity getVelocity () {
      return velocity;
   }

   public void setVelocity (Velocity value) {
      this.velocity = value;
   }

   public boolean hasVelocity () {
      return (velocity != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return timestamp;
         case 1: return highAccuracyPositionEstimate;
         case 2: return velocity;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "timestamp";
         case 1: return "highAccuracyPositionEstimate";
         case 2: return "velocity";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean velocityPresent = buffer.decodeBit ("velocityPresent");

      // decode timestamp

      buffer.getContext().eventDispatcher.startElement("timestamp", -1);

      timestamp = new Asn1UTCTime (true);
      timestamp.decode (buffer, (Asn1CharSet)null);
      buffer.getContext().eventDispatcher.endElement("timestamp", -1);

      // decode highAccuracyPositionEstimate

      buffer.getContext().eventDispatcher.startElement("highAccuracyPositionEstimate", -1);

      highAccuracyPositionEstimate = new HighAccuracyPositionEstimate();
      highAccuracyPositionEstimate.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("highAccuracyPositionEstimate", -1);

      // decode velocity

      if (velocityPresent) {
         buffer.getContext().eventDispatcher.startElement("velocity", -1);

         velocity = new Velocity();
         velocity.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("velocity", -1);
      }
      else {
         velocity = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((velocity != null), null);

      // encode timestamp

      if (timestamp != null) {
         buffer.getContext().eventDispatcher.startElement("timestamp", -1);

         timestamp.encode (buffer, (Asn1CharSet)null);

         buffer.getContext().eventDispatcher.endElement("timestamp", -1);
      }
      else throw new Asn1MissingRequiredException ("timestamp");

      // encode highAccuracyPositionEstimate

      if (highAccuracyPositionEstimate != null) {
         buffer.getContext().eventDispatcher.startElement("highAccuracyPositionEstimate", -1);

         highAccuracyPositionEstimate.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("highAccuracyPositionEstimate", -1);
      }
      else throw new Asn1MissingRequiredException ("highAccuracyPositionEstimate");

      // encode velocity

      if (velocity != null) {
         buffer.getContext().eventDispatcher.startElement("velocity", -1);

         velocity.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("velocity", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
