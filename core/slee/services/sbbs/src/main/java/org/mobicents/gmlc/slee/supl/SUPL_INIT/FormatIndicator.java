/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_INIT;

import com.objsys.asn1j.runtime.*;

public class FormatIndicator extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_INITRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_INITRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "FormatIndicator";
   }

   // Integer constants for switch-case
   public static final int _LOGICALNAME = 0;
   public static final int _E_MAILADDRESS = 1;
   public static final int _MSISDN = 2;
   public static final int _URL = 3;
   public static final int _SIPURL = 4;
   public static final int _MIN = 5;
   public static final int _MDN = 6;
   public static final int _IMSPUBLICIDENTITY = 7;

   // Singleton instances of FormatIndicator
   protected static final FormatIndicator _logicalName = new FormatIndicator(0);
   protected static final FormatIndicator _e_mailAddress = new FormatIndicator(1);
   protected static final FormatIndicator _msisdn = new FormatIndicator(2);
   protected static final FormatIndicator _url = new FormatIndicator(3);
   protected static final FormatIndicator _sipUrl = new FormatIndicator(4);
   protected static final FormatIndicator _min = new FormatIndicator(5);
   protected static final FormatIndicator _mdn = new FormatIndicator(6);
   protected static final FormatIndicator _iMSPublicidentity = new FormatIndicator(7);
   private static FormatIndicator __undefined = new FormatIndicator(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    */
   protected FormatIndicator (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for logicalName.
    */
   public static FormatIndicator logicalName() {
      return _logicalName;
   }

   /**
    * Singleton accessor method for e_mailAddress.
    */
   public static FormatIndicator e_mailAddress() {
      return _e_mailAddress;
   }

   /**
    * Singleton accessor method for msisdn.
    */
   public static FormatIndicator msisdn() {
      return _msisdn;
   }

   /**
    * Singleton accessor method for url.
    */
   public static FormatIndicator url() {
      return _url;
   }

   /**
    * Singleton accessor method for sipUrl.
    */
   public static FormatIndicator sipUrl() {
      return _sipUrl;
   }

   /**
    * Singleton accessor method for min.
    */
   public static FormatIndicator min() {
      return _min;
   }

   /**
    * Singleton accessor method for mdn.
    */
   public static FormatIndicator mdn() {
      return _mdn;
   }

   /**
    * Singleton accessor method for iMSPublicidentity.
    */
   public static FormatIndicator iMSPublicidentity() {
      return _iMSPublicidentity;
   }

   /** Undefined value. */
   protected static FormatIndicator __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return FormatIndicator.valueOf( FormatIndicator.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static FormatIndicator valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return logicalName();
         case 1: return e_mailAddress();
         case 2: return msisdn();
         case 3: return url();
         case 4: return sipUrl();
         case 5: return min();
         case 6: return mdn();
         case 7: return iMSPublicidentity();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         return 0x7fffffff;
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (8);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            case 3: ret =  3; break;
            case 4: ret =  4; break;
            case 5: ret =  5; break;
            case 6: ret =  6; break;
            case 7: ret =  7; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      boolean extbit = false;

      switch ((int)value) {
         case 0: ui = 0; /* logicalName */break;
         case 1: ui = 1; /* e_mailAddress */break;
         case 2: ui = 2; /* msisdn */break;
         case 3: ui = 3; /* url */break;
         case 4: ui = 4; /* sipUrl */break;
         case 5: ui = 5; /* min */break;
         case 6: ui = 6; /* mdn */break;
         case 7: ui = 7; /* iMSPublicidentity */break;
         default:
            ui = (int) value;
            extbit = true;
      }

      buffer.encodeBit (extbit, "extbit");

      if (extbit) {
         buffer.encodeSmallNonNegWholeNumber (ui);
      }
      else {
         buffer.encodeConsWholeNumber (ui, 8);
      }
   }

}
