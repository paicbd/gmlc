/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class ECGI extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ECGI";
   }

   protected ECGI_mcc mcc;
   protected ECGI_mnc mnc;
   protected Asn1BitString cellidentity;

   public ECGI () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ECGI (
      ECGI_mcc mcc_,
      ECGI_mnc mnc_,
      Asn1BitString cellidentity_
   ) throws Asn1Exception {
      super();
      setMcc (mcc_);
      setMnc (mnc_);
      setCellidentity (cellidentity_);
   }

   public void init () {
      mcc = null;
      mnc = null;
      cellidentity = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof ECGI) ) return false;

      ECGI rhs = (ECGI) obj;

      if (mcc == null) {
         if (rhs.mcc != null) return false;
      }
      else {
         if (!mcc.equals(rhs.mcc)) {
            return false;
         }
      }

      if (mnc == null) {
         if (rhs.mnc != null) return false;
      }
      else {
         if (!mnc.equals(rhs.mnc)) {
            return false;
         }
      }

      if (cellidentity == null) {
         if (rhs.cellidentity != null) return false;
      }
      else {
         if (!cellidentity.equals(rhs.cellidentity)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (mcc != null) __code = 31*__code + mcc.hashCode();
      if (mnc != null) __code = 31*__code + mnc.hashCode();
      if (cellidentity != null) __code = 31*__code + cellidentity.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Mcc
    */
   public ECGI_mcc getMcc () {
      return mcc;
   }

   public void setMcc (ECGI_mcc value) 
      throws Asn1Exception
   {
      if (!(value.getElements().length == 3)) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.mcc = value;
   }

   /**
    * Accessor/mutator methods for Mnc
    */
   public ECGI_mnc getMnc () {
      return mnc;
   }

   public void setMnc (ECGI_mnc value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 2 && value.getElements().length <= 3))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.mnc = value;
   }

   /**
    * Accessor/mutator methods for Cellidentity
    */
   public Asn1BitString getCellidentity () {
      return cellidentity;
   }

   public void setCellidentity (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 28)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.cellidentity = value;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return mcc;
         case 1: return mnc;
         case 2: return cellidentity;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "mcc";
         case 1: return "mnc";
         case 2: return "cellidentity";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode mcc

      buffer.getContext().eventDispatcher.startElement("mcc", -1);

      mcc = new ECGI_mcc();
      mcc.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("mcc", -1);

      // decode mnc

      buffer.getContext().eventDispatcher.startElement("mnc", -1);

      mnc = new ECGI_mnc();
      mnc.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("mnc", -1);

      // decode cellidentity

      buffer.getContext().eventDispatcher.startElement("cellidentity", -1);

      cellidentity = new Asn1BitString();
      cellidentity.decode (buffer, 28, 28);
      buffer.getContext().eventDispatcher.endElement("cellidentity", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode mcc

      if (mcc != null) {
         buffer.getContext().eventDispatcher.startElement("mcc", -1);

         mcc.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mcc", -1);
      }
      else throw new Asn1MissingRequiredException ("mcc");

      // encode mnc

      if (mnc != null) {
         buffer.getContext().eventDispatcher.startElement("mnc", -1);

         mnc.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mnc", -1);
      }
      else throw new Asn1MissingRequiredException ("mnc");

      // encode cellidentity

      if (cellidentity != null) {
         buffer.getContext().eventDispatcher.startElement("cellidentity", -1);

         cellidentity.encode (buffer, 28, 28);

         buffer.getContext().eventDispatcher.endElement("cellidentity", -1);
      }
      else throw new Asn1MissingRequiredException ("cellidentity");

   }

}
