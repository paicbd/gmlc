/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NavModelNAV_KeplerianSet_addNAVparam_ephemSF1Rsvd extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   protected Asn1Integer reserved1;
   protected Asn1Integer reserved2;
   protected Asn1Integer reserved3;
   protected Asn1Integer reserved4;

   public NavModelNAV_KeplerianSet_addNAVparam_ephemSF1Rsvd () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NavModelNAV_KeplerianSet_addNAVparam_ephemSF1Rsvd (
      Asn1Integer reserved1_,
      Asn1Integer reserved2_,
      Asn1Integer reserved3_,
      Asn1Integer reserved4_
   ) throws Asn1Exception {
      super();
      setReserved1 (reserved1_);
      setReserved2 (reserved2_);
      setReserved3 (reserved3_);
      setReserved4 (reserved4_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NavModelNAV_KeplerianSet_addNAVparam_ephemSF1Rsvd (long reserved1_,
      long reserved2_,
      long reserved3_,
      long reserved4_
   ) throws Asn1Exception {
      super();
      setReserved1 (reserved1_);
      setReserved2 (reserved2_);
      setReserved3 (reserved3_);
      setReserved4 (reserved4_);
   }

   public void init () {
      reserved1 = null;
      reserved2 = null;
      reserved3 = null;
      reserved4 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof NavModelNAV_KeplerianSet_addNAVparam_ephemSF1Rsvd) ) return false;

      NavModelNAV_KeplerianSet_addNAVparam_ephemSF1Rsvd rhs = (NavModelNAV_KeplerianSet_addNAVparam_ephemSF1Rsvd) obj;

      if (reserved1 == null) {
         if (rhs.reserved1 != null) return false;
      }
      else {
         if (!reserved1.equals(rhs.reserved1)) {
            return false;
         }
      }

      if (reserved2 == null) {
         if (rhs.reserved2 != null) return false;
      }
      else {
         if (!reserved2.equals(rhs.reserved2)) {
            return false;
         }
      }

      if (reserved3 == null) {
         if (rhs.reserved3 != null) return false;
      }
      else {
         if (!reserved3.equals(rhs.reserved3)) {
            return false;
         }
      }

      if (reserved4 == null) {
         if (rhs.reserved4 != null) return false;
      }
      else {
         if (!reserved4.equals(rhs.reserved4)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (reserved1 != null) __code = 31*__code + reserved1.hashCode();
      if (reserved2 != null) __code = 31*__code + reserved2.hashCode();
      if (reserved3 != null) __code = 31*__code + reserved3.hashCode();
      if (reserved4 != null) __code = 31*__code + reserved4.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Reserved1
    */
   public Asn1Integer getReserved1 () {
      return reserved1;
   }

   public void setReserved1 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.reserved1 = value;
   }

   public void setReserved1 (long value) 
      throws Asn1Exception
   {
      setReserved1 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Reserved2
    */
   public Asn1Integer getReserved2 () {
      return reserved2;
   }

   public void setReserved2 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 16777215))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.reserved2 = value;
   }

   public void setReserved2 (long value) 
      throws Asn1Exception
   {
      setReserved2 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Reserved3
    */
   public Asn1Integer getReserved3 () {
      return reserved3;
   }

   public void setReserved3 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 16777215))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.reserved3 = value;
   }

   public void setReserved3 (long value) 
      throws Asn1Exception
   {
      setReserved3 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Reserved4
    */
   public Asn1Integer getReserved4 () {
      return reserved4;
   }

   public void setReserved4 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.reserved4 = value;
   }

   public void setReserved4 (long value) 
      throws Asn1Exception
   {
      setReserved4 (new Asn1Integer(value));
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return reserved1;
         case 1: return reserved2;
         case 2: return reserved3;
         case 3: return reserved4;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "reserved1";
         case 1: return "reserved2";
         case 2: return "reserved3";
         case 3: return "reserved4";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode reserved1

      buffer.getContext().eventDispatcher.startElement("reserved1", -1);

      reserved1 = new Asn1Integer();
      reserved1.decode (buffer, 0, 8388607);
      buffer.getContext().eventDispatcher.endElement("reserved1", -1);

      // decode reserved2

      buffer.getContext().eventDispatcher.startElement("reserved2", -1);

      reserved2 = new Asn1Integer();
      reserved2.decode (buffer, 0, 16777215);
      buffer.getContext().eventDispatcher.endElement("reserved2", -1);

      // decode reserved3

      buffer.getContext().eventDispatcher.startElement("reserved3", -1);

      reserved3 = new Asn1Integer();
      reserved3.decode (buffer, 0, 16777215);
      buffer.getContext().eventDispatcher.endElement("reserved3", -1);

      // decode reserved4

      buffer.getContext().eventDispatcher.startElement("reserved4", -1);

      reserved4 = new Asn1Integer();
      reserved4.decode (buffer, 0, 65535);
      buffer.getContext().eventDispatcher.endElement("reserved4", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode reserved1

      if (reserved1 != null) {
         buffer.getContext().eventDispatcher.startElement("reserved1", -1);

         reserved1.encode (buffer, 0, 8388607);

         buffer.getContext().eventDispatcher.endElement("reserved1", -1);
      }
      else throw new Asn1MissingRequiredException ("reserved1");

      // encode reserved2

      if (reserved2 != null) {
         buffer.getContext().eventDispatcher.startElement("reserved2", -1);

         reserved2.encode (buffer, 0, 16777215);

         buffer.getContext().eventDispatcher.endElement("reserved2", -1);
      }
      else throw new Asn1MissingRequiredException ("reserved2");

      // encode reserved3

      if (reserved3 != null) {
         buffer.getContext().eventDispatcher.startElement("reserved3", -1);

         reserved3.encode (buffer, 0, 16777215);

         buffer.getContext().eventDispatcher.endElement("reserved3", -1);
      }
      else throw new Asn1MissingRequiredException ("reserved3");

      // encode reserved4

      if (reserved4 != null) {
         buffer.getContext().eventDispatcher.startElement("reserved4", -1);

         reserved4.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("reserved4", -1);
      }
      else throw new Asn1MissingRequiredException ("reserved4");

   }

}
