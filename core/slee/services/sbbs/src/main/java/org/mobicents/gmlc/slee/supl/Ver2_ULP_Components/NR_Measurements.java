/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class NR_Measurements extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "NR-Measurements";
   }

   protected Asn1Integer rsrp_Range;  // optional
   protected Asn1Integer rsrq_Range;  // optional
   protected Asn1Integer sinr_Range;  // optional
   protected Asn1OpenExt extElem1;

   public NR_Measurements () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NR_Measurements (
      Asn1Integer rsrp_Range_,
      Asn1Integer rsrq_Range_,
      Asn1Integer sinr_Range_
   ) throws Asn1Exception {
      super();
      setRsrp_Range (rsrp_Range_);
      setRsrq_Range (rsrq_Range_);
      setSinr_Range (sinr_Range_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NR_Measurements (long rsrp_Range_,
      long rsrq_Range_,
      long sinr_Range_
   ) throws Asn1Exception {
      super();
      setRsrp_Range (rsrp_Range_);
      setRsrq_Range (rsrq_Range_);
      setSinr_Range (sinr_Range_);
   }

   public void init () {
      rsrp_Range = null;
      rsrq_Range = null;
      sinr_Range = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof NR_Measurements) ) return false;

      NR_Measurements rhs = (NR_Measurements) obj;

      if (rsrp_Range == null) {
         if (rhs.rsrp_Range != null) return false;
      }
      else {
         if (!rsrp_Range.equals(rhs.rsrp_Range)) {
            return false;
         }
      }

      if (rsrq_Range == null) {
         if (rhs.rsrq_Range != null) return false;
      }
      else {
         if (!rsrq_Range.equals(rhs.rsrq_Range)) {
            return false;
         }
      }

      if (sinr_Range == null) {
         if (rhs.sinr_Range != null) return false;
      }
      else {
         if (!sinr_Range.equals(rhs.sinr_Range)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (rsrp_Range != null) __code = 31*__code + rsrp_Range.hashCode();
      if (rsrq_Range != null) __code = 31*__code + rsrq_Range.hashCode();
      if (sinr_Range != null) __code = 31*__code + sinr_Range.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Rsrp_Range
    */
   public Asn1Integer getRsrp_Range () {
      return rsrp_Range;
   }

   public void setRsrp_Range (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.rsrp_Range = value;
   }

   public void setRsrp_Range (long value) 
      throws Asn1Exception
   {
      setRsrp_Range (new Asn1Integer(value));
   }
   public boolean hasRsrp_Range () {
      return (rsrp_Range != null);
   }

   /**
    * Accessor/mutator methods for Rsrq_Range
    */
   public Asn1Integer getRsrq_Range () {
      return rsrq_Range;
   }

   public void setRsrq_Range (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.rsrq_Range = value;
   }

   public void setRsrq_Range (long value) 
      throws Asn1Exception
   {
      setRsrq_Range (new Asn1Integer(value));
   }
   public boolean hasRsrq_Range () {
      return (rsrq_Range != null);
   }

   /**
    * Accessor/mutator methods for Sinr_Range
    */
   public Asn1Integer getSinr_Range () {
      return sinr_Range;
   }

   public void setSinr_Range (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sinr_Range = value;
   }

   public void setSinr_Range (long value) 
      throws Asn1Exception
   {
      setSinr_Range (new Asn1Integer(value));
   }
   public boolean hasSinr_Range () {
      return (sinr_Range != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rsrp_Range;
         case 1: return rsrq_Range;
         case 2: return sinr_Range;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rsrp-Range";
         case 1: return "rsrq-Range";
         case 2: return "sinr-Range";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean rsrp_RangePresent = buffer.decodeBit ("rsrp_RangePresent");
      boolean rsrq_RangePresent = buffer.decodeBit ("rsrq_RangePresent");
      boolean sinr_RangePresent = buffer.decodeBit ("sinr_RangePresent");

      // decode rsrp_Range

      if (rsrp_RangePresent) {
         buffer.getContext().eventDispatcher.startElement("rsrp_Range", -1);

         rsrp_Range = new Asn1Integer();
         rsrp_Range.decode (buffer, 0, 127);
         buffer.getContext().eventDispatcher.endElement("rsrp_Range", -1);
      }
      else {
         rsrp_Range = null;
      }

      // decode rsrq_Range

      if (rsrq_RangePresent) {
         buffer.getContext().eventDispatcher.startElement("rsrq_Range", -1);

         rsrq_Range = new Asn1Integer();
         rsrq_Range.decode (buffer, 0, 127);
         buffer.getContext().eventDispatcher.endElement("rsrq_Range", -1);
      }
      else {
         rsrq_Range = null;
      }

      // decode sinr_Range

      if (sinr_RangePresent) {
         buffer.getContext().eventDispatcher.startElement("sinr_Range", -1);

         sinr_Range = new Asn1Integer();
         sinr_Range.decode (buffer, 0, 127);
         buffer.getContext().eventDispatcher.endElement("sinr_Range", -1);
      }
      else {
         sinr_Range = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((rsrp_Range != null), null);
      buffer.encodeBit ((rsrq_Range != null), null);
      buffer.encodeBit ((sinr_Range != null), null);

      // encode rsrp_Range

      if (rsrp_Range != null) {
         buffer.getContext().eventDispatcher.startElement("rsrp_Range", -1);

         rsrp_Range.encode (buffer, 0, 127);

         buffer.getContext().eventDispatcher.endElement("rsrp_Range", -1);
      }

      // encode rsrq_Range

      if (rsrq_Range != null) {
         buffer.getContext().eventDispatcher.startElement("rsrq_Range", -1);

         rsrq_Range.encode (buffer, 0, 127);

         buffer.getContext().eventDispatcher.endElement("rsrq_Range", -1);
      }

      // encode sinr_Range

      if (sinr_Range != null) {
         buffer.getContext().eventDispatcher.startElement("sinr_Range", -1);

         sinr_Range.encode (buffer, 0, 127);

         buffer.getContext().eventDispatcher.endElement("sinr_Range", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
