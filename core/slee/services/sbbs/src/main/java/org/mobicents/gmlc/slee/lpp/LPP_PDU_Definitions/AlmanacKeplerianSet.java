/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class AlmanacKeplerianSet extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "AlmanacKeplerianSet";
   }

   protected SV_ID svID;
   protected Asn1Integer kepAlmanacE;
   protected Asn1Integer kepAlmanacDeltaI;
   protected Asn1Integer kepAlmanacOmegaDot;
   protected Asn1BitString kepSV_StatusINAV;
   protected Asn1BitString kepSV_StatusFNAV;  // optional
   protected Asn1Integer kepAlmanacAPowerHalf;
   protected Asn1Integer kepAlmanacOmega0;
   protected Asn1Integer kepAlmanacW;
   protected Asn1Integer kepAlmanacM0;
   protected Asn1Integer kepAlmanacAF0;
   protected Asn1Integer kepAlmanacAF1;
   protected Asn1OpenExt extElem1;

   public AlmanacKeplerianSet () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AlmanacKeplerianSet (
      SV_ID svID_,
      Asn1Integer kepAlmanacE_,
      Asn1Integer kepAlmanacDeltaI_,
      Asn1Integer kepAlmanacOmegaDot_,
      Asn1BitString kepSV_StatusINAV_,
      Asn1BitString kepSV_StatusFNAV_,
      Asn1Integer kepAlmanacAPowerHalf_,
      Asn1Integer kepAlmanacOmega0_,
      Asn1Integer kepAlmanacW_,
      Asn1Integer kepAlmanacM0_,
      Asn1Integer kepAlmanacAF0_,
      Asn1Integer kepAlmanacAF1_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setKepAlmanacE (kepAlmanacE_);
      setKepAlmanacDeltaI (kepAlmanacDeltaI_);
      setKepAlmanacOmegaDot (kepAlmanacOmegaDot_);
      setKepSV_StatusINAV (kepSV_StatusINAV_);
      setKepSV_StatusFNAV (kepSV_StatusFNAV_);
      setKepAlmanacAPowerHalf (kepAlmanacAPowerHalf_);
      setKepAlmanacOmega0 (kepAlmanacOmega0_);
      setKepAlmanacW (kepAlmanacW_);
      setKepAlmanacM0 (kepAlmanacM0_);
      setKepAlmanacAF0 (kepAlmanacAF0_);
      setKepAlmanacAF1 (kepAlmanacAF1_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public AlmanacKeplerianSet (
      SV_ID svID_,
      Asn1Integer kepAlmanacE_,
      Asn1Integer kepAlmanacDeltaI_,
      Asn1Integer kepAlmanacOmegaDot_,
      Asn1BitString kepSV_StatusINAV_,
      Asn1Integer kepAlmanacAPowerHalf_,
      Asn1Integer kepAlmanacOmega0_,
      Asn1Integer kepAlmanacW_,
      Asn1Integer kepAlmanacM0_,
      Asn1Integer kepAlmanacAF0_,
      Asn1Integer kepAlmanacAF1_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setKepAlmanacE (kepAlmanacE_);
      setKepAlmanacDeltaI (kepAlmanacDeltaI_);
      setKepAlmanacOmegaDot (kepAlmanacOmegaDot_);
      setKepSV_StatusINAV (kepSV_StatusINAV_);
      setKepAlmanacAPowerHalf (kepAlmanacAPowerHalf_);
      setKepAlmanacOmega0 (kepAlmanacOmega0_);
      setKepAlmanacW (kepAlmanacW_);
      setKepAlmanacM0 (kepAlmanacM0_);
      setKepAlmanacAF0 (kepAlmanacAF0_);
      setKepAlmanacAF1 (kepAlmanacAF1_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AlmanacKeplerianSet (SV_ID svID_,
      long kepAlmanacE_,
      long kepAlmanacDeltaI_,
      long kepAlmanacOmegaDot_,
      Asn1BitString kepSV_StatusINAV_,
      Asn1BitString kepSV_StatusFNAV_,
      long kepAlmanacAPowerHalf_,
      long kepAlmanacOmega0_,
      long kepAlmanacW_,
      long kepAlmanacM0_,
      long kepAlmanacAF0_,
      long kepAlmanacAF1_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setKepAlmanacE (kepAlmanacE_);
      setKepAlmanacDeltaI (kepAlmanacDeltaI_);
      setKepAlmanacOmegaDot (kepAlmanacOmegaDot_);
      setKepSV_StatusINAV (kepSV_StatusINAV_);
      setKepSV_StatusFNAV (kepSV_StatusFNAV_);
      setKepAlmanacAPowerHalf (kepAlmanacAPowerHalf_);
      setKepAlmanacOmega0 (kepAlmanacOmega0_);
      setKepAlmanacW (kepAlmanacW_);
      setKepAlmanacM0 (kepAlmanacM0_);
      setKepAlmanacAF0 (kepAlmanacAF0_);
      setKepAlmanacAF1 (kepAlmanacAF1_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public AlmanacKeplerianSet (
      SV_ID svID_,
      long kepAlmanacE_,
      long kepAlmanacDeltaI_,
      long kepAlmanacOmegaDot_,
      Asn1BitString kepSV_StatusINAV_,
      long kepAlmanacAPowerHalf_,
      long kepAlmanacOmega0_,
      long kepAlmanacW_,
      long kepAlmanacM0_,
      long kepAlmanacAF0_,
      long kepAlmanacAF1_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setKepAlmanacE (kepAlmanacE_);
      setKepAlmanacDeltaI (kepAlmanacDeltaI_);
      setKepAlmanacOmegaDot (kepAlmanacOmegaDot_);
      setKepSV_StatusINAV (kepSV_StatusINAV_);
      setKepAlmanacAPowerHalf (kepAlmanacAPowerHalf_);
      setKepAlmanacOmega0 (kepAlmanacOmega0_);
      setKepAlmanacW (kepAlmanacW_);
      setKepAlmanacM0 (kepAlmanacM0_);
      setKepAlmanacAF0 (kepAlmanacAF0_);
      setKepAlmanacAF1 (kepAlmanacAF1_);
   }

   public void init () {
      svID = null;
      kepAlmanacE = null;
      kepAlmanacDeltaI = null;
      kepAlmanacOmegaDot = null;
      kepSV_StatusINAV = null;
      kepSV_StatusFNAV = null;
      kepAlmanacAPowerHalf = null;
      kepAlmanacOmega0 = null;
      kepAlmanacW = null;
      kepAlmanacM0 = null;
      kepAlmanacAF0 = null;
      kepAlmanacAF1 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof AlmanacKeplerianSet) ) return false;

      AlmanacKeplerianSet rhs = (AlmanacKeplerianSet) obj;

      if (svID == null) {
         if (rhs.svID != null) return false;
      }
      else {
         if (!svID.equals(rhs.svID)) {
            return false;
         }
      }

      if (kepAlmanacE == null) {
         if (rhs.kepAlmanacE != null) return false;
      }
      else {
         if (!kepAlmanacE.equals(rhs.kepAlmanacE)) {
            return false;
         }
      }

      if (kepAlmanacDeltaI == null) {
         if (rhs.kepAlmanacDeltaI != null) return false;
      }
      else {
         if (!kepAlmanacDeltaI.equals(rhs.kepAlmanacDeltaI)) {
            return false;
         }
      }

      if (kepAlmanacOmegaDot == null) {
         if (rhs.kepAlmanacOmegaDot != null) return false;
      }
      else {
         if (!kepAlmanacOmegaDot.equals(rhs.kepAlmanacOmegaDot)) {
            return false;
         }
      }

      if (kepSV_StatusINAV == null) {
         if (rhs.kepSV_StatusINAV != null) return false;
      }
      else {
         if (!kepSV_StatusINAV.equals(rhs.kepSV_StatusINAV)) {
            return false;
         }
      }

      if (kepSV_StatusFNAV == null) {
         if (rhs.kepSV_StatusFNAV != null) return false;
      }
      else {
         if (!kepSV_StatusFNAV.equals(rhs.kepSV_StatusFNAV)) {
            return false;
         }
      }

      if (kepAlmanacAPowerHalf == null) {
         if (rhs.kepAlmanacAPowerHalf != null) return false;
      }
      else {
         if (!kepAlmanacAPowerHalf.equals(rhs.kepAlmanacAPowerHalf)) {
            return false;
         }
      }

      if (kepAlmanacOmega0 == null) {
         if (rhs.kepAlmanacOmega0 != null) return false;
      }
      else {
         if (!kepAlmanacOmega0.equals(rhs.kepAlmanacOmega0)) {
            return false;
         }
      }

      if (kepAlmanacW == null) {
         if (rhs.kepAlmanacW != null) return false;
      }
      else {
         if (!kepAlmanacW.equals(rhs.kepAlmanacW)) {
            return false;
         }
      }

      if (kepAlmanacM0 == null) {
         if (rhs.kepAlmanacM0 != null) return false;
      }
      else {
         if (!kepAlmanacM0.equals(rhs.kepAlmanacM0)) {
            return false;
         }
      }

      if (kepAlmanacAF0 == null) {
         if (rhs.kepAlmanacAF0 != null) return false;
      }
      else {
         if (!kepAlmanacAF0.equals(rhs.kepAlmanacAF0)) {
            return false;
         }
      }

      if (kepAlmanacAF1 == null) {
         if (rhs.kepAlmanacAF1 != null) return false;
      }
      else {
         if (!kepAlmanacAF1.equals(rhs.kepAlmanacAF1)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (svID != null) __code = 31*__code + svID.hashCode();
      if (kepAlmanacE != null) __code = 31*__code + kepAlmanacE.hashCode();
      if (kepAlmanacDeltaI != null) __code = 31*__code + kepAlmanacDeltaI.hashCode();
      if (kepAlmanacOmegaDot != null) __code = 31*__code + kepAlmanacOmegaDot.hashCode();
      if (kepSV_StatusINAV != null) __code = 31*__code + kepSV_StatusINAV.hashCode();
      if (kepSV_StatusFNAV != null) __code = 31*__code + kepSV_StatusFNAV.hashCode();
      if (kepAlmanacAPowerHalf != null) __code = 31*__code + kepAlmanacAPowerHalf.hashCode();
      if (kepAlmanacOmega0 != null) __code = 31*__code + kepAlmanacOmega0.hashCode();
      if (kepAlmanacW != null) __code = 31*__code + kepAlmanacW.hashCode();
      if (kepAlmanacM0 != null) __code = 31*__code + kepAlmanacM0.hashCode();
      if (kepAlmanacAF0 != null) __code = 31*__code + kepAlmanacAF0.hashCode();
      if (kepAlmanacAF1 != null) __code = 31*__code + kepAlmanacAF1.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SvID
    */
   public SV_ID getSvID () {
      return svID;
   }

   public void setSvID (SV_ID value) {
      this.svID = value;
   }

   /**
    * Accessor/mutator methods for KepAlmanacE
    */
   public Asn1Integer getKepAlmanacE () {
      return kepAlmanacE;
   }

   public void setKepAlmanacE (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 2047))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.kepAlmanacE = value;
   }

   public void setKepAlmanacE (long value) 
      throws Asn1Exception
   {
      setKepAlmanacE (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for KepAlmanacDeltaI
    */
   public Asn1Integer getKepAlmanacDeltaI () {
      return kepAlmanacDeltaI;
   }

   public void setKepAlmanacDeltaI (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1024 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.kepAlmanacDeltaI = value;
   }

   public void setKepAlmanacDeltaI (long value) 
      throws Asn1Exception
   {
      setKepAlmanacDeltaI (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for KepAlmanacOmegaDot
    */
   public Asn1Integer getKepAlmanacOmegaDot () {
      return kepAlmanacOmegaDot;
   }

   public void setKepAlmanacOmegaDot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -1024 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.kepAlmanacOmegaDot = value;
   }

   public void setKepAlmanacOmegaDot (long value) 
      throws Asn1Exception
   {
      setKepAlmanacOmegaDot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for KepSV_StatusINAV
    */
   public Asn1BitString getKepSV_StatusINAV () {
      return kepSV_StatusINAV;
   }

   public void setKepSV_StatusINAV (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 4)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.kepSV_StatusINAV = value;
   }

   /**
    * Accessor/mutator methods for KepSV_StatusFNAV
    */
   public Asn1BitString getKepSV_StatusFNAV () {
      return kepSV_StatusFNAV;
   }

   public void setKepSV_StatusFNAV (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 2)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.kepSV_StatusFNAV = value;
   }

   public boolean hasKepSV_StatusFNAV () {
      return (kepSV_StatusFNAV != null);
   }

   /**
    * Accessor/mutator methods for KepAlmanacAPowerHalf
    */
   public Asn1Integer getKepAlmanacAPowerHalf () {
      return kepAlmanacAPowerHalf;
   }

   public void setKepAlmanacAPowerHalf (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -4096 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.kepAlmanacAPowerHalf = value;
   }

   public void setKepAlmanacAPowerHalf (long value) 
      throws Asn1Exception
   {
      setKepAlmanacAPowerHalf (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for KepAlmanacOmega0
    */
   public Asn1Integer getKepAlmanacOmega0 () {
      return kepAlmanacOmega0;
   }

   public void setKepAlmanacOmega0 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.kepAlmanacOmega0 = value;
   }

   public void setKepAlmanacOmega0 (long value) 
      throws Asn1Exception
   {
      setKepAlmanacOmega0 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for KepAlmanacW
    */
   public Asn1Integer getKepAlmanacW () {
      return kepAlmanacW;
   }

   public void setKepAlmanacW (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.kepAlmanacW = value;
   }

   public void setKepAlmanacW (long value) 
      throws Asn1Exception
   {
      setKepAlmanacW (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for KepAlmanacM0
    */
   public Asn1Integer getKepAlmanacM0 () {
      return kepAlmanacM0;
   }

   public void setKepAlmanacM0 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.kepAlmanacM0 = value;
   }

   public void setKepAlmanacM0 (long value) 
      throws Asn1Exception
   {
      setKepAlmanacM0 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for KepAlmanacAF0
    */
   public Asn1Integer getKepAlmanacAF0 () {
      return kepAlmanacAF0;
   }

   public void setKepAlmanacAF0 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.kepAlmanacAF0 = value;
   }

   public void setKepAlmanacAF0 (long value) 
      throws Asn1Exception
   {
      setKepAlmanacAF0 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for KepAlmanacAF1
    */
   public Asn1Integer getKepAlmanacAF1 () {
      return kepAlmanacAF1;
   }

   public void setKepAlmanacAF1 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -4096 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.kepAlmanacAF1 = value;
   }

   public void setKepAlmanacAF1 (long value) 
      throws Asn1Exception
   {
      setKepAlmanacAF1 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 13; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return svID;
         case 1: return kepAlmanacE;
         case 2: return kepAlmanacDeltaI;
         case 3: return kepAlmanacOmegaDot;
         case 4: return kepSV_StatusINAV;
         case 5: return kepSV_StatusFNAV;
         case 6: return kepAlmanacAPowerHalf;
         case 7: return kepAlmanacOmega0;
         case 8: return kepAlmanacW;
         case 9: return kepAlmanacM0;
         case 10: return kepAlmanacAF0;
         case 11: return kepAlmanacAF1;
         case 12: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "svID";
         case 1: return "kepAlmanacE";
         case 2: return "kepAlmanacDeltaI";
         case 3: return "kepAlmanacOmegaDot";
         case 4: return "kepSV-StatusINAV";
         case 5: return "kepSV-StatusFNAV";
         case 6: return "kepAlmanacAPowerHalf";
         case 7: return "kepAlmanacOmega0";
         case 8: return "kepAlmanacW";
         case 9: return "kepAlmanacM0";
         case 10: return "kepAlmanacAF0";
         case 11: return "kepAlmanacAF1";
         case 12: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean kepSV_StatusFNAVPresent = buffer.decodeBit ("kepSV_StatusFNAVPresent");

      // decode svID

      buffer.getContext().eventDispatcher.startElement("svID", -1);

      svID = new SV_ID();
      svID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("svID", -1);

      // decode kepAlmanacE

      buffer.getContext().eventDispatcher.startElement("kepAlmanacE", -1);

      kepAlmanacE = new Asn1Integer();
      kepAlmanacE.decode (buffer, 0, 2047);
      buffer.getContext().eventDispatcher.endElement("kepAlmanacE", -1);

      // decode kepAlmanacDeltaI

      buffer.getContext().eventDispatcher.startElement("kepAlmanacDeltaI", -1);

      kepAlmanacDeltaI = new Asn1Integer();
      kepAlmanacDeltaI.decode (buffer, -1024, 1023);
      buffer.getContext().eventDispatcher.endElement("kepAlmanacDeltaI", -1);

      // decode kepAlmanacOmegaDot

      buffer.getContext().eventDispatcher.startElement("kepAlmanacOmegaDot", -1);

      kepAlmanacOmegaDot = new Asn1Integer();
      kepAlmanacOmegaDot.decode (buffer, -1024, 1023);
      buffer.getContext().eventDispatcher.endElement("kepAlmanacOmegaDot", -1);

      // decode kepSV_StatusINAV

      buffer.getContext().eventDispatcher.startElement("kepSV_StatusINAV", -1);

      kepSV_StatusINAV = new Asn1BitString();
      kepSV_StatusINAV.decode (buffer, 4, 4);
      buffer.getContext().eventDispatcher.endElement("kepSV_StatusINAV", -1);

      // decode kepSV_StatusFNAV

      if (kepSV_StatusFNAVPresent) {
         buffer.getContext().eventDispatcher.startElement("kepSV_StatusFNAV", -1);

         kepSV_StatusFNAV = new Asn1BitString();
         kepSV_StatusFNAV.decode (buffer, 2, 2);
         buffer.getContext().eventDispatcher.endElement("kepSV_StatusFNAV", -1);
      }
      else {
         kepSV_StatusFNAV = null;
      }

      // decode kepAlmanacAPowerHalf

      buffer.getContext().eventDispatcher.startElement("kepAlmanacAPowerHalf", -1);

      kepAlmanacAPowerHalf = new Asn1Integer();
      kepAlmanacAPowerHalf.decode (buffer, -4096, 4095);
      buffer.getContext().eventDispatcher.endElement("kepAlmanacAPowerHalf", -1);

      // decode kepAlmanacOmega0

      buffer.getContext().eventDispatcher.startElement("kepAlmanacOmega0", -1);

      kepAlmanacOmega0 = new Asn1Integer();
      kepAlmanacOmega0.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("kepAlmanacOmega0", -1);

      // decode kepAlmanacW

      buffer.getContext().eventDispatcher.startElement("kepAlmanacW", -1);

      kepAlmanacW = new Asn1Integer();
      kepAlmanacW.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("kepAlmanacW", -1);

      // decode kepAlmanacM0

      buffer.getContext().eventDispatcher.startElement("kepAlmanacM0", -1);

      kepAlmanacM0 = new Asn1Integer();
      kepAlmanacM0.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("kepAlmanacM0", -1);

      // decode kepAlmanacAF0

      buffer.getContext().eventDispatcher.startElement("kepAlmanacAF0", -1);

      kepAlmanacAF0 = new Asn1Integer();
      kepAlmanacAF0.decode (buffer, -32768, 32767);
      buffer.getContext().eventDispatcher.endElement("kepAlmanacAF0", -1);

      // decode kepAlmanacAF1

      buffer.getContext().eventDispatcher.startElement("kepAlmanacAF1", -1);

      kepAlmanacAF1 = new Asn1Integer();
      kepAlmanacAF1.decode (buffer, -4096, 4095);
      buffer.getContext().eventDispatcher.endElement("kepAlmanacAF1", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((kepSV_StatusFNAV != null), null);

      // encode svID

      if (svID != null) {
         buffer.getContext().eventDispatcher.startElement("svID", -1);

         svID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("svID", -1);
      }
      else throw new Asn1MissingRequiredException ("svID");

      // encode kepAlmanacE

      if (kepAlmanacE != null) {
         buffer.getContext().eventDispatcher.startElement("kepAlmanacE", -1);

         kepAlmanacE.encode (buffer, 0, 2047);

         buffer.getContext().eventDispatcher.endElement("kepAlmanacE", -1);
      }
      else throw new Asn1MissingRequiredException ("kepAlmanacE");

      // encode kepAlmanacDeltaI

      if (kepAlmanacDeltaI != null) {
         buffer.getContext().eventDispatcher.startElement("kepAlmanacDeltaI", -1);

         kepAlmanacDeltaI.encode (buffer, -1024, 1023);

         buffer.getContext().eventDispatcher.endElement("kepAlmanacDeltaI", -1);
      }
      else throw new Asn1MissingRequiredException ("kepAlmanacDeltaI");

      // encode kepAlmanacOmegaDot

      if (kepAlmanacOmegaDot != null) {
         buffer.getContext().eventDispatcher.startElement("kepAlmanacOmegaDot", -1);

         kepAlmanacOmegaDot.encode (buffer, -1024, 1023);

         buffer.getContext().eventDispatcher.endElement("kepAlmanacOmegaDot", -1);
      }
      else throw new Asn1MissingRequiredException ("kepAlmanacOmegaDot");

      // encode kepSV_StatusINAV

      if (kepSV_StatusINAV != null) {
         buffer.getContext().eventDispatcher.startElement("kepSV_StatusINAV", -1);

         kepSV_StatusINAV.encode (buffer, 4, 4);

         buffer.getContext().eventDispatcher.endElement("kepSV_StatusINAV", -1);
      }
      else throw new Asn1MissingRequiredException ("kepSV_StatusINAV");

      // encode kepSV_StatusFNAV

      if (kepSV_StatusFNAV != null) {
         buffer.getContext().eventDispatcher.startElement("kepSV_StatusFNAV", -1);

         kepSV_StatusFNAV.encode (buffer, 2, 2);

         buffer.getContext().eventDispatcher.endElement("kepSV_StatusFNAV", -1);
      }

      // encode kepAlmanacAPowerHalf

      if (kepAlmanacAPowerHalf != null) {
         buffer.getContext().eventDispatcher.startElement("kepAlmanacAPowerHalf", -1);

         kepAlmanacAPowerHalf.encode (buffer, -4096, 4095);

         buffer.getContext().eventDispatcher.endElement("kepAlmanacAPowerHalf", -1);
      }
      else throw new Asn1MissingRequiredException ("kepAlmanacAPowerHalf");

      // encode kepAlmanacOmega0

      if (kepAlmanacOmega0 != null) {
         buffer.getContext().eventDispatcher.startElement("kepAlmanacOmega0", -1);

         kepAlmanacOmega0.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("kepAlmanacOmega0", -1);
      }
      else throw new Asn1MissingRequiredException ("kepAlmanacOmega0");

      // encode kepAlmanacW

      if (kepAlmanacW != null) {
         buffer.getContext().eventDispatcher.startElement("kepAlmanacW", -1);

         kepAlmanacW.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("kepAlmanacW", -1);
      }
      else throw new Asn1MissingRequiredException ("kepAlmanacW");

      // encode kepAlmanacM0

      if (kepAlmanacM0 != null) {
         buffer.getContext().eventDispatcher.startElement("kepAlmanacM0", -1);

         kepAlmanacM0.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("kepAlmanacM0", -1);
      }
      else throw new Asn1MissingRequiredException ("kepAlmanacM0");

      // encode kepAlmanacAF0

      if (kepAlmanacAF0 != null) {
         buffer.getContext().eventDispatcher.startElement("kepAlmanacAF0", -1);

         kepAlmanacAF0.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("kepAlmanacAF0", -1);
      }
      else throw new Asn1MissingRequiredException ("kepAlmanacAF0");

      // encode kepAlmanacAF1

      if (kepAlmanacAF1 != null) {
         buffer.getContext().eventDispatcher.startElement("kepAlmanacAF1", -1);

         kepAlmanacAF1.encode (buffer, -4096, 4095);

         buffer.getContext().eventDispatcher.endElement("kepAlmanacAF1", -1);
      }
      else throw new Asn1MissingRequiredException ("kepAlmanacAF1");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
