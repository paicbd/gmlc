/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class Error extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Error";
   }

   // Choice element identifier constants
   public final static byte _ERROR_R9 = 1;
   public final static byte _CRITICALEXTENSIONSFUTURE = 2;

   public Error () {
      super();
   }

   public Error (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _ERROR_R9: return "error_r9";
      case _CRITICALEXTENSIONSFUTURE: return "criticalExtensionsFuture";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for error_r9
    */
   public Error_r9_IEs getError_r9 () {
      return (choiceID == _ERROR_R9) ? (Error_r9_IEs)element : null;
   }
   public void setError_r9 (Error_r9_IEs value) {
      setElement (_ERROR_R9, value);
   }
   public boolean isError_r9 () {
      return (choiceID == _ERROR_R9);
   }

   /**
    * Accessor/mutator methods for criticalExtensionsFuture
    */
   public Error_criticalExtensionsFuture getCriticalExtensionsFuture () {
      return (choiceID == _CRITICALEXTENSIONSFUTURE) ? (Error_criticalExtensionsFuture)element : null;
   }
   public void setCriticalExtensionsFuture (Error_criticalExtensionsFuture value) {
      setElement (_CRITICALEXTENSIONSFUTURE, value);
   }
   public boolean isCriticalExtensionsFuture () {
      return (choiceID == _CRITICALEXTENSIONSFUTURE);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (2, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // error_r9
         case 0: { 
            Error_r9_IEs error_r9;
            element = error_r9 = new Error_r9_IEs();
            error_r9.decode (buffer);
            break;
         }

         // criticalExtensionsFuture
         case 1: { 
            Error_criticalExtensionsFuture criticalExtensionsFuture;
            element = criticalExtensionsFuture = new Error_criticalExtensionsFuture();
            criticalExtensionsFuture.decode (buffer);
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // Encode choice index value

      buffer.encodeConsWholeNumber (choiceID - 1, 2, "index");

      buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

      switch (choiceID) {
         // error_r9
         case _ERROR_R9:
            Error_r9_IEs error_r9 = (Error_r9_IEs) element;
            error_r9.encode (buffer);
            break;

         // criticalExtensionsFuture
         case _CRITICALEXTENSIONSFUTURE:
            Error_criticalExtensionsFuture criticalExtensionsFuture = (Error_criticalExtensionsFuture) element;
            criticalExtensionsFuture.encode (buffer);
            break;

         default:
         throw new Asn1InvalidChoiceOptionException();
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
