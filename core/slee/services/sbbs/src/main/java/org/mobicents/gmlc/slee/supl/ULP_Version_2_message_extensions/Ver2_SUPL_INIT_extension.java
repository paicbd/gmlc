/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Version_2_message_extensions;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.SupportedNetworkInformation;
import org.mobicents.gmlc.slee.supl.SUPL_TRIGGERED_START.TriggerType;
import org.mobicents.gmlc.slee.supl.ULP_Components.SLPAddress;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.GNSSPosTechnology;

public class Ver2_SUPL_INIT_extension extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_Version_2_message_extensionsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_Version_2_message_extensionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Ver2-SUPL-INIT-extension";
   }

   protected NotificationMode notificationMode = null;  // optional
   protected SupportedNetworkInformation supportedNetworkInformation;  // optional
   protected TriggerType triggerType = null;  // optional
   protected SLPAddress e_SLPAddress;  // optional
   protected HistoricReporting historicReporting;  // optional
   protected ProtectionLevel protectionLevel;  // optional
   protected GNSSPosTechnology gnssPosTechnology;  // optional
   protected Asn1Integer minimumMajorVersion;  // optional
   protected Asn1OpenExt extElem1;

   public Ver2_SUPL_INIT_extension () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Ver2_SUPL_INIT_extension (
      NotificationMode notificationMode_,
      SupportedNetworkInformation supportedNetworkInformation_,
      TriggerType triggerType_,
      SLPAddress e_SLPAddress_,
      HistoricReporting historicReporting_,
      ProtectionLevel protectionLevel_,
      GNSSPosTechnology gnssPosTechnology_,
      Asn1Integer minimumMajorVersion_
   ) throws Asn1Exception {
      super();
      setNotificationMode (notificationMode_);
      setSupportedNetworkInformation (supportedNetworkInformation_);
      setTriggerType (triggerType_);
      setE_SLPAddress (e_SLPAddress_);
      setHistoricReporting (historicReporting_);
      setProtectionLevel (protectionLevel_);
      setGnssPosTechnology (gnssPosTechnology_);
      setMinimumMajorVersion (minimumMajorVersion_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Ver2_SUPL_INIT_extension (NotificationMode notificationMode_,
      SupportedNetworkInformation supportedNetworkInformation_,
      TriggerType triggerType_,
      SLPAddress e_SLPAddress_,
      HistoricReporting historicReporting_,
      ProtectionLevel protectionLevel_,
      GNSSPosTechnology gnssPosTechnology_,
      long minimumMajorVersion_
   ) throws Asn1Exception {
      super();
      setNotificationMode (notificationMode_);
      setSupportedNetworkInformation (supportedNetworkInformation_);
      setTriggerType (triggerType_);
      setE_SLPAddress (e_SLPAddress_);
      setHistoricReporting (historicReporting_);
      setProtectionLevel (protectionLevel_);
      setGnssPosTechnology (gnssPosTechnology_);
      setMinimumMajorVersion (minimumMajorVersion_);
   }

   public void init () {
      notificationMode = null;
      supportedNetworkInformation = null;
      triggerType = null;
      e_SLPAddress = null;
      historicReporting = null;
      protectionLevel = null;
      gnssPosTechnology = null;
      minimumMajorVersion = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Ver2_SUPL_INIT_extension) ) return false;

      Ver2_SUPL_INIT_extension rhs = (Ver2_SUPL_INIT_extension) obj;

      if (notificationMode == null) {
         if (rhs.notificationMode != null) return false;
      }
      else {
         if (!notificationMode.equals(rhs.notificationMode)) {
            return false;
         }
      }

      if (supportedNetworkInformation == null) {
         if (rhs.supportedNetworkInformation != null) return false;
      }
      else {
         if (!supportedNetworkInformation.equals(rhs.supportedNetworkInformation)) {
            return false;
         }
      }

      if (triggerType == null) {
         if (rhs.triggerType != null) return false;
      }
      else {
         if (!triggerType.equals(rhs.triggerType)) {
            return false;
         }
      }

      if (e_SLPAddress == null) {
         if (rhs.e_SLPAddress != null) return false;
      }
      else {
         if (!e_SLPAddress.equals(rhs.e_SLPAddress)) {
            return false;
         }
      }

      if (historicReporting == null) {
         if (rhs.historicReporting != null) return false;
      }
      else {
         if (!historicReporting.equals(rhs.historicReporting)) {
            return false;
         }
      }

      if (protectionLevel == null) {
         if (rhs.protectionLevel != null) return false;
      }
      else {
         if (!protectionLevel.equals(rhs.protectionLevel)) {
            return false;
         }
      }

      if (gnssPosTechnology == null) {
         if (rhs.gnssPosTechnology != null) return false;
      }
      else {
         if (!gnssPosTechnology.equals(rhs.gnssPosTechnology)) {
            return false;
         }
      }

      if (minimumMajorVersion == null) {
         if (rhs.minimumMajorVersion != null) return false;
      }
      else {
         if (!minimumMajorVersion.equals(rhs.minimumMajorVersion)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (notificationMode != null) __code = 31*__code + notificationMode.hashCode();
      if (supportedNetworkInformation != null) __code = 31*__code + supportedNetworkInformation.hashCode();
      if (triggerType != null) __code = 31*__code + triggerType.hashCode();
      if (e_SLPAddress != null) __code = 31*__code + e_SLPAddress.hashCode();
      if (historicReporting != null) __code = 31*__code + historicReporting.hashCode();
      if (protectionLevel != null) __code = 31*__code + protectionLevel.hashCode();
      if (gnssPosTechnology != null) __code = 31*__code + gnssPosTechnology.hashCode();
      if (minimumMajorVersion != null) __code = 31*__code + minimumMajorVersion.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for NotificationMode
    */
   public NotificationMode getNotificationMode () {
      return notificationMode;
   }

   public void setNotificationMode (NotificationMode value) {
      this.notificationMode = value;
   }

   public boolean hasNotificationMode () {
      return (notificationMode != null);
   }

   /**
    * Accessor/mutator methods for SupportedNetworkInformation
    */
   public SupportedNetworkInformation getSupportedNetworkInformation () {
      return supportedNetworkInformation;
   }

   public void setSupportedNetworkInformation (SupportedNetworkInformation value) {
      this.supportedNetworkInformation = value;
   }

   public boolean hasSupportedNetworkInformation () {
      return (supportedNetworkInformation != null);
   }

   /**
    * Accessor/mutator methods for TriggerType
    */
   public TriggerType getTriggerType () {
      return triggerType;
   }

   public void setTriggerType (TriggerType value) {
      this.triggerType = value;
   }

   public boolean hasTriggerType () {
      return (triggerType != null);
   }

   /**
    * Accessor/mutator methods for E_SLPAddress
    */
   public SLPAddress getE_SLPAddress () {
      return e_SLPAddress;
   }

   public void setE_SLPAddress (SLPAddress value) {
      this.e_SLPAddress = value;
   }

   public boolean hasE_SLPAddress () {
      return (e_SLPAddress != null);
   }

   /**
    * Accessor/mutator methods for HistoricReporting
    */
   public HistoricReporting getHistoricReporting () {
      return historicReporting;
   }

   public void setHistoricReporting (HistoricReporting value) {
      this.historicReporting = value;
   }

   public boolean hasHistoricReporting () {
      return (historicReporting != null);
   }

   /**
    * Accessor/mutator methods for ProtectionLevel
    */
   public ProtectionLevel getProtectionLevel () {
      return protectionLevel;
   }

   public void setProtectionLevel (ProtectionLevel value) {
      this.protectionLevel = value;
   }

   public boolean hasProtectionLevel () {
      return (protectionLevel != null);
   }

   /**
    * Accessor/mutator methods for GnssPosTechnology
    */
   public GNSSPosTechnology getGnssPosTechnology () {
      return gnssPosTechnology;
   }

   public void setGnssPosTechnology (GNSSPosTechnology value) {
      this.gnssPosTechnology = value;
   }

   public boolean hasGnssPosTechnology () {
      return (gnssPosTechnology != null);
   }

   /**
    * Accessor/mutator methods for MinimumMajorVersion
    */
   public Asn1Integer getMinimumMajorVersion () {
      return minimumMajorVersion;
   }

   public void setMinimumMajorVersion (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.minimumMajorVersion = value;
   }

   public void setMinimumMajorVersion (long value) 
      throws Asn1Exception
   {
      setMinimumMajorVersion (new Asn1Integer(value));
   }
   public boolean hasMinimumMajorVersion () {
      return (minimumMajorVersion != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return notificationMode;
         case 1: return supportedNetworkInformation;
         case 2: return triggerType;
         case 3: return e_SLPAddress;
         case 4: return historicReporting;
         case 5: return protectionLevel;
         case 6: return gnssPosTechnology;
         case 7: return minimumMajorVersion;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "notificationMode";
         case 1: return "supportedNetworkInformation";
         case 2: return "triggerType";
         case 3: return "e-SLPAddress";
         case 4: return "historicReporting";
         case 5: return "protectionLevel";
         case 6: return "gnssPosTechnology";
         case 7: return "minimumMajorVersion";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean notificationModePresent = buffer.decodeBit ("notificationModePresent");
      boolean supportedNetworkInformationPresent = buffer.decodeBit ("supportedNetworkInformationPresent");
      boolean triggerTypePresent = buffer.decodeBit ("triggerTypePresent");
      boolean e_SLPAddressPresent = buffer.decodeBit ("e_SLPAddressPresent");
      boolean historicReportingPresent = buffer.decodeBit ("historicReportingPresent");
      boolean protectionLevelPresent = buffer.decodeBit ("protectionLevelPresent");
      boolean gnssPosTechnologyPresent = buffer.decodeBit ("gnssPosTechnologyPresent");
      boolean minimumMajorVersionPresent = buffer.decodeBit ("minimumMajorVersionPresent");

      // decode notificationMode

      if (notificationModePresent) {
         buffer.getContext().eventDispatcher.startElement("notificationMode", -1);

         int tval = NotificationMode.decodeEnumValue (buffer);
         notificationMode = NotificationMode.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("notificationMode", -1);
      }
      else {
         notificationMode = null;
      }

      // decode supportedNetworkInformation

      if (supportedNetworkInformationPresent) {
         buffer.getContext().eventDispatcher.startElement("supportedNetworkInformation", -1);

         supportedNetworkInformation = new SupportedNetworkInformation();
         supportedNetworkInformation.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("supportedNetworkInformation", -1);
      }
      else {
         supportedNetworkInformation = null;
      }

      // decode triggerType

      if (triggerTypePresent) {
         buffer.getContext().eventDispatcher.startElement("triggerType", -1);

         int tval = TriggerType.decodeEnumValue (buffer);
         triggerType = TriggerType.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("triggerType", -1);
      }
      else {
         triggerType = null;
      }

      // decode e_SLPAddress

      if (e_SLPAddressPresent) {
         buffer.getContext().eventDispatcher.startElement("e_SLPAddress", -1);

         e_SLPAddress = new SLPAddress();
         e_SLPAddress.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("e_SLPAddress", -1);
      }
      else {
         e_SLPAddress = null;
      }

      // decode historicReporting

      if (historicReportingPresent) {
         buffer.getContext().eventDispatcher.startElement("historicReporting", -1);

         historicReporting = new HistoricReporting();
         historicReporting.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("historicReporting", -1);
      }
      else {
         historicReporting = null;
      }

      // decode protectionLevel

      if (protectionLevelPresent) {
         buffer.getContext().eventDispatcher.startElement("protectionLevel", -1);

         protectionLevel = new ProtectionLevel();
         protectionLevel.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("protectionLevel", -1);
      }
      else {
         protectionLevel = null;
      }

      // decode gnssPosTechnology

      if (gnssPosTechnologyPresent) {
         buffer.getContext().eventDispatcher.startElement("gnssPosTechnology", -1);

         gnssPosTechnology = new GNSSPosTechnology();
         gnssPosTechnology.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnssPosTechnology", -1);
      }
      else {
         gnssPosTechnology = null;
      }

      // decode minimumMajorVersion

      if (minimumMajorVersionPresent) {
         buffer.getContext().eventDispatcher.startElement("minimumMajorVersion", -1);

         minimumMajorVersion = new Asn1Integer();
         minimumMajorVersion.decode (buffer, 0, 255);
         buffer.getContext().eventDispatcher.endElement("minimumMajorVersion", -1);
      }
      else {
         minimumMajorVersion = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((notificationMode != null), null);
      buffer.encodeBit ((supportedNetworkInformation != null), null);
      buffer.encodeBit ((triggerType != null), null);
      buffer.encodeBit ((e_SLPAddress != null), null);
      buffer.encodeBit ((historicReporting != null), null);
      buffer.encodeBit ((protectionLevel != null), null);
      buffer.encodeBit ((gnssPosTechnology != null), null);
      buffer.encodeBit ((minimumMajorVersion != null), null);

      // encode notificationMode

      if (notificationMode != null) {
         buffer.getContext().eventDispatcher.startElement("notificationMode", -1);

         notificationMode.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("notificationMode", -1);
      }

      // encode supportedNetworkInformation

      if (supportedNetworkInformation != null) {
         buffer.getContext().eventDispatcher.startElement("supportedNetworkInformation", -1);

         supportedNetworkInformation.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("supportedNetworkInformation", -1);
      }

      // encode triggerType

      if (triggerType != null) {
         buffer.getContext().eventDispatcher.startElement("triggerType", -1);

         triggerType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("triggerType", -1);
      }

      // encode e_SLPAddress

      if (e_SLPAddress != null) {
         buffer.getContext().eventDispatcher.startElement("e_SLPAddress", -1);

         e_SLPAddress.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("e_SLPAddress", -1);
      }

      // encode historicReporting

      if (historicReporting != null) {
         buffer.getContext().eventDispatcher.startElement("historicReporting", -1);

         historicReporting.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("historicReporting", -1);
      }

      // encode protectionLevel

      if (protectionLevel != null) {
         buffer.getContext().eventDispatcher.startElement("protectionLevel", -1);

         protectionLevel.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("protectionLevel", -1);
      }

      // encode gnssPosTechnology

      if (gnssPosTechnology != null) {
         buffer.getContext().eventDispatcher.startElement("gnssPosTechnology", -1);

         gnssPosTechnology.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnssPosTechnology", -1);
      }

      // encode minimumMajorVersion

      if (minimumMajorVersion != null) {
         buffer.getContext().eventDispatcher.startElement("minimumMajorVersion", -1);

         minimumMajorVersion.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("minimumMajorVersion", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
