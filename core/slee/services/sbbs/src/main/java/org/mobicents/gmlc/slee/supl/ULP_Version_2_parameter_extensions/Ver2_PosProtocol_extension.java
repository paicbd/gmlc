/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Version_2_parameter_extensions;

import com.objsys.asn1j.runtime.*;

public class Ver2_PosProtocol_extension extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_Version_2_parameter_extensionsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_Version_2_parameter_extensionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Ver2-PosProtocol-extension";
   }

   protected Asn1Boolean lpp;
   protected PosProtocolVersion3GPP posProtocolVersionRRLP;  // optional
   protected PosProtocolVersion3GPP posProtocolVersionRRC;  // optional
   protected PosProtocolVersion3GPP2 posProtocolVersionTIA801;  // optional
   protected PosProtocolVersion3GPP posProtocolVersionLPP;  // optional
   protected Asn1Boolean lppe;  // optional
   protected PosProtocolVersionOMA posProtocolVersionLPPe;  // optional
   protected Asn1OpenExt extElem1;

   public Ver2_PosProtocol_extension () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Ver2_PosProtocol_extension (
      Asn1Boolean lpp_,
      PosProtocolVersion3GPP posProtocolVersionRRLP_,
      PosProtocolVersion3GPP posProtocolVersionRRC_,
      PosProtocolVersion3GPP2 posProtocolVersionTIA801_,
      PosProtocolVersion3GPP posProtocolVersionLPP_,
      Asn1Boolean lppe_,
      PosProtocolVersionOMA posProtocolVersionLPPe_
   ) throws Asn1Exception {
      super();
      setLpp (lpp_);
      setPosProtocolVersionRRLP (posProtocolVersionRRLP_);
      setPosProtocolVersionRRC (posProtocolVersionRRC_);
      setPosProtocolVersionTIA801 (posProtocolVersionTIA801_);
      setPosProtocolVersionLPP (posProtocolVersionLPP_);
      setLppe (lppe_);
      setPosProtocolVersionLPPe (posProtocolVersionLPPe_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public Ver2_PosProtocol_extension (
      Asn1Boolean lpp_
   ) throws Asn1Exception {
      super();
      setLpp (lpp_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Ver2_PosProtocol_extension (boolean lpp_,
      PosProtocolVersion3GPP posProtocolVersionRRLP_,
      PosProtocolVersion3GPP posProtocolVersionRRC_,
      PosProtocolVersion3GPP2 posProtocolVersionTIA801_,
      PosProtocolVersion3GPP posProtocolVersionLPP_,
      boolean lppe_,
      PosProtocolVersionOMA posProtocolVersionLPPe_
   ) throws Asn1Exception {
      super();
      setLpp (lpp_);
      setPosProtocolVersionRRLP (posProtocolVersionRRLP_);
      setPosProtocolVersionRRC (posProtocolVersionRRC_);
      setPosProtocolVersionTIA801 (posProtocolVersionTIA801_);
      setPosProtocolVersionLPP (posProtocolVersionLPP_);
      setLppe (lppe_);
      setPosProtocolVersionLPPe (posProtocolVersionLPPe_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public Ver2_PosProtocol_extension (
      boolean lpp_
   ) throws Asn1Exception {
      super();
      setLpp (lpp_);
   }

   public void init () {
      lpp = null;
      posProtocolVersionRRLP = null;
      posProtocolVersionRRC = null;
      posProtocolVersionTIA801 = null;
      posProtocolVersionLPP = null;
      lppe = null;
      posProtocolVersionLPPe = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Ver2_PosProtocol_extension) ) return false;

      Ver2_PosProtocol_extension rhs = (Ver2_PosProtocol_extension) obj;

      if (lpp == null) {
         if (rhs.lpp != null) return false;
      }
      else {
         if (!lpp.equals(rhs.lpp)) {
            return false;
         }
      }

      if (posProtocolVersionRRLP == null) {
         if (rhs.posProtocolVersionRRLP != null) return false;
      }
      else {
         if (!posProtocolVersionRRLP.equals(rhs.posProtocolVersionRRLP)) {
            return false;
         }
      }

      if (posProtocolVersionRRC == null) {
         if (rhs.posProtocolVersionRRC != null) return false;
      }
      else {
         if (!posProtocolVersionRRC.equals(rhs.posProtocolVersionRRC)) {
            return false;
         }
      }

      if (posProtocolVersionTIA801 == null) {
         if (rhs.posProtocolVersionTIA801 != null) return false;
      }
      else {
         if (!posProtocolVersionTIA801.equals(rhs.posProtocolVersionTIA801)) {
            return false;
         }
      }

      if (posProtocolVersionLPP == null) {
         if (rhs.posProtocolVersionLPP != null) return false;
      }
      else {
         if (!posProtocolVersionLPP.equals(rhs.posProtocolVersionLPP)) {
            return false;
         }
      }

      if (lppe == null) {
         if (rhs.lppe != null) return false;
      }
      else {
         if (!lppe.equals(rhs.lppe)) {
            return false;
         }
      }

      if (posProtocolVersionLPPe == null) {
         if (rhs.posProtocolVersionLPPe != null) return false;
      }
      else {
         if (!posProtocolVersionLPPe.equals(rhs.posProtocolVersionLPPe)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (lpp != null) __code = 31*__code + lpp.hashCode();
      if (posProtocolVersionRRLP != null) __code = 31*__code + posProtocolVersionRRLP.hashCode();
      if (posProtocolVersionRRC != null) __code = 31*__code + posProtocolVersionRRC.hashCode();
      if (posProtocolVersionTIA801 != null) __code = 31*__code + posProtocolVersionTIA801.hashCode();
      if (posProtocolVersionLPP != null) __code = 31*__code + posProtocolVersionLPP.hashCode();
      if (lppe != null) __code = 31*__code + lppe.hashCode();
      if (posProtocolVersionLPPe != null) __code = 31*__code + posProtocolVersionLPPe.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Lpp
    */
   public Asn1Boolean getLpp () {
      return lpp;
   }

   public void setLpp (Asn1Boolean value) {
      this.lpp = value;
   }

   public void setLpp (boolean value) {
      setLpp (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for PosProtocolVersionRRLP
    */
   public PosProtocolVersion3GPP getPosProtocolVersionRRLP () {
      return posProtocolVersionRRLP;
   }

   public void setPosProtocolVersionRRLP (PosProtocolVersion3GPP value) {
      this.posProtocolVersionRRLP = value;
   }

   public boolean hasPosProtocolVersionRRLP () {
      return (posProtocolVersionRRLP != null);
   }

   /**
    * Accessor/mutator methods for PosProtocolVersionRRC
    */
   public PosProtocolVersion3GPP getPosProtocolVersionRRC () {
      return posProtocolVersionRRC;
   }

   public void setPosProtocolVersionRRC (PosProtocolVersion3GPP value) {
      this.posProtocolVersionRRC = value;
   }

   public boolean hasPosProtocolVersionRRC () {
      return (posProtocolVersionRRC != null);
   }

   /**
    * Accessor/mutator methods for PosProtocolVersionTIA801
    */
   public PosProtocolVersion3GPP2 getPosProtocolVersionTIA801 () {
      return posProtocolVersionTIA801;
   }

   public void setPosProtocolVersionTIA801 (PosProtocolVersion3GPP2 value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 8))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.posProtocolVersionTIA801 = value;
   }

   public boolean hasPosProtocolVersionTIA801 () {
      return (posProtocolVersionTIA801 != null);
   }

   /**
    * Accessor/mutator methods for PosProtocolVersionLPP
    */
   public PosProtocolVersion3GPP getPosProtocolVersionLPP () {
      return posProtocolVersionLPP;
   }

   public void setPosProtocolVersionLPP (PosProtocolVersion3GPP value) {
      this.posProtocolVersionLPP = value;
   }

   public boolean hasPosProtocolVersionLPP () {
      return (posProtocolVersionLPP != null);
   }

   /**
    * Accessor/mutator methods for Lppe
    */
   public Asn1Boolean getLppe () {
      return lppe;
   }

   public void setLppe (Asn1Boolean value) {
      this.lppe = value;
   }

   public void setLppe (boolean value) {
      setLppe (new Asn1Boolean(value));
   }
   public boolean hasLppe () {
      return (lppe != null);
   }

   /**
    * Accessor/mutator methods for PosProtocolVersionLPPe
    */
   public PosProtocolVersionOMA getPosProtocolVersionLPPe () {
      return posProtocolVersionLPPe;
   }

   public void setPosProtocolVersionLPPe (PosProtocolVersionOMA value) {
      this.posProtocolVersionLPPe = value;
   }

   public boolean hasPosProtocolVersionLPPe () {
      return (posProtocolVersionLPPe != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return lpp;
         case 1: return posProtocolVersionRRLP;
         case 2: return posProtocolVersionRRC;
         case 3: return posProtocolVersionTIA801;
         case 4: return posProtocolVersionLPP;
         case 5: return lppe;
         case 6: return posProtocolVersionLPPe;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "lpp";
         case 1: return "posProtocolVersionRRLP";
         case 2: return "posProtocolVersionRRC";
         case 3: return "posProtocolVersionTIA801";
         case 4: return "posProtocolVersionLPP";
         case 5: return "lppe";
         case 6: return "posProtocolVersionLPPe";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean posProtocolVersionRRLPPresent = buffer.decodeBit ("posProtocolVersionRRLPPresent");
      boolean posProtocolVersionRRCPresent = buffer.decodeBit ("posProtocolVersionRRCPresent");
      boolean posProtocolVersionTIA801Present = buffer.decodeBit ("posProtocolVersionTIA801Present");
      boolean posProtocolVersionLPPPresent = buffer.decodeBit ("posProtocolVersionLPPPresent");

      // decode lpp

      buffer.getContext().eventDispatcher.startElement("lpp", -1);

      lpp = new Asn1Boolean();
      lpp.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("lpp", -1);

      // decode posProtocolVersionRRLP

      if (posProtocolVersionRRLPPresent) {
         buffer.getContext().eventDispatcher.startElement("posProtocolVersionRRLP", -1);

         posProtocolVersionRRLP = new PosProtocolVersion3GPP();
         posProtocolVersionRRLP.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("posProtocolVersionRRLP", -1);
      }
      else {
         posProtocolVersionRRLP = null;
      }

      // decode posProtocolVersionRRC

      if (posProtocolVersionRRCPresent) {
         buffer.getContext().eventDispatcher.startElement("posProtocolVersionRRC", -1);

         posProtocolVersionRRC = new PosProtocolVersion3GPP();
         posProtocolVersionRRC.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("posProtocolVersionRRC", -1);
      }
      else {
         posProtocolVersionRRC = null;
      }

      // decode posProtocolVersionTIA801

      if (posProtocolVersionTIA801Present) {
         buffer.getContext().eventDispatcher.startElement("posProtocolVersionTIA801", -1);

         posProtocolVersionTIA801 = new PosProtocolVersion3GPP2();
         posProtocolVersionTIA801.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("posProtocolVersionTIA801", -1);
      }
      else {
         posProtocolVersionTIA801 = null;
      }

      // decode posProtocolVersionLPP

      if (posProtocolVersionLPPPresent) {
         buffer.getContext().eventDispatcher.startElement("posProtocolVersionLPP", -1);

         posProtocolVersionLPP = new PosProtocolVersion3GPP();
         posProtocolVersionLPP.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("posProtocolVersionLPP", -1);
      }
      else {
         posProtocolVersionLPP = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("lppePresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("posProtocolVersionLPPePresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode lppe

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("lppe", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            lppe = new Asn1Boolean();
            lppe.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("lppe", -1);

         }
         else {
            lppe = null;
         }

         // decode posProtocolVersionLPPe

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("posProtocolVersionLPPe", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            posProtocolVersionLPPe = new PosProtocolVersionOMA();
            posProtocolVersionLPPe.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("posProtocolVersionLPPe", -1);

         }
         else {
            posProtocolVersionLPPe = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((lppe != null) ||
      (posProtocolVersionLPPe != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((posProtocolVersionRRLP != null), null);
      buffer.encodeBit ((posProtocolVersionRRC != null), null);
      buffer.encodeBit ((posProtocolVersionTIA801 != null), null);
      buffer.encodeBit ((posProtocolVersionLPP != null), null);

      // encode lpp

      if (lpp != null) {
         buffer.getContext().eventDispatcher.startElement("lpp", -1);

         lpp.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("lpp", -1);
      }
      else throw new Asn1MissingRequiredException ("lpp");

      // encode posProtocolVersionRRLP

      if (posProtocolVersionRRLP != null) {
         buffer.getContext().eventDispatcher.startElement("posProtocolVersionRRLP", -1);

         posProtocolVersionRRLP.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("posProtocolVersionRRLP", -1);
      }

      // encode posProtocolVersionRRC

      if (posProtocolVersionRRC != null) {
         buffer.getContext().eventDispatcher.startElement("posProtocolVersionRRC", -1);

         posProtocolVersionRRC.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("posProtocolVersionRRC", -1);
      }

      // encode posProtocolVersionTIA801

      if (posProtocolVersionTIA801 != null) {
         buffer.getContext().eventDispatcher.startElement("posProtocolVersionTIA801", -1);

         posProtocolVersionTIA801.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("posProtocolVersionTIA801", -1);
      }

      // encode posProtocolVersionLPP

      if (posProtocolVersionLPP != null) {
         buffer.getContext().eventDispatcher.startElement("posProtocolVersionLPP", -1);

         posProtocolVersionLPP.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("posProtocolVersionLPP", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 2;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((lppe != null), null);
         buffer.encodeBit ((posProtocolVersionLPPe != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // lppe

         if (lppe != null) {
            buffer.reset();
            lppe.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("lppe", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("lppe", -1);
         }

         // posProtocolVersionLPPe

         if (posProtocolVersionLPPe != null) {
            buffer.reset();
            posProtocolVersionLPPe.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("posProtocolVersionLPPe", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("posProtocolVersionLPPe", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
