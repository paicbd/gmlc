/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_TRIGGERED_START;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.SUPL_START.SETCapabilities;
import org.mobicents.gmlc.slee.supl.ULP_Components.LocationId;
import org.mobicents.gmlc.slee.supl.ULP_Components.Ver;
import org.mobicents.gmlc.slee.supl.ULP_Components.QoP;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.MultipleLocationIds;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.ThirdParty;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.ApplicationID;
import org.mobicents.gmlc.slee.supl.ULP_Components.Position;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.ReportingCap;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.CauseCode;

public class Ver2_SUPLTRIGGEREDSTART extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_TRIGGERED_STARTRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_TRIGGERED_STARTRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Ver2-SUPLTRIGGEREDSTART";
   }

   protected SETCapabilities sETCapabilities;
   protected LocationId locationId;
   protected Ver ver;  // optional
   protected QoP qoP;  // optional
   protected MultipleLocationIds multipleLocationIds;  // optional
   protected ThirdParty thirdParty;  // optional
   protected ApplicationID applicationID;  // optional
   protected TriggerType triggerType = null;  // optional
   protected TriggerParams triggerParams;  // optional
   protected Position position;  // optional
   protected ReportingCap reportingCap;  // optional
   protected CauseCode causeCode = null;  // optional
   protected Asn1OpenExt extElem1;

   public Ver2_SUPLTRIGGEREDSTART () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Ver2_SUPLTRIGGEREDSTART (
      SETCapabilities sETCapabilities_,
      LocationId locationId_,
      Ver ver_,
      QoP qoP_,
      MultipleLocationIds multipleLocationIds_,
      ThirdParty thirdParty_,
      ApplicationID applicationID_,
      TriggerType triggerType_,
      TriggerParams triggerParams_,
      Position position_,
      ReportingCap reportingCap_,
      CauseCode causeCode_
   ) throws Asn1Exception {
      super();
      setSETCapabilities (sETCapabilities_);
      setLocationId (locationId_);
      setVer (ver_);
      setQoP (qoP_);
      setMultipleLocationIds (multipleLocationIds_);
      setThirdParty (thirdParty_);
      setApplicationID (applicationID_);
      setTriggerType (triggerType_);
      setTriggerParams (triggerParams_);
      setPosition (position_);
      setReportingCap (reportingCap_);
      setCauseCode (causeCode_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public Ver2_SUPLTRIGGEREDSTART (
      SETCapabilities sETCapabilities_,
      LocationId locationId_
   ) throws Asn1Exception {
      super();
      setSETCapabilities (sETCapabilities_);
      setLocationId (locationId_);
   }

   public void init () {
      sETCapabilities = null;
      locationId = null;
      ver = null;
      qoP = null;
      multipleLocationIds = null;
      thirdParty = null;
      applicationID = null;
      triggerType = null;
      triggerParams = null;
      position = null;
      reportingCap = null;
      causeCode = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Ver2_SUPLTRIGGEREDSTART) ) return false;

      Ver2_SUPLTRIGGEREDSTART rhs = (Ver2_SUPLTRIGGEREDSTART) obj;

      if (sETCapabilities == null) {
         if (rhs.sETCapabilities != null) return false;
      }
      else {
         if (!sETCapabilities.equals(rhs.sETCapabilities)) {
            return false;
         }
      }

      if (locationId == null) {
         if (rhs.locationId != null) return false;
      }
      else {
         if (!locationId.equals(rhs.locationId)) {
            return false;
         }
      }

      if (ver == null) {
         if (rhs.ver != null) return false;
      }
      else {
         if (!ver.equals(rhs.ver)) {
            return false;
         }
      }

      if (qoP == null) {
         if (rhs.qoP != null) return false;
      }
      else {
         if (!qoP.equals(rhs.qoP)) {
            return false;
         }
      }

      if (multipleLocationIds == null) {
         if (rhs.multipleLocationIds != null) return false;
      }
      else {
         if (!multipleLocationIds.equals(rhs.multipleLocationIds)) {
            return false;
         }
      }

      if (thirdParty == null) {
         if (rhs.thirdParty != null) return false;
      }
      else {
         if (!thirdParty.equals(rhs.thirdParty)) {
            return false;
         }
      }

      if (applicationID == null) {
         if (rhs.applicationID != null) return false;
      }
      else {
         if (!applicationID.equals(rhs.applicationID)) {
            return false;
         }
      }

      if (triggerType == null) {
         if (rhs.triggerType != null) return false;
      }
      else {
         if (!triggerType.equals(rhs.triggerType)) {
            return false;
         }
      }

      if (triggerParams == null) {
         if (rhs.triggerParams != null) return false;
      }
      else {
         if (!triggerParams.equals(rhs.triggerParams)) {
            return false;
         }
      }

      if (position == null) {
         if (rhs.position != null) return false;
      }
      else {
         if (!position.equals(rhs.position)) {
            return false;
         }
      }

      if (reportingCap == null) {
         if (rhs.reportingCap != null) return false;
      }
      else {
         if (!reportingCap.equals(rhs.reportingCap)) {
            return false;
         }
      }

      if (causeCode == null) {
         if (rhs.causeCode != null) return false;
      }
      else {
         if (!causeCode.equals(rhs.causeCode)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (sETCapabilities != null) __code = 31*__code + sETCapabilities.hashCode();
      if (locationId != null) __code = 31*__code + locationId.hashCode();
      if (ver != null) __code = 31*__code + ver.hashCode();
      if (qoP != null) __code = 31*__code + qoP.hashCode();
      if (multipleLocationIds != null) __code = 31*__code + multipleLocationIds.hashCode();
      if (thirdParty != null) __code = 31*__code + thirdParty.hashCode();
      if (applicationID != null) __code = 31*__code + applicationID.hashCode();
      if (triggerType != null) __code = 31*__code + triggerType.hashCode();
      if (triggerParams != null) __code = 31*__code + triggerParams.hashCode();
      if (position != null) __code = 31*__code + position.hashCode();
      if (reportingCap != null) __code = 31*__code + reportingCap.hashCode();
      if (causeCode != null) __code = 31*__code + causeCode.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SETCapabilities
    */
   public SETCapabilities getSETCapabilities () {
      return sETCapabilities;
   }

   public void setSETCapabilities (SETCapabilities value) {
      this.sETCapabilities = value;
   }

   /**
    * Accessor/mutator methods for LocationId
    */
   public LocationId getLocationId () {
      return locationId;
   }

   public void setLocationId (LocationId value) {
      this.locationId = value;
   }

   /**
    * Accessor/mutator methods for Ver
    */
   public Ver getVer () {
      return ver;
   }

   public void setVer (Ver value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 64)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.ver = value;
   }

   public boolean hasVer () {
      return (ver != null);
   }

   /**
    * Accessor/mutator methods for QoP
    */
   public QoP getQoP () {
      return qoP;
   }

   public void setQoP (QoP value) {
      this.qoP = value;
   }

   public boolean hasQoP () {
      return (qoP != null);
   }

   /**
    * Accessor/mutator methods for MultipleLocationIds
    */
   public MultipleLocationIds getMultipleLocationIds () {
      return multipleLocationIds;
   }

   public void setMultipleLocationIds (MultipleLocationIds value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 64))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.multipleLocationIds = value;
   }

   public boolean hasMultipleLocationIds () {
      return (multipleLocationIds != null);
   }

   /**
    * Accessor/mutator methods for ThirdParty
    */
   public ThirdParty getThirdParty () {
      return thirdParty;
   }

   public void setThirdParty (ThirdParty value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 64))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.thirdParty = value;
   }

   public boolean hasThirdParty () {
      return (thirdParty != null);
   }

   /**
    * Accessor/mutator methods for ApplicationID
    */
   public ApplicationID getApplicationID () {
      return applicationID;
   }

   public void setApplicationID (ApplicationID value) {
      this.applicationID = value;
   }

   public boolean hasApplicationID () {
      return (applicationID != null);
   }

   /**
    * Accessor/mutator methods for TriggerType
    */
   public TriggerType getTriggerType () {
      return triggerType;
   }

   public void setTriggerType (TriggerType value) {
      this.triggerType = value;
   }

   public boolean hasTriggerType () {
      return (triggerType != null);
   }

   /**
    * Accessor/mutator methods for TriggerParams
    */
   public TriggerParams getTriggerParams () {
      return triggerParams;
   }

   public void setTriggerParams (TriggerParams value) {
      this.triggerParams = value;
   }

   public boolean hasTriggerParams () {
      return (triggerParams != null);
   }

   /**
    * Accessor/mutator methods for Position
    */
   public Position getPosition () {
      return position;
   }

   public void setPosition (Position value) {
      this.position = value;
   }

   public boolean hasPosition () {
      return (position != null);
   }

   /**
    * Accessor/mutator methods for ReportingCap
    */
   public ReportingCap getReportingCap () {
      return reportingCap;
   }

   public void setReportingCap (ReportingCap value) {
      this.reportingCap = value;
   }

   public boolean hasReportingCap () {
      return (reportingCap != null);
   }

   /**
    * Accessor/mutator methods for CauseCode
    */
   public CauseCode getCauseCode () {
      return causeCode;
   }

   public void setCauseCode (CauseCode value) {
      this.causeCode = value;
   }

   public boolean hasCauseCode () {
      return (causeCode != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 13; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sETCapabilities;
         case 1: return locationId;
         case 2: return ver;
         case 3: return qoP;
         case 4: return multipleLocationIds;
         case 5: return thirdParty;
         case 6: return applicationID;
         case 7: return triggerType;
         case 8: return triggerParams;
         case 9: return position;
         case 10: return reportingCap;
         case 11: return causeCode;
         case 12: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sETCapabilities";
         case 1: return "locationId";
         case 2: return "ver";
         case 3: return "qoP";
         case 4: return "multipleLocationIds";
         case 5: return "thirdParty";
         case 6: return "applicationID";
         case 7: return "triggerType";
         case 8: return "triggerParams";
         case 9: return "position";
         case 10: return "reportingCap";
         case 11: return "causeCode";
         case 12: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean verPresent = buffer.decodeBit ("verPresent");
      boolean qoPPresent = buffer.decodeBit ("qoPPresent");
      boolean multipleLocationIdsPresent = buffer.decodeBit ("multipleLocationIdsPresent");
      boolean thirdPartyPresent = buffer.decodeBit ("thirdPartyPresent");
      boolean applicationIDPresent = buffer.decodeBit ("applicationIDPresent");
      boolean triggerTypePresent = buffer.decodeBit ("triggerTypePresent");
      boolean triggerParamsPresent = buffer.decodeBit ("triggerParamsPresent");
      boolean positionPresent = buffer.decodeBit ("positionPresent");
      boolean reportingCapPresent = buffer.decodeBit ("reportingCapPresent");
      boolean causeCodePresent = buffer.decodeBit ("causeCodePresent");

      // decode sETCapabilities

      buffer.getContext().eventDispatcher.startElement("sETCapabilities", -1);

      sETCapabilities = new SETCapabilities();
      sETCapabilities.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sETCapabilities", -1);

      // decode locationId

      buffer.getContext().eventDispatcher.startElement("locationId", -1);

      locationId = new LocationId();
      locationId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("locationId", -1);

      // decode ver

      if (verPresent) {
         buffer.getContext().eventDispatcher.startElement("ver", -1);

         ver = new Ver();
         ver.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ver", -1);
      }
      else {
         ver = null;
      }

      // decode qoP

      if (qoPPresent) {
         buffer.getContext().eventDispatcher.startElement("qoP", -1);

         qoP = new QoP();
         qoP.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("qoP", -1);
      }
      else {
         qoP = null;
      }

      // decode multipleLocationIds

      if (multipleLocationIdsPresent) {
         buffer.getContext().eventDispatcher.startElement("multipleLocationIds", -1);

         multipleLocationIds = new MultipleLocationIds();
         multipleLocationIds.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("multipleLocationIds", -1);
      }
      else {
         multipleLocationIds = null;
      }

      // decode thirdParty

      if (thirdPartyPresent) {
         buffer.getContext().eventDispatcher.startElement("thirdParty", -1);

         thirdParty = new ThirdParty();
         thirdParty.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("thirdParty", -1);
      }
      else {
         thirdParty = null;
      }

      // decode applicationID

      if (applicationIDPresent) {
         buffer.getContext().eventDispatcher.startElement("applicationID", -1);

         applicationID = new ApplicationID();
         applicationID.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("applicationID", -1);
      }
      else {
         applicationID = null;
      }

      // decode triggerType

      if (triggerTypePresent) {
         buffer.getContext().eventDispatcher.startElement("triggerType", -1);

         int tval = TriggerType.decodeEnumValue (buffer);
         triggerType = TriggerType.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("triggerType", -1);
      }
      else {
         triggerType = null;
      }

      // decode triggerParams

      if (triggerParamsPresent) {
         buffer.getContext().eventDispatcher.startElement("triggerParams", -1);

         triggerParams = new TriggerParams();
         triggerParams.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("triggerParams", -1);
      }
      else {
         triggerParams = null;
      }

      // decode position

      if (positionPresent) {
         buffer.getContext().eventDispatcher.startElement("position", -1);

         position = new Position();
         position.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("position", -1);
      }
      else {
         position = null;
      }

      // decode reportingCap

      if (reportingCapPresent) {
         buffer.getContext().eventDispatcher.startElement("reportingCap", -1);

         reportingCap = new ReportingCap();
         reportingCap.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("reportingCap", -1);
      }
      else {
         reportingCap = null;
      }

      // decode causeCode

      if (causeCodePresent) {
         buffer.getContext().eventDispatcher.startElement("causeCode", -1);

         int tval = CauseCode.decodeEnumValue (buffer);
         causeCode = CauseCode.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("causeCode", -1);
      }
      else {
         causeCode = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((ver != null), null);
      buffer.encodeBit ((qoP != null), null);
      buffer.encodeBit ((multipleLocationIds != null), null);
      buffer.encodeBit ((thirdParty != null), null);
      buffer.encodeBit ((applicationID != null), null);
      buffer.encodeBit ((triggerType != null), null);
      buffer.encodeBit ((triggerParams != null), null);
      buffer.encodeBit ((position != null), null);
      buffer.encodeBit ((reportingCap != null), null);
      buffer.encodeBit ((causeCode != null), null);

      // encode sETCapabilities

      if (sETCapabilities != null) {
         buffer.getContext().eventDispatcher.startElement("sETCapabilities", -1);

         sETCapabilities.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sETCapabilities", -1);
      }
      else throw new Asn1MissingRequiredException ("sETCapabilities");

      // encode locationId

      if (locationId != null) {
         buffer.getContext().eventDispatcher.startElement("locationId", -1);

         locationId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("locationId", -1);
      }
      else throw new Asn1MissingRequiredException ("locationId");

      // encode ver

      if (ver != null) {
         buffer.getContext().eventDispatcher.startElement("ver", -1);

         ver.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ver", -1);
      }

      // encode qoP

      if (qoP != null) {
         buffer.getContext().eventDispatcher.startElement("qoP", -1);

         qoP.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("qoP", -1);
      }

      // encode multipleLocationIds

      if (multipleLocationIds != null) {
         buffer.getContext().eventDispatcher.startElement("multipleLocationIds", -1);

         multipleLocationIds.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("multipleLocationIds", -1);
      }

      // encode thirdParty

      if (thirdParty != null) {
         buffer.getContext().eventDispatcher.startElement("thirdParty", -1);

         thirdParty.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("thirdParty", -1);
      }

      // encode applicationID

      if (applicationID != null) {
         buffer.getContext().eventDispatcher.startElement("applicationID", -1);

         applicationID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("applicationID", -1);
      }

      // encode triggerType

      if (triggerType != null) {
         buffer.getContext().eventDispatcher.startElement("triggerType", -1);

         triggerType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("triggerType", -1);
      }

      // encode triggerParams

      if (triggerParams != null) {
         buffer.getContext().eventDispatcher.startElement("triggerParams", -1);

         triggerParams.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("triggerParams", -1);
      }

      // encode position

      if (position != null) {
         buffer.getContext().eventDispatcher.startElement("position", -1);

         position.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("position", -1);
      }

      // encode reportingCap

      if (reportingCap != null) {
         buffer.getContext().eventDispatcher.startElement("reportingCap", -1);

         reportingCap.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportingCap", -1);
      }

      // encode causeCode

      if (causeCode != null) {
         buffer.getContext().eventDispatcher.startElement("causeCode", -1);

         causeCode.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("causeCode", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
