/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Components;

import com.objsys.asn1j.runtime.*;

public class CdmaCellInformation extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "CdmaCellInformation";
   }

   protected Asn1Integer refNID;
   protected Asn1Integer refSID;
   protected Asn1Integer refBASEID;
   protected Asn1Integer refBASELAT;
   protected Asn1Integer reBASELONG;
   protected Asn1Integer refREFPN;
   protected Asn1Integer refWeekNumber;
   protected Asn1Integer refSeconds;
   protected Asn1OpenExt extElem1;

   public CdmaCellInformation () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CdmaCellInformation (
      Asn1Integer refNID_,
      Asn1Integer refSID_,
      Asn1Integer refBASEID_,
      Asn1Integer refBASELAT_,
      Asn1Integer reBASELONG_,
      Asn1Integer refREFPN_,
      Asn1Integer refWeekNumber_,
      Asn1Integer refSeconds_
   ) throws Asn1Exception {
      super();
      setRefNID (refNID_);
      setRefSID (refSID_);
      setRefBASEID (refBASEID_);
      setRefBASELAT (refBASELAT_);
      setReBASELONG (reBASELONG_);
      setRefREFPN (refREFPN_);
      setRefWeekNumber (refWeekNumber_);
      setRefSeconds (refSeconds_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CdmaCellInformation (long refNID_,
      long refSID_,
      long refBASEID_,
      long refBASELAT_,
      long reBASELONG_,
      long refREFPN_,
      long refWeekNumber_,
      long refSeconds_
   ) throws Asn1Exception {
      super();
      setRefNID (refNID_);
      setRefSID (refSID_);
      setRefBASEID (refBASEID_);
      setRefBASELAT (refBASELAT_);
      setReBASELONG (reBASELONG_);
      setRefREFPN (refREFPN_);
      setRefWeekNumber (refWeekNumber_);
      setRefSeconds (refSeconds_);
   }

   public void init () {
      refNID = null;
      refSID = null;
      refBASEID = null;
      refBASELAT = null;
      reBASELONG = null;
      refREFPN = null;
      refWeekNumber = null;
      refSeconds = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof CdmaCellInformation) ) return false;

      CdmaCellInformation rhs = (CdmaCellInformation) obj;

      if (refNID == null) {
         if (rhs.refNID != null) return false;
      }
      else {
         if (!refNID.equals(rhs.refNID)) {
            return false;
         }
      }

      if (refSID == null) {
         if (rhs.refSID != null) return false;
      }
      else {
         if (!refSID.equals(rhs.refSID)) {
            return false;
         }
      }

      if (refBASEID == null) {
         if (rhs.refBASEID != null) return false;
      }
      else {
         if (!refBASEID.equals(rhs.refBASEID)) {
            return false;
         }
      }

      if (refBASELAT == null) {
         if (rhs.refBASELAT != null) return false;
      }
      else {
         if (!refBASELAT.equals(rhs.refBASELAT)) {
            return false;
         }
      }

      if (reBASELONG == null) {
         if (rhs.reBASELONG != null) return false;
      }
      else {
         if (!reBASELONG.equals(rhs.reBASELONG)) {
            return false;
         }
      }

      if (refREFPN == null) {
         if (rhs.refREFPN != null) return false;
      }
      else {
         if (!refREFPN.equals(rhs.refREFPN)) {
            return false;
         }
      }

      if (refWeekNumber == null) {
         if (rhs.refWeekNumber != null) return false;
      }
      else {
         if (!refWeekNumber.equals(rhs.refWeekNumber)) {
            return false;
         }
      }

      if (refSeconds == null) {
         if (rhs.refSeconds != null) return false;
      }
      else {
         if (!refSeconds.equals(rhs.refSeconds)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (refNID != null) __code = 31*__code + refNID.hashCode();
      if (refSID != null) __code = 31*__code + refSID.hashCode();
      if (refBASEID != null) __code = 31*__code + refBASEID.hashCode();
      if (refBASELAT != null) __code = 31*__code + refBASELAT.hashCode();
      if (reBASELONG != null) __code = 31*__code + reBASELONG.hashCode();
      if (refREFPN != null) __code = 31*__code + refREFPN.hashCode();
      if (refWeekNumber != null) __code = 31*__code + refWeekNumber.hashCode();
      if (refSeconds != null) __code = 31*__code + refSeconds.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for RefNID
    */
   public Asn1Integer getRefNID () {
      return refNID;
   }

   public void setRefNID (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.refNID = value;
   }

   public void setRefNID (long value) 
      throws Asn1Exception
   {
      setRefNID (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for RefSID
    */
   public Asn1Integer getRefSID () {
      return refSID;
   }

   public void setRefSID (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.refSID = value;
   }

   public void setRefSID (long value) 
      throws Asn1Exception
   {
      setRefSID (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for RefBASEID
    */
   public Asn1Integer getRefBASEID () {
      return refBASEID;
   }

   public void setRefBASEID (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.refBASEID = value;
   }

   public void setRefBASEID (long value) 
      throws Asn1Exception
   {
      setRefBASEID (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for RefBASELAT
    */
   public Asn1Integer getRefBASELAT () {
      return refBASELAT;
   }

   public void setRefBASELAT (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 4194303))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.refBASELAT = value;
   }

   public void setRefBASELAT (long value) 
      throws Asn1Exception
   {
      setRefBASELAT (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ReBASELONG
    */
   public Asn1Integer getReBASELONG () {
      return reBASELONG;
   }

   public void setReBASELONG (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.reBASELONG = value;
   }

   public void setReBASELONG (long value) 
      throws Asn1Exception
   {
      setReBASELONG (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for RefREFPN
    */
   public Asn1Integer getRefREFPN () {
      return refREFPN;
   }

   public void setRefREFPN (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 511))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.refREFPN = value;
   }

   public void setRefREFPN (long value) 
      throws Asn1Exception
   {
      setRefREFPN (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for RefWeekNumber
    */
   public Asn1Integer getRefWeekNumber () {
      return refWeekNumber;
   }

   public void setRefWeekNumber (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.refWeekNumber = value;
   }

   public void setRefWeekNumber (long value) 
      throws Asn1Exception
   {
      setRefWeekNumber (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for RefSeconds
    */
   public Asn1Integer getRefSeconds () {
      return refSeconds;
   }

   public void setRefSeconds (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 4194303))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.refSeconds = value;
   }

   public void setRefSeconds (long value) 
      throws Asn1Exception
   {
      setRefSeconds (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return refNID;
         case 1: return refSID;
         case 2: return refBASEID;
         case 3: return refBASELAT;
         case 4: return reBASELONG;
         case 5: return refREFPN;
         case 6: return refWeekNumber;
         case 7: return refSeconds;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "refNID";
         case 1: return "refSID";
         case 2: return "refBASEID";
         case 3: return "refBASELAT";
         case 4: return "reBASELONG";
         case 5: return "refREFPN";
         case 6: return "refWeekNumber";
         case 7: return "refSeconds";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode refNID

      buffer.getContext().eventDispatcher.startElement("refNID", -1);

      refNID = new Asn1Integer();
      refNID.decode (buffer, 0, 65535);
      buffer.getContext().eventDispatcher.endElement("refNID", -1);

      // decode refSID

      buffer.getContext().eventDispatcher.startElement("refSID", -1);

      refSID = new Asn1Integer();
      refSID.decode (buffer, 0, 32767);
      buffer.getContext().eventDispatcher.endElement("refSID", -1);

      // decode refBASEID

      buffer.getContext().eventDispatcher.startElement("refBASEID", -1);

      refBASEID = new Asn1Integer();
      refBASEID.decode (buffer, 0, 65535);
      buffer.getContext().eventDispatcher.endElement("refBASEID", -1);

      // decode refBASELAT

      buffer.getContext().eventDispatcher.startElement("refBASELAT", -1);

      refBASELAT = new Asn1Integer();
      refBASELAT.decode (buffer, 0, 4194303);
      buffer.getContext().eventDispatcher.endElement("refBASELAT", -1);

      // decode reBASELONG

      buffer.getContext().eventDispatcher.startElement("reBASELONG", -1);

      reBASELONG = new Asn1Integer();
      reBASELONG.decode (buffer, 0, 8388607);
      buffer.getContext().eventDispatcher.endElement("reBASELONG", -1);

      // decode refREFPN

      buffer.getContext().eventDispatcher.startElement("refREFPN", -1);

      refREFPN = new Asn1Integer();
      refREFPN.decode (buffer, 0, 511);
      buffer.getContext().eventDispatcher.endElement("refREFPN", -1);

      // decode refWeekNumber

      buffer.getContext().eventDispatcher.startElement("refWeekNumber", -1);

      refWeekNumber = new Asn1Integer();
      refWeekNumber.decode (buffer, 0, 65535);
      buffer.getContext().eventDispatcher.endElement("refWeekNumber", -1);

      // decode refSeconds

      buffer.getContext().eventDispatcher.startElement("refSeconds", -1);

      refSeconds = new Asn1Integer();
      refSeconds.decode (buffer, 0, 4194303);
      buffer.getContext().eventDispatcher.endElement("refSeconds", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode refNID

      if (refNID != null) {
         buffer.getContext().eventDispatcher.startElement("refNID", -1);

         refNID.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("refNID", -1);
      }
      else throw new Asn1MissingRequiredException ("refNID");

      // encode refSID

      if (refSID != null) {
         buffer.getContext().eventDispatcher.startElement("refSID", -1);

         refSID.encode (buffer, 0, 32767);

         buffer.getContext().eventDispatcher.endElement("refSID", -1);
      }
      else throw new Asn1MissingRequiredException ("refSID");

      // encode refBASEID

      if (refBASEID != null) {
         buffer.getContext().eventDispatcher.startElement("refBASEID", -1);

         refBASEID.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("refBASEID", -1);
      }
      else throw new Asn1MissingRequiredException ("refBASEID");

      // encode refBASELAT

      if (refBASELAT != null) {
         buffer.getContext().eventDispatcher.startElement("refBASELAT", -1);

         refBASELAT.encode (buffer, 0, 4194303);

         buffer.getContext().eventDispatcher.endElement("refBASELAT", -1);
      }
      else throw new Asn1MissingRequiredException ("refBASELAT");

      // encode reBASELONG

      if (reBASELONG != null) {
         buffer.getContext().eventDispatcher.startElement("reBASELONG", -1);

         reBASELONG.encode (buffer, 0, 8388607);

         buffer.getContext().eventDispatcher.endElement("reBASELONG", -1);
      }
      else throw new Asn1MissingRequiredException ("reBASELONG");

      // encode refREFPN

      if (refREFPN != null) {
         buffer.getContext().eventDispatcher.startElement("refREFPN", -1);

         refREFPN.encode (buffer, 0, 511);

         buffer.getContext().eventDispatcher.endElement("refREFPN", -1);
      }
      else throw new Asn1MissingRequiredException ("refREFPN");

      // encode refWeekNumber

      if (refWeekNumber != null) {
         buffer.getContext().eventDispatcher.startElement("refWeekNumber", -1);

         refWeekNumber.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("refWeekNumber", -1);
      }
      else throw new Asn1MissingRequiredException ("refWeekNumber");

      // encode refSeconds

      if (refSeconds != null) {
         buffer.getContext().eventDispatcher.startElement("refSeconds", -1);

         refSeconds.encode (buffer, 0, 4194303);

         buffer.getContext().eventDispatcher.endElement("refSeconds", -1);
      }
      else throw new Asn1MissingRequiredException ("refSeconds");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
