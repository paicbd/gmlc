/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.ULP_Components.Version;
import org.mobicents.gmlc.slee.supl.ULP_Components.SessionID;

public class ULP_PDU extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULPRtkey._rtkey);
      Asn1Type._setLicLocation(_ULPRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ULP-PDU";
   }

   protected Asn1Integer length;
   protected Version version;
   protected SessionID sessionID;
   protected UlpMessage message;

   public ULP_PDU () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ULP_PDU (
      Asn1Integer length_,
      Version version_,
      SessionID sessionID_,
      UlpMessage message_
   ) throws Asn1Exception {
      super();
      setLength (length_);
      setVersion (version_);
      setSessionID (sessionID_);
      setMessage (message_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ULP_PDU (long length_,
      Version version_,
      SessionID sessionID_,
      UlpMessage message_
   ) throws Asn1Exception {
      super();
      setLength (length_);
      setVersion (version_);
      setSessionID (sessionID_);
      setMessage (message_);
   }

   public void init () {
      length = null;
      version = null;
      sessionID = null;
      message = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof ULP_PDU) ) return false;

      ULP_PDU rhs = (ULP_PDU) obj;

      if (length == null) {
         if (rhs.length != null) return false;
      }
      else {
         if (!length.equals(rhs.length)) {
            return false;
         }
      }

      if (version == null) {
         if (rhs.version != null) return false;
      }
      else {
         if (!version.equals(rhs.version)) {
            return false;
         }
      }

      if (sessionID == null) {
         if (rhs.sessionID != null) return false;
      }
      else {
         if (!sessionID.equals(rhs.sessionID)) {
            return false;
         }
      }

      if (message == null) {
         if (rhs.message != null) return false;
      }
      else {
         if (!message.equals(rhs.message)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (length != null) __code = 31*__code + length.hashCode();
      if (version != null) __code = 31*__code + version.hashCode();
      if (sessionID != null) __code = 31*__code + sessionID.hashCode();
      if (message != null) __code = 31*__code + message.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Length
    */
   public Asn1Integer getLength_ () {
      return length;
   }

   public void setLength (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.length = value;
   }

   public void setLength (long value) 
      throws Asn1Exception
   {
      setLength (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Version
    */
   public Version getVersion () {
      return version;
   }

   public void setVersion (Version value) {
      this.version = value;
   }

   /**
    * Accessor/mutator methods for SessionID
    */
   public SessionID getSessionID () {
      return sessionID;
   }

   public void setSessionID (SessionID value) {
      this.sessionID = value;
   }

   /**
    * Accessor/mutator methods for Message
    */
   public UlpMessage getMessage () {
      return message;
   }

   public void setMessage (UlpMessage value) {
      this.message = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return length;
         case 1: return version;
         case 2: return sessionID;
         case 3: return message;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "length";
         case 1: return "version";
         case 2: return "sessionID";
         case 3: return "message";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode length

      buffer.getContext().eventDispatcher.startElement("length", -1);

      length = new Asn1Integer();
      length.decode (buffer, 0, 65535);
      buffer.getContext().eventDispatcher.endElement("length", -1);

      // decode version

      buffer.getContext().eventDispatcher.startElement("version", -1);

      version = new Version();
      version.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("version", -1);

      // decode sessionID

      buffer.getContext().eventDispatcher.startElement("sessionID", -1);

      sessionID = new SessionID();
      sessionID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sessionID", -1);

      // decode message

      buffer.getContext().eventDispatcher.startElement("message", -1);

      message = new UlpMessage();
      message.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("message", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode length

      if (length != null) {
         buffer.getContext().eventDispatcher.startElement("length", -1);

         length.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("length", -1);
      }
      else throw new Asn1MissingRequiredException ("length");

      // encode version

      if (version != null) {
         buffer.getContext().eventDispatcher.startElement("version", -1);

         version.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("version", -1);
      }
      else throw new Asn1MissingRequiredException ("version");

      // encode sessionID

      if (sessionID != null) {
         buffer.getContext().eventDispatcher.startElement("sessionID", -1);

         sessionID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sessionID", -1);
      }
      else throw new Asn1MissingRequiredException ("sessionID");

      // encode message

      if (message != null) {
         buffer.getContext().eventDispatcher.startElement("message", -1);

         message.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("message", -1);
      }
      else throw new Asn1MissingRequiredException ("message");

   }

}
