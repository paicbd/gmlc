/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Version_2_parameter_extensions;

import com.objsys.asn1j.runtime.*;

public class GanssReqGenericData extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_Version_2_parameter_extensionsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_Version_2_parameter_extensionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GanssReqGenericData";
   }

   protected Asn1Integer ganssId;
   protected Asn1BitString ganssSBASid;  // optional
   protected Asn1Boolean ganssRealTimeIntegrity;
   protected DGANSS_Sig_Id_Req ganssDifferentialCorrection;  // optional
   protected Asn1Boolean ganssAlmanac;
   protected GanssNavigationModelData ganssNavigationModelData;  // optional
   protected Asn1BitString ganssTimeModels;  // optional
   protected Asn1Boolean ganssReferenceMeasurementInfo;
   protected GanssDataBits ganssDataBits;  // optional
   protected Asn1Boolean ganssUTCModel;
   protected GanssAdditionalDataChoices ganssAdditionalDataChoices;  // optional
   protected Asn1Boolean ganssAuxiliaryInformation;
   protected ExtendedEphemeris ganssExtendedEphemeris;  // optional
   protected GanssExtendedEphCheck ganssExtendedEphemerisCheck;  // optional
   protected BDS_Sig_Id_Req bds_DifferentialCorrection;  // optional
   protected Asn1Boolean bds_GridModelReq;  // optional
   protected Asn1OpenExt extElem1;

   public GanssReqGenericData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GanssReqGenericData (
      Asn1Integer ganssId_,
      Asn1BitString ganssSBASid_,
      Asn1Boolean ganssRealTimeIntegrity_,
      DGANSS_Sig_Id_Req ganssDifferentialCorrection_,
      Asn1Boolean ganssAlmanac_,
      GanssNavigationModelData ganssNavigationModelData_,
      Asn1BitString ganssTimeModels_,
      Asn1Boolean ganssReferenceMeasurementInfo_,
      GanssDataBits ganssDataBits_,
      Asn1Boolean ganssUTCModel_,
      GanssAdditionalDataChoices ganssAdditionalDataChoices_,
      Asn1Boolean ganssAuxiliaryInformation_,
      ExtendedEphemeris ganssExtendedEphemeris_,
      GanssExtendedEphCheck ganssExtendedEphemerisCheck_,
      BDS_Sig_Id_Req bds_DifferentialCorrection_,
      Asn1Boolean bds_GridModelReq_
   ) throws Asn1Exception {
      super();
      setGanssId (ganssId_);
      setGanssSBASid (ganssSBASid_);
      setGanssRealTimeIntegrity (ganssRealTimeIntegrity_);
      setGanssDifferentialCorrection (ganssDifferentialCorrection_);
      setGanssAlmanac (ganssAlmanac_);
      setGanssNavigationModelData (ganssNavigationModelData_);
      setGanssTimeModels (ganssTimeModels_);
      setGanssReferenceMeasurementInfo (ganssReferenceMeasurementInfo_);
      setGanssDataBits (ganssDataBits_);
      setGanssUTCModel (ganssUTCModel_);
      setGanssAdditionalDataChoices (ganssAdditionalDataChoices_);
      setGanssAuxiliaryInformation (ganssAuxiliaryInformation_);
      setGanssExtendedEphemeris (ganssExtendedEphemeris_);
      setGanssExtendedEphemerisCheck (ganssExtendedEphemerisCheck_);
      setBds_DifferentialCorrection (bds_DifferentialCorrection_);
      setBds_GridModelReq (bds_GridModelReq_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GanssReqGenericData (
      Asn1Integer ganssId_,
      Asn1Boolean ganssRealTimeIntegrity_,
      Asn1Boolean ganssAlmanac_,
      Asn1Boolean ganssReferenceMeasurementInfo_,
      Asn1Boolean ganssUTCModel_,
      Asn1Boolean ganssAuxiliaryInformation_
   ) throws Asn1Exception {
      super();
      setGanssId (ganssId_);
      setGanssRealTimeIntegrity (ganssRealTimeIntegrity_);
      setGanssAlmanac (ganssAlmanac_);
      setGanssReferenceMeasurementInfo (ganssReferenceMeasurementInfo_);
      setGanssUTCModel (ganssUTCModel_);
      setGanssAuxiliaryInformation (ganssAuxiliaryInformation_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GanssReqGenericData (long ganssId_,
      Asn1BitString ganssSBASid_,
      boolean ganssRealTimeIntegrity_,
      DGANSS_Sig_Id_Req ganssDifferentialCorrection_,
      boolean ganssAlmanac_,
      GanssNavigationModelData ganssNavigationModelData_,
      Asn1BitString ganssTimeModels_,
      boolean ganssReferenceMeasurementInfo_,
      GanssDataBits ganssDataBits_,
      boolean ganssUTCModel_,
      GanssAdditionalDataChoices ganssAdditionalDataChoices_,
      boolean ganssAuxiliaryInformation_,
      ExtendedEphemeris ganssExtendedEphemeris_,
      GanssExtendedEphCheck ganssExtendedEphemerisCheck_,
      BDS_Sig_Id_Req bds_DifferentialCorrection_,
      boolean bds_GridModelReq_
   ) throws Asn1Exception {
      super();
      setGanssId (ganssId_);
      setGanssSBASid (ganssSBASid_);
      setGanssRealTimeIntegrity (ganssRealTimeIntegrity_);
      setGanssDifferentialCorrection (ganssDifferentialCorrection_);
      setGanssAlmanac (ganssAlmanac_);
      setGanssNavigationModelData (ganssNavigationModelData_);
      setGanssTimeModels (ganssTimeModels_);
      setGanssReferenceMeasurementInfo (ganssReferenceMeasurementInfo_);
      setGanssDataBits (ganssDataBits_);
      setGanssUTCModel (ganssUTCModel_);
      setGanssAdditionalDataChoices (ganssAdditionalDataChoices_);
      setGanssAuxiliaryInformation (ganssAuxiliaryInformation_);
      setGanssExtendedEphemeris (ganssExtendedEphemeris_);
      setGanssExtendedEphemerisCheck (ganssExtendedEphemerisCheck_);
      setBds_DifferentialCorrection (bds_DifferentialCorrection_);
      setBds_GridModelReq (bds_GridModelReq_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public GanssReqGenericData (
      long ganssId_,
      boolean ganssRealTimeIntegrity_,
      boolean ganssAlmanac_,
      boolean ganssReferenceMeasurementInfo_,
      boolean ganssUTCModel_,
      boolean ganssAuxiliaryInformation_
   ) throws Asn1Exception {
      super();
      setGanssId (ganssId_);
      setGanssRealTimeIntegrity (ganssRealTimeIntegrity_);
      setGanssAlmanac (ganssAlmanac_);
      setGanssReferenceMeasurementInfo (ganssReferenceMeasurementInfo_);
      setGanssUTCModel (ganssUTCModel_);
      setGanssAuxiliaryInformation (ganssAuxiliaryInformation_);
   }

   public void init () {
      ganssId = null;
      ganssSBASid = null;
      ganssRealTimeIntegrity = null;
      ganssDifferentialCorrection = null;
      ganssAlmanac = null;
      ganssNavigationModelData = null;
      ganssTimeModels = null;
      ganssReferenceMeasurementInfo = null;
      ganssDataBits = null;
      ganssUTCModel = null;
      ganssAdditionalDataChoices = null;
      ganssAuxiliaryInformation = null;
      ganssExtendedEphemeris = null;
      ganssExtendedEphemerisCheck = null;
      bds_DifferentialCorrection = null;
      bds_GridModelReq = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GanssReqGenericData) ) return false;

      GanssReqGenericData rhs = (GanssReqGenericData) obj;

      if (ganssId == null) {
         if (rhs.ganssId != null) return false;
      }
      else {
         if (!ganssId.equals(rhs.ganssId)) {
            return false;
         }
      }

      if (ganssSBASid == null) {
         if (rhs.ganssSBASid != null) return false;
      }
      else {
         if (!ganssSBASid.equals(rhs.ganssSBASid)) {
            return false;
         }
      }

      if (ganssRealTimeIntegrity == null) {
         if (rhs.ganssRealTimeIntegrity != null) return false;
      }
      else {
         if (!ganssRealTimeIntegrity.equals(rhs.ganssRealTimeIntegrity)) {
            return false;
         }
      }

      if (ganssDifferentialCorrection == null) {
         if (rhs.ganssDifferentialCorrection != null) return false;
      }
      else {
         if (!ganssDifferentialCorrection.equals(rhs.ganssDifferentialCorrection)) {
            return false;
         }
      }

      if (ganssAlmanac == null) {
         if (rhs.ganssAlmanac != null) return false;
      }
      else {
         if (!ganssAlmanac.equals(rhs.ganssAlmanac)) {
            return false;
         }
      }

      if (ganssNavigationModelData == null) {
         if (rhs.ganssNavigationModelData != null) return false;
      }
      else {
         if (!ganssNavigationModelData.equals(rhs.ganssNavigationModelData)) {
            return false;
         }
      }

      if (ganssTimeModels == null) {
         if (rhs.ganssTimeModels != null) return false;
      }
      else {
         if (!ganssTimeModels.equals(rhs.ganssTimeModels)) {
            return false;
         }
      }

      if (ganssReferenceMeasurementInfo == null) {
         if (rhs.ganssReferenceMeasurementInfo != null) return false;
      }
      else {
         if (!ganssReferenceMeasurementInfo.equals(rhs.ganssReferenceMeasurementInfo)) {
            return false;
         }
      }

      if (ganssDataBits == null) {
         if (rhs.ganssDataBits != null) return false;
      }
      else {
         if (!ganssDataBits.equals(rhs.ganssDataBits)) {
            return false;
         }
      }

      if (ganssUTCModel == null) {
         if (rhs.ganssUTCModel != null) return false;
      }
      else {
         if (!ganssUTCModel.equals(rhs.ganssUTCModel)) {
            return false;
         }
      }

      if (ganssAdditionalDataChoices == null) {
         if (rhs.ganssAdditionalDataChoices != null) return false;
      }
      else {
         if (!ganssAdditionalDataChoices.equals(rhs.ganssAdditionalDataChoices)) {
            return false;
         }
      }

      if (ganssAuxiliaryInformation == null) {
         if (rhs.ganssAuxiliaryInformation != null) return false;
      }
      else {
         if (!ganssAuxiliaryInformation.equals(rhs.ganssAuxiliaryInformation)) {
            return false;
         }
      }

      if (ganssExtendedEphemeris == null) {
         if (rhs.ganssExtendedEphemeris != null) return false;
      }
      else {
         if (!ganssExtendedEphemeris.equals(rhs.ganssExtendedEphemeris)) {
            return false;
         }
      }

      if (ganssExtendedEphemerisCheck == null) {
         if (rhs.ganssExtendedEphemerisCheck != null) return false;
      }
      else {
         if (!ganssExtendedEphemerisCheck.equals(rhs.ganssExtendedEphemerisCheck)) {
            return false;
         }
      }

      if (bds_DifferentialCorrection == null) {
         if (rhs.bds_DifferentialCorrection != null) return false;
      }
      else {
         if (!bds_DifferentialCorrection.equals(rhs.bds_DifferentialCorrection)) {
            return false;
         }
      }

      if (bds_GridModelReq == null) {
         if (rhs.bds_GridModelReq != null) return false;
      }
      else {
         if (!bds_GridModelReq.equals(rhs.bds_GridModelReq)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (ganssId != null) __code = 31*__code + ganssId.hashCode();
      if (ganssSBASid != null) __code = 31*__code + ganssSBASid.hashCode();
      if (ganssRealTimeIntegrity != null) __code = 31*__code + ganssRealTimeIntegrity.hashCode();
      if (ganssDifferentialCorrection != null) __code = 31*__code + ganssDifferentialCorrection.hashCode();
      if (ganssAlmanac != null) __code = 31*__code + ganssAlmanac.hashCode();
      if (ganssNavigationModelData != null) __code = 31*__code + ganssNavigationModelData.hashCode();
      if (ganssTimeModels != null) __code = 31*__code + ganssTimeModels.hashCode();
      if (ganssReferenceMeasurementInfo != null) __code = 31*__code + ganssReferenceMeasurementInfo.hashCode();
      if (ganssDataBits != null) __code = 31*__code + ganssDataBits.hashCode();
      if (ganssUTCModel != null) __code = 31*__code + ganssUTCModel.hashCode();
      if (ganssAdditionalDataChoices != null) __code = 31*__code + ganssAdditionalDataChoices.hashCode();
      if (ganssAuxiliaryInformation != null) __code = 31*__code + ganssAuxiliaryInformation.hashCode();
      if (ganssExtendedEphemeris != null) __code = 31*__code + ganssExtendedEphemeris.hashCode();
      if (ganssExtendedEphemerisCheck != null) __code = 31*__code + ganssExtendedEphemerisCheck.hashCode();
      if (bds_DifferentialCorrection != null) __code = 31*__code + bds_DifferentialCorrection.hashCode();
      if (bds_GridModelReq != null) __code = 31*__code + bds_GridModelReq.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for GanssId
    */
   public Asn1Integer getGanssId () {
      return ganssId;
   }

   public void setGanssId (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.ganssId = value;
   }

   public void setGanssId (long value) 
      throws Asn1Exception
   {
      setGanssId (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GanssSBASid
    */
   public Asn1BitString getGanssSBASid () {
      return ganssSBASid;
   }

   public void setGanssSBASid (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 3)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.ganssSBASid = value;
   }

   public boolean hasGanssSBASid () {
      return (ganssSBASid != null);
   }

   /**
    * Accessor/mutator methods for GanssRealTimeIntegrity
    */
   public Asn1Boolean getGanssRealTimeIntegrity () {
      return ganssRealTimeIntegrity;
   }

   public void setGanssRealTimeIntegrity (Asn1Boolean value) {
      this.ganssRealTimeIntegrity = value;
   }

   public void setGanssRealTimeIntegrity (boolean value) {
      setGanssRealTimeIntegrity (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for GanssDifferentialCorrection
    */
   public DGANSS_Sig_Id_Req getGanssDifferentialCorrection () {
      return ganssDifferentialCorrection;
   }

   public void setGanssDifferentialCorrection (DGANSS_Sig_Id_Req value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 8)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.ganssDifferentialCorrection = value;
   }

   public boolean hasGanssDifferentialCorrection () {
      return (ganssDifferentialCorrection != null);
   }

   /**
    * Accessor/mutator methods for GanssAlmanac
    */
   public Asn1Boolean getGanssAlmanac () {
      return ganssAlmanac;
   }

   public void setGanssAlmanac (Asn1Boolean value) {
      this.ganssAlmanac = value;
   }

   public void setGanssAlmanac (boolean value) {
      setGanssAlmanac (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for GanssNavigationModelData
    */
   public GanssNavigationModelData getGanssNavigationModelData () {
      return ganssNavigationModelData;
   }

   public void setGanssNavigationModelData (GanssNavigationModelData value) {
      this.ganssNavigationModelData = value;
   }

   public boolean hasGanssNavigationModelData () {
      return (ganssNavigationModelData != null);
   }

   /**
    * Accessor/mutator methods for GanssTimeModels
    */
   public Asn1BitString getGanssTimeModels () {
      return ganssTimeModels;
   }

   public void setGanssTimeModels (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 16)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.ganssTimeModels = value;
   }

   public boolean hasGanssTimeModels () {
      return (ganssTimeModels != null);
   }

   /**
    * Accessor/mutator methods for GanssReferenceMeasurementInfo
    */
   public Asn1Boolean getGanssReferenceMeasurementInfo () {
      return ganssReferenceMeasurementInfo;
   }

   public void setGanssReferenceMeasurementInfo (Asn1Boolean value) {
      this.ganssReferenceMeasurementInfo = value;
   }

   public void setGanssReferenceMeasurementInfo (boolean value) {
      setGanssReferenceMeasurementInfo (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for GanssDataBits
    */
   public GanssDataBits getGanssDataBits () {
      return ganssDataBits;
   }

   public void setGanssDataBits (GanssDataBits value) {
      this.ganssDataBits = value;
   }

   public boolean hasGanssDataBits () {
      return (ganssDataBits != null);
   }

   /**
    * Accessor/mutator methods for GanssUTCModel
    */
   public Asn1Boolean getGanssUTCModel () {
      return ganssUTCModel;
   }

   public void setGanssUTCModel (Asn1Boolean value) {
      this.ganssUTCModel = value;
   }

   public void setGanssUTCModel (boolean value) {
      setGanssUTCModel (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for GanssAdditionalDataChoices
    */
   public GanssAdditionalDataChoices getGanssAdditionalDataChoices () {
      return ganssAdditionalDataChoices;
   }

   public void setGanssAdditionalDataChoices (GanssAdditionalDataChoices value) {
      this.ganssAdditionalDataChoices = value;
   }

   public boolean hasGanssAdditionalDataChoices () {
      return (ganssAdditionalDataChoices != null);
   }

   /**
    * Accessor/mutator methods for GanssAuxiliaryInformation
    */
   public Asn1Boolean getGanssAuxiliaryInformation () {
      return ganssAuxiliaryInformation;
   }

   public void setGanssAuxiliaryInformation (Asn1Boolean value) {
      this.ganssAuxiliaryInformation = value;
   }

   public void setGanssAuxiliaryInformation (boolean value) {
      setGanssAuxiliaryInformation (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for GanssExtendedEphemeris
    */
   public ExtendedEphemeris getGanssExtendedEphemeris () {
      return ganssExtendedEphemeris;
   }

   public void setGanssExtendedEphemeris (ExtendedEphemeris value) {
      this.ganssExtendedEphemeris = value;
   }

   public boolean hasGanssExtendedEphemeris () {
      return (ganssExtendedEphemeris != null);
   }

   /**
    * Accessor/mutator methods for GanssExtendedEphemerisCheck
    */
   public GanssExtendedEphCheck getGanssExtendedEphemerisCheck () {
      return ganssExtendedEphemerisCheck;
   }

   public void setGanssExtendedEphemerisCheck (GanssExtendedEphCheck value) {
      this.ganssExtendedEphemerisCheck = value;
   }

   public boolean hasGanssExtendedEphemerisCheck () {
      return (ganssExtendedEphemerisCheck != null);
   }

   /**
    * Accessor/mutator methods for Bds_DifferentialCorrection
    */
   public BDS_Sig_Id_Req getBds_DifferentialCorrection () {
      return bds_DifferentialCorrection;
   }

   public void setBds_DifferentialCorrection (BDS_Sig_Id_Req value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 8)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.bds_DifferentialCorrection = value;
   }

   public boolean hasBds_DifferentialCorrection () {
      return (bds_DifferentialCorrection != null);
   }

   /**
    * Accessor/mutator methods for Bds_GridModelReq
    */
   public Asn1Boolean getBds_GridModelReq () {
      return bds_GridModelReq;
   }

   public void setBds_GridModelReq (Asn1Boolean value) {
      this.bds_GridModelReq = value;
   }

   public void setBds_GridModelReq (boolean value) {
      setBds_GridModelReq (new Asn1Boolean(value));
   }
   public boolean hasBds_GridModelReq () {
      return (bds_GridModelReq != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 17; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ganssId;
         case 1: return ganssSBASid;
         case 2: return ganssRealTimeIntegrity;
         case 3: return ganssDifferentialCorrection;
         case 4: return ganssAlmanac;
         case 5: return ganssNavigationModelData;
         case 6: return ganssTimeModels;
         case 7: return ganssReferenceMeasurementInfo;
         case 8: return ganssDataBits;
         case 9: return ganssUTCModel;
         case 10: return ganssAdditionalDataChoices;
         case 11: return ganssAuxiliaryInformation;
         case 12: return ganssExtendedEphemeris;
         case 13: return ganssExtendedEphemerisCheck;
         case 14: return bds_DifferentialCorrection;
         case 15: return bds_GridModelReq;
         case 16: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ganssId";
         case 1: return "ganssSBASid";
         case 2: return "ganssRealTimeIntegrity";
         case 3: return "ganssDifferentialCorrection";
         case 4: return "ganssAlmanac";
         case 5: return "ganssNavigationModelData";
         case 6: return "ganssTimeModels";
         case 7: return "ganssReferenceMeasurementInfo";
         case 8: return "ganssDataBits";
         case 9: return "ganssUTCModel";
         case 10: return "ganssAdditionalDataChoices";
         case 11: return "ganssAuxiliaryInformation";
         case 12: return "ganssExtendedEphemeris";
         case 13: return "ganssExtendedEphemerisCheck";
         case 14: return "bds-DifferentialCorrection";
         case 15: return "bds-GridModelReq";
         case 16: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean ganssSBASidPresent = buffer.decodeBit ("ganssSBASidPresent");
      boolean ganssDifferentialCorrectionPresent = buffer.decodeBit ("ganssDifferentialCorrectionPresent");
      boolean ganssNavigationModelDataPresent = buffer.decodeBit ("ganssNavigationModelDataPresent");
      boolean ganssTimeModelsPresent = buffer.decodeBit ("ganssTimeModelsPresent");
      boolean ganssDataBitsPresent = buffer.decodeBit ("ganssDataBitsPresent");
      boolean ganssAdditionalDataChoicesPresent = buffer.decodeBit ("ganssAdditionalDataChoicesPresent");
      boolean ganssExtendedEphemerisPresent = buffer.decodeBit ("ganssExtendedEphemerisPresent");
      boolean ganssExtendedEphemerisCheckPresent = buffer.decodeBit ("ganssExtendedEphemerisCheckPresent");

      // decode ganssId

      buffer.getContext().eventDispatcher.startElement("ganssId", -1);

      ganssId = new Asn1Integer();
      ganssId.decode (buffer, 0, 15);
      buffer.getContext().eventDispatcher.endElement("ganssId", -1);

      // decode ganssSBASid

      if (ganssSBASidPresent) {
         buffer.getContext().eventDispatcher.startElement("ganssSBASid", -1);

         ganssSBASid = new Asn1BitString();
         ganssSBASid.decode (buffer, 3, 3);
         buffer.getContext().eventDispatcher.endElement("ganssSBASid", -1);
      }
      else {
         ganssSBASid = null;
      }

      // decode ganssRealTimeIntegrity

      buffer.getContext().eventDispatcher.startElement("ganssRealTimeIntegrity", -1);

      ganssRealTimeIntegrity = new Asn1Boolean();
      ganssRealTimeIntegrity.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ganssRealTimeIntegrity", -1);

      // decode ganssDifferentialCorrection

      if (ganssDifferentialCorrectionPresent) {
         buffer.getContext().eventDispatcher.startElement("ganssDifferentialCorrection", -1);

         ganssDifferentialCorrection = new DGANSS_Sig_Id_Req();
         ganssDifferentialCorrection.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ganssDifferentialCorrection", -1);
      }
      else {
         ganssDifferentialCorrection = null;
      }

      // decode ganssAlmanac

      buffer.getContext().eventDispatcher.startElement("ganssAlmanac", -1);

      ganssAlmanac = new Asn1Boolean();
      ganssAlmanac.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ganssAlmanac", -1);

      // decode ganssNavigationModelData

      if (ganssNavigationModelDataPresent) {
         buffer.getContext().eventDispatcher.startElement("ganssNavigationModelData", -1);

         ganssNavigationModelData = new GanssNavigationModelData();
         ganssNavigationModelData.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ganssNavigationModelData", -1);
      }
      else {
         ganssNavigationModelData = null;
      }

      // decode ganssTimeModels

      if (ganssTimeModelsPresent) {
         buffer.getContext().eventDispatcher.startElement("ganssTimeModels", -1);

         ganssTimeModels = new Asn1BitString();
         ganssTimeModels.decode (buffer, 16, 16);
         buffer.getContext().eventDispatcher.endElement("ganssTimeModels", -1);
      }
      else {
         ganssTimeModels = null;
      }

      // decode ganssReferenceMeasurementInfo

      buffer.getContext().eventDispatcher.startElement("ganssReferenceMeasurementInfo", -1);

      ganssReferenceMeasurementInfo = new Asn1Boolean();
      ganssReferenceMeasurementInfo.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ganssReferenceMeasurementInfo", -1);

      // decode ganssDataBits

      if (ganssDataBitsPresent) {
         buffer.getContext().eventDispatcher.startElement("ganssDataBits", -1);

         ganssDataBits = new GanssDataBits();
         ganssDataBits.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ganssDataBits", -1);
      }
      else {
         ganssDataBits = null;
      }

      // decode ganssUTCModel

      buffer.getContext().eventDispatcher.startElement("ganssUTCModel", -1);

      ganssUTCModel = new Asn1Boolean();
      ganssUTCModel.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ganssUTCModel", -1);

      // decode ganssAdditionalDataChoices

      if (ganssAdditionalDataChoicesPresent) {
         buffer.getContext().eventDispatcher.startElement("ganssAdditionalDataChoices", -1);

         ganssAdditionalDataChoices = new GanssAdditionalDataChoices();
         ganssAdditionalDataChoices.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ganssAdditionalDataChoices", -1);
      }
      else {
         ganssAdditionalDataChoices = null;
      }

      // decode ganssAuxiliaryInformation

      buffer.getContext().eventDispatcher.startElement("ganssAuxiliaryInformation", -1);

      ganssAuxiliaryInformation = new Asn1Boolean();
      ganssAuxiliaryInformation.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ganssAuxiliaryInformation", -1);

      // decode ganssExtendedEphemeris

      if (ganssExtendedEphemerisPresent) {
         buffer.getContext().eventDispatcher.startElement("ganssExtendedEphemeris", -1);

         ganssExtendedEphemeris = new ExtendedEphemeris();
         ganssExtendedEphemeris.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ganssExtendedEphemeris", -1);
      }
      else {
         ganssExtendedEphemeris = null;
      }

      // decode ganssExtendedEphemerisCheck

      if (ganssExtendedEphemerisCheckPresent) {
         buffer.getContext().eventDispatcher.startElement("ganssExtendedEphemerisCheck", -1);

         ganssExtendedEphemerisCheck = new GanssExtendedEphCheck();
         ganssExtendedEphemerisCheck.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ganssExtendedEphemerisCheck", -1);
      }
      else {
         ganssExtendedEphemerisCheck = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("bds_DifferentialCorrectionPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("bds_GridModelReqPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode bds_DifferentialCorrection

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("bds_DifferentialCorrection", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            bds_DifferentialCorrection = new BDS_Sig_Id_Req();
            bds_DifferentialCorrection.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("bds_DifferentialCorrection", -1);

         }
         else {
            bds_DifferentialCorrection = null;
         }

         // decode bds_GridModelReq

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("bds_GridModelReq", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            bds_GridModelReq = new Asn1Boolean();
            bds_GridModelReq.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("bds_GridModelReq", -1);

         }
         else {
            bds_GridModelReq = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((bds_DifferentialCorrection != null) ||
      (bds_GridModelReq != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((ganssSBASid != null), null);
      buffer.encodeBit ((ganssDifferentialCorrection != null), null);
      buffer.encodeBit ((ganssNavigationModelData != null), null);
      buffer.encodeBit ((ganssTimeModels != null), null);
      buffer.encodeBit ((ganssDataBits != null), null);
      buffer.encodeBit ((ganssAdditionalDataChoices != null), null);
      buffer.encodeBit ((ganssExtendedEphemeris != null), null);
      buffer.encodeBit ((ganssExtendedEphemerisCheck != null), null);

      // encode ganssId

      if (ganssId != null) {
         buffer.getContext().eventDispatcher.startElement("ganssId", -1);

         ganssId.encode (buffer, 0, 15);

         buffer.getContext().eventDispatcher.endElement("ganssId", -1);
      }
      else throw new Asn1MissingRequiredException ("ganssId");

      // encode ganssSBASid

      if (ganssSBASid != null) {
         buffer.getContext().eventDispatcher.startElement("ganssSBASid", -1);

         ganssSBASid.encode (buffer, 3, 3);

         buffer.getContext().eventDispatcher.endElement("ganssSBASid", -1);
      }

      // encode ganssRealTimeIntegrity

      if (ganssRealTimeIntegrity != null) {
         buffer.getContext().eventDispatcher.startElement("ganssRealTimeIntegrity", -1);

         ganssRealTimeIntegrity.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ganssRealTimeIntegrity", -1);
      }
      else throw new Asn1MissingRequiredException ("ganssRealTimeIntegrity");

      // encode ganssDifferentialCorrection

      if (ganssDifferentialCorrection != null) {
         buffer.getContext().eventDispatcher.startElement("ganssDifferentialCorrection", -1);

         ganssDifferentialCorrection.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ganssDifferentialCorrection", -1);
      }

      // encode ganssAlmanac

      if (ganssAlmanac != null) {
         buffer.getContext().eventDispatcher.startElement("ganssAlmanac", -1);

         ganssAlmanac.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ganssAlmanac", -1);
      }
      else throw new Asn1MissingRequiredException ("ganssAlmanac");

      // encode ganssNavigationModelData

      if (ganssNavigationModelData != null) {
         buffer.getContext().eventDispatcher.startElement("ganssNavigationModelData", -1);

         ganssNavigationModelData.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ganssNavigationModelData", -1);
      }

      // encode ganssTimeModels

      if (ganssTimeModels != null) {
         buffer.getContext().eventDispatcher.startElement("ganssTimeModels", -1);

         ganssTimeModels.encode (buffer, 16, 16);

         buffer.getContext().eventDispatcher.endElement("ganssTimeModels", -1);
      }

      // encode ganssReferenceMeasurementInfo

      if (ganssReferenceMeasurementInfo != null) {
         buffer.getContext().eventDispatcher.startElement("ganssReferenceMeasurementInfo", -1);

         ganssReferenceMeasurementInfo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ganssReferenceMeasurementInfo", -1);
      }
      else throw new Asn1MissingRequiredException ("ganssReferenceMeasurementInfo");

      // encode ganssDataBits

      if (ganssDataBits != null) {
         buffer.getContext().eventDispatcher.startElement("ganssDataBits", -1);

         ganssDataBits.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ganssDataBits", -1);
      }

      // encode ganssUTCModel

      if (ganssUTCModel != null) {
         buffer.getContext().eventDispatcher.startElement("ganssUTCModel", -1);

         ganssUTCModel.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ganssUTCModel", -1);
      }
      else throw new Asn1MissingRequiredException ("ganssUTCModel");

      // encode ganssAdditionalDataChoices

      if (ganssAdditionalDataChoices != null) {
         buffer.getContext().eventDispatcher.startElement("ganssAdditionalDataChoices", -1);

         ganssAdditionalDataChoices.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ganssAdditionalDataChoices", -1);
      }

      // encode ganssAuxiliaryInformation

      if (ganssAuxiliaryInformation != null) {
         buffer.getContext().eventDispatcher.startElement("ganssAuxiliaryInformation", -1);

         ganssAuxiliaryInformation.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ganssAuxiliaryInformation", -1);
      }
      else throw new Asn1MissingRequiredException ("ganssAuxiliaryInformation");

      // encode ganssExtendedEphemeris

      if (ganssExtendedEphemeris != null) {
         buffer.getContext().eventDispatcher.startElement("ganssExtendedEphemeris", -1);

         ganssExtendedEphemeris.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ganssExtendedEphemeris", -1);
      }

      // encode ganssExtendedEphemerisCheck

      if (ganssExtendedEphemerisCheck != null) {
         buffer.getContext().eventDispatcher.startElement("ganssExtendedEphemerisCheck", -1);

         ganssExtendedEphemerisCheck.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ganssExtendedEphemerisCheck", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 2;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((bds_DifferentialCorrection != null), null);
         buffer.encodeBit ((bds_GridModelReq != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // bds_DifferentialCorrection

         if (bds_DifferentialCorrection != null) {
            buffer.reset();
            bds_DifferentialCorrection.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("bds_DifferentialCorrection", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("bds_DifferentialCorrection", -1);
         }

         // bds_GridModelReq

         if (bds_GridModelReq != null) {
            buffer.reset();
            bds_GridModelReq.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("bds_GridModelReq", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("bds_GridModelReq", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
