/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class AlmanacReducedKeplerianSet extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "AlmanacReducedKeplerianSet";
   }

   protected SV_ID svID;
   protected Asn1Integer redAlmDeltaA;
   protected Asn1Integer redAlmOmega0;
   protected Asn1Integer redAlmPhi0;
   protected Asn1Boolean redAlmL1Health;
   protected Asn1Boolean redAlmL2Health;
   protected Asn1Boolean redAlmL5Health;
   protected Asn1OpenExt extElem1;

   public AlmanacReducedKeplerianSet () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AlmanacReducedKeplerianSet (
      SV_ID svID_,
      Asn1Integer redAlmDeltaA_,
      Asn1Integer redAlmOmega0_,
      Asn1Integer redAlmPhi0_,
      Asn1Boolean redAlmL1Health_,
      Asn1Boolean redAlmL2Health_,
      Asn1Boolean redAlmL5Health_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setRedAlmDeltaA (redAlmDeltaA_);
      setRedAlmOmega0 (redAlmOmega0_);
      setRedAlmPhi0 (redAlmPhi0_);
      setRedAlmL1Health (redAlmL1Health_);
      setRedAlmL2Health (redAlmL2Health_);
      setRedAlmL5Health (redAlmL5Health_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AlmanacReducedKeplerianSet (SV_ID svID_,
      long redAlmDeltaA_,
      long redAlmOmega0_,
      long redAlmPhi0_,
      boolean redAlmL1Health_,
      boolean redAlmL2Health_,
      boolean redAlmL5Health_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setRedAlmDeltaA (redAlmDeltaA_);
      setRedAlmOmega0 (redAlmOmega0_);
      setRedAlmPhi0 (redAlmPhi0_);
      setRedAlmL1Health (redAlmL1Health_);
      setRedAlmL2Health (redAlmL2Health_);
      setRedAlmL5Health (redAlmL5Health_);
   }

   public void init () {
      svID = null;
      redAlmDeltaA = null;
      redAlmOmega0 = null;
      redAlmPhi0 = null;
      redAlmL1Health = null;
      redAlmL2Health = null;
      redAlmL5Health = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof AlmanacReducedKeplerianSet) ) return false;

      AlmanacReducedKeplerianSet rhs = (AlmanacReducedKeplerianSet) obj;

      if (svID == null) {
         if (rhs.svID != null) return false;
      }
      else {
         if (!svID.equals(rhs.svID)) {
            return false;
         }
      }

      if (redAlmDeltaA == null) {
         if (rhs.redAlmDeltaA != null) return false;
      }
      else {
         if (!redAlmDeltaA.equals(rhs.redAlmDeltaA)) {
            return false;
         }
      }

      if (redAlmOmega0 == null) {
         if (rhs.redAlmOmega0 != null) return false;
      }
      else {
         if (!redAlmOmega0.equals(rhs.redAlmOmega0)) {
            return false;
         }
      }

      if (redAlmPhi0 == null) {
         if (rhs.redAlmPhi0 != null) return false;
      }
      else {
         if (!redAlmPhi0.equals(rhs.redAlmPhi0)) {
            return false;
         }
      }

      if (redAlmL1Health == null) {
         if (rhs.redAlmL1Health != null) return false;
      }
      else {
         if (!redAlmL1Health.equals(rhs.redAlmL1Health)) {
            return false;
         }
      }

      if (redAlmL2Health == null) {
         if (rhs.redAlmL2Health != null) return false;
      }
      else {
         if (!redAlmL2Health.equals(rhs.redAlmL2Health)) {
            return false;
         }
      }

      if (redAlmL5Health == null) {
         if (rhs.redAlmL5Health != null) return false;
      }
      else {
         if (!redAlmL5Health.equals(rhs.redAlmL5Health)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (svID != null) __code = 31*__code + svID.hashCode();
      if (redAlmDeltaA != null) __code = 31*__code + redAlmDeltaA.hashCode();
      if (redAlmOmega0 != null) __code = 31*__code + redAlmOmega0.hashCode();
      if (redAlmPhi0 != null) __code = 31*__code + redAlmPhi0.hashCode();
      if (redAlmL1Health != null) __code = 31*__code + redAlmL1Health.hashCode();
      if (redAlmL2Health != null) __code = 31*__code + redAlmL2Health.hashCode();
      if (redAlmL5Health != null) __code = 31*__code + redAlmL5Health.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SvID
    */
   public SV_ID getSvID () {
      return svID;
   }

   public void setSvID (SV_ID value) {
      this.svID = value;
   }

   /**
    * Accessor/mutator methods for RedAlmDeltaA
    */
   public Asn1Integer getRedAlmDeltaA () {
      return redAlmDeltaA;
   }

   public void setRedAlmDeltaA (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.redAlmDeltaA = value;
   }

   public void setRedAlmDeltaA (long value) 
      throws Asn1Exception
   {
      setRedAlmDeltaA (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for RedAlmOmega0
    */
   public Asn1Integer getRedAlmOmega0 () {
      return redAlmOmega0;
   }

   public void setRedAlmOmega0 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -64 && value.value <= 63))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.redAlmOmega0 = value;
   }

   public void setRedAlmOmega0 (long value) 
      throws Asn1Exception
   {
      setRedAlmOmega0 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for RedAlmPhi0
    */
   public Asn1Integer getRedAlmPhi0 () {
      return redAlmPhi0;
   }

   public void setRedAlmPhi0 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -64 && value.value <= 63))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.redAlmPhi0 = value;
   }

   public void setRedAlmPhi0 (long value) 
      throws Asn1Exception
   {
      setRedAlmPhi0 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for RedAlmL1Health
    */
   public Asn1Boolean getRedAlmL1Health () {
      return redAlmL1Health;
   }

   public void setRedAlmL1Health (Asn1Boolean value) {
      this.redAlmL1Health = value;
   }

   public void setRedAlmL1Health (boolean value) {
      setRedAlmL1Health (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for RedAlmL2Health
    */
   public Asn1Boolean getRedAlmL2Health () {
      return redAlmL2Health;
   }

   public void setRedAlmL2Health (Asn1Boolean value) {
      this.redAlmL2Health = value;
   }

   public void setRedAlmL2Health (boolean value) {
      setRedAlmL2Health (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for RedAlmL5Health
    */
   public Asn1Boolean getRedAlmL5Health () {
      return redAlmL5Health;
   }

   public void setRedAlmL5Health (Asn1Boolean value) {
      this.redAlmL5Health = value;
   }

   public void setRedAlmL5Health (boolean value) {
      setRedAlmL5Health (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return svID;
         case 1: return redAlmDeltaA;
         case 2: return redAlmOmega0;
         case 3: return redAlmPhi0;
         case 4: return redAlmL1Health;
         case 5: return redAlmL2Health;
         case 6: return redAlmL5Health;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "svID";
         case 1: return "redAlmDeltaA";
         case 2: return "redAlmOmega0";
         case 3: return "redAlmPhi0";
         case 4: return "redAlmL1Health";
         case 5: return "redAlmL2Health";
         case 6: return "redAlmL5Health";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode svID

      buffer.getContext().eventDispatcher.startElement("svID", -1);

      svID = new SV_ID();
      svID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("svID", -1);

      // decode redAlmDeltaA

      buffer.getContext().eventDispatcher.startElement("redAlmDeltaA", -1);

      redAlmDeltaA = new Asn1Integer();
      redAlmDeltaA.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("redAlmDeltaA", -1);

      // decode redAlmOmega0

      buffer.getContext().eventDispatcher.startElement("redAlmOmega0", -1);

      redAlmOmega0 = new Asn1Integer();
      redAlmOmega0.decode (buffer, -64, 63);
      buffer.getContext().eventDispatcher.endElement("redAlmOmega0", -1);

      // decode redAlmPhi0

      buffer.getContext().eventDispatcher.startElement("redAlmPhi0", -1);

      redAlmPhi0 = new Asn1Integer();
      redAlmPhi0.decode (buffer, -64, 63);
      buffer.getContext().eventDispatcher.endElement("redAlmPhi0", -1);

      // decode redAlmL1Health

      buffer.getContext().eventDispatcher.startElement("redAlmL1Health", -1);

      redAlmL1Health = new Asn1Boolean();
      redAlmL1Health.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("redAlmL1Health", -1);

      // decode redAlmL2Health

      buffer.getContext().eventDispatcher.startElement("redAlmL2Health", -1);

      redAlmL2Health = new Asn1Boolean();
      redAlmL2Health.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("redAlmL2Health", -1);

      // decode redAlmL5Health

      buffer.getContext().eventDispatcher.startElement("redAlmL5Health", -1);

      redAlmL5Health = new Asn1Boolean();
      redAlmL5Health.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("redAlmL5Health", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode svID

      if (svID != null) {
         buffer.getContext().eventDispatcher.startElement("svID", -1);

         svID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("svID", -1);
      }
      else throw new Asn1MissingRequiredException ("svID");

      // encode redAlmDeltaA

      if (redAlmDeltaA != null) {
         buffer.getContext().eventDispatcher.startElement("redAlmDeltaA", -1);

         redAlmDeltaA.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("redAlmDeltaA", -1);
      }
      else throw new Asn1MissingRequiredException ("redAlmDeltaA");

      // encode redAlmOmega0

      if (redAlmOmega0 != null) {
         buffer.getContext().eventDispatcher.startElement("redAlmOmega0", -1);

         redAlmOmega0.encode (buffer, -64, 63);

         buffer.getContext().eventDispatcher.endElement("redAlmOmega0", -1);
      }
      else throw new Asn1MissingRequiredException ("redAlmOmega0");

      // encode redAlmPhi0

      if (redAlmPhi0 != null) {
         buffer.getContext().eventDispatcher.startElement("redAlmPhi0", -1);

         redAlmPhi0.encode (buffer, -64, 63);

         buffer.getContext().eventDispatcher.endElement("redAlmPhi0", -1);
      }
      else throw new Asn1MissingRequiredException ("redAlmPhi0");

      // encode redAlmL1Health

      if (redAlmL1Health != null) {
         buffer.getContext().eventDispatcher.startElement("redAlmL1Health", -1);

         redAlmL1Health.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("redAlmL1Health", -1);
      }
      else throw new Asn1MissingRequiredException ("redAlmL1Health");

      // encode redAlmL2Health

      if (redAlmL2Health != null) {
         buffer.getContext().eventDispatcher.startElement("redAlmL2Health", -1);

         redAlmL2Health.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("redAlmL2Health", -1);
      }
      else throw new Asn1MissingRequiredException ("redAlmL2Health");

      // encode redAlmL5Health

      if (redAlmL5Health != null) {
         buffer.getContext().eventDispatcher.startElement("redAlmL5Health", -1);

         redAlmL5Health.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("redAlmL5Health", -1);
      }
      else throw new Asn1MissingRequiredException ("redAlmL5Health");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
