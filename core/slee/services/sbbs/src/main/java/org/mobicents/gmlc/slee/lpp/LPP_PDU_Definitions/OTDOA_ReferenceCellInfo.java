/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class OTDOA_ReferenceCellInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "OTDOA-ReferenceCellInfo";
   }

   protected Asn1Integer physCellId;
   protected ECGI cellGlobalId;  // optional
   protected ARFCN_ValueEUTRA earfcnRef;  // optional
   protected OTDOA_ReferenceCellInfo_antennaPortConfig antennaPortConfig = null;  // optional
   protected OTDOA_ReferenceCellInfo_cpLength cpLength = null;
   protected PRS_Info prsInfo;  // optional
   protected ARFCN_ValueEUTRA_v9a0 earfcnRef_v9a0;  // optional
   protected Asn1Integer tpId_r14;  // optional
   protected OTDOA_ReferenceCellInfo_cpLengthCRS_r14 cpLengthCRS_r14 = null;  // optional
   protected Asn1Boolean sameMBSFNconfigRef_r14;  // optional
   protected OTDOA_ReferenceCellInfo_dlBandwidth_r14 dlBandwidth_r14 = null;  // optional
   protected OTDOA_ReferenceCellInfo_addPRSconfigRef_r14 addPRSconfigRef_r14;  // optional
   protected Asn1Integer nr_LTE_SFN_Offset_r15;  // optional
   protected TDD_Config_v1520 tdd_config_v1520;  // optional
   protected Asn1Integer nr_LTE_fineTiming_Offset_r15;  // optional
   protected Asn1OpenExt extElem1;

   public OTDOA_ReferenceCellInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public OTDOA_ReferenceCellInfo (
      Asn1Integer physCellId_,
      ECGI cellGlobalId_,
      ARFCN_ValueEUTRA earfcnRef_,
      OTDOA_ReferenceCellInfo_antennaPortConfig antennaPortConfig_,
      OTDOA_ReferenceCellInfo_cpLength cpLength_,
      PRS_Info prsInfo_,
      ARFCN_ValueEUTRA_v9a0 earfcnRef_v9a0_,
      Asn1Integer tpId_r14_,
      OTDOA_ReferenceCellInfo_cpLengthCRS_r14 cpLengthCRS_r14_,
      Asn1Boolean sameMBSFNconfigRef_r14_,
      OTDOA_ReferenceCellInfo_dlBandwidth_r14 dlBandwidth_r14_,
      OTDOA_ReferenceCellInfo_addPRSconfigRef_r14 addPRSconfigRef_r14_,
      Asn1Integer nr_LTE_SFN_Offset_r15_,
      TDD_Config_v1520 tdd_config_v1520_,
      Asn1Integer nr_LTE_fineTiming_Offset_r15_
   ) throws Asn1Exception {
      super();
      setPhysCellId (physCellId_);
      setCellGlobalId (cellGlobalId_);
      setEarfcnRef (earfcnRef_);
      setAntennaPortConfig (antennaPortConfig_);
      setCpLength (cpLength_);
      setPrsInfo (prsInfo_);
      setEarfcnRef_v9a0 (earfcnRef_v9a0_);
      setTpId_r14 (tpId_r14_);
      setCpLengthCRS_r14 (cpLengthCRS_r14_);
      setSameMBSFNconfigRef_r14 (sameMBSFNconfigRef_r14_);
      setDlBandwidth_r14 (dlBandwidth_r14_);
      setAddPRSconfigRef_r14 (addPRSconfigRef_r14_);
      setNr_LTE_SFN_Offset_r15 (nr_LTE_SFN_Offset_r15_);
      setTdd_config_v1520 (tdd_config_v1520_);
      setNr_LTE_fineTiming_Offset_r15 (nr_LTE_fineTiming_Offset_r15_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public OTDOA_ReferenceCellInfo (
      Asn1Integer physCellId_,
      OTDOA_ReferenceCellInfo_cpLength cpLength_
   ) throws Asn1Exception {
      super();
      setPhysCellId (physCellId_);
      setCpLength (cpLength_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public OTDOA_ReferenceCellInfo (long physCellId_,
      ECGI cellGlobalId_,
      long earfcnRef_,
      OTDOA_ReferenceCellInfo_antennaPortConfig antennaPortConfig_,
      OTDOA_ReferenceCellInfo_cpLength cpLength_,
      PRS_Info prsInfo_,
      long earfcnRef_v9a0_,
      long tpId_r14_,
      OTDOA_ReferenceCellInfo_cpLengthCRS_r14 cpLengthCRS_r14_,
      boolean sameMBSFNconfigRef_r14_,
      OTDOA_ReferenceCellInfo_dlBandwidth_r14 dlBandwidth_r14_,
      OTDOA_ReferenceCellInfo_addPRSconfigRef_r14 addPRSconfigRef_r14_,
      long nr_LTE_SFN_Offset_r15_,
      TDD_Config_v1520 tdd_config_v1520_,
      long nr_LTE_fineTiming_Offset_r15_
   ) throws Asn1Exception {
      super();
      setPhysCellId (physCellId_);
      setCellGlobalId (cellGlobalId_);
      setEarfcnRef (earfcnRef_);
      setAntennaPortConfig (antennaPortConfig_);
      setCpLength (cpLength_);
      setPrsInfo (prsInfo_);
      setEarfcnRef_v9a0 (earfcnRef_v9a0_);
      setTpId_r14 (tpId_r14_);
      setCpLengthCRS_r14 (cpLengthCRS_r14_);
      setSameMBSFNconfigRef_r14 (sameMBSFNconfigRef_r14_);
      setDlBandwidth_r14 (dlBandwidth_r14_);
      setAddPRSconfigRef_r14 (addPRSconfigRef_r14_);
      setNr_LTE_SFN_Offset_r15 (nr_LTE_SFN_Offset_r15_);
      setTdd_config_v1520 (tdd_config_v1520_);
      setNr_LTE_fineTiming_Offset_r15 (nr_LTE_fineTiming_Offset_r15_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public OTDOA_ReferenceCellInfo (
      long physCellId_,
      OTDOA_ReferenceCellInfo_cpLength cpLength_
   ) throws Asn1Exception {
      super();
      setPhysCellId (physCellId_);
      setCpLength (cpLength_);
   }

   public void init () {
      physCellId = null;
      cellGlobalId = null;
      earfcnRef = null;
      antennaPortConfig = null;
      cpLength = null;
      prsInfo = null;
      earfcnRef_v9a0 = null;
      tpId_r14 = null;
      cpLengthCRS_r14 = null;
      sameMBSFNconfigRef_r14 = null;
      dlBandwidth_r14 = null;
      addPRSconfigRef_r14 = null;
      nr_LTE_SFN_Offset_r15 = null;
      tdd_config_v1520 = null;
      nr_LTE_fineTiming_Offset_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof OTDOA_ReferenceCellInfo) ) return false;

      OTDOA_ReferenceCellInfo rhs = (OTDOA_ReferenceCellInfo) obj;

      if (physCellId == null) {
         if (rhs.physCellId != null) return false;
      }
      else {
         if (!physCellId.equals(rhs.physCellId)) {
            return false;
         }
      }

      if (cellGlobalId == null) {
         if (rhs.cellGlobalId != null) return false;
      }
      else {
         if (!cellGlobalId.equals(rhs.cellGlobalId)) {
            return false;
         }
      }

      if (earfcnRef == null) {
         if (rhs.earfcnRef != null) return false;
      }
      else {
         if (!earfcnRef.equals(rhs.earfcnRef)) {
            return false;
         }
      }

      if (antennaPortConfig == null) {
         if (rhs.antennaPortConfig != null) return false;
      }
      else {
         if (!antennaPortConfig.equals(rhs.antennaPortConfig)) {
            return false;
         }
      }

      if (cpLength == null) {
         if (rhs.cpLength != null) return false;
      }
      else {
         if (!cpLength.equals(rhs.cpLength)) {
            return false;
         }
      }

      if (prsInfo == null) {
         if (rhs.prsInfo != null) return false;
      }
      else {
         if (!prsInfo.equals(rhs.prsInfo)) {
            return false;
         }
      }

      if (earfcnRef_v9a0 == null) {
         if (rhs.earfcnRef_v9a0 != null) return false;
      }
      else {
         if (!earfcnRef_v9a0.equals(rhs.earfcnRef_v9a0)) {
            return false;
         }
      }

      if (tpId_r14 == null) {
         if (rhs.tpId_r14 != null) return false;
      }
      else {
         if (!tpId_r14.equals(rhs.tpId_r14)) {
            return false;
         }
      }

      if (cpLengthCRS_r14 == null) {
         if (rhs.cpLengthCRS_r14 != null) return false;
      }
      else {
         if (!cpLengthCRS_r14.equals(rhs.cpLengthCRS_r14)) {
            return false;
         }
      }

      if (sameMBSFNconfigRef_r14 == null) {
         if (rhs.sameMBSFNconfigRef_r14 != null) return false;
      }
      else {
         if (!sameMBSFNconfigRef_r14.equals(rhs.sameMBSFNconfigRef_r14)) {
            return false;
         }
      }

      if (dlBandwidth_r14 == null) {
         if (rhs.dlBandwidth_r14 != null) return false;
      }
      else {
         if (!dlBandwidth_r14.equals(rhs.dlBandwidth_r14)) {
            return false;
         }
      }

      if (addPRSconfigRef_r14 == null) {
         if (rhs.addPRSconfigRef_r14 != null) return false;
      }
      else {
         if (!addPRSconfigRef_r14.equals(rhs.addPRSconfigRef_r14)) {
            return false;
         }
      }

      if (nr_LTE_SFN_Offset_r15 == null) {
         if (rhs.nr_LTE_SFN_Offset_r15 != null) return false;
      }
      else {
         if (!nr_LTE_SFN_Offset_r15.equals(rhs.nr_LTE_SFN_Offset_r15)) {
            return false;
         }
      }

      if (tdd_config_v1520 == null) {
         if (rhs.tdd_config_v1520 != null) return false;
      }
      else {
         if (!tdd_config_v1520.equals(rhs.tdd_config_v1520)) {
            return false;
         }
      }

      if (nr_LTE_fineTiming_Offset_r15 == null) {
         if (rhs.nr_LTE_fineTiming_Offset_r15 != null) return false;
      }
      else {
         if (!nr_LTE_fineTiming_Offset_r15.equals(rhs.nr_LTE_fineTiming_Offset_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (physCellId != null) __code = 31*__code + physCellId.hashCode();
      if (cellGlobalId != null) __code = 31*__code + cellGlobalId.hashCode();
      if (earfcnRef != null) __code = 31*__code + earfcnRef.hashCode();
      if (antennaPortConfig != null) __code = 31*__code + antennaPortConfig.hashCode();
      if (cpLength != null) __code = 31*__code + cpLength.hashCode();
      if (prsInfo != null) __code = 31*__code + prsInfo.hashCode();
      if (earfcnRef_v9a0 != null) __code = 31*__code + earfcnRef_v9a0.hashCode();
      if (tpId_r14 != null) __code = 31*__code + tpId_r14.hashCode();
      if (cpLengthCRS_r14 != null) __code = 31*__code + cpLengthCRS_r14.hashCode();
      if (sameMBSFNconfigRef_r14 != null) __code = 31*__code + sameMBSFNconfigRef_r14.hashCode();
      if (dlBandwidth_r14 != null) __code = 31*__code + dlBandwidth_r14.hashCode();
      if (addPRSconfigRef_r14 != null) __code = 31*__code + addPRSconfigRef_r14.hashCode();
      if (nr_LTE_SFN_Offset_r15 != null) __code = 31*__code + nr_LTE_SFN_Offset_r15.hashCode();
      if (tdd_config_v1520 != null) __code = 31*__code + tdd_config_v1520.hashCode();
      if (nr_LTE_fineTiming_Offset_r15 != null) __code = 31*__code + nr_LTE_fineTiming_Offset_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for PhysCellId
    */
   public Asn1Integer getPhysCellId () {
      return physCellId;
   }

   public void setPhysCellId (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 503))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.physCellId = value;
   }

   public void setPhysCellId (long value) 
      throws Asn1Exception
   {
      setPhysCellId (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CellGlobalId
    */
   public ECGI getCellGlobalId () {
      return cellGlobalId;
   }

   public void setCellGlobalId (ECGI value) {
      this.cellGlobalId = value;
   }

   public boolean hasCellGlobalId () {
      return (cellGlobalId != null);
   }

   /**
    * Accessor/mutator methods for EarfcnRef
    */
   public ARFCN_ValueEUTRA getEarfcnRef () {
      return earfcnRef;
   }

   public void setEarfcnRef (ARFCN_ValueEUTRA value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.earfcnRef = value;
   }

   public void setEarfcnRef (long value) 
      throws Asn1Exception
   {
      setEarfcnRef (new ARFCN_ValueEUTRA(value));
   }
   public boolean hasEarfcnRef () {
      return (earfcnRef != null);
   }

   /**
    * Accessor/mutator methods for AntennaPortConfig
    */
   public OTDOA_ReferenceCellInfo_antennaPortConfig getAntennaPortConfig () {
      return antennaPortConfig;
   }

   public void setAntennaPortConfig (OTDOA_ReferenceCellInfo_antennaPortConfig value) {
      this.antennaPortConfig = value;
   }

   public boolean hasAntennaPortConfig () {
      return (antennaPortConfig != null);
   }

   /**
    * Accessor/mutator methods for CpLength
    */
   public OTDOA_ReferenceCellInfo_cpLength getCpLength () {
      return cpLength;
   }

   public void setCpLength (OTDOA_ReferenceCellInfo_cpLength value) {
      this.cpLength = value;
   }

   /**
    * Accessor/mutator methods for PrsInfo
    */
   public PRS_Info getPrsInfo () {
      return prsInfo;
   }

   public void setPrsInfo (PRS_Info value) {
      this.prsInfo = value;
   }

   public boolean hasPrsInfo () {
      return (prsInfo != null);
   }

   /**
    * Accessor/mutator methods for EarfcnRef_v9a0
    */
   public ARFCN_ValueEUTRA_v9a0 getEarfcnRef_v9a0 () {
      return earfcnRef_v9a0;
   }

   public void setEarfcnRef_v9a0 (ARFCN_ValueEUTRA_v9a0 value) 
      throws Asn1Exception
   {
      if (!((value.value >= 65536 && value.value <= 262143))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.earfcnRef_v9a0 = value;
   }

   public void setEarfcnRef_v9a0 (long value) 
      throws Asn1Exception
   {
      setEarfcnRef_v9a0 (new ARFCN_ValueEUTRA_v9a0(value));
   }
   public boolean hasEarfcnRef_v9a0 () {
      return (earfcnRef_v9a0 != null);
   }

   /**
    * Accessor/mutator methods for TpId_r14
    */
   public Asn1Integer getTpId_r14 () {
      return tpId_r14;
   }

   public void setTpId_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.tpId_r14 = value;
   }

   public void setTpId_r14 (long value) 
      throws Asn1Exception
   {
      setTpId_r14 (new Asn1Integer(value));
   }
   public boolean hasTpId_r14 () {
      return (tpId_r14 != null);
   }

   /**
    * Accessor/mutator methods for CpLengthCRS_r14
    */
   public OTDOA_ReferenceCellInfo_cpLengthCRS_r14 getCpLengthCRS_r14 () {
      return cpLengthCRS_r14;
   }

   public void setCpLengthCRS_r14 (OTDOA_ReferenceCellInfo_cpLengthCRS_r14 value) {
      this.cpLengthCRS_r14 = value;
   }

   public boolean hasCpLengthCRS_r14 () {
      return (cpLengthCRS_r14 != null);
   }

   /**
    * Accessor/mutator methods for SameMBSFNconfigRef_r14
    */
   public Asn1Boolean getSameMBSFNconfigRef_r14 () {
      return sameMBSFNconfigRef_r14;
   }

   public void setSameMBSFNconfigRef_r14 (Asn1Boolean value) {
      this.sameMBSFNconfigRef_r14 = value;
   }

   public void setSameMBSFNconfigRef_r14 (boolean value) {
      setSameMBSFNconfigRef_r14 (new Asn1Boolean(value));
   }
   public boolean hasSameMBSFNconfigRef_r14 () {
      return (sameMBSFNconfigRef_r14 != null);
   }

   /**
    * Accessor/mutator methods for DlBandwidth_r14
    */
   public OTDOA_ReferenceCellInfo_dlBandwidth_r14 getDlBandwidth_r14 () {
      return dlBandwidth_r14;
   }

   public void setDlBandwidth_r14 (OTDOA_ReferenceCellInfo_dlBandwidth_r14 value) {
      this.dlBandwidth_r14 = value;
   }

   public boolean hasDlBandwidth_r14 () {
      return (dlBandwidth_r14 != null);
   }

   /**
    * Accessor/mutator methods for AddPRSconfigRef_r14
    */
   public OTDOA_ReferenceCellInfo_addPRSconfigRef_r14 getAddPRSconfigRef_r14 () {
      return addPRSconfigRef_r14;
   }

   public void setAddPRSconfigRef_r14 (OTDOA_ReferenceCellInfo_addPRSconfigRef_r14 value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 2))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.addPRSconfigRef_r14 = value;
   }

   public boolean hasAddPRSconfigRef_r14 () {
      return (addPRSconfigRef_r14 != null);
   }

   /**
    * Accessor/mutator methods for Nr_LTE_SFN_Offset_r15
    */
   public Asn1Integer getNr_LTE_SFN_Offset_r15 () {
      return nr_LTE_SFN_Offset_r15;
   }

   public void setNr_LTE_SFN_Offset_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nr_LTE_SFN_Offset_r15 = value;
   }

   public void setNr_LTE_SFN_Offset_r15 (long value) 
      throws Asn1Exception
   {
      setNr_LTE_SFN_Offset_r15 (new Asn1Integer(value));
   }
   public boolean hasNr_LTE_SFN_Offset_r15 () {
      return (nr_LTE_SFN_Offset_r15 != null);
   }

   /**
    * Accessor/mutator methods for Tdd_config_v1520
    */
   public TDD_Config_v1520 getTdd_config_v1520 () {
      return tdd_config_v1520;
   }

   public void setTdd_config_v1520 (TDD_Config_v1520 value) {
      this.tdd_config_v1520 = value;
   }

   public boolean hasTdd_config_v1520 () {
      return (tdd_config_v1520 != null);
   }

   /**
    * Accessor/mutator methods for Nr_LTE_fineTiming_Offset_r15
    */
   public Asn1Integer getNr_LTE_fineTiming_Offset_r15 () {
      return nr_LTE_fineTiming_Offset_r15;
   }

   public void setNr_LTE_fineTiming_Offset_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 19))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nr_LTE_fineTiming_Offset_r15 = value;
   }

   public void setNr_LTE_fineTiming_Offset_r15 (long value) 
      throws Asn1Exception
   {
      setNr_LTE_fineTiming_Offset_r15 (new Asn1Integer(value));
   }
   public boolean hasNr_LTE_fineTiming_Offset_r15 () {
      return (nr_LTE_fineTiming_Offset_r15 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 16; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return physCellId;
         case 1: return cellGlobalId;
         case 2: return earfcnRef;
         case 3: return antennaPortConfig;
         case 4: return cpLength;
         case 5: return prsInfo;
         case 6: return earfcnRef_v9a0;
         case 7: return tpId_r14;
         case 8: return cpLengthCRS_r14;
         case 9: return sameMBSFNconfigRef_r14;
         case 10: return dlBandwidth_r14;
         case 11: return addPRSconfigRef_r14;
         case 12: return nr_LTE_SFN_Offset_r15;
         case 13: return tdd_config_v1520;
         case 14: return nr_LTE_fineTiming_Offset_r15;
         case 15: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "physCellId";
         case 1: return "cellGlobalId";
         case 2: return "earfcnRef";
         case 3: return "antennaPortConfig";
         case 4: return "cpLength";
         case 5: return "prsInfo";
         case 6: return "earfcnRef-v9a0";
         case 7: return "tpId-r14";
         case 8: return "cpLengthCRS-r14";
         case 9: return "sameMBSFNconfigRef-r14";
         case 10: return "dlBandwidth-r14";
         case 11: return "addPRSconfigRef-r14";
         case 12: return "nr-LTE-SFN-Offset-r15";
         case 13: return "tdd-config-v1520";
         case 14: return "nr-LTE-fineTiming-Offset-r15";
         case 15: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean cellGlobalIdPresent = buffer.decodeBit ("cellGlobalIdPresent");
      boolean earfcnRefPresent = buffer.decodeBit ("earfcnRefPresent");
      boolean antennaPortConfigPresent = buffer.decodeBit ("antennaPortConfigPresent");
      boolean prsInfoPresent = buffer.decodeBit ("prsInfoPresent");

      // decode physCellId

      buffer.getContext().eventDispatcher.startElement("physCellId", -1);

      physCellId = new Asn1Integer();
      physCellId.decode (buffer, 0, 503);
      buffer.getContext().eventDispatcher.endElement("physCellId", -1);

      // decode cellGlobalId

      if (cellGlobalIdPresent) {
         buffer.getContext().eventDispatcher.startElement("cellGlobalId", -1);

         cellGlobalId = new ECGI();
         cellGlobalId.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellGlobalId", -1);
      }
      else {
         cellGlobalId = null;
      }

      // decode earfcnRef

      if (earfcnRefPresent) {
         buffer.getContext().eventDispatcher.startElement("earfcnRef", -1);

         earfcnRef = new ARFCN_ValueEUTRA();
         earfcnRef.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("earfcnRef", -1);
      }
      else {
         earfcnRef = null;
      }

      // decode antennaPortConfig

      if (antennaPortConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("antennaPortConfig", -1);

         int tval = OTDOA_ReferenceCellInfo_antennaPortConfig.decodeEnumValue (buffer);
         antennaPortConfig = OTDOA_ReferenceCellInfo_antennaPortConfig.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("antennaPortConfig", -1);
      }
      else {
         antennaPortConfig = null;
      }

      // decode cpLength

      buffer.getContext().eventDispatcher.startElement("cpLength", -1);

      {
         int tval = OTDOA_ReferenceCellInfo_cpLength.decodeEnumValue (buffer);
         cpLength = OTDOA_ReferenceCellInfo_cpLength.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("cpLength", -1);

      // decode prsInfo

      if (prsInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("prsInfo", -1);

         prsInfo = new PRS_Info();
         prsInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("prsInfo", -1);
      }
      else {
         prsInfo = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("earfcnRef_v9a0Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("tpId_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("cpLengthCRS_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("sameMBSFNconfigRef_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("dlBandwidth_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("addPRSconfigRef_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("nr_LTE_SFN_Offset_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("tdd_config_v1520Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("nr_LTE_fineTiming_Offset_r15Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode earfcnRef_v9a0

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("earfcnRef_v9a0", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            earfcnRef_v9a0 = new ARFCN_ValueEUTRA_v9a0();
            earfcnRef_v9a0.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("earfcnRef_v9a0", -1);

         }
         else {
            earfcnRef_v9a0 = null;
         }

         // decode tpId_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("tpId_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            tpId_r14 = new Asn1Integer();
            tpId_r14.decode (buffer, 0, 4095);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("tpId_r14", -1);

         }
         else {
            tpId_r14 = null;
         }

         // decode cpLengthCRS_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("cpLengthCRS_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = OTDOA_ReferenceCellInfo_cpLengthCRS_r14.decodeEnumValue (buffer);
               cpLengthCRS_r14 = OTDOA_ReferenceCellInfo_cpLengthCRS_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("cpLengthCRS_r14", -1);

         }
         else {
            cpLengthCRS_r14 = null;
         }

         // decode sameMBSFNconfigRef_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("sameMBSFNconfigRef_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            sameMBSFNconfigRef_r14 = new Asn1Boolean();
            sameMBSFNconfigRef_r14.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("sameMBSFNconfigRef_r14", -1);

         }
         else {
            sameMBSFNconfigRef_r14 = null;
         }

         // decode dlBandwidth_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("dlBandwidth_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = OTDOA_ReferenceCellInfo_dlBandwidth_r14.decodeEnumValue (buffer);
               dlBandwidth_r14 = OTDOA_ReferenceCellInfo_dlBandwidth_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("dlBandwidth_r14", -1);

         }
         else {
            dlBandwidth_r14 = null;
         }

         // decode addPRSconfigRef_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("addPRSconfigRef_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            addPRSconfigRef_r14 = new OTDOA_ReferenceCellInfo_addPRSconfigRef_r14();
            addPRSconfigRef_r14.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("addPRSconfigRef_r14", -1);

         }
         else {
            addPRSconfigRef_r14 = null;
         }

         // decode nr_LTE_SFN_Offset_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("nr_LTE_SFN_Offset_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            nr_LTE_SFN_Offset_r15 = new Asn1Integer();
            nr_LTE_SFN_Offset_r15.decode (buffer, 0, 1023);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("nr_LTE_SFN_Offset_r15", -1);

         }
         else {
            nr_LTE_SFN_Offset_r15 = null;
         }

         // decode tdd_config_v1520

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("tdd_config_v1520", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            tdd_config_v1520 = new TDD_Config_v1520();
            tdd_config_v1520.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("tdd_config_v1520", -1);

         }
         else {
            tdd_config_v1520 = null;
         }

         // decode nr_LTE_fineTiming_Offset_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("nr_LTE_fineTiming_Offset_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            nr_LTE_fineTiming_Offset_r15 = new Asn1Integer();
            nr_LTE_fineTiming_Offset_r15.decode (buffer, 0, 19);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("nr_LTE_fineTiming_Offset_r15", -1);

         }
         else {
            nr_LTE_fineTiming_Offset_r15 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((earfcnRef_v9a0 != null) ||
      (tpId_r14 != null) ||
      (cpLengthCRS_r14 != null) ||
      (sameMBSFNconfigRef_r14 != null) ||
      (dlBandwidth_r14 != null) ||
      (addPRSconfigRef_r14 != null) ||
      (nr_LTE_SFN_Offset_r15 != null) ||
      (tdd_config_v1520 != null) ||
      (nr_LTE_fineTiming_Offset_r15 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((cellGlobalId != null), null);
      buffer.encodeBit ((earfcnRef != null), null);
      buffer.encodeBit ((antennaPortConfig != null), null);
      buffer.encodeBit ((prsInfo != null), null);

      // encode physCellId

      if (physCellId != null) {
         buffer.getContext().eventDispatcher.startElement("physCellId", -1);

         physCellId.encode (buffer, 0, 503);

         buffer.getContext().eventDispatcher.endElement("physCellId", -1);
      }
      else throw new Asn1MissingRequiredException ("physCellId");

      // encode cellGlobalId

      if (cellGlobalId != null) {
         buffer.getContext().eventDispatcher.startElement("cellGlobalId", -1);

         cellGlobalId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cellGlobalId", -1);
      }

      // encode earfcnRef

      if (earfcnRef != null) {
         buffer.getContext().eventDispatcher.startElement("earfcnRef", -1);

         earfcnRef.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("earfcnRef", -1);
      }

      // encode antennaPortConfig

      if (antennaPortConfig != null) {
         buffer.getContext().eventDispatcher.startElement("antennaPortConfig", -1);

         antennaPortConfig.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("antennaPortConfig", -1);
      }

      // encode cpLength

      if (cpLength != null) {
         buffer.getContext().eventDispatcher.startElement("cpLength", -1);

         cpLength.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cpLength", -1);
      }
      else throw new Asn1MissingRequiredException ("cpLength");

      // encode prsInfo

      if (prsInfo != null) {
         buffer.getContext().eventDispatcher.startElement("prsInfo", -1);

         prsInfo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("prsInfo", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 9;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((earfcnRef_v9a0 != null), null);
         buffer.encodeBit ((tpId_r14 != null), null);
         buffer.encodeBit ((cpLengthCRS_r14 != null), null);
         buffer.encodeBit ((sameMBSFNconfigRef_r14 != null), null);
         buffer.encodeBit ((dlBandwidth_r14 != null), null);
         buffer.encodeBit ((addPRSconfigRef_r14 != null), null);
         buffer.encodeBit ((nr_LTE_SFN_Offset_r15 != null), null);
         buffer.encodeBit ((tdd_config_v1520 != null), null);
         buffer.encodeBit ((nr_LTE_fineTiming_Offset_r15 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // earfcnRef_v9a0

         if (earfcnRef_v9a0 != null) {
            buffer.reset();
            earfcnRef_v9a0.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("earfcnRef_v9a0", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("earfcnRef_v9a0", -1);
         }

         // tpId_r14

         if (tpId_r14 != null) {
            buffer.reset();
            tpId_r14.encode (buffer, 0, 4095);
            buffer.getContext().eventDispatcher.startElement("tpId_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("tpId_r14", -1);
         }

         // cpLengthCRS_r14

         if (cpLengthCRS_r14 != null) {
            buffer.reset();
            cpLengthCRS_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("cpLengthCRS_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("cpLengthCRS_r14", -1);
         }

         // sameMBSFNconfigRef_r14

         if (sameMBSFNconfigRef_r14 != null) {
            buffer.reset();
            sameMBSFNconfigRef_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("sameMBSFNconfigRef_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("sameMBSFNconfigRef_r14", -1);
         }

         // dlBandwidth_r14

         if (dlBandwidth_r14 != null) {
            buffer.reset();
            dlBandwidth_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("dlBandwidth_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("dlBandwidth_r14", -1);
         }

         // addPRSconfigRef_r14

         if (addPRSconfigRef_r14 != null) {
            buffer.reset();
            addPRSconfigRef_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("addPRSconfigRef_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("addPRSconfigRef_r14", -1);
         }

         // nr_LTE_SFN_Offset_r15

         if (nr_LTE_SFN_Offset_r15 != null) {
            buffer.reset();
            nr_LTE_SFN_Offset_r15.encode (buffer, 0, 1023);
            buffer.getContext().eventDispatcher.startElement("nr_LTE_SFN_Offset_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("nr_LTE_SFN_Offset_r15", -1);
         }

         // tdd_config_v1520

         if (tdd_config_v1520 != null) {
            buffer.reset();
            tdd_config_v1520.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("tdd_config_v1520", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("tdd_config_v1520", -1);
         }

         // nr_LTE_fineTiming_Offset_r15

         if (nr_LTE_fineTiming_Offset_r15 != null) {
            buffer.reset();
            nr_LTE_fineTiming_Offset_r15.encode (buffer, 0, 19);
            buffer.getContext().eventDispatcher.startElement("nr_LTE_fineTiming_Offset_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("nr_LTE_fineTiming_Offset_r15", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
