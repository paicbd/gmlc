/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class OTDOA_SignalMeasurementInformation extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "OTDOA-SignalMeasurementInformation";
   }

   protected Asn1BitString systemFrameNumber;
   protected Asn1Integer physCellIdRef;
   protected ECGI cellGlobalIdRef;  // optional
   protected ARFCN_ValueEUTRA earfcnRef;  // optional
   protected OTDOA_MeasQuality referenceQuality;  // optional
   protected NeighbourMeasurementList neighbourMeasurementList;
   protected ARFCN_ValueEUTRA_v9a0 earfcnRef_v9a0;  // optional
   protected Asn1Integer tpIdRef_r14;  // optional
   protected Asn1Integer prsIdRef_r14;  // optional
   protected AdditionalPathList_r14 additionalPathsRef_r14;  // optional
   protected Asn1Integer nprsIdRef_r14;  // optional
   protected CarrierFreqOffsetNB_r14 carrierFreqOffsetNB_Ref_r14 = null;  // optional
   protected Asn1BitString hyperSFN_r14;  // optional
   protected MotionTimeSource_r15 motionTimeSource_r15;  // optional
   protected Asn1OpenExt extElem1;

   public OTDOA_SignalMeasurementInformation () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public OTDOA_SignalMeasurementInformation (
      Asn1BitString systemFrameNumber_,
      Asn1Integer physCellIdRef_,
      ECGI cellGlobalIdRef_,
      ARFCN_ValueEUTRA earfcnRef_,
      OTDOA_MeasQuality referenceQuality_,
      NeighbourMeasurementList neighbourMeasurementList_,
      ARFCN_ValueEUTRA_v9a0 earfcnRef_v9a0_,
      Asn1Integer tpIdRef_r14_,
      Asn1Integer prsIdRef_r14_,
      AdditionalPathList_r14 additionalPathsRef_r14_,
      Asn1Integer nprsIdRef_r14_,
      CarrierFreqOffsetNB_r14 carrierFreqOffsetNB_Ref_r14_,
      Asn1BitString hyperSFN_r14_,
      MotionTimeSource_r15 motionTimeSource_r15_
   ) throws Asn1Exception {
      super();
      setSystemFrameNumber (systemFrameNumber_);
      setPhysCellIdRef (physCellIdRef_);
      setCellGlobalIdRef (cellGlobalIdRef_);
      setEarfcnRef (earfcnRef_);
      setReferenceQuality (referenceQuality_);
      setNeighbourMeasurementList (neighbourMeasurementList_);
      setEarfcnRef_v9a0 (earfcnRef_v9a0_);
      setTpIdRef_r14 (tpIdRef_r14_);
      setPrsIdRef_r14 (prsIdRef_r14_);
      setAdditionalPathsRef_r14 (additionalPathsRef_r14_);
      setNprsIdRef_r14 (nprsIdRef_r14_);
      setCarrierFreqOffsetNB_Ref_r14 (carrierFreqOffsetNB_Ref_r14_);
      setHyperSFN_r14 (hyperSFN_r14_);
      setMotionTimeSource_r15 (motionTimeSource_r15_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public OTDOA_SignalMeasurementInformation (
      Asn1BitString systemFrameNumber_,
      Asn1Integer physCellIdRef_,
      NeighbourMeasurementList neighbourMeasurementList_
   ) throws Asn1Exception {
      super();
      setSystemFrameNumber (systemFrameNumber_);
      setPhysCellIdRef (physCellIdRef_);
      setNeighbourMeasurementList (neighbourMeasurementList_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public OTDOA_SignalMeasurementInformation (Asn1BitString systemFrameNumber_,
      long physCellIdRef_,
      ECGI cellGlobalIdRef_,
      long earfcnRef_,
      OTDOA_MeasQuality referenceQuality_,
      NeighbourMeasurementList neighbourMeasurementList_,
      long earfcnRef_v9a0_,
      long tpIdRef_r14_,
      long prsIdRef_r14_,
      AdditionalPathList_r14 additionalPathsRef_r14_,
      long nprsIdRef_r14_,
      CarrierFreqOffsetNB_r14 carrierFreqOffsetNB_Ref_r14_,
      Asn1BitString hyperSFN_r14_,
      MotionTimeSource_r15 motionTimeSource_r15_
   ) throws Asn1Exception {
      super();
      setSystemFrameNumber (systemFrameNumber_);
      setPhysCellIdRef (physCellIdRef_);
      setCellGlobalIdRef (cellGlobalIdRef_);
      setEarfcnRef (earfcnRef_);
      setReferenceQuality (referenceQuality_);
      setNeighbourMeasurementList (neighbourMeasurementList_);
      setEarfcnRef_v9a0 (earfcnRef_v9a0_);
      setTpIdRef_r14 (tpIdRef_r14_);
      setPrsIdRef_r14 (prsIdRef_r14_);
      setAdditionalPathsRef_r14 (additionalPathsRef_r14_);
      setNprsIdRef_r14 (nprsIdRef_r14_);
      setCarrierFreqOffsetNB_Ref_r14 (carrierFreqOffsetNB_Ref_r14_);
      setHyperSFN_r14 (hyperSFN_r14_);
      setMotionTimeSource_r15 (motionTimeSource_r15_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public OTDOA_SignalMeasurementInformation (
      Asn1BitString systemFrameNumber_,
      long physCellIdRef_,
      NeighbourMeasurementList neighbourMeasurementList_
   ) throws Asn1Exception {
      super();
      setSystemFrameNumber (systemFrameNumber_);
      setPhysCellIdRef (physCellIdRef_);
      setNeighbourMeasurementList (neighbourMeasurementList_);
   }

   public void init () {
      systemFrameNumber = null;
      physCellIdRef = null;
      cellGlobalIdRef = null;
      earfcnRef = null;
      referenceQuality = null;
      neighbourMeasurementList = null;
      earfcnRef_v9a0 = null;
      tpIdRef_r14 = null;
      prsIdRef_r14 = null;
      additionalPathsRef_r14 = null;
      nprsIdRef_r14 = null;
      carrierFreqOffsetNB_Ref_r14 = null;
      hyperSFN_r14 = null;
      motionTimeSource_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof OTDOA_SignalMeasurementInformation) ) return false;

      OTDOA_SignalMeasurementInformation rhs = (OTDOA_SignalMeasurementInformation) obj;

      if (systemFrameNumber == null) {
         if (rhs.systemFrameNumber != null) return false;
      }
      else {
         if (!systemFrameNumber.equals(rhs.systemFrameNumber)) {
            return false;
         }
      }

      if (physCellIdRef == null) {
         if (rhs.physCellIdRef != null) return false;
      }
      else {
         if (!physCellIdRef.equals(rhs.physCellIdRef)) {
            return false;
         }
      }

      if (cellGlobalIdRef == null) {
         if (rhs.cellGlobalIdRef != null) return false;
      }
      else {
         if (!cellGlobalIdRef.equals(rhs.cellGlobalIdRef)) {
            return false;
         }
      }

      if (earfcnRef == null) {
         if (rhs.earfcnRef != null) return false;
      }
      else {
         if (!earfcnRef.equals(rhs.earfcnRef)) {
            return false;
         }
      }

      if (referenceQuality == null) {
         if (rhs.referenceQuality != null) return false;
      }
      else {
         if (!referenceQuality.equals(rhs.referenceQuality)) {
            return false;
         }
      }

      if (neighbourMeasurementList == null) {
         if (rhs.neighbourMeasurementList != null) return false;
      }
      else {
         if (!neighbourMeasurementList.equals(rhs.neighbourMeasurementList)) {
            return false;
         }
      }

      if (earfcnRef_v9a0 == null) {
         if (rhs.earfcnRef_v9a0 != null) return false;
      }
      else {
         if (!earfcnRef_v9a0.equals(rhs.earfcnRef_v9a0)) {
            return false;
         }
      }

      if (tpIdRef_r14 == null) {
         if (rhs.tpIdRef_r14 != null) return false;
      }
      else {
         if (!tpIdRef_r14.equals(rhs.tpIdRef_r14)) {
            return false;
         }
      }

      if (prsIdRef_r14 == null) {
         if (rhs.prsIdRef_r14 != null) return false;
      }
      else {
         if (!prsIdRef_r14.equals(rhs.prsIdRef_r14)) {
            return false;
         }
      }

      if (additionalPathsRef_r14 == null) {
         if (rhs.additionalPathsRef_r14 != null) return false;
      }
      else {
         if (!additionalPathsRef_r14.equals(rhs.additionalPathsRef_r14)) {
            return false;
         }
      }

      if (nprsIdRef_r14 == null) {
         if (rhs.nprsIdRef_r14 != null) return false;
      }
      else {
         if (!nprsIdRef_r14.equals(rhs.nprsIdRef_r14)) {
            return false;
         }
      }

      if (carrierFreqOffsetNB_Ref_r14 == null) {
         if (rhs.carrierFreqOffsetNB_Ref_r14 != null) return false;
      }
      else {
         if (!carrierFreqOffsetNB_Ref_r14.equals(rhs.carrierFreqOffsetNB_Ref_r14)) {
            return false;
         }
      }

      if (hyperSFN_r14 == null) {
         if (rhs.hyperSFN_r14 != null) return false;
      }
      else {
         if (!hyperSFN_r14.equals(rhs.hyperSFN_r14)) {
            return false;
         }
      }

      if (motionTimeSource_r15 == null) {
         if (rhs.motionTimeSource_r15 != null) return false;
      }
      else {
         if (!motionTimeSource_r15.equals(rhs.motionTimeSource_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (systemFrameNumber != null) __code = 31*__code + systemFrameNumber.hashCode();
      if (physCellIdRef != null) __code = 31*__code + physCellIdRef.hashCode();
      if (cellGlobalIdRef != null) __code = 31*__code + cellGlobalIdRef.hashCode();
      if (earfcnRef != null) __code = 31*__code + earfcnRef.hashCode();
      if (referenceQuality != null) __code = 31*__code + referenceQuality.hashCode();
      if (neighbourMeasurementList != null) __code = 31*__code + neighbourMeasurementList.hashCode();
      if (earfcnRef_v9a0 != null) __code = 31*__code + earfcnRef_v9a0.hashCode();
      if (tpIdRef_r14 != null) __code = 31*__code + tpIdRef_r14.hashCode();
      if (prsIdRef_r14 != null) __code = 31*__code + prsIdRef_r14.hashCode();
      if (additionalPathsRef_r14 != null) __code = 31*__code + additionalPathsRef_r14.hashCode();
      if (nprsIdRef_r14 != null) __code = 31*__code + nprsIdRef_r14.hashCode();
      if (carrierFreqOffsetNB_Ref_r14 != null) __code = 31*__code + carrierFreqOffsetNB_Ref_r14.hashCode();
      if (hyperSFN_r14 != null) __code = 31*__code + hyperSFN_r14.hashCode();
      if (motionTimeSource_r15 != null) __code = 31*__code + motionTimeSource_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SystemFrameNumber
    */
   public Asn1BitString getSystemFrameNumber () {
      return systemFrameNumber;
   }

   public void setSystemFrameNumber (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 10)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.systemFrameNumber = value;
   }

   /**
    * Accessor/mutator methods for PhysCellIdRef
    */
   public Asn1Integer getPhysCellIdRef () {
      return physCellIdRef;
   }

   public void setPhysCellIdRef (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 503))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.physCellIdRef = value;
   }

   public void setPhysCellIdRef (long value) 
      throws Asn1Exception
   {
      setPhysCellIdRef (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CellGlobalIdRef
    */
   public ECGI getCellGlobalIdRef () {
      return cellGlobalIdRef;
   }

   public void setCellGlobalIdRef (ECGI value) {
      this.cellGlobalIdRef = value;
   }

   public boolean hasCellGlobalIdRef () {
      return (cellGlobalIdRef != null);
   }

   /**
    * Accessor/mutator methods for EarfcnRef
    */
   public ARFCN_ValueEUTRA getEarfcnRef () {
      return earfcnRef;
   }

   public void setEarfcnRef (ARFCN_ValueEUTRA value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.earfcnRef = value;
   }

   public void setEarfcnRef (long value) 
      throws Asn1Exception
   {
      setEarfcnRef (new ARFCN_ValueEUTRA(value));
   }
   public boolean hasEarfcnRef () {
      return (earfcnRef != null);
   }

   /**
    * Accessor/mutator methods for ReferenceQuality
    */
   public OTDOA_MeasQuality getReferenceQuality () {
      return referenceQuality;
   }

   public void setReferenceQuality (OTDOA_MeasQuality value) {
      this.referenceQuality = value;
   }

   public boolean hasReferenceQuality () {
      return (referenceQuality != null);
   }

   /**
    * Accessor/mutator methods for NeighbourMeasurementList
    */
   public NeighbourMeasurementList getNeighbourMeasurementList () {
      return neighbourMeasurementList;
   }

   public void setNeighbourMeasurementList (NeighbourMeasurementList value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 24))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.neighbourMeasurementList = value;
   }

   /**
    * Accessor/mutator methods for EarfcnRef_v9a0
    */
   public ARFCN_ValueEUTRA_v9a0 getEarfcnRef_v9a0 () {
      return earfcnRef_v9a0;
   }

   public void setEarfcnRef_v9a0 (ARFCN_ValueEUTRA_v9a0 value) 
      throws Asn1Exception
   {
      if (!((value.value >= 65536 && value.value <= 262143))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.earfcnRef_v9a0 = value;
   }

   public void setEarfcnRef_v9a0 (long value) 
      throws Asn1Exception
   {
      setEarfcnRef_v9a0 (new ARFCN_ValueEUTRA_v9a0(value));
   }
   public boolean hasEarfcnRef_v9a0 () {
      return (earfcnRef_v9a0 != null);
   }

   /**
    * Accessor/mutator methods for TpIdRef_r14
    */
   public Asn1Integer getTpIdRef_r14 () {
      return tpIdRef_r14;
   }

   public void setTpIdRef_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.tpIdRef_r14 = value;
   }

   public void setTpIdRef_r14 (long value) 
      throws Asn1Exception
   {
      setTpIdRef_r14 (new Asn1Integer(value));
   }
   public boolean hasTpIdRef_r14 () {
      return (tpIdRef_r14 != null);
   }

   /**
    * Accessor/mutator methods for PrsIdRef_r14
    */
   public Asn1Integer getPrsIdRef_r14 () {
      return prsIdRef_r14;
   }

   public void setPrsIdRef_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.prsIdRef_r14 = value;
   }

   public void setPrsIdRef_r14 (long value) 
      throws Asn1Exception
   {
      setPrsIdRef_r14 (new Asn1Integer(value));
   }
   public boolean hasPrsIdRef_r14 () {
      return (prsIdRef_r14 != null);
   }

   /**
    * Accessor/mutator methods for AdditionalPathsRef_r14
    */
   public AdditionalPathList_r14 getAdditionalPathsRef_r14 () {
      return additionalPathsRef_r14;
   }

   public void setAdditionalPathsRef_r14 (AdditionalPathList_r14 value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 2))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.additionalPathsRef_r14 = value;
   }

   public boolean hasAdditionalPathsRef_r14 () {
      return (additionalPathsRef_r14 != null);
   }

   /**
    * Accessor/mutator methods for NprsIdRef_r14
    */
   public Asn1Integer getNprsIdRef_r14 () {
      return nprsIdRef_r14;
   }

   public void setNprsIdRef_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nprsIdRef_r14 = value;
   }

   public void setNprsIdRef_r14 (long value) 
      throws Asn1Exception
   {
      setNprsIdRef_r14 (new Asn1Integer(value));
   }
   public boolean hasNprsIdRef_r14 () {
      return (nprsIdRef_r14 != null);
   }

   /**
    * Accessor/mutator methods for CarrierFreqOffsetNB_Ref_r14
    */
   public CarrierFreqOffsetNB_r14 getCarrierFreqOffsetNB_Ref_r14 () {
      return carrierFreqOffsetNB_Ref_r14;
   }

   public void setCarrierFreqOffsetNB_Ref_r14 (CarrierFreqOffsetNB_r14 value) {
      this.carrierFreqOffsetNB_Ref_r14 = value;
   }

   public boolean hasCarrierFreqOffsetNB_Ref_r14 () {
      return (carrierFreqOffsetNB_Ref_r14 != null);
   }

   /**
    * Accessor/mutator methods for HyperSFN_r14
    */
   public Asn1BitString getHyperSFN_r14 () {
      return hyperSFN_r14;
   }

   public void setHyperSFN_r14 (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 10)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.hyperSFN_r14 = value;
   }

   public boolean hasHyperSFN_r14 () {
      return (hyperSFN_r14 != null);
   }

   /**
    * Accessor/mutator methods for MotionTimeSource_r15
    */
   public MotionTimeSource_r15 getMotionTimeSource_r15 () {
      return motionTimeSource_r15;
   }

   public void setMotionTimeSource_r15 (MotionTimeSource_r15 value) {
      this.motionTimeSource_r15 = value;
   }

   public boolean hasMotionTimeSource_r15 () {
      return (motionTimeSource_r15 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 15; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return systemFrameNumber;
         case 1: return physCellIdRef;
         case 2: return cellGlobalIdRef;
         case 3: return earfcnRef;
         case 4: return referenceQuality;
         case 5: return neighbourMeasurementList;
         case 6: return earfcnRef_v9a0;
         case 7: return tpIdRef_r14;
         case 8: return prsIdRef_r14;
         case 9: return additionalPathsRef_r14;
         case 10: return nprsIdRef_r14;
         case 11: return carrierFreqOffsetNB_Ref_r14;
         case 12: return hyperSFN_r14;
         case 13: return motionTimeSource_r15;
         case 14: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "systemFrameNumber";
         case 1: return "physCellIdRef";
         case 2: return "cellGlobalIdRef";
         case 3: return "earfcnRef";
         case 4: return "referenceQuality";
         case 5: return "neighbourMeasurementList";
         case 6: return "earfcnRef-v9a0";
         case 7: return "tpIdRef-r14";
         case 8: return "prsIdRef-r14";
         case 9: return "additionalPathsRef-r14";
         case 10: return "nprsIdRef-r14";
         case 11: return "carrierFreqOffsetNB-Ref-r14";
         case 12: return "hyperSFN-r14";
         case 13: return "motionTimeSource-r15";
         case 14: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean cellGlobalIdRefPresent = buffer.decodeBit ("cellGlobalIdRefPresent");
      boolean earfcnRefPresent = buffer.decodeBit ("earfcnRefPresent");
      boolean referenceQualityPresent = buffer.decodeBit ("referenceQualityPresent");

      // decode systemFrameNumber

      buffer.getContext().eventDispatcher.startElement("systemFrameNumber", -1);

      systemFrameNumber = new Asn1BitString();
      systemFrameNumber.decode (buffer, 10, 10);
      buffer.getContext().eventDispatcher.endElement("systemFrameNumber", -1);

      // decode physCellIdRef

      buffer.getContext().eventDispatcher.startElement("physCellIdRef", -1);

      physCellIdRef = new Asn1Integer();
      physCellIdRef.decode (buffer, 0, 503);
      buffer.getContext().eventDispatcher.endElement("physCellIdRef", -1);

      // decode cellGlobalIdRef

      if (cellGlobalIdRefPresent) {
         buffer.getContext().eventDispatcher.startElement("cellGlobalIdRef", -1);

         cellGlobalIdRef = new ECGI();
         cellGlobalIdRef.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellGlobalIdRef", -1);
      }
      else {
         cellGlobalIdRef = null;
      }

      // decode earfcnRef

      if (earfcnRefPresent) {
         buffer.getContext().eventDispatcher.startElement("earfcnRef", -1);

         earfcnRef = new ARFCN_ValueEUTRA();
         earfcnRef.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("earfcnRef", -1);
      }
      else {
         earfcnRef = null;
      }

      // decode referenceQuality

      if (referenceQualityPresent) {
         buffer.getContext().eventDispatcher.startElement("referenceQuality", -1);

         referenceQuality = new OTDOA_MeasQuality();
         referenceQuality.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("referenceQuality", -1);
      }
      else {
         referenceQuality = null;
      }

      // decode neighbourMeasurementList

      buffer.getContext().eventDispatcher.startElement("neighbourMeasurementList", -1);

      neighbourMeasurementList = new NeighbourMeasurementList();
      neighbourMeasurementList.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("neighbourMeasurementList", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("earfcnRef_v9a0Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("tpIdRef_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("prsIdRef_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("additionalPathsRef_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("nprsIdRef_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("carrierFreqOffsetNB_Ref_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("hyperSFN_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("motionTimeSource_r15Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode earfcnRef_v9a0

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("earfcnRef_v9a0", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            earfcnRef_v9a0 = new ARFCN_ValueEUTRA_v9a0();
            earfcnRef_v9a0.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("earfcnRef_v9a0", -1);

         }
         else {
            earfcnRef_v9a0 = null;
         }

         // decode tpIdRef_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("tpIdRef_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            tpIdRef_r14 = new Asn1Integer();
            tpIdRef_r14.decode (buffer, 0, 4095);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("tpIdRef_r14", -1);

         }
         else {
            tpIdRef_r14 = null;
         }

         // decode prsIdRef_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("prsIdRef_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            prsIdRef_r14 = new Asn1Integer();
            prsIdRef_r14.decode (buffer, 0, 4095);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("prsIdRef_r14", -1);

         }
         else {
            prsIdRef_r14 = null;
         }

         // decode additionalPathsRef_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("additionalPathsRef_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            additionalPathsRef_r14 = new AdditionalPathList_r14();
            additionalPathsRef_r14.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("additionalPathsRef_r14", -1);

         }
         else {
            additionalPathsRef_r14 = null;
         }

         // decode nprsIdRef_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("nprsIdRef_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            nprsIdRef_r14 = new Asn1Integer();
            nprsIdRef_r14.decode (buffer, 0, 4095);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("nprsIdRef_r14", -1);

         }
         else {
            nprsIdRef_r14 = null;
         }

         // decode carrierFreqOffsetNB_Ref_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("carrierFreqOffsetNB_Ref_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = CarrierFreqOffsetNB_r14.decodeEnumValue (buffer);
               carrierFreqOffsetNB_Ref_r14 = CarrierFreqOffsetNB_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("carrierFreqOffsetNB_Ref_r14", -1);

         }
         else {
            carrierFreqOffsetNB_Ref_r14 = null;
         }

         // decode hyperSFN_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("hyperSFN_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            hyperSFN_r14 = new Asn1BitString();
            hyperSFN_r14.decode (buffer, 10, 10);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("hyperSFN_r14", -1);

         }
         else {
            hyperSFN_r14 = null;
         }

         // decode motionTimeSource_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("motionTimeSource_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            motionTimeSource_r15 = new MotionTimeSource_r15();
            motionTimeSource_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("motionTimeSource_r15", -1);

         }
         else {
            motionTimeSource_r15 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((earfcnRef_v9a0 != null) ||
      (tpIdRef_r14 != null) ||
      (prsIdRef_r14 != null) ||
      (additionalPathsRef_r14 != null) ||
      (nprsIdRef_r14 != null) ||
      (carrierFreqOffsetNB_Ref_r14 != null) ||
      (hyperSFN_r14 != null) ||
      (motionTimeSource_r15 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((cellGlobalIdRef != null), null);
      buffer.encodeBit ((earfcnRef != null), null);
      buffer.encodeBit ((referenceQuality != null), null);

      // encode systemFrameNumber

      if (systemFrameNumber != null) {
         buffer.getContext().eventDispatcher.startElement("systemFrameNumber", -1);

         systemFrameNumber.encode (buffer, 10, 10);

         buffer.getContext().eventDispatcher.endElement("systemFrameNumber", -1);
      }
      else throw new Asn1MissingRequiredException ("systemFrameNumber");

      // encode physCellIdRef

      if (physCellIdRef != null) {
         buffer.getContext().eventDispatcher.startElement("physCellIdRef", -1);

         physCellIdRef.encode (buffer, 0, 503);

         buffer.getContext().eventDispatcher.endElement("physCellIdRef", -1);
      }
      else throw new Asn1MissingRequiredException ("physCellIdRef");

      // encode cellGlobalIdRef

      if (cellGlobalIdRef != null) {
         buffer.getContext().eventDispatcher.startElement("cellGlobalIdRef", -1);

         cellGlobalIdRef.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cellGlobalIdRef", -1);
      }

      // encode earfcnRef

      if (earfcnRef != null) {
         buffer.getContext().eventDispatcher.startElement("earfcnRef", -1);

         earfcnRef.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("earfcnRef", -1);
      }

      // encode referenceQuality

      if (referenceQuality != null) {
         buffer.getContext().eventDispatcher.startElement("referenceQuality", -1);

         referenceQuality.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("referenceQuality", -1);
      }

      // encode neighbourMeasurementList

      if (neighbourMeasurementList != null) {
         buffer.getContext().eventDispatcher.startElement("neighbourMeasurementList", -1);

         neighbourMeasurementList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("neighbourMeasurementList", -1);
      }
      else throw new Asn1MissingRequiredException ("neighbourMeasurementList");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 8;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((earfcnRef_v9a0 != null), null);
         buffer.encodeBit ((tpIdRef_r14 != null), null);
         buffer.encodeBit ((prsIdRef_r14 != null), null);
         buffer.encodeBit ((additionalPathsRef_r14 != null), null);
         buffer.encodeBit ((nprsIdRef_r14 != null), null);
         buffer.encodeBit ((carrierFreqOffsetNB_Ref_r14 != null), null);
         buffer.encodeBit ((hyperSFN_r14 != null), null);
         buffer.encodeBit ((motionTimeSource_r15 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // earfcnRef_v9a0

         if (earfcnRef_v9a0 != null) {
            buffer.reset();
            earfcnRef_v9a0.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("earfcnRef_v9a0", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("earfcnRef_v9a0", -1);
         }

         // tpIdRef_r14

         if (tpIdRef_r14 != null) {
            buffer.reset();
            tpIdRef_r14.encode (buffer, 0, 4095);
            buffer.getContext().eventDispatcher.startElement("tpIdRef_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("tpIdRef_r14", -1);
         }

         // prsIdRef_r14

         if (prsIdRef_r14 != null) {
            buffer.reset();
            prsIdRef_r14.encode (buffer, 0, 4095);
            buffer.getContext().eventDispatcher.startElement("prsIdRef_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("prsIdRef_r14", -1);
         }

         // additionalPathsRef_r14

         if (additionalPathsRef_r14 != null) {
            buffer.reset();
            additionalPathsRef_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("additionalPathsRef_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("additionalPathsRef_r14", -1);
         }

         // nprsIdRef_r14

         if (nprsIdRef_r14 != null) {
            buffer.reset();
            nprsIdRef_r14.encode (buffer, 0, 4095);
            buffer.getContext().eventDispatcher.startElement("nprsIdRef_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("nprsIdRef_r14", -1);
         }

         // carrierFreqOffsetNB_Ref_r14

         if (carrierFreqOffsetNB_Ref_r14 != null) {
            buffer.reset();
            carrierFreqOffsetNB_Ref_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("carrierFreqOffsetNB_Ref_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("carrierFreqOffsetNB_Ref_r14", -1);
         }

         // hyperSFN_r14

         if (hyperSFN_r14 != null) {
            buffer.reset();
            hyperSFN_r14.encode (buffer, 10, 10);
            buffer.getContext().eventDispatcher.startElement("hyperSFN_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("hyperSFN_r14", -1);
         }

         // motionTimeSource_r15

         if (motionTimeSource_r15 != null) {
            buffer.reset();
            motionTimeSource_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("motionTimeSource_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("motionTimeSource_r15", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
