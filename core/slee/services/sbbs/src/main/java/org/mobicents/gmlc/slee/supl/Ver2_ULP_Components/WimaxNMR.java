/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class WimaxNMR extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "WimaxNMR";
   }

   protected WimaxBsID wimaxBsID;
   protected Asn1Integer relDelay;  // optional
   protected Asn1Integer relDelaystd;  // optional
   protected Asn1Integer rssi;  // optional
   protected Asn1Integer rSSIstd;  // optional
   protected Asn1Integer bSTxPower;  // optional
   protected Asn1Integer cinr;  // optional
   protected Asn1Integer cINRstd;  // optional
   protected ReportedLocation bSLocation;  // optional
   protected Asn1OpenExt extElem1;

   public WimaxNMR () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public WimaxNMR (
      WimaxBsID wimaxBsID_,
      Asn1Integer relDelay_,
      Asn1Integer relDelaystd_,
      Asn1Integer rssi_,
      Asn1Integer rSSIstd_,
      Asn1Integer bSTxPower_,
      Asn1Integer cinr_,
      Asn1Integer cINRstd_,
      ReportedLocation bSLocation_
   ) throws Asn1Exception {
      super();
      setWimaxBsID (wimaxBsID_);
      setRelDelay (relDelay_);
      setRelDelaystd (relDelaystd_);
      setRssi (rssi_);
      setRSSIstd (rSSIstd_);
      setBSTxPower (bSTxPower_);
      setCinr (cinr_);
      setCINRstd (cINRstd_);
      setBSLocation (bSLocation_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public WimaxNMR (
      WimaxBsID wimaxBsID_
   ) throws Asn1Exception {
      super();
      setWimaxBsID (wimaxBsID_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public WimaxNMR (WimaxBsID wimaxBsID_,
      long relDelay_,
      long relDelaystd_,
      long rssi_,
      long rSSIstd_,
      long bSTxPower_,
      long cinr_,
      long cINRstd_,
      ReportedLocation bSLocation_
   ) throws Asn1Exception {
      super();
      setWimaxBsID (wimaxBsID_);
      setRelDelay (relDelay_);
      setRelDelaystd (relDelaystd_);
      setRssi (rssi_);
      setRSSIstd (rSSIstd_);
      setBSTxPower (bSTxPower_);
      setCinr (cinr_);
      setCINRstd (cINRstd_);
      setBSLocation (bSLocation_);
   }

   public void init () {
      wimaxBsID = null;
      relDelay = null;
      relDelaystd = null;
      rssi = null;
      rSSIstd = null;
      bSTxPower = null;
      cinr = null;
      cINRstd = null;
      bSLocation = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof WimaxNMR) ) return false;

      WimaxNMR rhs = (WimaxNMR) obj;

      if (wimaxBsID == null) {
         if (rhs.wimaxBsID != null) return false;
      }
      else {
         if (!wimaxBsID.equals(rhs.wimaxBsID)) {
            return false;
         }
      }

      if (relDelay == null) {
         if (rhs.relDelay != null) return false;
      }
      else {
         if (!relDelay.equals(rhs.relDelay)) {
            return false;
         }
      }

      if (relDelaystd == null) {
         if (rhs.relDelaystd != null) return false;
      }
      else {
         if (!relDelaystd.equals(rhs.relDelaystd)) {
            return false;
         }
      }

      if (rssi == null) {
         if (rhs.rssi != null) return false;
      }
      else {
         if (!rssi.equals(rhs.rssi)) {
            return false;
         }
      }

      if (rSSIstd == null) {
         if (rhs.rSSIstd != null) return false;
      }
      else {
         if (!rSSIstd.equals(rhs.rSSIstd)) {
            return false;
         }
      }

      if (bSTxPower == null) {
         if (rhs.bSTxPower != null) return false;
      }
      else {
         if (!bSTxPower.equals(rhs.bSTxPower)) {
            return false;
         }
      }

      if (cinr == null) {
         if (rhs.cinr != null) return false;
      }
      else {
         if (!cinr.equals(rhs.cinr)) {
            return false;
         }
      }

      if (cINRstd == null) {
         if (rhs.cINRstd != null) return false;
      }
      else {
         if (!cINRstd.equals(rhs.cINRstd)) {
            return false;
         }
      }

      if (bSLocation == null) {
         if (rhs.bSLocation != null) return false;
      }
      else {
         if (!bSLocation.equals(rhs.bSLocation)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (wimaxBsID != null) __code = 31*__code + wimaxBsID.hashCode();
      if (relDelay != null) __code = 31*__code + relDelay.hashCode();
      if (relDelaystd != null) __code = 31*__code + relDelaystd.hashCode();
      if (rssi != null) __code = 31*__code + rssi.hashCode();
      if (rSSIstd != null) __code = 31*__code + rSSIstd.hashCode();
      if (bSTxPower != null) __code = 31*__code + bSTxPower.hashCode();
      if (cinr != null) __code = 31*__code + cinr.hashCode();
      if (cINRstd != null) __code = 31*__code + cINRstd.hashCode();
      if (bSLocation != null) __code = 31*__code + bSLocation.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for WimaxBsID
    */
   public WimaxBsID getWimaxBsID () {
      return wimaxBsID;
   }

   public void setWimaxBsID (WimaxBsID value) {
      this.wimaxBsID = value;
   }

   /**
    * Accessor/mutator methods for RelDelay
    */
   public Asn1Integer getRelDelay () {
      return relDelay;
   }

   public void setRelDelay (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -32768 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.relDelay = value;
   }

   public void setRelDelay (long value) 
      throws Asn1Exception
   {
      setRelDelay (new Asn1Integer(value));
   }
   public boolean hasRelDelay () {
      return (relDelay != null);
   }

   /**
    * Accessor/mutator methods for RelDelaystd
    */
   public Asn1Integer getRelDelaystd () {
      return relDelaystd;
   }

   public void setRelDelaystd (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.relDelaystd = value;
   }

   public void setRelDelaystd (long value) 
      throws Asn1Exception
   {
      setRelDelaystd (new Asn1Integer(value));
   }
   public boolean hasRelDelaystd () {
      return (relDelaystd != null);
   }

   /**
    * Accessor/mutator methods for Rssi
    */
   public Asn1Integer getRssi () {
      return rssi;
   }

   public void setRssi (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.rssi = value;
   }

   public void setRssi (long value) 
      throws Asn1Exception
   {
      setRssi (new Asn1Integer(value));
   }
   public boolean hasRssi () {
      return (rssi != null);
   }

   /**
    * Accessor/mutator methods for RSSIstd
    */
   public Asn1Integer getRSSIstd () {
      return rSSIstd;
   }

   public void setRSSIstd (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 63))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.rSSIstd = value;
   }

   public void setRSSIstd (long value) 
      throws Asn1Exception
   {
      setRSSIstd (new Asn1Integer(value));
   }
   public boolean hasRSSIstd () {
      return (rSSIstd != null);
   }

   /**
    * Accessor/mutator methods for BSTxPower
    */
   public Asn1Integer getBSTxPower () {
      return bSTxPower;
   }

   public void setBSTxPower (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.bSTxPower = value;
   }

   public void setBSTxPower (long value) 
      throws Asn1Exception
   {
      setBSTxPower (new Asn1Integer(value));
   }
   public boolean hasBSTxPower () {
      return (bSTxPower != null);
   }

   /**
    * Accessor/mutator methods for Cinr
    */
   public Asn1Integer getCinr () {
      return cinr;
   }

   public void setCinr (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cinr = value;
   }

   public void setCinr (long value) 
      throws Asn1Exception
   {
      setCinr (new Asn1Integer(value));
   }
   public boolean hasCinr () {
      return (cinr != null);
   }

   /**
    * Accessor/mutator methods for CINRstd
    */
   public Asn1Integer getCINRstd () {
      return cINRstd;
   }

   public void setCINRstd (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 63))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cINRstd = value;
   }

   public void setCINRstd (long value) 
      throws Asn1Exception
   {
      setCINRstd (new Asn1Integer(value));
   }
   public boolean hasCINRstd () {
      return (cINRstd != null);
   }

   /**
    * Accessor/mutator methods for BSLocation
    */
   public ReportedLocation getBSLocation () {
      return bSLocation;
   }

   public void setBSLocation (ReportedLocation value) {
      this.bSLocation = value;
   }

   public boolean hasBSLocation () {
      return (bSLocation != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return wimaxBsID;
         case 1: return relDelay;
         case 2: return relDelaystd;
         case 3: return rssi;
         case 4: return rSSIstd;
         case 5: return bSTxPower;
         case 6: return cinr;
         case 7: return cINRstd;
         case 8: return bSLocation;
         case 9: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "wimaxBsID";
         case 1: return "relDelay";
         case 2: return "relDelaystd";
         case 3: return "rssi";
         case 4: return "rSSIstd";
         case 5: return "bSTxPower";
         case 6: return "cinr";
         case 7: return "cINRstd";
         case 8: return "bSLocation";
         case 9: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean relDelayPresent = buffer.decodeBit ("relDelayPresent");
      boolean relDelaystdPresent = buffer.decodeBit ("relDelaystdPresent");
      boolean rssiPresent = buffer.decodeBit ("rssiPresent");
      boolean rSSIstdPresent = buffer.decodeBit ("rSSIstdPresent");
      boolean bSTxPowerPresent = buffer.decodeBit ("bSTxPowerPresent");
      boolean cinrPresent = buffer.decodeBit ("cinrPresent");
      boolean cINRstdPresent = buffer.decodeBit ("cINRstdPresent");
      boolean bSLocationPresent = buffer.decodeBit ("bSLocationPresent");

      // decode wimaxBsID

      buffer.getContext().eventDispatcher.startElement("wimaxBsID", -1);

      wimaxBsID = new WimaxBsID();
      wimaxBsID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("wimaxBsID", -1);

      // decode relDelay

      if (relDelayPresent) {
         buffer.getContext().eventDispatcher.startElement("relDelay", -1);

         relDelay = new Asn1Integer();
         relDelay.decode (buffer, -32768, 32767);
         buffer.getContext().eventDispatcher.endElement("relDelay", -1);
      }
      else {
         relDelay = null;
      }

      // decode relDelaystd

      if (relDelaystdPresent) {
         buffer.getContext().eventDispatcher.startElement("relDelaystd", -1);

         relDelaystd = new Asn1Integer();
         relDelaystd.decode (buffer, 0, 1023);
         buffer.getContext().eventDispatcher.endElement("relDelaystd", -1);
      }
      else {
         relDelaystd = null;
      }

      // decode rssi

      if (rssiPresent) {
         buffer.getContext().eventDispatcher.startElement("rssi", -1);

         rssi = new Asn1Integer();
         rssi.decode (buffer, 0, 255);
         buffer.getContext().eventDispatcher.endElement("rssi", -1);
      }
      else {
         rssi = null;
      }

      // decode rSSIstd

      if (rSSIstdPresent) {
         buffer.getContext().eventDispatcher.startElement("rSSIstd", -1);

         rSSIstd = new Asn1Integer();
         rSSIstd.decode (buffer, 0, 63);
         buffer.getContext().eventDispatcher.endElement("rSSIstd", -1);
      }
      else {
         rSSIstd = null;
      }

      // decode bSTxPower

      if (bSTxPowerPresent) {
         buffer.getContext().eventDispatcher.startElement("bSTxPower", -1);

         bSTxPower = new Asn1Integer();
         bSTxPower.decode (buffer, 0, 255);
         buffer.getContext().eventDispatcher.endElement("bSTxPower", -1);
      }
      else {
         bSTxPower = null;
      }

      // decode cinr

      if (cinrPresent) {
         buffer.getContext().eventDispatcher.startElement("cinr", -1);

         cinr = new Asn1Integer();
         cinr.decode (buffer, 0, 255);
         buffer.getContext().eventDispatcher.endElement("cinr", -1);
      }
      else {
         cinr = null;
      }

      // decode cINRstd

      if (cINRstdPresent) {
         buffer.getContext().eventDispatcher.startElement("cINRstd", -1);

         cINRstd = new Asn1Integer();
         cINRstd.decode (buffer, 0, 63);
         buffer.getContext().eventDispatcher.endElement("cINRstd", -1);
      }
      else {
         cINRstd = null;
      }

      // decode bSLocation

      if (bSLocationPresent) {
         buffer.getContext().eventDispatcher.startElement("bSLocation", -1);

         bSLocation = new ReportedLocation();
         bSLocation.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("bSLocation", -1);
      }
      else {
         bSLocation = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((relDelay != null), null);
      buffer.encodeBit ((relDelaystd != null), null);
      buffer.encodeBit ((rssi != null), null);
      buffer.encodeBit ((rSSIstd != null), null);
      buffer.encodeBit ((bSTxPower != null), null);
      buffer.encodeBit ((cinr != null), null);
      buffer.encodeBit ((cINRstd != null), null);
      buffer.encodeBit ((bSLocation != null), null);

      // encode wimaxBsID

      if (wimaxBsID != null) {
         buffer.getContext().eventDispatcher.startElement("wimaxBsID", -1);

         wimaxBsID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("wimaxBsID", -1);
      }
      else throw new Asn1MissingRequiredException ("wimaxBsID");

      // encode relDelay

      if (relDelay != null) {
         buffer.getContext().eventDispatcher.startElement("relDelay", -1);

         relDelay.encode (buffer, -32768, 32767);

         buffer.getContext().eventDispatcher.endElement("relDelay", -1);
      }

      // encode relDelaystd

      if (relDelaystd != null) {
         buffer.getContext().eventDispatcher.startElement("relDelaystd", -1);

         relDelaystd.encode (buffer, 0, 1023);

         buffer.getContext().eventDispatcher.endElement("relDelaystd", -1);
      }

      // encode rssi

      if (rssi != null) {
         buffer.getContext().eventDispatcher.startElement("rssi", -1);

         rssi.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("rssi", -1);
      }

      // encode rSSIstd

      if (rSSIstd != null) {
         buffer.getContext().eventDispatcher.startElement("rSSIstd", -1);

         rSSIstd.encode (buffer, 0, 63);

         buffer.getContext().eventDispatcher.endElement("rSSIstd", -1);
      }

      // encode bSTxPower

      if (bSTxPower != null) {
         buffer.getContext().eventDispatcher.startElement("bSTxPower", -1);

         bSTxPower.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("bSTxPower", -1);
      }

      // encode cinr

      if (cinr != null) {
         buffer.getContext().eventDispatcher.startElement("cinr", -1);

         cinr.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("cinr", -1);
      }

      // encode cINRstd

      if (cINRstd != null) {
         buffer.getContext().eventDispatcher.startElement("cINRstd", -1);

         cINRstd.encode (buffer, 0, 63);

         buffer.getContext().eventDispatcher.endElement("cINRstd", -1);
      }

      // encode bSLocation

      if (bSLocation != null) {
         buffer.getContext().eventDispatcher.startElement("bSLocation", -1);

         bSLocation.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("bSLocation", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
