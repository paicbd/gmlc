/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class Coordinate extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Coordinate";
   }

   protected Coordinate_latitudeSign latitudeSign = null;
   protected Asn1Integer latitude;
   protected Asn1Integer longitude;

   public Coordinate () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Coordinate (
      Coordinate_latitudeSign latitudeSign_,
      Asn1Integer latitude_,
      Asn1Integer longitude_
   ) throws Asn1Exception {
      super();
      setLatitudeSign (latitudeSign_);
      setLatitude (latitude_);
      setLongitude (longitude_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Coordinate (Coordinate_latitudeSign latitudeSign_,
      long latitude_,
      long longitude_
   ) throws Asn1Exception {
      super();
      setLatitudeSign (latitudeSign_);
      setLatitude (latitude_);
      setLongitude (longitude_);
   }

   public void init () {
      latitudeSign = null;
      latitude = null;
      longitude = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Coordinate) ) return false;

      Coordinate rhs = (Coordinate) obj;

      if (latitudeSign == null) {
         if (rhs.latitudeSign != null) return false;
      }
      else {
         if (!latitudeSign.equals(rhs.latitudeSign)) {
            return false;
         }
      }

      if (latitude == null) {
         if (rhs.latitude != null) return false;
      }
      else {
         if (!latitude.equals(rhs.latitude)) {
            return false;
         }
      }

      if (longitude == null) {
         if (rhs.longitude != null) return false;
      }
      else {
         if (!longitude.equals(rhs.longitude)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (latitudeSign != null) __code = 31*__code + latitudeSign.hashCode();
      if (latitude != null) __code = 31*__code + latitude.hashCode();
      if (longitude != null) __code = 31*__code + longitude.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for LatitudeSign
    */
   public Coordinate_latitudeSign getLatitudeSign () {
      return latitudeSign;
   }

   public void setLatitudeSign (Coordinate_latitudeSign value) {
      this.latitudeSign = value;
   }

   /**
    * Accessor/mutator methods for Latitude
    */
   public Asn1Integer getLatitude () {
      return latitude;
   }

   public void setLatitude (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.latitude = value;
   }

   public void setLatitude (long value) 
      throws Asn1Exception
   {
      setLatitude (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Longitude
    */
   public Asn1Integer getLongitude () {
      return longitude;
   }

   public void setLongitude (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8388608 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.longitude = value;
   }

   public void setLongitude (long value) 
      throws Asn1Exception
   {
      setLongitude (new Asn1Integer(value));
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return latitudeSign;
         case 1: return latitude;
         case 2: return longitude;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "latitudeSign";
         case 1: return "latitude";
         case 2: return "longitude";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode latitudeSign

      buffer.getContext().eventDispatcher.startElement("latitudeSign", -1);

      {
         int tval = Coordinate_latitudeSign.decodeEnumValue (buffer);
         latitudeSign = Coordinate_latitudeSign.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("latitudeSign", -1);

      // decode latitude

      buffer.getContext().eventDispatcher.startElement("latitude", -1);

      latitude = new Asn1Integer();
      latitude.decode (buffer, 0, 8388607);
      buffer.getContext().eventDispatcher.endElement("latitude", -1);

      // decode longitude

      buffer.getContext().eventDispatcher.startElement("longitude", -1);

      longitude = new Asn1Integer();
      longitude.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("longitude", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode latitudeSign

      if (latitudeSign != null) {
         buffer.getContext().eventDispatcher.startElement("latitudeSign", -1);

         latitudeSign.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("latitudeSign", -1);
      }
      else throw new Asn1MissingRequiredException ("latitudeSign");

      // encode latitude

      if (latitude != null) {
         buffer.getContext().eventDispatcher.startElement("latitude", -1);

         latitude.encode (buffer, 0, 8388607);

         buffer.getContext().eventDispatcher.endElement("latitude", -1);
      }
      else throw new Asn1MissingRequiredException ("latitude");

      // encode longitude

      if (longitude != null) {
         buffer.getContext().eventDispatcher.startElement("longitude", -1);

         longitude.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("longitude", -1);
      }
      else throw new Asn1MissingRequiredException ("longitude");

   }

}
