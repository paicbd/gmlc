/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class KlobucharModelParameter extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "KlobucharModelParameter";
   }

   protected Asn1BitString dataID;
   protected Asn1Integer alfa0;
   protected Asn1Integer alfa1;
   protected Asn1Integer alfa2;
   protected Asn1Integer alfa3;
   protected Asn1Integer beta0;
   protected Asn1Integer beta1;
   protected Asn1Integer beta2;
   protected Asn1Integer beta3;
   protected Asn1OpenExt extElem1;

   public KlobucharModelParameter () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public KlobucharModelParameter (
      Asn1BitString dataID_,
      Asn1Integer alfa0_,
      Asn1Integer alfa1_,
      Asn1Integer alfa2_,
      Asn1Integer alfa3_,
      Asn1Integer beta0_,
      Asn1Integer beta1_,
      Asn1Integer beta2_,
      Asn1Integer beta3_
   ) throws Asn1Exception {
      super();
      setDataID (dataID_);
      setAlfa0 (alfa0_);
      setAlfa1 (alfa1_);
      setAlfa2 (alfa2_);
      setAlfa3 (alfa3_);
      setBeta0 (beta0_);
      setBeta1 (beta1_);
      setBeta2 (beta2_);
      setBeta3 (beta3_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public KlobucharModelParameter (Asn1BitString dataID_,
      long alfa0_,
      long alfa1_,
      long alfa2_,
      long alfa3_,
      long beta0_,
      long beta1_,
      long beta2_,
      long beta3_
   ) throws Asn1Exception {
      super();
      setDataID (dataID_);
      setAlfa0 (alfa0_);
      setAlfa1 (alfa1_);
      setAlfa2 (alfa2_);
      setAlfa3 (alfa3_);
      setBeta0 (beta0_);
      setBeta1 (beta1_);
      setBeta2 (beta2_);
      setBeta3 (beta3_);
   }

   public void init () {
      dataID = null;
      alfa0 = null;
      alfa1 = null;
      alfa2 = null;
      alfa3 = null;
      beta0 = null;
      beta1 = null;
      beta2 = null;
      beta3 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof KlobucharModelParameter) ) return false;

      KlobucharModelParameter rhs = (KlobucharModelParameter) obj;

      if (dataID == null) {
         if (rhs.dataID != null) return false;
      }
      else {
         if (!dataID.equals(rhs.dataID)) {
            return false;
         }
      }

      if (alfa0 == null) {
         if (rhs.alfa0 != null) return false;
      }
      else {
         if (!alfa0.equals(rhs.alfa0)) {
            return false;
         }
      }

      if (alfa1 == null) {
         if (rhs.alfa1 != null) return false;
      }
      else {
         if (!alfa1.equals(rhs.alfa1)) {
            return false;
         }
      }

      if (alfa2 == null) {
         if (rhs.alfa2 != null) return false;
      }
      else {
         if (!alfa2.equals(rhs.alfa2)) {
            return false;
         }
      }

      if (alfa3 == null) {
         if (rhs.alfa3 != null) return false;
      }
      else {
         if (!alfa3.equals(rhs.alfa3)) {
            return false;
         }
      }

      if (beta0 == null) {
         if (rhs.beta0 != null) return false;
      }
      else {
         if (!beta0.equals(rhs.beta0)) {
            return false;
         }
      }

      if (beta1 == null) {
         if (rhs.beta1 != null) return false;
      }
      else {
         if (!beta1.equals(rhs.beta1)) {
            return false;
         }
      }

      if (beta2 == null) {
         if (rhs.beta2 != null) return false;
      }
      else {
         if (!beta2.equals(rhs.beta2)) {
            return false;
         }
      }

      if (beta3 == null) {
         if (rhs.beta3 != null) return false;
      }
      else {
         if (!beta3.equals(rhs.beta3)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (dataID != null) __code = 31*__code + dataID.hashCode();
      if (alfa0 != null) __code = 31*__code + alfa0.hashCode();
      if (alfa1 != null) __code = 31*__code + alfa1.hashCode();
      if (alfa2 != null) __code = 31*__code + alfa2.hashCode();
      if (alfa3 != null) __code = 31*__code + alfa3.hashCode();
      if (beta0 != null) __code = 31*__code + beta0.hashCode();
      if (beta1 != null) __code = 31*__code + beta1.hashCode();
      if (beta2 != null) __code = 31*__code + beta2.hashCode();
      if (beta3 != null) __code = 31*__code + beta3.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for DataID
    */
   public Asn1BitString getDataID () {
      return dataID;
   }

   public void setDataID (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 2)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.dataID = value;
   }

   /**
    * Accessor/mutator methods for Alfa0
    */
   public Asn1Integer getAlfa0 () {
      return alfa0;
   }

   public void setAlfa0 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.alfa0 = value;
   }

   public void setAlfa0 (long value) 
      throws Asn1Exception
   {
      setAlfa0 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Alfa1
    */
   public Asn1Integer getAlfa1 () {
      return alfa1;
   }

   public void setAlfa1 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.alfa1 = value;
   }

   public void setAlfa1 (long value) 
      throws Asn1Exception
   {
      setAlfa1 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Alfa2
    */
   public Asn1Integer getAlfa2 () {
      return alfa2;
   }

   public void setAlfa2 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.alfa2 = value;
   }

   public void setAlfa2 (long value) 
      throws Asn1Exception
   {
      setAlfa2 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Alfa3
    */
   public Asn1Integer getAlfa3 () {
      return alfa3;
   }

   public void setAlfa3 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.alfa3 = value;
   }

   public void setAlfa3 (long value) 
      throws Asn1Exception
   {
      setAlfa3 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Beta0
    */
   public Asn1Integer getBeta0 () {
      return beta0;
   }

   public void setBeta0 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.beta0 = value;
   }

   public void setBeta0 (long value) 
      throws Asn1Exception
   {
      setBeta0 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Beta1
    */
   public Asn1Integer getBeta1 () {
      return beta1;
   }

   public void setBeta1 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.beta1 = value;
   }

   public void setBeta1 (long value) 
      throws Asn1Exception
   {
      setBeta1 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Beta2
    */
   public Asn1Integer getBeta2 () {
      return beta2;
   }

   public void setBeta2 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.beta2 = value;
   }

   public void setBeta2 (long value) 
      throws Asn1Exception
   {
      setBeta2 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Beta3
    */
   public Asn1Integer getBeta3 () {
      return beta3;
   }

   public void setBeta3 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -128 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.beta3 = value;
   }

   public void setBeta3 (long value) 
      throws Asn1Exception
   {
      setBeta3 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return dataID;
         case 1: return alfa0;
         case 2: return alfa1;
         case 3: return alfa2;
         case 4: return alfa3;
         case 5: return beta0;
         case 6: return beta1;
         case 7: return beta2;
         case 8: return beta3;
         case 9: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "dataID";
         case 1: return "alfa0";
         case 2: return "alfa1";
         case 3: return "alfa2";
         case 4: return "alfa3";
         case 5: return "beta0";
         case 6: return "beta1";
         case 7: return "beta2";
         case 8: return "beta3";
         case 9: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode dataID

      buffer.getContext().eventDispatcher.startElement("dataID", -1);

      dataID = new Asn1BitString();
      dataID.decode (buffer, 2, 2);
      buffer.getContext().eventDispatcher.endElement("dataID", -1);

      // decode alfa0

      buffer.getContext().eventDispatcher.startElement("alfa0", -1);

      alfa0 = new Asn1Integer();
      alfa0.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("alfa0", -1);

      // decode alfa1

      buffer.getContext().eventDispatcher.startElement("alfa1", -1);

      alfa1 = new Asn1Integer();
      alfa1.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("alfa1", -1);

      // decode alfa2

      buffer.getContext().eventDispatcher.startElement("alfa2", -1);

      alfa2 = new Asn1Integer();
      alfa2.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("alfa2", -1);

      // decode alfa3

      buffer.getContext().eventDispatcher.startElement("alfa3", -1);

      alfa3 = new Asn1Integer();
      alfa3.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("alfa3", -1);

      // decode beta0

      buffer.getContext().eventDispatcher.startElement("beta0", -1);

      beta0 = new Asn1Integer();
      beta0.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("beta0", -1);

      // decode beta1

      buffer.getContext().eventDispatcher.startElement("beta1", -1);

      beta1 = new Asn1Integer();
      beta1.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("beta1", -1);

      // decode beta2

      buffer.getContext().eventDispatcher.startElement("beta2", -1);

      beta2 = new Asn1Integer();
      beta2.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("beta2", -1);

      // decode beta3

      buffer.getContext().eventDispatcher.startElement("beta3", -1);

      beta3 = new Asn1Integer();
      beta3.decode (buffer, -128, 127);
      buffer.getContext().eventDispatcher.endElement("beta3", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode dataID

      if (dataID != null) {
         buffer.getContext().eventDispatcher.startElement("dataID", -1);

         dataID.encode (buffer, 2, 2);

         buffer.getContext().eventDispatcher.endElement("dataID", -1);
      }
      else throw new Asn1MissingRequiredException ("dataID");

      // encode alfa0

      if (alfa0 != null) {
         buffer.getContext().eventDispatcher.startElement("alfa0", -1);

         alfa0.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("alfa0", -1);
      }
      else throw new Asn1MissingRequiredException ("alfa0");

      // encode alfa1

      if (alfa1 != null) {
         buffer.getContext().eventDispatcher.startElement("alfa1", -1);

         alfa1.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("alfa1", -1);
      }
      else throw new Asn1MissingRequiredException ("alfa1");

      // encode alfa2

      if (alfa2 != null) {
         buffer.getContext().eventDispatcher.startElement("alfa2", -1);

         alfa2.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("alfa2", -1);
      }
      else throw new Asn1MissingRequiredException ("alfa2");

      // encode alfa3

      if (alfa3 != null) {
         buffer.getContext().eventDispatcher.startElement("alfa3", -1);

         alfa3.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("alfa3", -1);
      }
      else throw new Asn1MissingRequiredException ("alfa3");

      // encode beta0

      if (beta0 != null) {
         buffer.getContext().eventDispatcher.startElement("beta0", -1);

         beta0.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("beta0", -1);
      }
      else throw new Asn1MissingRequiredException ("beta0");

      // encode beta1

      if (beta1 != null) {
         buffer.getContext().eventDispatcher.startElement("beta1", -1);

         beta1.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("beta1", -1);
      }
      else throw new Asn1MissingRequiredException ("beta1");

      // encode beta2

      if (beta2 != null) {
         buffer.getContext().eventDispatcher.startElement("beta2", -1);

         beta2.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("beta2", -1);
      }
      else throw new Asn1MissingRequiredException ("beta2");

      // encode beta3

      if (beta3 != null) {
         buffer.getContext().eventDispatcher.startElement("beta3", -1);

         beta3.encode (buffer, -128, 127);

         buffer.getContext().eventDispatcher.endElement("beta3", -1);
      }
      else throw new Asn1MissingRequiredException ("beta3");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
