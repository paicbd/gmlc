/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasuredResultsElement extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "MeasuredResultsElement";
   }

   protected Asn1Integer physCellId;
   protected CellGlobalIdEUTRA_AndUTRA cellGlobalId;  // optional
   protected ARFCN_ValueEUTRA arfcnEUTRA;
   protected Asn1BitString systemFrameNumber;  // optional
   protected Asn1Integer rsrp_Result;  // optional
   protected Asn1Integer rsrq_Result;  // optional
   protected Asn1Integer ue_RxTxTimeDiff;  // optional
   protected ARFCN_ValueEUTRA_v9a0 arfcnEUTRA_v9a0;  // optional
   protected Asn1Integer nrsrp_Result_r14;  // optional
   protected Asn1Integer nrsrq_Result_r14;  // optional
   protected CarrierFreqOffsetNB_r14 carrierFreqOffsetNB_r14 = null;  // optional
   protected Asn1BitString hyperSFN_r14;  // optional
   protected Asn1Integer rsrp_Result_v1470;  // optional
   protected Asn1Integer rsrq_Result_v1470;  // optional
   protected Asn1OpenExt extElem1;

   public MeasuredResultsElement () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasuredResultsElement (
      Asn1Integer physCellId_,
      CellGlobalIdEUTRA_AndUTRA cellGlobalId_,
      ARFCN_ValueEUTRA arfcnEUTRA_,
      Asn1BitString systemFrameNumber_,
      Asn1Integer rsrp_Result_,
      Asn1Integer rsrq_Result_,
      Asn1Integer ue_RxTxTimeDiff_,
      ARFCN_ValueEUTRA_v9a0 arfcnEUTRA_v9a0_,
      Asn1Integer nrsrp_Result_r14_,
      Asn1Integer nrsrq_Result_r14_,
      CarrierFreqOffsetNB_r14 carrierFreqOffsetNB_r14_,
      Asn1BitString hyperSFN_r14_,
      Asn1Integer rsrp_Result_v1470_,
      Asn1Integer rsrq_Result_v1470_
   ) throws Asn1Exception {
      super();
      setPhysCellId (physCellId_);
      setCellGlobalId (cellGlobalId_);
      setArfcnEUTRA (arfcnEUTRA_);
      setSystemFrameNumber (systemFrameNumber_);
      setRsrp_Result (rsrp_Result_);
      setRsrq_Result (rsrq_Result_);
      setUe_RxTxTimeDiff (ue_RxTxTimeDiff_);
      setArfcnEUTRA_v9a0 (arfcnEUTRA_v9a0_);
      setNrsrp_Result_r14 (nrsrp_Result_r14_);
      setNrsrq_Result_r14 (nrsrq_Result_r14_);
      setCarrierFreqOffsetNB_r14 (carrierFreqOffsetNB_r14_);
      setHyperSFN_r14 (hyperSFN_r14_);
      setRsrp_Result_v1470 (rsrp_Result_v1470_);
      setRsrq_Result_v1470 (rsrq_Result_v1470_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasuredResultsElement (
      Asn1Integer physCellId_,
      ARFCN_ValueEUTRA arfcnEUTRA_
   ) throws Asn1Exception {
      super();
      setPhysCellId (physCellId_);
      setArfcnEUTRA (arfcnEUTRA_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasuredResultsElement (long physCellId_,
      CellGlobalIdEUTRA_AndUTRA cellGlobalId_,
      long arfcnEUTRA_,
      Asn1BitString systemFrameNumber_,
      long rsrp_Result_,
      long rsrq_Result_,
      long ue_RxTxTimeDiff_,
      long arfcnEUTRA_v9a0_,
      long nrsrp_Result_r14_,
      long nrsrq_Result_r14_,
      CarrierFreqOffsetNB_r14 carrierFreqOffsetNB_r14_,
      Asn1BitString hyperSFN_r14_,
      long rsrp_Result_v1470_,
      long rsrq_Result_v1470_
   ) throws Asn1Exception {
      super();
      setPhysCellId (physCellId_);
      setCellGlobalId (cellGlobalId_);
      setArfcnEUTRA (arfcnEUTRA_);
      setSystemFrameNumber (systemFrameNumber_);
      setRsrp_Result (rsrp_Result_);
      setRsrq_Result (rsrq_Result_);
      setUe_RxTxTimeDiff (ue_RxTxTimeDiff_);
      setArfcnEUTRA_v9a0 (arfcnEUTRA_v9a0_);
      setNrsrp_Result_r14 (nrsrp_Result_r14_);
      setNrsrq_Result_r14 (nrsrq_Result_r14_);
      setCarrierFreqOffsetNB_r14 (carrierFreqOffsetNB_r14_);
      setHyperSFN_r14 (hyperSFN_r14_);
      setRsrp_Result_v1470 (rsrp_Result_v1470_);
      setRsrq_Result_v1470 (rsrq_Result_v1470_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MeasuredResultsElement (
      long physCellId_,
      long arfcnEUTRA_
   ) throws Asn1Exception {
      super();
      setPhysCellId (physCellId_);
      setArfcnEUTRA (arfcnEUTRA_);
   }

   public void init () {
      physCellId = null;
      cellGlobalId = null;
      arfcnEUTRA = null;
      systemFrameNumber = null;
      rsrp_Result = null;
      rsrq_Result = null;
      ue_RxTxTimeDiff = null;
      arfcnEUTRA_v9a0 = null;
      nrsrp_Result_r14 = null;
      nrsrq_Result_r14 = null;
      carrierFreqOffsetNB_r14 = null;
      hyperSFN_r14 = null;
      rsrp_Result_v1470 = null;
      rsrq_Result_v1470 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof MeasuredResultsElement) ) return false;

      MeasuredResultsElement rhs = (MeasuredResultsElement) obj;

      if (physCellId == null) {
         if (rhs.physCellId != null) return false;
      }
      else {
         if (!physCellId.equals(rhs.physCellId)) {
            return false;
         }
      }

      if (cellGlobalId == null) {
         if (rhs.cellGlobalId != null) return false;
      }
      else {
         if (!cellGlobalId.equals(rhs.cellGlobalId)) {
            return false;
         }
      }

      if (arfcnEUTRA == null) {
         if (rhs.arfcnEUTRA != null) return false;
      }
      else {
         if (!arfcnEUTRA.equals(rhs.arfcnEUTRA)) {
            return false;
         }
      }

      if (systemFrameNumber == null) {
         if (rhs.systemFrameNumber != null) return false;
      }
      else {
         if (!systemFrameNumber.equals(rhs.systemFrameNumber)) {
            return false;
         }
      }

      if (rsrp_Result == null) {
         if (rhs.rsrp_Result != null) return false;
      }
      else {
         if (!rsrp_Result.equals(rhs.rsrp_Result)) {
            return false;
         }
      }

      if (rsrq_Result == null) {
         if (rhs.rsrq_Result != null) return false;
      }
      else {
         if (!rsrq_Result.equals(rhs.rsrq_Result)) {
            return false;
         }
      }

      if (ue_RxTxTimeDiff == null) {
         if (rhs.ue_RxTxTimeDiff != null) return false;
      }
      else {
         if (!ue_RxTxTimeDiff.equals(rhs.ue_RxTxTimeDiff)) {
            return false;
         }
      }

      if (arfcnEUTRA_v9a0 == null) {
         if (rhs.arfcnEUTRA_v9a0 != null) return false;
      }
      else {
         if (!arfcnEUTRA_v9a0.equals(rhs.arfcnEUTRA_v9a0)) {
            return false;
         }
      }

      if (nrsrp_Result_r14 == null) {
         if (rhs.nrsrp_Result_r14 != null) return false;
      }
      else {
         if (!nrsrp_Result_r14.equals(rhs.nrsrp_Result_r14)) {
            return false;
         }
      }

      if (nrsrq_Result_r14 == null) {
         if (rhs.nrsrq_Result_r14 != null) return false;
      }
      else {
         if (!nrsrq_Result_r14.equals(rhs.nrsrq_Result_r14)) {
            return false;
         }
      }

      if (carrierFreqOffsetNB_r14 == null) {
         if (rhs.carrierFreqOffsetNB_r14 != null) return false;
      }
      else {
         if (!carrierFreqOffsetNB_r14.equals(rhs.carrierFreqOffsetNB_r14)) {
            return false;
         }
      }

      if (hyperSFN_r14 == null) {
         if (rhs.hyperSFN_r14 != null) return false;
      }
      else {
         if (!hyperSFN_r14.equals(rhs.hyperSFN_r14)) {
            return false;
         }
      }

      if (rsrp_Result_v1470 == null) {
         if (rhs.rsrp_Result_v1470 != null) return false;
      }
      else {
         if (!rsrp_Result_v1470.equals(rhs.rsrp_Result_v1470)) {
            return false;
         }
      }

      if (rsrq_Result_v1470 == null) {
         if (rhs.rsrq_Result_v1470 != null) return false;
      }
      else {
         if (!rsrq_Result_v1470.equals(rhs.rsrq_Result_v1470)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (physCellId != null) __code = 31*__code + physCellId.hashCode();
      if (cellGlobalId != null) __code = 31*__code + cellGlobalId.hashCode();
      if (arfcnEUTRA != null) __code = 31*__code + arfcnEUTRA.hashCode();
      if (systemFrameNumber != null) __code = 31*__code + systemFrameNumber.hashCode();
      if (rsrp_Result != null) __code = 31*__code + rsrp_Result.hashCode();
      if (rsrq_Result != null) __code = 31*__code + rsrq_Result.hashCode();
      if (ue_RxTxTimeDiff != null) __code = 31*__code + ue_RxTxTimeDiff.hashCode();
      if (arfcnEUTRA_v9a0 != null) __code = 31*__code + arfcnEUTRA_v9a0.hashCode();
      if (nrsrp_Result_r14 != null) __code = 31*__code + nrsrp_Result_r14.hashCode();
      if (nrsrq_Result_r14 != null) __code = 31*__code + nrsrq_Result_r14.hashCode();
      if (carrierFreqOffsetNB_r14 != null) __code = 31*__code + carrierFreqOffsetNB_r14.hashCode();
      if (hyperSFN_r14 != null) __code = 31*__code + hyperSFN_r14.hashCode();
      if (rsrp_Result_v1470 != null) __code = 31*__code + rsrp_Result_v1470.hashCode();
      if (rsrq_Result_v1470 != null) __code = 31*__code + rsrq_Result_v1470.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for PhysCellId
    */
   public Asn1Integer getPhysCellId () {
      return physCellId;
   }

   public void setPhysCellId (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 503))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.physCellId = value;
   }

   public void setPhysCellId (long value) 
      throws Asn1Exception
   {
      setPhysCellId (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CellGlobalId
    */
   public CellGlobalIdEUTRA_AndUTRA getCellGlobalId () {
      return cellGlobalId;
   }

   public void setCellGlobalId (CellGlobalIdEUTRA_AndUTRA value) {
      this.cellGlobalId = value;
   }

   public boolean hasCellGlobalId () {
      return (cellGlobalId != null);
   }

   /**
    * Accessor/mutator methods for ArfcnEUTRA
    */
   public ARFCN_ValueEUTRA getArfcnEUTRA () {
      return arfcnEUTRA;
   }

   public void setArfcnEUTRA (ARFCN_ValueEUTRA value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.arfcnEUTRA = value;
   }

   public void setArfcnEUTRA (long value) 
      throws Asn1Exception
   {
      setArfcnEUTRA (new ARFCN_ValueEUTRA(value));
   }

   /**
    * Accessor/mutator methods for SystemFrameNumber
    */
   public Asn1BitString getSystemFrameNumber () {
      return systemFrameNumber;
   }

   public void setSystemFrameNumber (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 10)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.systemFrameNumber = value;
   }

   public boolean hasSystemFrameNumber () {
      return (systemFrameNumber != null);
   }

   /**
    * Accessor/mutator methods for Rsrp_Result
    */
   public Asn1Integer getRsrp_Result () {
      return rsrp_Result;
   }

   public void setRsrp_Result (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 97))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.rsrp_Result = value;
   }

   public void setRsrp_Result (long value) 
      throws Asn1Exception
   {
      setRsrp_Result (new Asn1Integer(value));
   }
   public boolean hasRsrp_Result () {
      return (rsrp_Result != null);
   }

   /**
    * Accessor/mutator methods for Rsrq_Result
    */
   public Asn1Integer getRsrq_Result () {
      return rsrq_Result;
   }

   public void setRsrq_Result (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 34))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.rsrq_Result = value;
   }

   public void setRsrq_Result (long value) 
      throws Asn1Exception
   {
      setRsrq_Result (new Asn1Integer(value));
   }
   public boolean hasRsrq_Result () {
      return (rsrq_Result != null);
   }

   /**
    * Accessor/mutator methods for Ue_RxTxTimeDiff
    */
   public Asn1Integer getUe_RxTxTimeDiff () {
      return ue_RxTxTimeDiff;
   }

   public void setUe_RxTxTimeDiff (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.ue_RxTxTimeDiff = value;
   }

   public void setUe_RxTxTimeDiff (long value) 
      throws Asn1Exception
   {
      setUe_RxTxTimeDiff (new Asn1Integer(value));
   }
   public boolean hasUe_RxTxTimeDiff () {
      return (ue_RxTxTimeDiff != null);
   }

   /**
    * Accessor/mutator methods for ArfcnEUTRA_v9a0
    */
   public ARFCN_ValueEUTRA_v9a0 getArfcnEUTRA_v9a0 () {
      return arfcnEUTRA_v9a0;
   }

   public void setArfcnEUTRA_v9a0 (ARFCN_ValueEUTRA_v9a0 value) 
      throws Asn1Exception
   {
      if (!((value.value >= 65536 && value.value <= 262143))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.arfcnEUTRA_v9a0 = value;
   }

   public void setArfcnEUTRA_v9a0 (long value) 
      throws Asn1Exception
   {
      setArfcnEUTRA_v9a0 (new ARFCN_ValueEUTRA_v9a0(value));
   }
   public boolean hasArfcnEUTRA_v9a0 () {
      return (arfcnEUTRA_v9a0 != null);
   }

   /**
    * Accessor/mutator methods for Nrsrp_Result_r14
    */
   public Asn1Integer getNrsrp_Result_r14 () {
      return nrsrp_Result_r14;
   }

   public void setNrsrp_Result_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 113))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nrsrp_Result_r14 = value;
   }

   public void setNrsrp_Result_r14 (long value) 
      throws Asn1Exception
   {
      setNrsrp_Result_r14 (new Asn1Integer(value));
   }
   public boolean hasNrsrp_Result_r14 () {
      return (nrsrp_Result_r14 != null);
   }

   /**
    * Accessor/mutator methods for Nrsrq_Result_r14
    */
   public Asn1Integer getNrsrq_Result_r14 () {
      return nrsrq_Result_r14;
   }

   public void setNrsrq_Result_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 74))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nrsrq_Result_r14 = value;
   }

   public void setNrsrq_Result_r14 (long value) 
      throws Asn1Exception
   {
      setNrsrq_Result_r14 (new Asn1Integer(value));
   }
   public boolean hasNrsrq_Result_r14 () {
      return (nrsrq_Result_r14 != null);
   }

   /**
    * Accessor/mutator methods for CarrierFreqOffsetNB_r14
    */
   public CarrierFreqOffsetNB_r14 getCarrierFreqOffsetNB_r14 () {
      return carrierFreqOffsetNB_r14;
   }

   public void setCarrierFreqOffsetNB_r14 (CarrierFreqOffsetNB_r14 value) {
      this.carrierFreqOffsetNB_r14 = value;
   }

   public boolean hasCarrierFreqOffsetNB_r14 () {
      return (carrierFreqOffsetNB_r14 != null);
   }

   /**
    * Accessor/mutator methods for HyperSFN_r14
    */
   public Asn1BitString getHyperSFN_r14 () {
      return hyperSFN_r14;
   }

   public void setHyperSFN_r14 (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 10)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.hyperSFN_r14 = value;
   }

   public boolean hasHyperSFN_r14 () {
      return (hyperSFN_r14 != null);
   }

   /**
    * Accessor/mutator methods for Rsrp_Result_v1470
    */
   public Asn1Integer getRsrp_Result_v1470 () {
      return rsrp_Result_v1470;
   }

   public void setRsrp_Result_v1470 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -17 && value.value <= -1))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.rsrp_Result_v1470 = value;
   }

   public void setRsrp_Result_v1470 (long value) 
      throws Asn1Exception
   {
      setRsrp_Result_v1470 (new Asn1Integer(value));
   }
   public boolean hasRsrp_Result_v1470 () {
      return (rsrp_Result_v1470 != null);
   }

   /**
    * Accessor/mutator methods for Rsrq_Result_v1470
    */
   public Asn1Integer getRsrq_Result_v1470 () {
      return rsrq_Result_v1470;
   }

   public void setRsrq_Result_v1470 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -30 && value.value <= 46))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.rsrq_Result_v1470 = value;
   }

   public void setRsrq_Result_v1470 (long value) 
      throws Asn1Exception
   {
      setRsrq_Result_v1470 (new Asn1Integer(value));
   }
   public boolean hasRsrq_Result_v1470 () {
      return (rsrq_Result_v1470 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 15; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return physCellId;
         case 1: return cellGlobalId;
         case 2: return arfcnEUTRA;
         case 3: return systemFrameNumber;
         case 4: return rsrp_Result;
         case 5: return rsrq_Result;
         case 6: return ue_RxTxTimeDiff;
         case 7: return arfcnEUTRA_v9a0;
         case 8: return nrsrp_Result_r14;
         case 9: return nrsrq_Result_r14;
         case 10: return carrierFreqOffsetNB_r14;
         case 11: return hyperSFN_r14;
         case 12: return rsrp_Result_v1470;
         case 13: return rsrq_Result_v1470;
         case 14: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "physCellId";
         case 1: return "cellGlobalId";
         case 2: return "arfcnEUTRA";
         case 3: return "systemFrameNumber";
         case 4: return "rsrp-Result";
         case 5: return "rsrq-Result";
         case 6: return "ue-RxTxTimeDiff";
         case 7: return "arfcnEUTRA-v9a0";
         case 8: return "nrsrp-Result-r14";
         case 9: return "nrsrq-Result-r14";
         case 10: return "carrierFreqOffsetNB-r14";
         case 11: return "hyperSFN-r14";
         case 12: return "rsrp-Result-v1470";
         case 13: return "rsrq-Result-v1470";
         case 14: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean cellGlobalIdPresent = buffer.decodeBit ("cellGlobalIdPresent");
      boolean systemFrameNumberPresent = buffer.decodeBit ("systemFrameNumberPresent");
      boolean rsrp_ResultPresent = buffer.decodeBit ("rsrp_ResultPresent");
      boolean rsrq_ResultPresent = buffer.decodeBit ("rsrq_ResultPresent");
      boolean ue_RxTxTimeDiffPresent = buffer.decodeBit ("ue_RxTxTimeDiffPresent");

      // decode physCellId

      buffer.getContext().eventDispatcher.startElement("physCellId", -1);

      physCellId = new Asn1Integer();
      physCellId.decode (buffer, 0, 503);
      buffer.getContext().eventDispatcher.endElement("physCellId", -1);

      // decode cellGlobalId

      if (cellGlobalIdPresent) {
         buffer.getContext().eventDispatcher.startElement("cellGlobalId", -1);

         cellGlobalId = new CellGlobalIdEUTRA_AndUTRA();
         cellGlobalId.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellGlobalId", -1);
      }
      else {
         cellGlobalId = null;
      }

      // decode arfcnEUTRA

      buffer.getContext().eventDispatcher.startElement("arfcnEUTRA", -1);

      arfcnEUTRA = new ARFCN_ValueEUTRA();
      arfcnEUTRA.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("arfcnEUTRA", -1);

      // decode systemFrameNumber

      if (systemFrameNumberPresent) {
         buffer.getContext().eventDispatcher.startElement("systemFrameNumber", -1);

         systemFrameNumber = new Asn1BitString();
         systemFrameNumber.decode (buffer, 10, 10);
         buffer.getContext().eventDispatcher.endElement("systemFrameNumber", -1);
      }
      else {
         systemFrameNumber = null;
      }

      // decode rsrp_Result

      if (rsrp_ResultPresent) {
         buffer.getContext().eventDispatcher.startElement("rsrp_Result", -1);

         rsrp_Result = new Asn1Integer();
         rsrp_Result.decode (buffer, 0, 97);
         buffer.getContext().eventDispatcher.endElement("rsrp_Result", -1);
      }
      else {
         rsrp_Result = null;
      }

      // decode rsrq_Result

      if (rsrq_ResultPresent) {
         buffer.getContext().eventDispatcher.startElement("rsrq_Result", -1);

         rsrq_Result = new Asn1Integer();
         rsrq_Result.decode (buffer, 0, 34);
         buffer.getContext().eventDispatcher.endElement("rsrq_Result", -1);
      }
      else {
         rsrq_Result = null;
      }

      // decode ue_RxTxTimeDiff

      if (ue_RxTxTimeDiffPresent) {
         buffer.getContext().eventDispatcher.startElement("ue_RxTxTimeDiff", -1);

         ue_RxTxTimeDiff = new Asn1Integer();
         ue_RxTxTimeDiff.decode (buffer, 0, 4095);
         buffer.getContext().eventDispatcher.endElement("ue_RxTxTimeDiff", -1);
      }
      else {
         ue_RxTxTimeDiff = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("arfcnEUTRA_v9a0Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("nrsrp_Result_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("nrsrq_Result_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("carrierFreqOffsetNB_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("hyperSFN_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("rsrp_Result_v1470Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("rsrq_Result_v1470Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode arfcnEUTRA_v9a0

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("arfcnEUTRA_v9a0", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            arfcnEUTRA_v9a0 = new ARFCN_ValueEUTRA_v9a0();
            arfcnEUTRA_v9a0.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("arfcnEUTRA_v9a0", -1);

         }
         else {
            arfcnEUTRA_v9a0 = null;
         }

         // decode nrsrp_Result_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("nrsrp_Result_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            nrsrp_Result_r14 = new Asn1Integer();
            nrsrp_Result_r14.decode (buffer, 0, 113);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("nrsrp_Result_r14", -1);

         }
         else {
            nrsrp_Result_r14 = null;
         }

         // decode nrsrq_Result_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("nrsrq_Result_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            nrsrq_Result_r14 = new Asn1Integer();
            nrsrq_Result_r14.decode (buffer, 0, 74);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("nrsrq_Result_r14", -1);

         }
         else {
            nrsrq_Result_r14 = null;
         }

         // decode carrierFreqOffsetNB_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("carrierFreqOffsetNB_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = CarrierFreqOffsetNB_r14.decodeEnumValue (buffer);
               carrierFreqOffsetNB_r14 = CarrierFreqOffsetNB_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("carrierFreqOffsetNB_r14", -1);

         }
         else {
            carrierFreqOffsetNB_r14 = null;
         }

         // decode hyperSFN_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("hyperSFN_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            hyperSFN_r14 = new Asn1BitString();
            hyperSFN_r14.decode (buffer, 10, 10);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("hyperSFN_r14", -1);

         }
         else {
            hyperSFN_r14 = null;
         }

         // decode rsrp_Result_v1470

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("rsrp_Result_v1470", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            rsrp_Result_v1470 = new Asn1Integer();
            rsrp_Result_v1470.decode (buffer, -17, -1);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("rsrp_Result_v1470", -1);

         }
         else {
            rsrp_Result_v1470 = null;
         }

         // decode rsrq_Result_v1470

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("rsrq_Result_v1470", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            rsrq_Result_v1470 = new Asn1Integer();
            rsrq_Result_v1470.decode (buffer, -30, 46);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("rsrq_Result_v1470", -1);

         }
         else {
            rsrq_Result_v1470 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((arfcnEUTRA_v9a0 != null) ||
      (nrsrp_Result_r14 != null) ||
      (nrsrq_Result_r14 != null) ||
      (carrierFreqOffsetNB_r14 != null) ||
      (hyperSFN_r14 != null) ||
      (rsrp_Result_v1470 != null) ||
      (rsrq_Result_v1470 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((cellGlobalId != null), null);
      buffer.encodeBit ((systemFrameNumber != null), null);
      buffer.encodeBit ((rsrp_Result != null), null);
      buffer.encodeBit ((rsrq_Result != null), null);
      buffer.encodeBit ((ue_RxTxTimeDiff != null), null);

      // encode physCellId

      if (physCellId != null) {
         buffer.getContext().eventDispatcher.startElement("physCellId", -1);

         physCellId.encode (buffer, 0, 503);

         buffer.getContext().eventDispatcher.endElement("physCellId", -1);
      }
      else throw new Asn1MissingRequiredException ("physCellId");

      // encode cellGlobalId

      if (cellGlobalId != null) {
         buffer.getContext().eventDispatcher.startElement("cellGlobalId", -1);

         cellGlobalId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cellGlobalId", -1);
      }

      // encode arfcnEUTRA

      if (arfcnEUTRA != null) {
         buffer.getContext().eventDispatcher.startElement("arfcnEUTRA", -1);

         arfcnEUTRA.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("arfcnEUTRA", -1);
      }
      else throw new Asn1MissingRequiredException ("arfcnEUTRA");

      // encode systemFrameNumber

      if (systemFrameNumber != null) {
         buffer.getContext().eventDispatcher.startElement("systemFrameNumber", -1);

         systemFrameNumber.encode (buffer, 10, 10);

         buffer.getContext().eventDispatcher.endElement("systemFrameNumber", -1);
      }

      // encode rsrp_Result

      if (rsrp_Result != null) {
         buffer.getContext().eventDispatcher.startElement("rsrp_Result", -1);

         rsrp_Result.encode (buffer, 0, 97);

         buffer.getContext().eventDispatcher.endElement("rsrp_Result", -1);
      }

      // encode rsrq_Result

      if (rsrq_Result != null) {
         buffer.getContext().eventDispatcher.startElement("rsrq_Result", -1);

         rsrq_Result.encode (buffer, 0, 34);

         buffer.getContext().eventDispatcher.endElement("rsrq_Result", -1);
      }

      // encode ue_RxTxTimeDiff

      if (ue_RxTxTimeDiff != null) {
         buffer.getContext().eventDispatcher.startElement("ue_RxTxTimeDiff", -1);

         ue_RxTxTimeDiff.encode (buffer, 0, 4095);

         buffer.getContext().eventDispatcher.endElement("ue_RxTxTimeDiff", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 7;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((arfcnEUTRA_v9a0 != null), null);
         buffer.encodeBit ((nrsrp_Result_r14 != null), null);
         buffer.encodeBit ((nrsrq_Result_r14 != null), null);
         buffer.encodeBit ((carrierFreqOffsetNB_r14 != null), null);
         buffer.encodeBit ((hyperSFN_r14 != null), null);
         buffer.encodeBit ((rsrp_Result_v1470 != null), null);
         buffer.encodeBit ((rsrq_Result_v1470 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // arfcnEUTRA_v9a0

         if (arfcnEUTRA_v9a0 != null) {
            buffer.reset();
            arfcnEUTRA_v9a0.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("arfcnEUTRA_v9a0", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("arfcnEUTRA_v9a0", -1);
         }

         // nrsrp_Result_r14

         if (nrsrp_Result_r14 != null) {
            buffer.reset();
            nrsrp_Result_r14.encode (buffer, 0, 113);
            buffer.getContext().eventDispatcher.startElement("nrsrp_Result_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("nrsrp_Result_r14", -1);
         }

         // nrsrq_Result_r14

         if (nrsrq_Result_r14 != null) {
            buffer.reset();
            nrsrq_Result_r14.encode (buffer, 0, 74);
            buffer.getContext().eventDispatcher.startElement("nrsrq_Result_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("nrsrq_Result_r14", -1);
         }

         // carrierFreqOffsetNB_r14

         if (carrierFreqOffsetNB_r14 != null) {
            buffer.reset();
            carrierFreqOffsetNB_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("carrierFreqOffsetNB_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("carrierFreqOffsetNB_r14", -1);
         }

         // hyperSFN_r14

         if (hyperSFN_r14 != null) {
            buffer.reset();
            hyperSFN_r14.encode (buffer, 10, 10);
            buffer.getContext().eventDispatcher.startElement("hyperSFN_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("hyperSFN_r14", -1);
         }

         // rsrp_Result_v1470

         if (rsrp_Result_v1470 != null) {
            buffer.reset();
            rsrp_Result_v1470.encode (buffer, -17, -1);
            buffer.getContext().eventDispatcher.startElement("rsrp_Result_v1470", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("rsrp_Result_v1470", -1);
         }

         // rsrq_Result_v1470

         if (rsrq_Result_v1470 != null) {
            buffer.reset();
            rsrq_Result_v1470.encode (buffer, -30, 46);
            buffer.getContext().eventDispatcher.startElement("rsrq_Result_v1470", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("rsrq_Result_v1470", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
