/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_POS_INIT;

import com.objsys.asn1j.runtime.*;

public class NavigationModel extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_POS_INITRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_POS_INITRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "NavigationModel";
   }

   protected Asn1Integer gpsWeek;
   protected Asn1Integer gpsToe;
   protected Asn1Integer nsat;
   protected Asn1Integer toeLimit;
   protected SatelliteInfo satInfo;  // optional
   protected Asn1OpenExt extElem1;

   public NavigationModel () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NavigationModel (
      Asn1Integer gpsWeek_,
      Asn1Integer gpsToe_,
      Asn1Integer nsat_,
      Asn1Integer toeLimit_,
      SatelliteInfo satInfo_
   ) throws Asn1Exception {
      super();
      setGpsWeek (gpsWeek_);
      setGpsToe (gpsToe_);
      setNsat (nsat_);
      setToeLimit (toeLimit_);
      setSatInfo (satInfo_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public NavigationModel (
      Asn1Integer gpsWeek_,
      Asn1Integer gpsToe_,
      Asn1Integer nsat_,
      Asn1Integer toeLimit_
   ) throws Asn1Exception {
      super();
      setGpsWeek (gpsWeek_);
      setGpsToe (gpsToe_);
      setNsat (nsat_);
      setToeLimit (toeLimit_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NavigationModel (long gpsWeek_,
      long gpsToe_,
      long nsat_,
      long toeLimit_,
      SatelliteInfo satInfo_
   ) throws Asn1Exception {
      super();
      setGpsWeek (gpsWeek_);
      setGpsToe (gpsToe_);
      setNsat (nsat_);
      setToeLimit (toeLimit_);
      setSatInfo (satInfo_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public NavigationModel (
      long gpsWeek_,
      long gpsToe_,
      long nsat_,
      long toeLimit_
   ) throws Asn1Exception {
      super();
      setGpsWeek (gpsWeek_);
      setGpsToe (gpsToe_);
      setNsat (nsat_);
      setToeLimit (toeLimit_);
   }

   public void init () {
      gpsWeek = null;
      gpsToe = null;
      nsat = null;
      toeLimit = null;
      satInfo = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof NavigationModel) ) return false;

      NavigationModel rhs = (NavigationModel) obj;

      if (gpsWeek == null) {
         if (rhs.gpsWeek != null) return false;
      }
      else {
         if (!gpsWeek.equals(rhs.gpsWeek)) {
            return false;
         }
      }

      if (gpsToe == null) {
         if (rhs.gpsToe != null) return false;
      }
      else {
         if (!gpsToe.equals(rhs.gpsToe)) {
            return false;
         }
      }

      if (nsat == null) {
         if (rhs.nsat != null) return false;
      }
      else {
         if (!nsat.equals(rhs.nsat)) {
            return false;
         }
      }

      if (toeLimit == null) {
         if (rhs.toeLimit != null) return false;
      }
      else {
         if (!toeLimit.equals(rhs.toeLimit)) {
            return false;
         }
      }

      if (satInfo == null) {
         if (rhs.satInfo != null) return false;
      }
      else {
         if (!satInfo.equals(rhs.satInfo)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gpsWeek != null) __code = 31*__code + gpsWeek.hashCode();
      if (gpsToe != null) __code = 31*__code + gpsToe.hashCode();
      if (nsat != null) __code = 31*__code + nsat.hashCode();
      if (toeLimit != null) __code = 31*__code + toeLimit.hashCode();
      if (satInfo != null) __code = 31*__code + satInfo.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for GpsWeek
    */
   public Asn1Integer getGpsWeek () {
      return gpsWeek;
   }

   public void setGpsWeek (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gpsWeek = value;
   }

   public void setGpsWeek (long value) 
      throws Asn1Exception
   {
      setGpsWeek (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GpsToe
    */
   public Asn1Integer getGpsToe () {
      return gpsToe;
   }

   public void setGpsToe (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 167))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gpsToe = value;
   }

   public void setGpsToe (long value) 
      throws Asn1Exception
   {
      setGpsToe (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Nsat
    */
   public Asn1Integer getNsat () {
      return nsat;
   }

   public void setNsat (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 31))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nsat = value;
   }

   public void setNsat (long value) 
      throws Asn1Exception
   {
      setNsat (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ToeLimit
    */
   public Asn1Integer getToeLimit () {
      return toeLimit;
   }

   public void setToeLimit (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 10))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.toeLimit = value;
   }

   public void setToeLimit (long value) 
      throws Asn1Exception
   {
      setToeLimit (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SatInfo
    */
   public SatelliteInfo getSatInfo () {
      return satInfo;
   }

   public void setSatInfo (SatelliteInfo value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 31))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.satInfo = value;
   }

   public boolean hasSatInfo () {
      return (satInfo != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gpsWeek;
         case 1: return gpsToe;
         case 2: return nsat;
         case 3: return toeLimit;
         case 4: return satInfo;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gpsWeek";
         case 1: return "gpsToe";
         case 2: return "nsat";
         case 3: return "toeLimit";
         case 4: return "satInfo";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean satInfoPresent = buffer.decodeBit ("satInfoPresent");

      // decode gpsWeek

      buffer.getContext().eventDispatcher.startElement("gpsWeek", -1);

      gpsWeek = new Asn1Integer();
      gpsWeek.decode (buffer, 0, 1023);
      buffer.getContext().eventDispatcher.endElement("gpsWeek", -1);

      // decode gpsToe

      buffer.getContext().eventDispatcher.startElement("gpsToe", -1);

      gpsToe = new Asn1Integer();
      gpsToe.decode (buffer, 0, 167);
      buffer.getContext().eventDispatcher.endElement("gpsToe", -1);

      // decode nsat

      buffer.getContext().eventDispatcher.startElement("nsat", -1);

      nsat = new Asn1Integer();
      nsat.decode (buffer, 0, 31);
      buffer.getContext().eventDispatcher.endElement("nsat", -1);

      // decode toeLimit

      buffer.getContext().eventDispatcher.startElement("toeLimit", -1);

      toeLimit = new Asn1Integer();
      toeLimit.decode (buffer, 0, 10);
      buffer.getContext().eventDispatcher.endElement("toeLimit", -1);

      // decode satInfo

      if (satInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("satInfo", -1);

         satInfo = new SatelliteInfo();
         satInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("satInfo", -1);
      }
      else {
         satInfo = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((satInfo != null), null);

      // encode gpsWeek

      if (gpsWeek != null) {
         buffer.getContext().eventDispatcher.startElement("gpsWeek", -1);

         gpsWeek.encode (buffer, 0, 1023);

         buffer.getContext().eventDispatcher.endElement("gpsWeek", -1);
      }
      else throw new Asn1MissingRequiredException ("gpsWeek");

      // encode gpsToe

      if (gpsToe != null) {
         buffer.getContext().eventDispatcher.startElement("gpsToe", -1);

         gpsToe.encode (buffer, 0, 167);

         buffer.getContext().eventDispatcher.endElement("gpsToe", -1);
      }
      else throw new Asn1MissingRequiredException ("gpsToe");

      // encode nsat

      if (nsat != null) {
         buffer.getContext().eventDispatcher.startElement("nsat", -1);

         nsat.encode (buffer, 0, 31);

         buffer.getContext().eventDispatcher.endElement("nsat", -1);
      }
      else throw new Asn1MissingRequiredException ("nsat");

      // encode toeLimit

      if (toeLimit != null) {
         buffer.getContext().eventDispatcher.startElement("toeLimit", -1);

         toeLimit.encode (buffer, 0, 10);

         buffer.getContext().eventDispatcher.endElement("toeLimit", -1);
      }
      else throw new Asn1MissingRequiredException ("toeLimit");

      // encode satInfo

      if (satInfo != null) {
         buffer.getContext().eventDispatcher.startElement("satInfo", -1);

         satInfo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("satInfo", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
