/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NR_DL_PRS_ProcessingCapability_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "NR-DL-PRS-ProcessingCapability-r16";
   }

   protected NR_DL_PRS_ProcessingCapability_r16_prs_ProcessingCapabilityBandList_r16 prs_ProcessingCapabilityBandList_r16;
   protected Asn1Integer maxSupportedFreqLayers_r16;
   protected NR_DL_PRS_ProcessingCapability_r16_simulLTE_NR_PRS_r16 simulLTE_NR_PRS_r16 = null;  // optional
   protected Asn1OpenExt extElem1;

   public NR_DL_PRS_ProcessingCapability_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NR_DL_PRS_ProcessingCapability_r16 (
      NR_DL_PRS_ProcessingCapability_r16_prs_ProcessingCapabilityBandList_r16 prs_ProcessingCapabilityBandList_r16_,
      Asn1Integer maxSupportedFreqLayers_r16_,
      NR_DL_PRS_ProcessingCapability_r16_simulLTE_NR_PRS_r16 simulLTE_NR_PRS_r16_
   ) throws Asn1Exception {
      super();
      setPrs_ProcessingCapabilityBandList_r16 (prs_ProcessingCapabilityBandList_r16_);
      setMaxSupportedFreqLayers_r16 (maxSupportedFreqLayers_r16_);
      setSimulLTE_NR_PRS_r16 (simulLTE_NR_PRS_r16_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public NR_DL_PRS_ProcessingCapability_r16 (
      NR_DL_PRS_ProcessingCapability_r16_prs_ProcessingCapabilityBandList_r16 prs_ProcessingCapabilityBandList_r16_,
      Asn1Integer maxSupportedFreqLayers_r16_
   ) throws Asn1Exception {
      super();
      setPrs_ProcessingCapabilityBandList_r16 (prs_ProcessingCapabilityBandList_r16_);
      setMaxSupportedFreqLayers_r16 (maxSupportedFreqLayers_r16_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NR_DL_PRS_ProcessingCapability_r16 (NR_DL_PRS_ProcessingCapability_r16_prs_ProcessingCapabilityBandList_r16 prs_ProcessingCapabilityBandList_r16_,
      long maxSupportedFreqLayers_r16_,
      NR_DL_PRS_ProcessingCapability_r16_simulLTE_NR_PRS_r16 simulLTE_NR_PRS_r16_
   ) throws Asn1Exception {
      super();
      setPrs_ProcessingCapabilityBandList_r16 (prs_ProcessingCapabilityBandList_r16_);
      setMaxSupportedFreqLayers_r16 (maxSupportedFreqLayers_r16_);
      setSimulLTE_NR_PRS_r16 (simulLTE_NR_PRS_r16_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public NR_DL_PRS_ProcessingCapability_r16 (
      NR_DL_PRS_ProcessingCapability_r16_prs_ProcessingCapabilityBandList_r16 prs_ProcessingCapabilityBandList_r16_,
      long maxSupportedFreqLayers_r16_
   ) throws Asn1Exception {
      super();
      setPrs_ProcessingCapabilityBandList_r16 (prs_ProcessingCapabilityBandList_r16_);
      setMaxSupportedFreqLayers_r16 (maxSupportedFreqLayers_r16_);
   }

   public void init () {
      prs_ProcessingCapabilityBandList_r16 = null;
      maxSupportedFreqLayers_r16 = null;
      simulLTE_NR_PRS_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof NR_DL_PRS_ProcessingCapability_r16) ) return false;

      NR_DL_PRS_ProcessingCapability_r16 rhs = (NR_DL_PRS_ProcessingCapability_r16) obj;

      if (prs_ProcessingCapabilityBandList_r16 == null) {
         if (rhs.prs_ProcessingCapabilityBandList_r16 != null) return false;
      }
      else {
         if (!prs_ProcessingCapabilityBandList_r16.equals(rhs.prs_ProcessingCapabilityBandList_r16)) {
            return false;
         }
      }

      if (maxSupportedFreqLayers_r16 == null) {
         if (rhs.maxSupportedFreqLayers_r16 != null) return false;
      }
      else {
         if (!maxSupportedFreqLayers_r16.equals(rhs.maxSupportedFreqLayers_r16)) {
            return false;
         }
      }

      if (simulLTE_NR_PRS_r16 == null) {
         if (rhs.simulLTE_NR_PRS_r16 != null) return false;
      }
      else {
         if (!simulLTE_NR_PRS_r16.equals(rhs.simulLTE_NR_PRS_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (prs_ProcessingCapabilityBandList_r16 != null) __code = 31*__code + prs_ProcessingCapabilityBandList_r16.hashCode();
      if (maxSupportedFreqLayers_r16 != null) __code = 31*__code + maxSupportedFreqLayers_r16.hashCode();
      if (simulLTE_NR_PRS_r16 != null) __code = 31*__code + simulLTE_NR_PRS_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Prs_ProcessingCapabilityBandList_r16
    */
   public NR_DL_PRS_ProcessingCapability_r16_prs_ProcessingCapabilityBandList_r16 getPrs_ProcessingCapabilityBandList_r16 () {
      return prs_ProcessingCapabilityBandList_r16;
   }

   public void setPrs_ProcessingCapabilityBandList_r16 (NR_DL_PRS_ProcessingCapability_r16_prs_ProcessingCapabilityBandList_r16 value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 1024))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.prs_ProcessingCapabilityBandList_r16 = value;
   }

   /**
    * Accessor/mutator methods for MaxSupportedFreqLayers_r16
    */
   public Asn1Integer getMaxSupportedFreqLayers_r16 () {
      return maxSupportedFreqLayers_r16;
   }

   public void setMaxSupportedFreqLayers_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 4))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.maxSupportedFreqLayers_r16 = value;
   }

   public void setMaxSupportedFreqLayers_r16 (long value) 
      throws Asn1Exception
   {
      setMaxSupportedFreqLayers_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SimulLTE_NR_PRS_r16
    */
   public NR_DL_PRS_ProcessingCapability_r16_simulLTE_NR_PRS_r16 getSimulLTE_NR_PRS_r16 () {
      return simulLTE_NR_PRS_r16;
   }

   public void setSimulLTE_NR_PRS_r16 (NR_DL_PRS_ProcessingCapability_r16_simulLTE_NR_PRS_r16 value) {
      this.simulLTE_NR_PRS_r16 = value;
   }

   public boolean hasSimulLTE_NR_PRS_r16 () {
      return (simulLTE_NR_PRS_r16 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return prs_ProcessingCapabilityBandList_r16;
         case 1: return maxSupportedFreqLayers_r16;
         case 2: return simulLTE_NR_PRS_r16;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "prs-ProcessingCapabilityBandList-r16";
         case 1: return "maxSupportedFreqLayers-r16";
         case 2: return "simulLTE-NR-PRS-r16";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean simulLTE_NR_PRS_r16Present = buffer.decodeBit ("simulLTE_NR_PRS_r16Present");

      // decode prs_ProcessingCapabilityBandList_r16

      buffer.getContext().eventDispatcher.startElement("prs_ProcessingCapabilityBandList_r16", -1);

      prs_ProcessingCapabilityBandList_r16 = new NR_DL_PRS_ProcessingCapability_r16_prs_ProcessingCapabilityBandList_r16();
      prs_ProcessingCapabilityBandList_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("prs_ProcessingCapabilityBandList_r16", -1);

      // decode maxSupportedFreqLayers_r16

      buffer.getContext().eventDispatcher.startElement("maxSupportedFreqLayers_r16", -1);

      maxSupportedFreqLayers_r16 = new Asn1Integer();
      maxSupportedFreqLayers_r16.decode (buffer, 1, 4);
      buffer.getContext().eventDispatcher.endElement("maxSupportedFreqLayers_r16", -1);

      // decode simulLTE_NR_PRS_r16

      if (simulLTE_NR_PRS_r16Present) {
         buffer.getContext().eventDispatcher.startElement("simulLTE_NR_PRS_r16", -1);

         int tval = NR_DL_PRS_ProcessingCapability_r16_simulLTE_NR_PRS_r16.decodeEnumValue (buffer);
         simulLTE_NR_PRS_r16 = NR_DL_PRS_ProcessingCapability_r16_simulLTE_NR_PRS_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("simulLTE_NR_PRS_r16", -1);
      }
      else {
         simulLTE_NR_PRS_r16 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((simulLTE_NR_PRS_r16 != null), null);

      // encode prs_ProcessingCapabilityBandList_r16

      if (prs_ProcessingCapabilityBandList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("prs_ProcessingCapabilityBandList_r16", -1);

         prs_ProcessingCapabilityBandList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("prs_ProcessingCapabilityBandList_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("prs_ProcessingCapabilityBandList_r16");

      // encode maxSupportedFreqLayers_r16

      if (maxSupportedFreqLayers_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("maxSupportedFreqLayers_r16", -1);

         maxSupportedFreqLayers_r16.encode (buffer, 1, 4);

         buffer.getContext().eventDispatcher.endElement("maxSupportedFreqLayers_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("maxSupportedFreqLayers_r16");

      // encode simulLTE_NR_PRS_r16

      if (simulLTE_NR_PRS_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("simulLTE_NR_PRS_r16", -1);

         simulLTE_NR_PRS_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("simulLTE_NR_PRS_r16", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
