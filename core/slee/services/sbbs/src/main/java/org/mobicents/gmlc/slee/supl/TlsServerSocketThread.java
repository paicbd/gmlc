package org.mobicents.gmlc.slee.supl;

import com.objsys.asn1j.runtime.Asn1OctetString;
import com.objsys.asn1j.runtime.Asn1PerDecodeBuffer;
import com.objsys.asn1j.runtime.Asn1PerEncodeBuffer;
import com.objsys.asn1j.runtime.Asn1Integer;
import org.mobicents.gmlc.slee.supl.SUPL_END.SUPLEND;
import org.mobicents.gmlc.slee.supl.SUPL_POS.PosPayLoad;
import org.mobicents.gmlc.slee.supl.SUPL_POS.SUPLPOS;
import org.mobicents.gmlc.slee.supl.SUPL_POS_INIT.SUPLPOSINIT;
import org.mobicents.gmlc.slee.supl.SUPL_RESPONSE.SUPLRESPONSE;
import org.mobicents.gmlc.slee.supl.SUPL_START.SUPLSTART;
import org.mobicents.gmlc.slee.supl.ULP.ULP_PDU;
import org.mobicents.gmlc.slee.supl.ULP.UlpMessage;
import org.mobicents.gmlc.slee.supl.ULP_Components.PosMethod;
import org.mobicents.gmlc.slee.supl.ULP_Version_2_parameter_extensions.Ver2_PosPayLoad_extension;
import org.mobicents.gmlc.slee.supl.ULP_Version_2_parameter_extensions.Ver2_PosPayLoad_extension_lPPPayload;
import org.mobicents.gmlc.slee.utils.ByteUtils;

import javax.net.ssl.HandshakeCompletedEvent;
import javax.net.ssl.HandshakeCompletedListener;
import javax.net.ssl.SSLServerSocket;
import javax.net.ssl.SSLSocket;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.Arrays;
import java.util.logging.Logger;

/**
 * @author <a href="mailto:kennymendieta89@gmail.com"> Kenny Mendieta </a>
 */
public abstract class TlsServerSocketThread implements Runnable {

    private static final Logger logger = Logger.getLogger(TlsServerSocketThread.class.getName());
    private SSLServerSocket serverSocket;
    private static final short HEADER_SIZE = 2;
    /** BUFFER_SIZE data size that is enough to hold SUPL responses */
    private static final int RESPONSE_BUFFER_SIZE = 16384;

    private final ByteBuffer messageLengthReadBuffer = ByteBuffer.allocate(2).order(ByteOrder.BIG_ENDIAN);

    /**
     * Constructs a TlsServerSocketThread based on <b>ss</b> and
     * obtains a file's bytecodes using the method <b>getBytes</b>.
     *
     */
    protected TlsServerSocketThread(SSLServerSocket serverSocket) {
        this.serverSocket = serverSocket;
        newListener();
    }

    /**
     * The "listen" thread that accepts a connection to the
     * server.
     */
    public void run() {
        SSLSocket socket;

        // accept a connection
        try {
            socket = (SSLSocket)serverSocket.accept();
            socket.addHandshakeCompletedListener(new HandshakeCompletedListener() {
                @Override
                public void handshakeCompleted(HandshakeCompletedEvent handshakeCompletedEvent) {
                    logger.info("Handshake completed :) ");
                }
            });
        } catch (IOException e) {
            logger.severe("Class Server died: " + e.getMessage());
            e.printStackTrace();
            return;
        }

        // create a new thread to accept the next connection
        newListener();
        try {
            OutputStream rawOut = socket.getOutputStream();
            try {
                // Receive the SUPL START message from the client
                logger.info("Receive the SUPL START message from the client (SET)");
                InputStream is = socket.getInputStream();
                byte[] bytecodes = getSuplRequest(is);
                ULP_PDU suplRequestMessage = new ULP_PDU();
                suplRequestMessage.decode(new Asn1PerDecodeBuffer(bytecodes, false));
                SUPLSTART suplStart = suplRequestMessage.getMessage().getMsSUPLSTART();
                logger.info("Received the SUPL START message from the client (SET): " + suplStart);

                // Send the SUPL RESPONSE message to the client
                logger.info("Send the SUPL RESPONSE message to the client (SET)");
                SUPLRESPONSE suplResponse = new SUPLRESPONSE(PosMethod.agpsSETbased());
                UlpMessage ulpMessage = new UlpMessage();
                ulpMessage.setMsSUPLRESPONSE(suplResponse);
                ULP_PDU suplResponseMessage = new ULP_PDU(suplRequestMessage.getLength_(), suplRequestMessage.getVersion(), suplRequestMessage.getSessionID(), ulpMessage);
                byte[] bytesResponse = encodeUlp(suplResponseMessage);
                rawOut.write(bytesResponse);
                logger.info("Sent the SUPL RESPONSE message to the client (SET)");

                // Receive the SUPL POS INIT message from the client
                logger.info("Receive the SUPL POS INIT message from the client (SET)");
                InputStream isPosInit = socket.getInputStream();
                byte[] bytesPosInit = getSuplRequest(isPosInit);
                ULP_PDU suplRequestPosInit = new ULP_PDU();
                suplRequestPosInit.decode(new Asn1PerDecodeBuffer(bytesPosInit, false));
                SUPLPOSINIT suplPosInit = suplRequestPosInit.getMessage().getMsSUPLPOSINIT();
                logger.info("Received the SUPL POS INIT message from the client (SET): " + suplPosInit);

                // Send the SUPL POS message to the client (SET)
                logger.info("Send the SUPL POS message to the client (SET)");
                Asn1OctetString[] asn1OctetStringsArray = new Asn1OctetString[1];
                asn1OctetStringsArray[0] = new Asn1OctetString(lppBytes());
                Ver2_PosPayLoad_extension_lPPPayload lPPPayload = new Ver2_PosPayLoad_extension_lPPPayload(asn1OctetStringsArray);
                Ver2_PosPayLoad_extension payLoadExtension = new Ver2_PosPayLoad_extension();
                payLoadExtension.setLPPPayload(lPPPayload);
                PosPayLoad posPayLoad = new PosPayLoad();
                posPayLoad.setVer2_PosPayLoad_extension(payLoadExtension);
                SUPLPOS suplPos = new SUPLPOS(posPayLoad);
                UlpMessage ulpPos = new UlpMessage();
                ulpPos.setMsSUPLPOS(suplPos);
                ULP_PDU suplPosPdu = new ULP_PDU(suplRequestMessage.getLength_(), suplRequestMessage.getVersion(), suplRequestMessage.getSessionID(), ulpPos);
                rawOut.write(encodeUlp(suplPosPdu));

                logger.info("Sent the SUPL POS message to the client (SET)");

                // Receive the SUPL POS message
                logger.info("Receive the SUPL POS message from the client (SET)");
                InputStream isSuplPos = socket.getInputStream();
                byte[] bytesSuplPos = getSuplRequest(isSuplPos);
                ULP_PDU suplPosPduResponse = new ULP_PDU();
                suplPosPduResponse.decode(new Asn1PerDecodeBuffer(bytesSuplPos, false));
                SUPLPOS setSuplPos = suplPosPduResponse.getMessage().getMsSUPLPOS();
                logger.info("Received the SUPL POS message from the client (SET): " + setSuplPos);

                // Send the SUPL END message to the client
                logger.info("Send the SUPL END message to the client (SET)");
                SUPLEND suplEnd = new SUPLEND();
                UlpMessage ulpMessageSuplEnd = new UlpMessage();
                ulpMessageSuplEnd.setMsSUPLEND(suplEnd);
                ULP_PDU ulpPduSuplEnd = new ULP_PDU(suplRequestMessage.getLength_(), suplRequestMessage.getVersion(), suplRequestMessage.getSessionID(), ulpMessageSuplEnd);
                rawOut.write(encodeUlp(ulpPduSuplEnd));
                logger.info("Sent the SUPL END message to the client (SET).\n Call flow completed");
                rawOut.flush();

            } catch (Exception e) {
                e.printStackTrace();
            }

        } catch (IOException ex) {
            // eat exception (could log error to log file, but
            // write out to stdout for now).
            logger.severe("IOException over the call flow thread: " + ex.getMessage());
            ex.printStackTrace();

        } finally {
            try {
                socket.close();
            } catch (IOException e) {
                logger.severe("IOException when closing the socket: " + e.getMessage());
            }
        }
    }

    public byte[] lppBytes() {
        String stringToBytes = "9209182338201D74B61E4721A9C779497A080007FFE01FE2311504FEFD5706FCF600B57F705A106600F000003B" +
            "126AC403FD36E8C4F1429135628773CD8EB031305A5E31FEA35015FFB0AA0A9A10D76D5A8199A550D716C4782A5802A88A3A6F880A682" +
            "5940000000000000000000003E02000AC49AB100FFC4635392D0A44D5841F1D3F3B37056BEDC577FA1E20A5E6A7086268435013A9CEEB" +
            "8E8283D2CC209B201CA27629421FDDA0A910000000000000000000000F8100022126AC403FD1B69FC5082913562864940DAB928815F3E" +
            "DDFEA5E407001395F87A10CE6BBA77723DB37BA7847751F7FE08C37A2107FD376A740000000000000000000003E060093049AB100FFE0" +
            "CD6D3BB8A44D5807F297A9AF768EF765007FAA43009AFE388CA2843845929C8920498F0B6A69F29A002655DE5B820089F4DD000000000" +
            "0000000000000F820001F126AC403FFB3D657AD029135628F9C2252CBB6F0A71A69FE95DC0C5DDD89E78A10EE08AA6EF2354363EF6937" +
            "5BB7FFE8D24A0787FD376FC40000000000000000000003E0A0019849AB1010037025C4440A64D5857B45A93AC7D55F3B8897FA7FA012B" +
            "805784CA8437F3FEA05041EC346D5B920636004A24769AAA000E05D50000000000000000000000F8300010126AC4040324870C8D02913" +
            "56082C5573AD934D2437B65FE9EC01E4E818E45BA10CA7D9A6CB43BF8D64391C84677FE98D2B9EFF806A8370400000000000000000000" +
            "03E0E0010C49AB100FFE8FB31DC58A44D588152AD76AF3BA6B14B577FA898033F648E75B28432D1229DB43E1F86C5F8B616AE008245E2" +
            "6C76006215B10000000000000000000000F8400025126AC403FF4A9AF8B0629135632AAB59E6C33AE18498C9FEA44403DF517A320A10E" +
            "6D25A6D74CF261B3A8087C667FD394D996F080147D0640000000000000000000003E12000A049AB100FF78E40FE428A44D5817A73104A" +
            "E8FF8774A1C7FA8D5035DEDCC7D22843591669DD7BC88DE70DAEDCD31FF92353E8296001DD4890000000000000000000000F858001912" +
            "6AC403FE9BDFB0CCA2913562C441705EC2FC56679889FEA7C411619EC5CCBA10E0A2FA7AD36F7BAA131D0823980048F4B9EA180858209" +
            "40000000000000000000003E18000C449AB10100532027C340A44D58A828931BAE9C8D666F337FA9EC02859D348D5E8435D9DE9DCC27A" +
            "19EEFB779FB3E00B657BA5BD9FF3DFAB10000000000000000000000F868005F126AC403FF1C62D3EDE29135639A1624CED100AAD6CBF1" +
            "FE9BF8013FFD3DC3DA10DFD94A7012515B98BCCD281A2800A8F859DA87FE5818540000000000000000000003E1C0018849AB101002ED7" +
            "76AB48A44D58A7CD70D7B7F57FA806FD7FA37506B627058B9284334BC69762770D76D1AAEDEFC60216574E5221FF59F26100000000000" +
            "00000000000F8780023126AC403FE62B7958D429135626DFD633EC3DF29F4D209FEA26C19175029B0AA10D73BDA7AE1D95BB64F80E809" +
            "5800591359D1D7F54809340000000000000000000003E200014849AB101006F70BD2B40A44D58400EE064AB1FA48C924E7FA86406D62E" +
            "1179368432D86AA01D12FF936483761329FF26470A74B9FE1210410000000000000000000000F88801BB126AC403FFF5709F8DC291356" +
            "3E12BCE72C0AD55D04DC9FE98B402A74C720DAA10D58DAA76F6D730DF15B9882677FCE8831A6C27FD4820A40000000000000000000003" +
            "E240006849AB1010058FD61DAF0A44D58C9ECEE7EAAD90A9B7A507FAC0204B5ECB97D368434535A9FDF7C779AC1FDB219F6014E429676" +
            "3A00C217450000000000000000000000F8980019126AC403FFEE24598DC2913563ECCE5D0AD88D14EE9215FE8F0C0C573DD1FF7A0FDA8" +
            "4CA6325C4E31D5205F74C77FDA8BAAA0987FCB766A40000000000000000000003E280015849AB10100331D880350A44D5851181859B43" +
            "8AC4206687FA3370C5E89C281E684362D1A9BFA0AC82849A36A0A91FBC2245A91FA017A03290000000000000000000000F8A80013126A" +
            "C4040271689B0B229135615E96A31AE0F1F3FE62F9FE8ADC0E7BB255EC0A10C6F55A60FBE9E33B9AF2B76167F7F8AA0A1EE7FE4774D40" +
            "000000000000000000003E2C00B5049AB100FFD71D681370A44D58E84BE700AFBF3C65A9027FA7710090DD087E268434D6969D069448D" +
            "AA4CD45CF0E00AE348A827A000DD6350000000000000000000000F8BFE034126AC404085C1A0CD0C2A53562784BEDB2EDA56A6BC4F5FE" +
            "8CFC16994966274A10DD959A61E299C8A3A484B842780598E219D908077841B40000000000000000000003E30001A449AB10100812035" +
            "2460A44D58A752BF45B34C0923203B7FA8930515B0266FDA84346FAA9CA5DA72DE9BDC7E083DFDEA3CF2765A014A06550000000000000" +
            "000000000F8C80032126AC404016C4EDA51E291356231CD618EE4C3B36CB759FE96DC0BDBA34DBEDA10E4EC9A662DA15B5F6DB5080C77" +
            "FD88F069D117FC480AD40000000000000000000003E340007449AB100FF88E165BC20A44D5898D3236CACC9A45BC69C7FA89904CEA64C" +
            "76028435FD269F1A1A5F898949BE1CEA00F64D166809FFD21B990000000000000000000000F8D80028126AC403FE6E63A48D029935612" +
            "5927036BFC3036455F5FEA87423C0BA6DC31A112800CA7A48F96BB8A3201813F7F548F5D9E658086808840000000000000000000003E3" +
            "80008049AB100FF8CA8764350A44D58D63AF40DA9ADABEB85967FAAFA00E52FD57AB28435153EA06A42D795697CDA1FF1FFC6472A713A" +
            "000E19B10000000000000000000000F8E80022126AC403FE9A4BE3710291356036D273EAEB10BA05F2DDFE8F840A7698FA2D6A10DB4AB" +
            "A631052B8E1CD54C84347FD58E169DD8803982FD40000000000000000000003E3C0019049AB100FFDAE267DB20A44D588A812C3BB6131" +
            "DA0DE4B7FA79C05164F558BC684388FA69BE124A2385221FE12A5FE1A3BAE7989FF560E7D0000000000000000000000F8F80026126AC4" +
            "03FFFC171D10229135607B8350CEBFB30A9D4631FEA55009F7781E32CA10D578EA700F869621AB3B47AF880239646951A7FC67BD24000" +
            "0000000000000000003E002ECD49D78401600A6CD9F5400284347035C48E876D6D7046CB74BFD101A5E68D587D3E00A10CDD0A0F0141F" +
            "14666B8DF31AFFC40870064425F51C02843200DEE81E86553CC13B45B53FD10309B38BBC7D5D00A10DAC63C2A40816399ECC9C66D0004" +
            "10C5E62229F4E8028439C4D8FA0A8FB853307029EB40010512B79ADE7D4E00A10D9F0D1B1257B07865F0DD813004419E4E21949F51802" +
            "8430EA358FA882C009122F1A43C0310733FA90687D5800A10C59E1B150815A20B6A3547DB0004203DDA1C31F5540284380986CDC32AB8" +
            "DB215A454DBFF10935DE90F67D4700A10CFB379BC517A3790874CD720FF842D160651ADF54C02843692EA8332C43AB0965569F03FF10C" +
            "285690C97D6400A10D1367BBB9A824049D63ED90300443413F626A9F51002843632E62D7F9A914CEA428A31BFF10E6B6277217D3F00A1" +
            "0C5B5DB428A7CC928FA21E6BD00443D916A51E9F5440284343AED92526DF83369E1315C3FE1106D5F9A0C7D6300A10C5BE4D8FE400D8D" +
            "B48751B870084442A8A4251F504028433D437C44FE124C595BD96B8C001124B6499167D6300A10CB8E6B058C9ED301A94927ED00444CC" +
            "58DF2F9F49C0283F4ACC7529BECC87154EE8712400114C5E989857D3E00A10D2A0A122B511AD2BC38C68ED004454E7C1EA51F49802842" +
            "FE4CEE4CD5E9E2E33DFACB4C0211609138DB27D4200A10CCB36A8C1E840224C6B478ECFFC45D69B9EE01F4D4FE84359628E7E2784F35A" +
            "A4D220D40811851598C307D4700A10CADB7A68AA750E2191F0A903008464BDB9FF19F4C80284376AD7D9A231BC0FF3645E27C0111A4CF" +
            "196007D6000A10D1FE2622798D5B5B4527E70CFF846E3C324F85F54C0284485EEE27452593EF43444F323FE11C0E589B417D6500A10CE" +
            "7E55A39D634BABBEB22544FF8474A765F2B9F4D8028434F638720836C194F9FC1D263FF11E516A89237D4700A10DB88E14378A841F2D9" +
            "6F9714FFC47C9F9A269DF56C028433A98869EC7B9D074A67960BC000800006800000037B6A928987920CC317800000C16A1E40FFDCD7D" +
            "C3A69F00019A87903FF735F70E9A540007028793EA3CDB1472444965444FF85FA0024D8C6E5C55026637D3EDB327D7E70069C20DC0164" +
            "6B0CD5A400741A10080C050000080B514207FFF4BF8560417C00CD45081FFFD2FE158109F203814506BD75E209D6507439B5B7FC26600" +
            "2846CC84EAA813890AA2276DAC122039EE1731FFAE1CD68D6E009A10D804060204000505A8C904002EA01C04E3BF2066A3241000BB807" +
            "013A0FE01C0A3249AF557051F1DD1600B9BFE1628015DD053865540993A54FB6F8B35F9B2619030EFFFF1A15361AFFE102B6020301040" +
            "00202D45081FFDB2FE44E49A0F033514207FF6C3F9139188340E05141BEBE68CE860CB2E2EA25FF13D000950DC2222AA04F727A6E546F" +
            "B5A5622B5750F801195F88E627FF57775010180A30000E16A2340FFE927F98DCC90E819A88D03FFA49FE63729432070288CDFEF6E693B" +
            "473FAF81C2FF83FE004BD0B1108550270CC5444F76A8244370B44A6BFFAC40AD0D8BFFAC3A40080C041800060B50F207FEE83F3A21DE7" +
            "C40CD43C81FFBA0FCE8877DF2038143C44BC9CEBA128B1FFF7F77FC46A0026026F8C2EA813E98A9B96DC75695C07ADD36A005266DA244" +
            "DFFE9DEC004060210000385A88D040035DFDA6069C20066A2341000D77F6981870701C0A2325D0FE58D07236FCC2BA3FE24B000D95ED4" +
            "4B3540A05B74DCAD16CB4AC29E8E8CF000B2F4117310008EDC20203010C000202D45081FFD70FDD5F3DA19033514207FF5C3F757CE485" +
            "80E05141611BD59A84D01096AF3DFF0F1C00BC486223EAA04FEE3A6E5BA065A566F7977947FF496048DAE8009799E010180870001016A" +
            "2840FFE5E8C512A2AF7019A8A103FF97A3144A8D3E007028A0CCCA59933F422BC76A32FF8A1C004F2B2513555027F525391BDCE2D1117" +
            "1FBB6DC0044B1BC731C00FBC858080C044000080B514207FE42C5D4807A81C0CD45081FF909175201CA070381450646283E19FAD77C54" +
            "9C77FC4E10032368F8B1AA8140F3E9C8F241968896551D19A005261D22A9A0005DD9004060228000485A8B4FBFD0DA31BA322386066A2" +
            "D3EFF4358C6E8CA4E401C0A2D485CE91D4EFE5241EBA6BFE114801E7E6B43B55409C20D50D1878C09596A8F11D4FFCD0F7D456AFFC10E" +
            "0202030116000182D43C81FF5A3157F9A21D403350F207FD68455FE68274C0E050F1F8650B4E75BB3BBC5D49FF08B400F48D0E14DAA04" +
            "E086A868E8B604ACB96D86FB7FD187F2A2C97FFD85430101808C0001016A28410002880D9C1A100019A8A104000A2036706740407028A" +
            "0D662023B38368F71A1D4FF86CA0047A3010B8550273EFD444F3AA02443A90C2CB400A449BD0793FFF424E0080C046800090B516A07FE" +
            "333E8FC6B07C80CD45081FF8CCFA3F1CF1F4038145ACE520BF29BD095FDD5A77FDC40545655257DBE952BA6DE8FB96847939B53E6029D" +
            "F366391E60B63299F9480406A238000405A8A103FFDD206B41D9C3A066A2840FFF7481AD07470D81C0A28314C3DD74E533839BDA7BFE1" +
            "B000129B42426B5409B8E95112EE8E09102F7F0E4D00251235425900050ADC02030122000202D45081FF7F8F9B478E1F9033514207FDF" +
            "E3E6D1E377E80E0514336F8ED22B98840289BF1FF137551E3A9CE106A54B2D92A3E878ABE594C85C95E283CF8A969A5582C791E80101A" +
            "8920001416A32410029A80872FB8F8019A8C90400A72021CBF23E007028C878C8B2993F7DD372B88CFF8A2C00490A5312DD5028104D39" +
            "085F62D2C709A3BB23FFD4C48C57EBFE5BC828080C04A000080B514207FFB6BF52D5008240CD45081FFEDAFD4B53DE090381450AFC163" +
            "F5A2C436C5509C7FC36200154FFA726EA813A1B69F5BD75EBEC1338A0D52006A34226D21FFCE0AE00406025C000505A8C903FE991F8F6" +
            "4433DA066A3240FFA647E3D9120F881C0A32505827C051CD76B11EEE3FE16E00284D17B73D54098B914F82F0D15FC51A830740FFA11AB" +
            "D34D70011051C02030130000282D46481FFF70FDD2964611033519207FFDC3F74A5868400E05191C8D89E628FEFEAC37531FF0CBC0031" +
            "B855BEBAA04D6A9A7D705ABAFB02B46824B7FEE8D629A9A7FFC81D8010180990000C16A1E40FF3F383E392B50F019A87903FCFCA0F8E4" +
            "A34340702878B8EE40773D6E5E19623EFF84540026B57F0BC55027909D421A4CF025EB0AD4272C00843A951574014C2020080C04D0000" +
            "80B514207FEE1BFFBCFFC8240CD45081FFB84FFEF3FCA08038145087C02B5EA3037F0776F07FC2D2001699E9710EA81386169F5AAFEEB" +
            "EC131960A09FFBE372668EDFF82079C04060274000505A8C903FDE4A18A21C0410066A3240FF792862886F30401C0A3252A679D65201C" +
            "47C5A4A3FE121801CE41A3895540984D54F829BF15FC3BEEB0234FFFB19853631001101F00203013C000182D43C81FFFC6FE084886170" +
            "3350F207FFF1BF8212118500E050F167395F928D791B8E37EDFF0A9000328CF9BCDAA04DD02A7D6B53BAFAFE3DF83E27FE08D5E9A5580" +
            "3A82F301018002130AE015504000A80AFC40804D7EA4FDF03333EE23FF810205A02BF1020115FA9285F238700E1001041013712FC4080" +
            "82D2E37E1058F3F91BFFC10604DC4BF102020B4BA88E32DA6FCEAFFE04200D712FC40806AD2E25CCA7C1BFB4C00410C05DC4BF10201EB" +
            "4BAB0F7C4D4FDD6FFF043814750FC40808AD143362F9FE4628BFF8110065D4BF102020B450C8CCAC771754FFC04501F896FC408060259" +
            "C822C034C638BFD011607E25BF1020140966FB5D67C51582FFB0460128B8FC408060247B565934BC06D400011C04E2DBF10201A091CC4" +
            "589EB1035AFFF04901274EFC40807AD2F9DD7E16BC043C00C12802E013F10201B5F6D5ED62B26FD4CFFF04B8297F0FC4080357F4D0726" +
            "2CABF1FBFE813001A013F1020195F6CEA8BA014FDD300004C80A870FC4080802622DED0A1941F33FD0134032013F10201F5F6D1246B83" +
            "8FFF0FFE04E81D7F0FC40803D7F452CDB08943153FE013C01A013F10201D5F6CB9505124FE090000500148B8FC00806024735C77302BF" +
            "85C00014604E2E3F102014091EDF51034EFF32FFF0102C5400800000800000013F6A9289879228E405000040001E0800000005C00A024" +
            "98F5BEF400302B7276D3E109A8A1A2625B208EAEE6F14EFE6E330924025011CC60D3E2009815B06A86729308EF88173FD585AC0F296F0" +
            "131F0F292022808E63EDD9F000C0AC72367F9140617A26F99EA8DC42698AA5726469EB8819404731EA226804605590D895C1D6F240908" +
            "D26C7696FB595766724A555BC10A02398F6C6D401302A947B5E1D1820606CF2135B1B3F9D50BEBDD331115C0A50124C731D1E00181545" +
            "C1F50CDFEC916C1FF54B7B4310CE53220C86C74D062809264164CB000C0AB500A2366D8FF9559CD4356441796B9DB108E4D9F70394049" +
            "320F5E68006056603A1139A91CC74CFE7F33B5AAD2C5F21757DB134020A02399016F8C03302A3CDC255D0F67210413BB2037F620D67E1" +
            "BADC78060125011CC847756001815457FD6EAC866309ECE692FBCC0503585DE740128110AA808E63FFFD8FF8C0AC872A184EB0417D58A" +
            "D077B7AD0813E60747455BB9859404731C5A07806605748D198B2D37F3E793A673DAE104142340BA7C18FC830A02499070AF400302BC6" +
            "D6075F11AB5EFC6A41DF6B2820F2FD8391C488A21A50124C7BD866001815C83180943D17905FD5734F9F32B0BCAC366AC04C0F0E28092" +
            "63C9589000C0AC1E1721B2434282A752A37E0AD886CE9D617CF496687940493203B097FE6054E286E651FB9A459553073F90D842FF4A4" +
            "B53FDAA3440A02498C93C7C03302B713C585D3E8BA0673FF4634D0B1F3C1F162D937F5E225011CC7B27B20018159856ED3219EDEF32B3" +
            "940C8019CD463CF2D5930AF0122808E6449C10FFCC0AB55ED669E2A497AD2530E5796EA7131FF0689D68788994047320C8288006054FF" +
            "DBCCCCE60D42840964B1815940EC5D172D1CDB4450A023991AA77BFD302A8A7865A0CF3A63A0D5E2207F85E4FEF1331192F0E02A50124" +
            "C872371FF98156445E1EF0BD7F2D721A752AEA2F3A803E5A9872BF016280926338C33008C0ACE3B457680BDE8CFD0A05AC9DCF9ED080C" +
            "077EAA878B9404931F596C8046056DB223F345E5DC1AE2E6F5368C8C742F6544CD011BC2BA2764015B9668C77B61C632D03E5581E8694" +
            "E7B2A27643C4AC24983DFA26E92D005D5883D2704612A2764453BA37A2062A231F2D0031588102A487DEA2764662D035ABB02A2A4A2CF" +
            "FD1604AE3E7B7AEA2764811E6D83557162AA52CFF75602CA28277BAA2764BC0C7B340698E1BFF2D0075601ABF1D3736A2764C5FEE28C9" +
            "FC8E234F2D0069607002B8382EA2764E66933E841A9623782D001D508CB39D183EA27651EB3A250AE2AE121B2CFFD6B06250D4580AA27" +
            "6539A564D94371221F62CFE1AB86898ACE846A27654095EAF1E4FD628072CFE1AD0156285C800A27657F86F35287A4A23022CFF92D03C" +
            "5578B71AA27659E77CB3B22A0E21C32CFDDED02DFBC0B83AA2765B968A433C60EE1C862CFF66D016922F07C2A2765C059EC04625F2216" +
            "52CFF5ED024945E6796A2765FFC15C401797E18A82D011EB0BF58CED80EA2766040F4F7072F2A3ABA2D018A1029E0FA064EA27663D013" +
            "6810986E40982D0162185A672617B6A276643F48DB1992A645DD2D0036080918F1B892A276662E3B5A24B04A46282D011E1048A780E83" +
            "2A276684D2327AF73223F3C2D025A08172F9ED8D6A2766BDC43C438D16A436D2D00960894F8A06872A2766C3B18A345165643222CFC7E" +
            "00196A72A676A2766E2A646E4CAC2E2B852D0129F823139BA7DAA03B900000036AE80602102C01A0980C41B01A8460210AC01A1980C43" +
            "B01A88601512C0022980745B00C8C60151AC0023980747B00C90602D22C0224980A49B01294602D2AC0225980A4BB012";
        return ByteUtils.decodeHexString(stringToBytes);
    }
    /**
     * Create a new thread to listen.
     */
    private void newListener() {
        (new Thread(this)).start();
    }

    /** Sends a byte array of SUPL data to the server **/
    public void sendSuplResponse(Socket socket, byte[] data) throws IOException {
        socket.getOutputStream().write(data);
    }

    /**
     * Reads SUPL server response and returns it as a byte array.
     *
     * <p>Upon the SUPL protocol, the size of the payload is stored in the first two bytes of the
     * response, hence these two bytes are read first followed by reading a payload of that size. Null
     * is returned if the size of the payload is not readable.
     */
    public byte[] getSuplRequest(InputStream is) throws IOException {
        byte[] buffer = new byte[RESPONSE_BUFFER_SIZE];
        BufferedInputStream bufferedInputStream = new BufferedInputStream(is);
        // TODO: currently this fails, after "cast" bytes to SUPL class this will be fixed
        int sizeOfRead = bufferedInputStream.read(buffer, 0, HEADER_SIZE);
        if (sizeOfRead == HEADER_SIZE) {
            messageLengthReadBuffer.clear();
            messageLengthReadBuffer.put(0, buffer[0]);
            messageLengthReadBuffer.put(1, buffer[1]);
            int messageLength = messageLengthReadBuffer.getShort(0);

            int bytesRead = sizeOfRead;
            while (bytesRead < messageLength) {
                sizeOfRead = bufferedInputStream.read(buffer, bytesRead, messageLength - bytesRead);
                bytesRead = bytesRead + sizeOfRead;
            }
            return Arrays.copyOf(buffer, messageLength);
        } else {
            return null;
        }
    }

    public byte[] encodeUlp(ULP_PDU message) {
        logger.info("Encoding ULP \n" + message.toString());
        try {
            Asn1PerEncodeBuffer outputStream = new Asn1PerEncodeBuffer(false);
            message.setLength(new Asn1Integer(0));
            message.encode(outputStream);
            ByteBuffer buffer = ByteBuffer.wrap(outputStream.getBuffer());
            buffer.order(ByteOrder.BIG_ENDIAN);
            buffer.putShort((short) outputStream.getBuffer().length);
            byte[] bytes = buffer.array();
            return bytes;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
}
