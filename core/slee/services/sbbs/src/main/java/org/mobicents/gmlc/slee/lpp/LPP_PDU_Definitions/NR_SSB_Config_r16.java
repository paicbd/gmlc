/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NR_SSB_Config_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "NR-SSB-Config-r16";
   }

   protected NR_PhysCellID_r16 nr_PhysCellID_r16;
   protected ARFCN_ValueNR_r15 nr_ARFCN_r16;
   protected Asn1Integer ss_PBCH_BlockPower_r16;
   protected Asn1Integer halfFrameIndex_r16;
   protected NR_SSB_Config_r16_ssb_periodicity_r16 ssb_periodicity_r16 = null;
   protected NR_SSB_Config_r16_ssb_PositionsInBurst_r16 ssb_PositionsInBurst_r16;  // optional
   protected NR_SSB_Config_r16_ssb_SubcarrierSpacing_r16 ssb_SubcarrierSpacing_r16 = null;
   protected Asn1Integer sfn_SSB_Offset_r16;
   protected Asn1OpenExt extElem1;

   public NR_SSB_Config_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NR_SSB_Config_r16 (
      NR_PhysCellID_r16 nr_PhysCellID_r16_,
      ARFCN_ValueNR_r15 nr_ARFCN_r16_,
      Asn1Integer ss_PBCH_BlockPower_r16_,
      Asn1Integer halfFrameIndex_r16_,
      NR_SSB_Config_r16_ssb_periodicity_r16 ssb_periodicity_r16_,
      NR_SSB_Config_r16_ssb_PositionsInBurst_r16 ssb_PositionsInBurst_r16_,
      NR_SSB_Config_r16_ssb_SubcarrierSpacing_r16 ssb_SubcarrierSpacing_r16_,
      Asn1Integer sfn_SSB_Offset_r16_
   ) throws Asn1Exception {
      super();
      setNr_PhysCellID_r16 (nr_PhysCellID_r16_);
      setNr_ARFCN_r16 (nr_ARFCN_r16_);
      setSs_PBCH_BlockPower_r16 (ss_PBCH_BlockPower_r16_);
      setHalfFrameIndex_r16 (halfFrameIndex_r16_);
      setSsb_periodicity_r16 (ssb_periodicity_r16_);
      setSsb_PositionsInBurst_r16 (ssb_PositionsInBurst_r16_);
      setSsb_SubcarrierSpacing_r16 (ssb_SubcarrierSpacing_r16_);
      setSfn_SSB_Offset_r16 (sfn_SSB_Offset_r16_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public NR_SSB_Config_r16 (
      NR_PhysCellID_r16 nr_PhysCellID_r16_,
      ARFCN_ValueNR_r15 nr_ARFCN_r16_,
      Asn1Integer ss_PBCH_BlockPower_r16_,
      Asn1Integer halfFrameIndex_r16_,
      NR_SSB_Config_r16_ssb_periodicity_r16 ssb_periodicity_r16_,
      NR_SSB_Config_r16_ssb_SubcarrierSpacing_r16 ssb_SubcarrierSpacing_r16_,
      Asn1Integer sfn_SSB_Offset_r16_
   ) throws Asn1Exception {
      super();
      setNr_PhysCellID_r16 (nr_PhysCellID_r16_);
      setNr_ARFCN_r16 (nr_ARFCN_r16_);
      setSs_PBCH_BlockPower_r16 (ss_PBCH_BlockPower_r16_);
      setHalfFrameIndex_r16 (halfFrameIndex_r16_);
      setSsb_periodicity_r16 (ssb_periodicity_r16_);
      setSsb_SubcarrierSpacing_r16 (ssb_SubcarrierSpacing_r16_);
      setSfn_SSB_Offset_r16 (sfn_SSB_Offset_r16_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NR_SSB_Config_r16 (long nr_PhysCellID_r16_,
      long nr_ARFCN_r16_,
      long ss_PBCH_BlockPower_r16_,
      long halfFrameIndex_r16_,
      NR_SSB_Config_r16_ssb_periodicity_r16 ssb_periodicity_r16_,
      NR_SSB_Config_r16_ssb_PositionsInBurst_r16 ssb_PositionsInBurst_r16_,
      NR_SSB_Config_r16_ssb_SubcarrierSpacing_r16 ssb_SubcarrierSpacing_r16_,
      long sfn_SSB_Offset_r16_
   ) throws Asn1Exception {
      super();
      setNr_PhysCellID_r16 (nr_PhysCellID_r16_);
      setNr_ARFCN_r16 (nr_ARFCN_r16_);
      setSs_PBCH_BlockPower_r16 (ss_PBCH_BlockPower_r16_);
      setHalfFrameIndex_r16 (halfFrameIndex_r16_);
      setSsb_periodicity_r16 (ssb_periodicity_r16_);
      setSsb_PositionsInBurst_r16 (ssb_PositionsInBurst_r16_);
      setSsb_SubcarrierSpacing_r16 (ssb_SubcarrierSpacing_r16_);
      setSfn_SSB_Offset_r16 (sfn_SSB_Offset_r16_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public NR_SSB_Config_r16 (
      long nr_PhysCellID_r16_,
      long nr_ARFCN_r16_,
      long ss_PBCH_BlockPower_r16_,
      long halfFrameIndex_r16_,
      NR_SSB_Config_r16_ssb_periodicity_r16 ssb_periodicity_r16_,
      NR_SSB_Config_r16_ssb_SubcarrierSpacing_r16 ssb_SubcarrierSpacing_r16_,
      long sfn_SSB_Offset_r16_
   ) throws Asn1Exception {
      super();
      setNr_PhysCellID_r16 (nr_PhysCellID_r16_);
      setNr_ARFCN_r16 (nr_ARFCN_r16_);
      setSs_PBCH_BlockPower_r16 (ss_PBCH_BlockPower_r16_);
      setHalfFrameIndex_r16 (halfFrameIndex_r16_);
      setSsb_periodicity_r16 (ssb_periodicity_r16_);
      setSsb_SubcarrierSpacing_r16 (ssb_SubcarrierSpacing_r16_);
      setSfn_SSB_Offset_r16 (sfn_SSB_Offset_r16_);
   }

   public void init () {
      nr_PhysCellID_r16 = null;
      nr_ARFCN_r16 = null;
      ss_PBCH_BlockPower_r16 = null;
      halfFrameIndex_r16 = null;
      ssb_periodicity_r16 = null;
      ssb_PositionsInBurst_r16 = null;
      ssb_SubcarrierSpacing_r16 = null;
      sfn_SSB_Offset_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof NR_SSB_Config_r16) ) return false;

      NR_SSB_Config_r16 rhs = (NR_SSB_Config_r16) obj;

      if (nr_PhysCellID_r16 == null) {
         if (rhs.nr_PhysCellID_r16 != null) return false;
      }
      else {
         if (!nr_PhysCellID_r16.equals(rhs.nr_PhysCellID_r16)) {
            return false;
         }
      }

      if (nr_ARFCN_r16 == null) {
         if (rhs.nr_ARFCN_r16 != null) return false;
      }
      else {
         if (!nr_ARFCN_r16.equals(rhs.nr_ARFCN_r16)) {
            return false;
         }
      }

      if (ss_PBCH_BlockPower_r16 == null) {
         if (rhs.ss_PBCH_BlockPower_r16 != null) return false;
      }
      else {
         if (!ss_PBCH_BlockPower_r16.equals(rhs.ss_PBCH_BlockPower_r16)) {
            return false;
         }
      }

      if (halfFrameIndex_r16 == null) {
         if (rhs.halfFrameIndex_r16 != null) return false;
      }
      else {
         if (!halfFrameIndex_r16.equals(rhs.halfFrameIndex_r16)) {
            return false;
         }
      }

      if (ssb_periodicity_r16 == null) {
         if (rhs.ssb_periodicity_r16 != null) return false;
      }
      else {
         if (!ssb_periodicity_r16.equals(rhs.ssb_periodicity_r16)) {
            return false;
         }
      }

      if (ssb_PositionsInBurst_r16 == null) {
         if (rhs.ssb_PositionsInBurst_r16 != null) return false;
      }
      else {
         if (!ssb_PositionsInBurst_r16.equals(rhs.ssb_PositionsInBurst_r16)) {
            return false;
         }
      }

      if (ssb_SubcarrierSpacing_r16 == null) {
         if (rhs.ssb_SubcarrierSpacing_r16 != null) return false;
      }
      else {
         if (!ssb_SubcarrierSpacing_r16.equals(rhs.ssb_SubcarrierSpacing_r16)) {
            return false;
         }
      }

      if (sfn_SSB_Offset_r16 == null) {
         if (rhs.sfn_SSB_Offset_r16 != null) return false;
      }
      else {
         if (!sfn_SSB_Offset_r16.equals(rhs.sfn_SSB_Offset_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (nr_PhysCellID_r16 != null) __code = 31*__code + nr_PhysCellID_r16.hashCode();
      if (nr_ARFCN_r16 != null) __code = 31*__code + nr_ARFCN_r16.hashCode();
      if (ss_PBCH_BlockPower_r16 != null) __code = 31*__code + ss_PBCH_BlockPower_r16.hashCode();
      if (halfFrameIndex_r16 != null) __code = 31*__code + halfFrameIndex_r16.hashCode();
      if (ssb_periodicity_r16 != null) __code = 31*__code + ssb_periodicity_r16.hashCode();
      if (ssb_PositionsInBurst_r16 != null) __code = 31*__code + ssb_PositionsInBurst_r16.hashCode();
      if (ssb_SubcarrierSpacing_r16 != null) __code = 31*__code + ssb_SubcarrierSpacing_r16.hashCode();
      if (sfn_SSB_Offset_r16 != null) __code = 31*__code + sfn_SSB_Offset_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Nr_PhysCellID_r16
    */
   public NR_PhysCellID_r16 getNr_PhysCellID_r16 () {
      return nr_PhysCellID_r16;
   }

   public void setNr_PhysCellID_r16 (NR_PhysCellID_r16 value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1007))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nr_PhysCellID_r16 = value;
   }

   public void setNr_PhysCellID_r16 (long value) 
      throws Asn1Exception
   {
      setNr_PhysCellID_r16 (new NR_PhysCellID_r16(value));
   }

   /**
    * Accessor/mutator methods for Nr_ARFCN_r16
    */
   public ARFCN_ValueNR_r15 getNr_ARFCN_r16 () {
      return nr_ARFCN_r16;
   }

   public void setNr_ARFCN_r16 (ARFCN_ValueNR_r15 value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 3279165))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nr_ARFCN_r16 = value;
   }

   public void setNr_ARFCN_r16 (long value) 
      throws Asn1Exception
   {
      setNr_ARFCN_r16 (new ARFCN_ValueNR_r15(value));
   }

   /**
    * Accessor/mutator methods for Ss_PBCH_BlockPower_r16
    */
   public Asn1Integer getSs_PBCH_BlockPower_r16 () {
      return ss_PBCH_BlockPower_r16;
   }

   public void setSs_PBCH_BlockPower_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -60 && value.value <= 50))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.ss_PBCH_BlockPower_r16 = value;
   }

   public void setSs_PBCH_BlockPower_r16 (long value) 
      throws Asn1Exception
   {
      setSs_PBCH_BlockPower_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for HalfFrameIndex_r16
    */
   public Asn1Integer getHalfFrameIndex_r16 () {
      return halfFrameIndex_r16;
   }

   public void setHalfFrameIndex_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.halfFrameIndex_r16 = value;
   }

   public void setHalfFrameIndex_r16 (long value) 
      throws Asn1Exception
   {
      setHalfFrameIndex_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Ssb_periodicity_r16
    */
   public NR_SSB_Config_r16_ssb_periodicity_r16 getSsb_periodicity_r16 () {
      return ssb_periodicity_r16;
   }

   public void setSsb_periodicity_r16 (NR_SSB_Config_r16_ssb_periodicity_r16 value) {
      this.ssb_periodicity_r16 = value;
   }

   /**
    * Accessor/mutator methods for Ssb_PositionsInBurst_r16
    */
   public NR_SSB_Config_r16_ssb_PositionsInBurst_r16 getSsb_PositionsInBurst_r16 () {
      return ssb_PositionsInBurst_r16;
   }

   public void setSsb_PositionsInBurst_r16 (NR_SSB_Config_r16_ssb_PositionsInBurst_r16 value) {
      this.ssb_PositionsInBurst_r16 = value;
   }

   public boolean hasSsb_PositionsInBurst_r16 () {
      return (ssb_PositionsInBurst_r16 != null);
   }

   /**
    * Accessor/mutator methods for Ssb_SubcarrierSpacing_r16
    */
   public NR_SSB_Config_r16_ssb_SubcarrierSpacing_r16 getSsb_SubcarrierSpacing_r16 () {
      return ssb_SubcarrierSpacing_r16;
   }

   public void setSsb_SubcarrierSpacing_r16 (NR_SSB_Config_r16_ssb_SubcarrierSpacing_r16 value) {
      this.ssb_SubcarrierSpacing_r16 = value;
   }

   /**
    * Accessor/mutator methods for Sfn_SSB_Offset_r16
    */
   public Asn1Integer getSfn_SSB_Offset_r16 () {
      return sfn_SSB_Offset_r16;
   }

   public void setSfn_SSB_Offset_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sfn_SSB_Offset_r16 = value;
   }

   public void setSfn_SSB_Offset_r16 (long value) 
      throws Asn1Exception
   {
      setSfn_SSB_Offset_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return nr_PhysCellID_r16;
         case 1: return nr_ARFCN_r16;
         case 2: return ss_PBCH_BlockPower_r16;
         case 3: return halfFrameIndex_r16;
         case 4: return ssb_periodicity_r16;
         case 5: return ssb_PositionsInBurst_r16;
         case 6: return ssb_SubcarrierSpacing_r16;
         case 7: return sfn_SSB_Offset_r16;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "nr-PhysCellID-r16";
         case 1: return "nr-ARFCN-r16";
         case 2: return "ss-PBCH-BlockPower-r16";
         case 3: return "halfFrameIndex-r16";
         case 4: return "ssb-periodicity-r16";
         case 5: return "ssb-PositionsInBurst-r16";
         case 6: return "ssb-SubcarrierSpacing-r16";
         case 7: return "sfn-SSB-Offset-r16";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean ssb_PositionsInBurst_r16Present = buffer.decodeBit ("ssb_PositionsInBurst_r16Present");

      // decode nr_PhysCellID_r16

      buffer.getContext().eventDispatcher.startElement("nr_PhysCellID_r16", -1);

      nr_PhysCellID_r16 = new NR_PhysCellID_r16();
      nr_PhysCellID_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("nr_PhysCellID_r16", -1);

      // decode nr_ARFCN_r16

      buffer.getContext().eventDispatcher.startElement("nr_ARFCN_r16", -1);

      nr_ARFCN_r16 = new ARFCN_ValueNR_r15();
      nr_ARFCN_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("nr_ARFCN_r16", -1);

      // decode ss_PBCH_BlockPower_r16

      buffer.getContext().eventDispatcher.startElement("ss_PBCH_BlockPower_r16", -1);

      ss_PBCH_BlockPower_r16 = new Asn1Integer();
      ss_PBCH_BlockPower_r16.decode (buffer, -60, 50);
      buffer.getContext().eventDispatcher.endElement("ss_PBCH_BlockPower_r16", -1);

      // decode halfFrameIndex_r16

      buffer.getContext().eventDispatcher.startElement("halfFrameIndex_r16", -1);

      halfFrameIndex_r16 = new Asn1Integer();
      halfFrameIndex_r16.decode (buffer, 0, 1);
      buffer.getContext().eventDispatcher.endElement("halfFrameIndex_r16", -1);

      // decode ssb_periodicity_r16

      buffer.getContext().eventDispatcher.startElement("ssb_periodicity_r16", -1);

      {
         int tval = NR_SSB_Config_r16_ssb_periodicity_r16.decodeEnumValue (buffer);
         ssb_periodicity_r16 = NR_SSB_Config_r16_ssb_periodicity_r16.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("ssb_periodicity_r16", -1);

      // decode ssb_PositionsInBurst_r16

      if (ssb_PositionsInBurst_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ssb_PositionsInBurst_r16", -1);

         ssb_PositionsInBurst_r16 = new NR_SSB_Config_r16_ssb_PositionsInBurst_r16();
         ssb_PositionsInBurst_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ssb_PositionsInBurst_r16", -1);
      }
      else {
         ssb_PositionsInBurst_r16 = null;
      }

      // decode ssb_SubcarrierSpacing_r16

      buffer.getContext().eventDispatcher.startElement("ssb_SubcarrierSpacing_r16", -1);

      {
         int tval = NR_SSB_Config_r16_ssb_SubcarrierSpacing_r16.decodeEnumValue (buffer);
         ssb_SubcarrierSpacing_r16 = NR_SSB_Config_r16_ssb_SubcarrierSpacing_r16.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("ssb_SubcarrierSpacing_r16", -1);

      // decode sfn_SSB_Offset_r16

      buffer.getContext().eventDispatcher.startElement("sfn_SSB_Offset_r16", -1);

      sfn_SSB_Offset_r16 = new Asn1Integer();
      sfn_SSB_Offset_r16.decode (buffer, 0, 15);
      buffer.getContext().eventDispatcher.endElement("sfn_SSB_Offset_r16", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((ssb_PositionsInBurst_r16 != null), null);

      // encode nr_PhysCellID_r16

      if (nr_PhysCellID_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nr_PhysCellID_r16", -1);

         nr_PhysCellID_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nr_PhysCellID_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("nr_PhysCellID_r16");

      // encode nr_ARFCN_r16

      if (nr_ARFCN_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nr_ARFCN_r16", -1);

         nr_ARFCN_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nr_ARFCN_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("nr_ARFCN_r16");

      // encode ss_PBCH_BlockPower_r16

      if (ss_PBCH_BlockPower_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("ss_PBCH_BlockPower_r16", -1);

         ss_PBCH_BlockPower_r16.encode (buffer, -60, 50);

         buffer.getContext().eventDispatcher.endElement("ss_PBCH_BlockPower_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("ss_PBCH_BlockPower_r16");

      // encode halfFrameIndex_r16

      if (halfFrameIndex_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("halfFrameIndex_r16", -1);

         halfFrameIndex_r16.encode (buffer, 0, 1);

         buffer.getContext().eventDispatcher.endElement("halfFrameIndex_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("halfFrameIndex_r16");

      // encode ssb_periodicity_r16

      if (ssb_periodicity_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("ssb_periodicity_r16", -1);

         ssb_periodicity_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ssb_periodicity_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("ssb_periodicity_r16");

      // encode ssb_PositionsInBurst_r16

      if (ssb_PositionsInBurst_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("ssb_PositionsInBurst_r16", -1);

         ssb_PositionsInBurst_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ssb_PositionsInBurst_r16", -1);
      }

      // encode ssb_SubcarrierSpacing_r16

      if (ssb_SubcarrierSpacing_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("ssb_SubcarrierSpacing_r16", -1);

         ssb_SubcarrierSpacing_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ssb_SubcarrierSpacing_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("ssb_SubcarrierSpacing_r16");

      // encode sfn_SSB_Offset_r16

      if (sfn_SSB_Offset_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sfn_SSB_Offset_r16", -1);

         sfn_SSB_Offset_r16.encode (buffer, 0, 15);

         buffer.getContext().eventDispatcher.endElement("sfn_SSB_Offset_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("sfn_SSB_Offset_r16");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
