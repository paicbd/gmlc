/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class ReqNavListInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ReqNavListInfo";
   }

   protected Asn1BitString svReqList;
   protected ReqNavListInfo_clockModelID_PrefList clockModelID_PrefList;  // optional
   protected ReqNavListInfo_orbitModelID_PrefList orbitModelID_PrefList;  // optional
   protected Asn1Boolean addNavparamReq;  // optional
   protected Asn1OpenExt extElem1;

   public ReqNavListInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ReqNavListInfo (
      Asn1BitString svReqList_,
      ReqNavListInfo_clockModelID_PrefList clockModelID_PrefList_,
      ReqNavListInfo_orbitModelID_PrefList orbitModelID_PrefList_,
      Asn1Boolean addNavparamReq_
   ) throws Asn1Exception {
      super();
      setSvReqList (svReqList_);
      setClockModelID_PrefList (clockModelID_PrefList_);
      setOrbitModelID_PrefList (orbitModelID_PrefList_);
      setAddNavparamReq (addNavparamReq_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ReqNavListInfo (
      Asn1BitString svReqList_
   ) throws Asn1Exception {
      super();
      setSvReqList (svReqList_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ReqNavListInfo (Asn1BitString svReqList_,
      ReqNavListInfo_clockModelID_PrefList clockModelID_PrefList_,
      ReqNavListInfo_orbitModelID_PrefList orbitModelID_PrefList_,
      boolean addNavparamReq_
   ) throws Asn1Exception {
      super();
      setSvReqList (svReqList_);
      setClockModelID_PrefList (clockModelID_PrefList_);
      setOrbitModelID_PrefList (orbitModelID_PrefList_);
      setAddNavparamReq (addNavparamReq_);
   }

   public void init () {
      svReqList = null;
      clockModelID_PrefList = null;
      orbitModelID_PrefList = null;
      addNavparamReq = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof ReqNavListInfo) ) return false;

      ReqNavListInfo rhs = (ReqNavListInfo) obj;

      if (svReqList == null) {
         if (rhs.svReqList != null) return false;
      }
      else {
         if (!svReqList.equals(rhs.svReqList)) {
            return false;
         }
      }

      if (clockModelID_PrefList == null) {
         if (rhs.clockModelID_PrefList != null) return false;
      }
      else {
         if (!clockModelID_PrefList.equals(rhs.clockModelID_PrefList)) {
            return false;
         }
      }

      if (orbitModelID_PrefList == null) {
         if (rhs.orbitModelID_PrefList != null) return false;
      }
      else {
         if (!orbitModelID_PrefList.equals(rhs.orbitModelID_PrefList)) {
            return false;
         }
      }

      if (addNavparamReq == null) {
         if (rhs.addNavparamReq != null) return false;
      }
      else {
         if (!addNavparamReq.equals(rhs.addNavparamReq)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (svReqList != null) __code = 31*__code + svReqList.hashCode();
      if (clockModelID_PrefList != null) __code = 31*__code + clockModelID_PrefList.hashCode();
      if (orbitModelID_PrefList != null) __code = 31*__code + orbitModelID_PrefList.hashCode();
      if (addNavparamReq != null) __code = 31*__code + addNavparamReq.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SvReqList
    */
   public Asn1BitString getSvReqList () {
      return svReqList;
   }

   public void setSvReqList (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 64)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.svReqList = value;
   }

   /**
    * Accessor/mutator methods for ClockModelID_PrefList
    */
   public ReqNavListInfo_clockModelID_PrefList getClockModelID_PrefList () {
      return clockModelID_PrefList;
   }

   public void setClockModelID_PrefList (ReqNavListInfo_clockModelID_PrefList value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 8))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.clockModelID_PrefList = value;
   }

   public boolean hasClockModelID_PrefList () {
      return (clockModelID_PrefList != null);
   }

   /**
    * Accessor/mutator methods for OrbitModelID_PrefList
    */
   public ReqNavListInfo_orbitModelID_PrefList getOrbitModelID_PrefList () {
      return orbitModelID_PrefList;
   }

   public void setOrbitModelID_PrefList (ReqNavListInfo_orbitModelID_PrefList value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 8))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.orbitModelID_PrefList = value;
   }

   public boolean hasOrbitModelID_PrefList () {
      return (orbitModelID_PrefList != null);
   }

   /**
    * Accessor/mutator methods for AddNavparamReq
    */
   public Asn1Boolean getAddNavparamReq () {
      return addNavparamReq;
   }

   public void setAddNavparamReq (Asn1Boolean value) {
      this.addNavparamReq = value;
   }

   public void setAddNavparamReq (boolean value) {
      setAddNavparamReq (new Asn1Boolean(value));
   }
   public boolean hasAddNavparamReq () {
      return (addNavparamReq != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return svReqList;
         case 1: return clockModelID_PrefList;
         case 2: return orbitModelID_PrefList;
         case 3: return addNavparamReq;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "svReqList";
         case 1: return "clockModelID-PrefList";
         case 2: return "orbitModelID-PrefList";
         case 3: return "addNavparamReq";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean clockModelID_PrefListPresent = buffer.decodeBit ("clockModelID_PrefListPresent");
      boolean orbitModelID_PrefListPresent = buffer.decodeBit ("orbitModelID_PrefListPresent");
      boolean addNavparamReqPresent = buffer.decodeBit ("addNavparamReqPresent");

      // decode svReqList

      buffer.getContext().eventDispatcher.startElement("svReqList", -1);

      svReqList = new Asn1BitString();
      svReqList.decode (buffer, 64, 64);
      buffer.getContext().eventDispatcher.endElement("svReqList", -1);

      // decode clockModelID_PrefList

      if (clockModelID_PrefListPresent) {
         buffer.getContext().eventDispatcher.startElement("clockModelID_PrefList", -1);

         clockModelID_PrefList = new ReqNavListInfo_clockModelID_PrefList();
         clockModelID_PrefList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("clockModelID_PrefList", -1);
      }
      else {
         clockModelID_PrefList = null;
      }

      // decode orbitModelID_PrefList

      if (orbitModelID_PrefListPresent) {
         buffer.getContext().eventDispatcher.startElement("orbitModelID_PrefList", -1);

         orbitModelID_PrefList = new ReqNavListInfo_orbitModelID_PrefList();
         orbitModelID_PrefList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("orbitModelID_PrefList", -1);
      }
      else {
         orbitModelID_PrefList = null;
      }

      // decode addNavparamReq

      if (addNavparamReqPresent) {
         buffer.getContext().eventDispatcher.startElement("addNavparamReq", -1);

         addNavparamReq = new Asn1Boolean();
         addNavparamReq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("addNavparamReq", -1);
      }
      else {
         addNavparamReq = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((clockModelID_PrefList != null), null);
      buffer.encodeBit ((orbitModelID_PrefList != null), null);
      buffer.encodeBit ((addNavparamReq != null), null);

      // encode svReqList

      if (svReqList != null) {
         buffer.getContext().eventDispatcher.startElement("svReqList", -1);

         svReqList.encode (buffer, 64, 64);

         buffer.getContext().eventDispatcher.endElement("svReqList", -1);
      }
      else throw new Asn1MissingRequiredException ("svReqList");

      // encode clockModelID_PrefList

      if (clockModelID_PrefList != null) {
         buffer.getContext().eventDispatcher.startElement("clockModelID_PrefList", -1);

         clockModelID_PrefList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("clockModelID_PrefList", -1);
      }

      // encode orbitModelID_PrefList

      if (orbitModelID_PrefList != null) {
         buffer.getContext().eventDispatcher.startElement("orbitModelID_PrefList", -1);

         orbitModelID_PrefList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("orbitModelID_PrefList", -1);
      }

      // encode addNavparamReq

      if (addNavparamReq != null) {
         buffer.getContext().eventDispatcher.startElement("addNavparamReq", -1);

         addNavparamReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("addNavparamReq", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
