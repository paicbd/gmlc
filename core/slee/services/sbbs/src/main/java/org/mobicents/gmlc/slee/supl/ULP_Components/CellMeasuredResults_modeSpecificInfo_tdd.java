/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Components;

import com.objsys.asn1j.runtime.*;

public class CellMeasuredResults_modeSpecificInfo_tdd extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   protected CellParametersID cellParametersID;
   protected TGSN proposedTGSN;  // optional
   protected PrimaryCCPCH_RSCP primaryCCPCH_RSCP;  // optional
   protected Pathloss pathloss;  // optional
   protected TimeslotISCP_List timeslotISCP_List;  // optional

   public CellMeasuredResults_modeSpecificInfo_tdd () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CellMeasuredResults_modeSpecificInfo_tdd (
      CellParametersID cellParametersID_,
      TGSN proposedTGSN_,
      PrimaryCCPCH_RSCP primaryCCPCH_RSCP_,
      Pathloss pathloss_,
      TimeslotISCP_List timeslotISCP_List_
   ) throws Asn1Exception {
      super();
      setCellParametersID (cellParametersID_);
      setProposedTGSN (proposedTGSN_);
      setPrimaryCCPCH_RSCP (primaryCCPCH_RSCP_);
      setPathloss (pathloss_);
      setTimeslotISCP_List (timeslotISCP_List_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CellMeasuredResults_modeSpecificInfo_tdd (
      CellParametersID cellParametersID_
   ) throws Asn1Exception {
      super();
      setCellParametersID (cellParametersID_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CellMeasuredResults_modeSpecificInfo_tdd (long cellParametersID_,
      long proposedTGSN_,
      long primaryCCPCH_RSCP_,
      long pathloss_,
      TimeslotISCP_List timeslotISCP_List_
   ) throws Asn1Exception {
      super();
      setCellParametersID (cellParametersID_);
      setProposedTGSN (proposedTGSN_);
      setPrimaryCCPCH_RSCP (primaryCCPCH_RSCP_);
      setPathloss (pathloss_);
      setTimeslotISCP_List (timeslotISCP_List_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CellMeasuredResults_modeSpecificInfo_tdd (
      long cellParametersID_
   ) throws Asn1Exception {
      super();
      setCellParametersID (cellParametersID_);
   }

   public void init () {
      cellParametersID = null;
      proposedTGSN = null;
      primaryCCPCH_RSCP = null;
      pathloss = null;
      timeslotISCP_List = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof CellMeasuredResults_modeSpecificInfo_tdd) ) return false;

      CellMeasuredResults_modeSpecificInfo_tdd rhs = (CellMeasuredResults_modeSpecificInfo_tdd) obj;

      if (cellParametersID == null) {
         if (rhs.cellParametersID != null) return false;
      }
      else {
         if (!cellParametersID.equals(rhs.cellParametersID)) {
            return false;
         }
      }

      if (proposedTGSN == null) {
         if (rhs.proposedTGSN != null) return false;
      }
      else {
         if (!proposedTGSN.equals(rhs.proposedTGSN)) {
            return false;
         }
      }

      if (primaryCCPCH_RSCP == null) {
         if (rhs.primaryCCPCH_RSCP != null) return false;
      }
      else {
         if (!primaryCCPCH_RSCP.equals(rhs.primaryCCPCH_RSCP)) {
            return false;
         }
      }

      if (pathloss == null) {
         if (rhs.pathloss != null) return false;
      }
      else {
         if (!pathloss.equals(rhs.pathloss)) {
            return false;
         }
      }

      if (timeslotISCP_List == null) {
         if (rhs.timeslotISCP_List != null) return false;
      }
      else {
         if (!timeslotISCP_List.equals(rhs.timeslotISCP_List)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (cellParametersID != null) __code = 31*__code + cellParametersID.hashCode();
      if (proposedTGSN != null) __code = 31*__code + proposedTGSN.hashCode();
      if (primaryCCPCH_RSCP != null) __code = 31*__code + primaryCCPCH_RSCP.hashCode();
      if (pathloss != null) __code = 31*__code + pathloss.hashCode();
      if (timeslotISCP_List != null) __code = 31*__code + timeslotISCP_List.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for CellParametersID
    */
   public CellParametersID getCellParametersID () {
      return cellParametersID;
   }

   public void setCellParametersID (CellParametersID value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.cellParametersID = value;
   }

   public void setCellParametersID (long value) 
      throws Asn1Exception
   {
      setCellParametersID (new CellParametersID(value));
   }

   /**
    * Accessor/mutator methods for ProposedTGSN
    */
   public TGSN getProposedTGSN () {
      return proposedTGSN;
   }

   public void setProposedTGSN (TGSN value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 14))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.proposedTGSN = value;
   }

   public void setProposedTGSN (long value) 
      throws Asn1Exception
   {
      setProposedTGSN (new TGSN(value));
   }
   public boolean hasProposedTGSN () {
      return (proposedTGSN != null);
   }

   /**
    * Accessor/mutator methods for PrimaryCCPCH_RSCP
    */
   public PrimaryCCPCH_RSCP getPrimaryCCPCH_RSCP () {
      return primaryCCPCH_RSCP;
   }

   public void setPrimaryCCPCH_RSCP (PrimaryCCPCH_RSCP value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.primaryCCPCH_RSCP = value;
   }

   public void setPrimaryCCPCH_RSCP (long value) 
      throws Asn1Exception
   {
      setPrimaryCCPCH_RSCP (new PrimaryCCPCH_RSCP(value));
   }
   public boolean hasPrimaryCCPCH_RSCP () {
      return (primaryCCPCH_RSCP != null);
   }

   /**
    * Accessor/mutator methods for Pathloss
    */
   public Pathloss getPathloss () {
      return pathloss;
   }

   public void setPathloss (Pathloss value) 
      throws Asn1Exception
   {
      if (!((value.value >= 46 && value.value <= 173))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.pathloss = value;
   }

   public void setPathloss (long value) 
      throws Asn1Exception
   {
      setPathloss (new Pathloss(value));
   }
   public boolean hasPathloss () {
      return (pathloss != null);
   }

   /**
    * Accessor/mutator methods for TimeslotISCP_List
    */
   public TimeslotISCP_List getTimeslotISCP_List () {
      return timeslotISCP_List;
   }

   public void setTimeslotISCP_List (TimeslotISCP_List value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 14))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.timeslotISCP_List = value;
   }

   public boolean hasTimeslotISCP_List () {
      return (timeslotISCP_List != null);
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cellParametersID;
         case 1: return proposedTGSN;
         case 2: return primaryCCPCH_RSCP;
         case 3: return pathloss;
         case 4: return timeslotISCP_List;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cellParametersID";
         case 1: return "proposedTGSN";
         case 2: return "primaryCCPCH-RSCP";
         case 3: return "pathloss";
         case 4: return "timeslotISCP-List";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean proposedTGSNPresent = buffer.decodeBit ("proposedTGSNPresent");
      boolean primaryCCPCH_RSCPPresent = buffer.decodeBit ("primaryCCPCH_RSCPPresent");
      boolean pathlossPresent = buffer.decodeBit ("pathlossPresent");
      boolean timeslotISCP_ListPresent = buffer.decodeBit ("timeslotISCP_ListPresent");

      // decode cellParametersID

      buffer.getContext().eventDispatcher.startElement("cellParametersID", -1);

      cellParametersID = new CellParametersID();
      cellParametersID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cellParametersID", -1);

      // decode proposedTGSN

      if (proposedTGSNPresent) {
         buffer.getContext().eventDispatcher.startElement("proposedTGSN", -1);

         proposedTGSN = new TGSN();
         proposedTGSN.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("proposedTGSN", -1);
      }
      else {
         proposedTGSN = null;
      }

      // decode primaryCCPCH_RSCP

      if (primaryCCPCH_RSCPPresent) {
         buffer.getContext().eventDispatcher.startElement("primaryCCPCH_RSCP", -1);

         primaryCCPCH_RSCP = new PrimaryCCPCH_RSCP();
         primaryCCPCH_RSCP.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("primaryCCPCH_RSCP", -1);
      }
      else {
         primaryCCPCH_RSCP = null;
      }

      // decode pathloss

      if (pathlossPresent) {
         buffer.getContext().eventDispatcher.startElement("pathloss", -1);

         pathloss = new Pathloss();
         pathloss.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pathloss", -1);
      }
      else {
         pathloss = null;
      }

      // decode timeslotISCP_List

      if (timeslotISCP_ListPresent) {
         buffer.getContext().eventDispatcher.startElement("timeslotISCP_List", -1);

         timeslotISCP_List = new TimeslotISCP_List();
         timeslotISCP_List.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("timeslotISCP_List", -1);
      }
      else {
         timeslotISCP_List = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((proposedTGSN != null), null);
      buffer.encodeBit ((primaryCCPCH_RSCP != null), null);
      buffer.encodeBit ((pathloss != null), null);
      buffer.encodeBit ((timeslotISCP_List != null), null);

      // encode cellParametersID

      if (cellParametersID != null) {
         buffer.getContext().eventDispatcher.startElement("cellParametersID", -1);

         cellParametersID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cellParametersID", -1);
      }
      else throw new Asn1MissingRequiredException ("cellParametersID");

      // encode proposedTGSN

      if (proposedTGSN != null) {
         buffer.getContext().eventDispatcher.startElement("proposedTGSN", -1);

         proposedTGSN.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("proposedTGSN", -1);
      }

      // encode primaryCCPCH_RSCP

      if (primaryCCPCH_RSCP != null) {
         buffer.getContext().eventDispatcher.startElement("primaryCCPCH_RSCP", -1);

         primaryCCPCH_RSCP.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("primaryCCPCH_RSCP", -1);
      }

      // encode pathloss

      if (pathloss != null) {
         buffer.getContext().eventDispatcher.startElement("pathloss", -1);

         pathloss.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pathloss", -1);
      }

      // encode timeslotISCP_List

      if (timeslotISCP_List != null) {
         buffer.getContext().eventDispatcher.startElement("timeslotISCP_List", -1);

         timeslotISCP_List.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("timeslotISCP_List", -1);
      }

   }

}
