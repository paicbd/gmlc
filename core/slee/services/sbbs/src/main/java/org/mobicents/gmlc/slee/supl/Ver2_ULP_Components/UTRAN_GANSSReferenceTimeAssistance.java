/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class UTRAN_GANSSReferenceTimeAssistance extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "UTRAN-GANSSReferenceTimeAssistance";
   }

   protected Asn1Integer ganssDay;  // optional
   protected Asn1Integer ganssTimeID;
   protected UTRAN_GANSSReferenceTime utran_GANSSReferenceTime;
   protected UTRANGANSSDriftRate utranGANSSDriftRate = null;  // optional

   public UTRAN_GANSSReferenceTimeAssistance () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UTRAN_GANSSReferenceTimeAssistance (
      Asn1Integer ganssDay_,
      Asn1Integer ganssTimeID_,
      UTRAN_GANSSReferenceTime utran_GANSSReferenceTime_,
      UTRANGANSSDriftRate utranGANSSDriftRate_
   ) throws Asn1Exception {
      super();
      setGanssDay (ganssDay_);
      setGanssTimeID (ganssTimeID_);
      setUtran_GANSSReferenceTime (utran_GANSSReferenceTime_);
      setUtranGANSSDriftRate (utranGANSSDriftRate_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public UTRAN_GANSSReferenceTimeAssistance (
      Asn1Integer ganssTimeID_,
      UTRAN_GANSSReferenceTime utran_GANSSReferenceTime_
   ) throws Asn1Exception {
      super();
      setGanssTimeID (ganssTimeID_);
      setUtran_GANSSReferenceTime (utran_GANSSReferenceTime_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UTRAN_GANSSReferenceTimeAssistance (long ganssDay_,
      long ganssTimeID_,
      UTRAN_GANSSReferenceTime utran_GANSSReferenceTime_,
      UTRANGANSSDriftRate utranGANSSDriftRate_
   ) throws Asn1Exception {
      super();
      setGanssDay (ganssDay_);
      setGanssTimeID (ganssTimeID_);
      setUtran_GANSSReferenceTime (utran_GANSSReferenceTime_);
      setUtranGANSSDriftRate (utranGANSSDriftRate_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public UTRAN_GANSSReferenceTimeAssistance (
      long ganssTimeID_,
      UTRAN_GANSSReferenceTime utran_GANSSReferenceTime_
   ) throws Asn1Exception {
      super();
      setGanssTimeID (ganssTimeID_);
      setUtran_GANSSReferenceTime (utran_GANSSReferenceTime_);
   }

   public void init () {
      ganssDay = null;
      ganssTimeID = null;
      utran_GANSSReferenceTime = null;
      utranGANSSDriftRate = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof UTRAN_GANSSReferenceTimeAssistance) ) return false;

      UTRAN_GANSSReferenceTimeAssistance rhs = (UTRAN_GANSSReferenceTimeAssistance) obj;

      if (ganssDay == null) {
         if (rhs.ganssDay != null) return false;
      }
      else {
         if (!ganssDay.equals(rhs.ganssDay)) {
            return false;
         }
      }

      if (ganssTimeID == null) {
         if (rhs.ganssTimeID != null) return false;
      }
      else {
         if (!ganssTimeID.equals(rhs.ganssTimeID)) {
            return false;
         }
      }

      if (utran_GANSSReferenceTime == null) {
         if (rhs.utran_GANSSReferenceTime != null) return false;
      }
      else {
         if (!utran_GANSSReferenceTime.equals(rhs.utran_GANSSReferenceTime)) {
            return false;
         }
      }

      if (utranGANSSDriftRate == null) {
         if (rhs.utranGANSSDriftRate != null) return false;
      }
      else {
         if (!utranGANSSDriftRate.equals(rhs.utranGANSSDriftRate)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (ganssDay != null) __code = 31*__code + ganssDay.hashCode();
      if (ganssTimeID != null) __code = 31*__code + ganssTimeID.hashCode();
      if (utran_GANSSReferenceTime != null) __code = 31*__code + utran_GANSSReferenceTime.hashCode();
      if (utranGANSSDriftRate != null) __code = 31*__code + utranGANSSDriftRate.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for GanssDay
    */
   public Asn1Integer getGanssDay () {
      return ganssDay;
   }

   public void setGanssDay (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 8191))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.ganssDay = value;
   }

   public void setGanssDay (long value) 
      throws Asn1Exception
   {
      setGanssDay (new Asn1Integer(value));
   }
   public boolean hasGanssDay () {
      return (ganssDay != null);
   }

   /**
    * Accessor/mutator methods for GanssTimeID
    */
   public Asn1Integer getGanssTimeID () {
      return ganssTimeID;
   }

   public void setGanssTimeID (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.ganssTimeID = value;
   }

   public void setGanssTimeID (long value) 
      throws Asn1Exception
   {
      setGanssTimeID (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Utran_GANSSReferenceTime
    */
   public UTRAN_GANSSReferenceTime getUtran_GANSSReferenceTime () {
      return utran_GANSSReferenceTime;
   }

   public void setUtran_GANSSReferenceTime (UTRAN_GANSSReferenceTime value) {
      this.utran_GANSSReferenceTime = value;
   }

   /**
    * Accessor/mutator methods for UtranGANSSDriftRate
    */
   public UTRANGANSSDriftRate getUtranGANSSDriftRate () {
      return utranGANSSDriftRate;
   }

   public void setUtranGANSSDriftRate (UTRANGANSSDriftRate value) {
      this.utranGANSSDriftRate = value;
   }

   public boolean hasUtranGANSSDriftRate () {
      return (utranGANSSDriftRate != null);
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ganssDay;
         case 1: return ganssTimeID;
         case 2: return utran_GANSSReferenceTime;
         case 3: return utranGANSSDriftRate;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ganssDay";
         case 1: return "ganssTimeID";
         case 2: return "utran-GANSSReferenceTime";
         case 3: return "utranGANSSDriftRate";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean ganssDayPresent = buffer.decodeBit ("ganssDayPresent");
      boolean utranGANSSDriftRatePresent = buffer.decodeBit ("utranGANSSDriftRatePresent");

      // decode ganssDay

      if (ganssDayPresent) {
         buffer.getContext().eventDispatcher.startElement("ganssDay", -1);

         ganssDay = new Asn1Integer();
         ganssDay.decode (buffer, 0, 8191);
         buffer.getContext().eventDispatcher.endElement("ganssDay", -1);
      }
      else {
         ganssDay = null;
      }

      // decode ganssTimeID

      buffer.getContext().eventDispatcher.startElement("ganssTimeID", -1);

      ganssTimeID = new Asn1Integer();
      ganssTimeID.decode (buffer, 0, 15);
      buffer.getContext().eventDispatcher.endElement("ganssTimeID", -1);

      // decode utran_GANSSReferenceTime

      buffer.getContext().eventDispatcher.startElement("utran_GANSSReferenceTime", -1);

      utran_GANSSReferenceTime = new UTRAN_GANSSReferenceTime();
      utran_GANSSReferenceTime.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("utran_GANSSReferenceTime", -1);

      // decode utranGANSSDriftRate

      if (utranGANSSDriftRatePresent) {
         buffer.getContext().eventDispatcher.startElement("utranGANSSDriftRate", -1);

         int tval = UTRANGANSSDriftRate.decodeEnumValue (buffer);
         utranGANSSDriftRate = UTRANGANSSDriftRate.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("utranGANSSDriftRate", -1);
      }
      else {
         utranGANSSDriftRate = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((ganssDay != null), null);
      buffer.encodeBit ((utranGANSSDriftRate != null), null);

      // encode ganssDay

      if (ganssDay != null) {
         buffer.getContext().eventDispatcher.startElement("ganssDay", -1);

         ganssDay.encode (buffer, 0, 8191);

         buffer.getContext().eventDispatcher.endElement("ganssDay", -1);
      }

      // encode ganssTimeID

      if (ganssTimeID != null) {
         buffer.getContext().eventDispatcher.startElement("ganssTimeID", -1);

         ganssTimeID.encode (buffer, 0, 15);

         buffer.getContext().eventDispatcher.endElement("ganssTimeID", -1);
      }
      else throw new Asn1MissingRequiredException ("ganssTimeID");

      // encode utran_GANSSReferenceTime

      if (utran_GANSSReferenceTime != null) {
         buffer.getContext().eventDispatcher.startElement("utran_GANSSReferenceTime", -1);

         utran_GANSSReferenceTime.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("utran_GANSSReferenceTime", -1);
      }
      else throw new Asn1MissingRequiredException ("utran_GANSSReferenceTime");

      // encode utranGANSSDriftRate

      if (utranGANSSDriftRate != null) {
         buffer.getContext().eventDispatcher.startElement("utranGANSSDriftRate", -1);

         utranGANSSDriftRate.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("utranGANSSDriftRate", -1);
      }

   }

}
