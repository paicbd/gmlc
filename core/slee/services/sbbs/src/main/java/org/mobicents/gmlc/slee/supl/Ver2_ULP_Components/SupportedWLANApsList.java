/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class SupportedWLANApsList extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SupportedWLANApsList";
   }

   protected SupportedWLANApsList_supportedWLANApDataList supportedWLANApDataList;
   protected SupportedWLANApsChannel11a supportedWLANapsChannel11a;  // optional
   protected SupportedWLANApsChannel11bg supportedWLANapsChannel11bg;  // optional
   protected Asn1OpenExt extElem1;

   public SupportedWLANApsList () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SupportedWLANApsList (
      SupportedWLANApsList_supportedWLANApDataList supportedWLANApDataList_,
      SupportedWLANApsChannel11a supportedWLANapsChannel11a_,
      SupportedWLANApsChannel11bg supportedWLANapsChannel11bg_
   ) throws Asn1Exception {
      super();
      setSupportedWLANApDataList (supportedWLANApDataList_);
      setSupportedWLANapsChannel11a (supportedWLANapsChannel11a_);
      setSupportedWLANapsChannel11bg (supportedWLANapsChannel11bg_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SupportedWLANApsList (
      SupportedWLANApsList_supportedWLANApDataList supportedWLANApDataList_
   ) throws Asn1Exception {
      super();
      setSupportedWLANApDataList (supportedWLANApDataList_);
   }

   public void init () {
      supportedWLANApDataList = null;
      supportedWLANapsChannel11a = null;
      supportedWLANapsChannel11bg = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof SupportedWLANApsList) ) return false;

      SupportedWLANApsList rhs = (SupportedWLANApsList) obj;

      if (supportedWLANApDataList == null) {
         if (rhs.supportedWLANApDataList != null) return false;
      }
      else {
         if (!supportedWLANApDataList.equals(rhs.supportedWLANApDataList)) {
            return false;
         }
      }

      if (supportedWLANapsChannel11a == null) {
         if (rhs.supportedWLANapsChannel11a != null) return false;
      }
      else {
         if (!supportedWLANapsChannel11a.equals(rhs.supportedWLANapsChannel11a)) {
            return false;
         }
      }

      if (supportedWLANapsChannel11bg == null) {
         if (rhs.supportedWLANapsChannel11bg != null) return false;
      }
      else {
         if (!supportedWLANapsChannel11bg.equals(rhs.supportedWLANapsChannel11bg)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (supportedWLANApDataList != null) __code = 31*__code + supportedWLANApDataList.hashCode();
      if (supportedWLANapsChannel11a != null) __code = 31*__code + supportedWLANapsChannel11a.hashCode();
      if (supportedWLANapsChannel11bg != null) __code = 31*__code + supportedWLANapsChannel11bg.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SupportedWLANApDataList
    */
   public SupportedWLANApsList_supportedWLANApDataList getSupportedWLANApDataList () {
      return supportedWLANApDataList;
   }

   public void setSupportedWLANApDataList (SupportedWLANApsList_supportedWLANApDataList value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 128))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.supportedWLANApDataList = value;
   }

   /**
    * Accessor/mutator methods for SupportedWLANapsChannel11a
    */
   public SupportedWLANApsChannel11a getSupportedWLANapsChannel11a () {
      return supportedWLANapsChannel11a;
   }

   public void setSupportedWLANapsChannel11a (SupportedWLANApsChannel11a value) {
      this.supportedWLANapsChannel11a = value;
   }

   public boolean hasSupportedWLANapsChannel11a () {
      return (supportedWLANapsChannel11a != null);
   }

   /**
    * Accessor/mutator methods for SupportedWLANapsChannel11bg
    */
   public SupportedWLANApsChannel11bg getSupportedWLANapsChannel11bg () {
      return supportedWLANapsChannel11bg;
   }

   public void setSupportedWLANapsChannel11bg (SupportedWLANApsChannel11bg value) {
      this.supportedWLANapsChannel11bg = value;
   }

   public boolean hasSupportedWLANapsChannel11bg () {
      return (supportedWLANapsChannel11bg != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return supportedWLANApDataList;
         case 1: return supportedWLANapsChannel11a;
         case 2: return supportedWLANapsChannel11bg;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "supportedWLANApDataList";
         case 1: return "supportedWLANapsChannel11a";
         case 2: return "supportedWLANapsChannel11bg";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean supportedWLANapsChannel11aPresent = buffer.decodeBit ("supportedWLANapsChannel11aPresent");
      boolean supportedWLANapsChannel11bgPresent = buffer.decodeBit ("supportedWLANapsChannel11bgPresent");

      // decode supportedWLANApDataList

      buffer.getContext().eventDispatcher.startElement("supportedWLANApDataList", -1);

      supportedWLANApDataList = new SupportedWLANApsList_supportedWLANApDataList();
      supportedWLANApDataList.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("supportedWLANApDataList", -1);

      // decode supportedWLANapsChannel11a

      if (supportedWLANapsChannel11aPresent) {
         buffer.getContext().eventDispatcher.startElement("supportedWLANapsChannel11a", -1);

         supportedWLANapsChannel11a = new SupportedWLANApsChannel11a();
         supportedWLANapsChannel11a.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("supportedWLANapsChannel11a", -1);
      }
      else {
         supportedWLANapsChannel11a = null;
      }

      // decode supportedWLANapsChannel11bg

      if (supportedWLANapsChannel11bgPresent) {
         buffer.getContext().eventDispatcher.startElement("supportedWLANapsChannel11bg", -1);

         supportedWLANapsChannel11bg = new SupportedWLANApsChannel11bg();
         supportedWLANapsChannel11bg.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("supportedWLANapsChannel11bg", -1);
      }
      else {
         supportedWLANapsChannel11bg = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((supportedWLANapsChannel11a != null), null);
      buffer.encodeBit ((supportedWLANapsChannel11bg != null), null);

      // encode supportedWLANApDataList

      if (supportedWLANApDataList != null) {
         buffer.getContext().eventDispatcher.startElement("supportedWLANApDataList", -1);

         supportedWLANApDataList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("supportedWLANApDataList", -1);
      }
      else throw new Asn1MissingRequiredException ("supportedWLANApDataList");

      // encode supportedWLANapsChannel11a

      if (supportedWLANapsChannel11a != null) {
         buffer.getContext().eventDispatcher.startElement("supportedWLANapsChannel11a", -1);

         supportedWLANapsChannel11a.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("supportedWLANapsChannel11a", -1);
      }

      // encode supportedWLANapsChannel11bg

      if (supportedWLANapsChannel11bg != null) {
         buffer.getContext().eventDispatcher.startElement("supportedWLANapsChannel11bg", -1);

         supportedWLANapsChannel11bg.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("supportedWLANapsChannel11bg", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
