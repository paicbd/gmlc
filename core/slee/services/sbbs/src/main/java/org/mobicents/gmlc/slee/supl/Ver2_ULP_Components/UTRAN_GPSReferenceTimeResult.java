/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class UTRAN_GPSReferenceTimeResult extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "UTRAN-GPSReferenceTimeResult";
   }

   protected UTRAN_GPSReferenceTimeResult_set_GPSTimingOfCell set_GPSTimingOfCell;
   protected UTRAN_GPSReferenceTimeResult_modeSpecificInfo modeSpecificInfo;  // optional
   protected Asn1Integer sfn;
   protected Asn1Integer gpsReferenceTimeUncertainty;  // optional
   protected Asn1OpenExt extElem1;

   public UTRAN_GPSReferenceTimeResult () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UTRAN_GPSReferenceTimeResult (
      UTRAN_GPSReferenceTimeResult_set_GPSTimingOfCell set_GPSTimingOfCell_,
      UTRAN_GPSReferenceTimeResult_modeSpecificInfo modeSpecificInfo_,
      Asn1Integer sfn_,
      Asn1Integer gpsReferenceTimeUncertainty_
   ) throws Asn1Exception {
      super();
      setSet_GPSTimingOfCell (set_GPSTimingOfCell_);
      setModeSpecificInfo (modeSpecificInfo_);
      setSfn (sfn_);
      setGpsReferenceTimeUncertainty (gpsReferenceTimeUncertainty_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public UTRAN_GPSReferenceTimeResult (
      UTRAN_GPSReferenceTimeResult_set_GPSTimingOfCell set_GPSTimingOfCell_,
      Asn1Integer sfn_
   ) throws Asn1Exception {
      super();
      setSet_GPSTimingOfCell (set_GPSTimingOfCell_);
      setSfn (sfn_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UTRAN_GPSReferenceTimeResult (UTRAN_GPSReferenceTimeResult_set_GPSTimingOfCell set_GPSTimingOfCell_,
      UTRAN_GPSReferenceTimeResult_modeSpecificInfo modeSpecificInfo_,
      long sfn_,
      long gpsReferenceTimeUncertainty_
   ) throws Asn1Exception {
      super();
      setSet_GPSTimingOfCell (set_GPSTimingOfCell_);
      setModeSpecificInfo (modeSpecificInfo_);
      setSfn (sfn_);
      setGpsReferenceTimeUncertainty (gpsReferenceTimeUncertainty_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public UTRAN_GPSReferenceTimeResult (
      UTRAN_GPSReferenceTimeResult_set_GPSTimingOfCell set_GPSTimingOfCell_,
      long sfn_
   ) throws Asn1Exception {
      super();
      setSet_GPSTimingOfCell (set_GPSTimingOfCell_);
      setSfn (sfn_);
   }

   public void init () {
      set_GPSTimingOfCell = null;
      modeSpecificInfo = null;
      sfn = null;
      gpsReferenceTimeUncertainty = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof UTRAN_GPSReferenceTimeResult) ) return false;

      UTRAN_GPSReferenceTimeResult rhs = (UTRAN_GPSReferenceTimeResult) obj;

      if (set_GPSTimingOfCell == null) {
         if (rhs.set_GPSTimingOfCell != null) return false;
      }
      else {
         if (!set_GPSTimingOfCell.equals(rhs.set_GPSTimingOfCell)) {
            return false;
         }
      }

      if (modeSpecificInfo == null) {
         if (rhs.modeSpecificInfo != null) return false;
      }
      else {
         if (!modeSpecificInfo.equals(rhs.modeSpecificInfo)) {
            return false;
         }
      }

      if (sfn == null) {
         if (rhs.sfn != null) return false;
      }
      else {
         if (!sfn.equals(rhs.sfn)) {
            return false;
         }
      }

      if (gpsReferenceTimeUncertainty == null) {
         if (rhs.gpsReferenceTimeUncertainty != null) return false;
      }
      else {
         if (!gpsReferenceTimeUncertainty.equals(rhs.gpsReferenceTimeUncertainty)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (set_GPSTimingOfCell != null) __code = 31*__code + set_GPSTimingOfCell.hashCode();
      if (modeSpecificInfo != null) __code = 31*__code + modeSpecificInfo.hashCode();
      if (sfn != null) __code = 31*__code + sfn.hashCode();
      if (gpsReferenceTimeUncertainty != null) __code = 31*__code + gpsReferenceTimeUncertainty.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Set_GPSTimingOfCell
    */
   public UTRAN_GPSReferenceTimeResult_set_GPSTimingOfCell getSet_GPSTimingOfCell () {
      return set_GPSTimingOfCell;
   }

   public void setSet_GPSTimingOfCell (UTRAN_GPSReferenceTimeResult_set_GPSTimingOfCell value) {
      this.set_GPSTimingOfCell = value;
   }

   /**
    * Accessor/mutator methods for ModeSpecificInfo
    */
   public UTRAN_GPSReferenceTimeResult_modeSpecificInfo getModeSpecificInfo () {
      return modeSpecificInfo;
   }

   public void setModeSpecificInfo (UTRAN_GPSReferenceTimeResult_modeSpecificInfo value) {
      this.modeSpecificInfo = value;
   }

   public boolean hasModeSpecificInfo () {
      return (modeSpecificInfo != null);
   }

   /**
    * Accessor/mutator methods for Sfn
    */
   public Asn1Integer getSfn () {
      return sfn;
   }

   public void setSfn (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sfn = value;
   }

   public void setSfn (long value) 
      throws Asn1Exception
   {
      setSfn (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for GpsReferenceTimeUncertainty
    */
   public Asn1Integer getGpsReferenceTimeUncertainty () {
      return gpsReferenceTimeUncertainty;
   }

   public void setGpsReferenceTimeUncertainty (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.gpsReferenceTimeUncertainty = value;
   }

   public void setGpsReferenceTimeUncertainty (long value) 
      throws Asn1Exception
   {
      setGpsReferenceTimeUncertainty (new Asn1Integer(value));
   }
   public boolean hasGpsReferenceTimeUncertainty () {
      return (gpsReferenceTimeUncertainty != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return set_GPSTimingOfCell;
         case 1: return modeSpecificInfo;
         case 2: return sfn;
         case 3: return gpsReferenceTimeUncertainty;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "set-GPSTimingOfCell";
         case 1: return "modeSpecificInfo";
         case 2: return "sfn";
         case 3: return "gpsReferenceTimeUncertainty";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean modeSpecificInfoPresent = buffer.decodeBit ("modeSpecificInfoPresent");
      boolean gpsReferenceTimeUncertaintyPresent = buffer.decodeBit ("gpsReferenceTimeUncertaintyPresent");

      // decode set_GPSTimingOfCell

      buffer.getContext().eventDispatcher.startElement("set_GPSTimingOfCell", -1);

      set_GPSTimingOfCell = new UTRAN_GPSReferenceTimeResult_set_GPSTimingOfCell();
      set_GPSTimingOfCell.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("set_GPSTimingOfCell", -1);

      // decode modeSpecificInfo

      if (modeSpecificInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("modeSpecificInfo", -1);

         modeSpecificInfo = new UTRAN_GPSReferenceTimeResult_modeSpecificInfo();
         modeSpecificInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("modeSpecificInfo", -1);
      }
      else {
         modeSpecificInfo = null;
      }

      // decode sfn

      buffer.getContext().eventDispatcher.startElement("sfn", -1);

      sfn = new Asn1Integer();
      sfn.decode (buffer, 0, 4095);
      buffer.getContext().eventDispatcher.endElement("sfn", -1);

      // decode gpsReferenceTimeUncertainty

      if (gpsReferenceTimeUncertaintyPresent) {
         buffer.getContext().eventDispatcher.startElement("gpsReferenceTimeUncertainty", -1);

         gpsReferenceTimeUncertainty = new Asn1Integer();
         gpsReferenceTimeUncertainty.decode (buffer, 0, 127);
         buffer.getContext().eventDispatcher.endElement("gpsReferenceTimeUncertainty", -1);
      }
      else {
         gpsReferenceTimeUncertainty = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((modeSpecificInfo != null), null);
      buffer.encodeBit ((gpsReferenceTimeUncertainty != null), null);

      // encode set_GPSTimingOfCell

      if (set_GPSTimingOfCell != null) {
         buffer.getContext().eventDispatcher.startElement("set_GPSTimingOfCell", -1);

         set_GPSTimingOfCell.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("set_GPSTimingOfCell", -1);
      }
      else throw new Asn1MissingRequiredException ("set_GPSTimingOfCell");

      // encode modeSpecificInfo

      if (modeSpecificInfo != null) {
         buffer.getContext().eventDispatcher.startElement("modeSpecificInfo", -1);

         modeSpecificInfo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("modeSpecificInfo", -1);
      }

      // encode sfn

      if (sfn != null) {
         buffer.getContext().eventDispatcher.startElement("sfn", -1);

         sfn.encode (buffer, 0, 4095);

         buffer.getContext().eventDispatcher.endElement("sfn", -1);
      }
      else throw new Asn1MissingRequiredException ("sfn");

      // encode gpsReferenceTimeUncertainty

      if (gpsReferenceTimeUncertainty != null) {
         buffer.getContext().eventDispatcher.startElement("gpsReferenceTimeUncertainty", -1);

         gpsReferenceTimeUncertainty.encode (buffer, 0, 127);

         buffer.getContext().eventDispatcher.endElement("gpsReferenceTimeUncertainty", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
