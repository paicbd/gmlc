/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class RTK_Residuals_Element_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "RTK-Residuals-Element-r15";
   }

   protected SV_ID svID_r15;
   protected Asn1Integer s_oc_r15;
   protected Asn1Integer s_od_r15;
   protected Asn1Integer s_oh_r15;
   protected Asn1Integer s_lc_r15;
   protected Asn1Integer s_ld_r15;
   protected Asn1OpenExt extElem1;

   public RTK_Residuals_Element_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RTK_Residuals_Element_r15 (
      SV_ID svID_r15_,
      Asn1Integer s_oc_r15_,
      Asn1Integer s_od_r15_,
      Asn1Integer s_oh_r15_,
      Asn1Integer s_lc_r15_,
      Asn1Integer s_ld_r15_
   ) throws Asn1Exception {
      super();
      setSvID_r15 (svID_r15_);
      setS_oc_r15 (s_oc_r15_);
      setS_od_r15 (s_od_r15_);
      setS_oh_r15 (s_oh_r15_);
      setS_lc_r15 (s_lc_r15_);
      setS_ld_r15 (s_ld_r15_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RTK_Residuals_Element_r15 (SV_ID svID_r15_,
      long s_oc_r15_,
      long s_od_r15_,
      long s_oh_r15_,
      long s_lc_r15_,
      long s_ld_r15_
   ) throws Asn1Exception {
      super();
      setSvID_r15 (svID_r15_);
      setS_oc_r15 (s_oc_r15_);
      setS_od_r15 (s_od_r15_);
      setS_oh_r15 (s_oh_r15_);
      setS_lc_r15 (s_lc_r15_);
      setS_ld_r15 (s_ld_r15_);
   }

   public void init () {
      svID_r15 = null;
      s_oc_r15 = null;
      s_od_r15 = null;
      s_oh_r15 = null;
      s_lc_r15 = null;
      s_ld_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof RTK_Residuals_Element_r15) ) return false;

      RTK_Residuals_Element_r15 rhs = (RTK_Residuals_Element_r15) obj;

      if (svID_r15 == null) {
         if (rhs.svID_r15 != null) return false;
      }
      else {
         if (!svID_r15.equals(rhs.svID_r15)) {
            return false;
         }
      }

      if (s_oc_r15 == null) {
         if (rhs.s_oc_r15 != null) return false;
      }
      else {
         if (!s_oc_r15.equals(rhs.s_oc_r15)) {
            return false;
         }
      }

      if (s_od_r15 == null) {
         if (rhs.s_od_r15 != null) return false;
      }
      else {
         if (!s_od_r15.equals(rhs.s_od_r15)) {
            return false;
         }
      }

      if (s_oh_r15 == null) {
         if (rhs.s_oh_r15 != null) return false;
      }
      else {
         if (!s_oh_r15.equals(rhs.s_oh_r15)) {
            return false;
         }
      }

      if (s_lc_r15 == null) {
         if (rhs.s_lc_r15 != null) return false;
      }
      else {
         if (!s_lc_r15.equals(rhs.s_lc_r15)) {
            return false;
         }
      }

      if (s_ld_r15 == null) {
         if (rhs.s_ld_r15 != null) return false;
      }
      else {
         if (!s_ld_r15.equals(rhs.s_ld_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (svID_r15 != null) __code = 31*__code + svID_r15.hashCode();
      if (s_oc_r15 != null) __code = 31*__code + s_oc_r15.hashCode();
      if (s_od_r15 != null) __code = 31*__code + s_od_r15.hashCode();
      if (s_oh_r15 != null) __code = 31*__code + s_oh_r15.hashCode();
      if (s_lc_r15 != null) __code = 31*__code + s_lc_r15.hashCode();
      if (s_ld_r15 != null) __code = 31*__code + s_ld_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SvID_r15
    */
   public SV_ID getSvID_r15 () {
      return svID_r15;
   }

   public void setSvID_r15 (SV_ID value) {
      this.svID_r15 = value;
   }

   /**
    * Accessor/mutator methods for S_oc_r15
    */
   public Asn1Integer getS_oc_r15 () {
      return s_oc_r15;
   }

   public void setS_oc_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.s_oc_r15 = value;
   }

   public void setS_oc_r15 (long value) 
      throws Asn1Exception
   {
      setS_oc_r15 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for S_od_r15
    */
   public Asn1Integer getS_od_r15 () {
      return s_od_r15;
   }

   public void setS_od_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 511))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.s_od_r15 = value;
   }

   public void setS_od_r15 (long value) 
      throws Asn1Exception
   {
      setS_od_r15 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for S_oh_r15
    */
   public Asn1Integer getS_oh_r15 () {
      return s_oh_r15;
   }

   public void setS_oh_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 63))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.s_oh_r15 = value;
   }

   public void setS_oh_r15 (long value) 
      throws Asn1Exception
   {
      setS_oh_r15 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for S_lc_r15
    */
   public Asn1Integer getS_lc_r15 () {
      return s_lc_r15;
   }

   public void setS_lc_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.s_lc_r15 = value;
   }

   public void setS_lc_r15 (long value) 
      throws Asn1Exception
   {
      setS_lc_r15 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for S_ld_r15
    */
   public Asn1Integer getS_ld_r15 () {
      return s_ld_r15;
   }

   public void setS_ld_r15 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.s_ld_r15 = value;
   }

   public void setS_ld_r15 (long value) 
      throws Asn1Exception
   {
      setS_ld_r15 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return svID_r15;
         case 1: return s_oc_r15;
         case 2: return s_od_r15;
         case 3: return s_oh_r15;
         case 4: return s_lc_r15;
         case 5: return s_ld_r15;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "svID-r15";
         case 1: return "s-oc-r15";
         case 2: return "s-od-r15";
         case 3: return "s-oh-r15";
         case 4: return "s-lc-r15";
         case 5: return "s-ld-r15";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode svID_r15

      buffer.getContext().eventDispatcher.startElement("svID_r15", -1);

      svID_r15 = new SV_ID();
      svID_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("svID_r15", -1);

      // decode s_oc_r15

      buffer.getContext().eventDispatcher.startElement("s_oc_r15", -1);

      s_oc_r15 = new Asn1Integer();
      s_oc_r15.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("s_oc_r15", -1);

      // decode s_od_r15

      buffer.getContext().eventDispatcher.startElement("s_od_r15", -1);

      s_od_r15 = new Asn1Integer();
      s_od_r15.decode (buffer, 0, 511);
      buffer.getContext().eventDispatcher.endElement("s_od_r15", -1);

      // decode s_oh_r15

      buffer.getContext().eventDispatcher.startElement("s_oh_r15", -1);

      s_oh_r15 = new Asn1Integer();
      s_oh_r15.decode (buffer, 0, 63);
      buffer.getContext().eventDispatcher.endElement("s_oh_r15", -1);

      // decode s_lc_r15

      buffer.getContext().eventDispatcher.startElement("s_lc_r15", -1);

      s_lc_r15 = new Asn1Integer();
      s_lc_r15.decode (buffer, 0, 1023);
      buffer.getContext().eventDispatcher.endElement("s_lc_r15", -1);

      // decode s_ld_r15

      buffer.getContext().eventDispatcher.startElement("s_ld_r15", -1);

      s_ld_r15 = new Asn1Integer();
      s_ld_r15.decode (buffer, 0, 1023);
      buffer.getContext().eventDispatcher.endElement("s_ld_r15", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode svID_r15

      if (svID_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("svID_r15", -1);

         svID_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("svID_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("svID_r15");

      // encode s_oc_r15

      if (s_oc_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("s_oc_r15", -1);

         s_oc_r15.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("s_oc_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("s_oc_r15");

      // encode s_od_r15

      if (s_od_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("s_od_r15", -1);

         s_od_r15.encode (buffer, 0, 511);

         buffer.getContext().eventDispatcher.endElement("s_od_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("s_od_r15");

      // encode s_oh_r15

      if (s_oh_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("s_oh_r15", -1);

         s_oh_r15.encode (buffer, 0, 63);

         buffer.getContext().eventDispatcher.endElement("s_oh_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("s_oh_r15");

      // encode s_lc_r15

      if (s_lc_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("s_lc_r15", -1);

         s_lc_r15.encode (buffer, 0, 1023);

         buffer.getContext().eventDispatcher.endElement("s_lc_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("s_lc_r15");

      // encode s_ld_r15

      if (s_ld_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("s_ld_r15", -1);

         s_ld_r15.encode (buffer, 0, 1023);

         buffer.getContext().eventDispatcher.endElement("s_ld_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("s_ld_r15");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
