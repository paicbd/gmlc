/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_OrbitModel extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-OrbitModel";
   }

   // Choice element identifier constants
   public final static byte _KEPLERIANSET = 1;
   public final static byte _NAV_KEPLERIANSET = 2;
   public final static byte _CNAV_KEPLERIANSET = 3;
   public final static byte _GLONASS_ECEF = 4;
   public final static byte _SBAS_ECEF = 5;
   public final static byte _BDS_KEPLERIANSET_R12 = 6;
   public final static byte _BDS_KEPLERIANSET2_R16 = 7;
   public final static byte _NAVIC_KEPLERIANSET_R16 = 8;
   public final static byte _EXTELEM1 = 9;

   public GNSS_OrbitModel () {
      super();
   }

   public GNSS_OrbitModel (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _KEPLERIANSET: return "keplerianSet";
      case _NAV_KEPLERIANSET: return "nav_KeplerianSet";
      case _CNAV_KEPLERIANSET: return "cnav_KeplerianSet";
      case _GLONASS_ECEF: return "glonass_ECEF";
      case _SBAS_ECEF: return "sbas_ECEF";
      case _BDS_KEPLERIANSET_R12: return "bds_KeplerianSet_r12";
      case _BDS_KEPLERIANSET2_R16: return "bds_KeplerianSet2_r16";
      case _NAVIC_KEPLERIANSET_R16: return "navic_KeplerianSet_r16";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for keplerianSet
    */
   public NavModelKeplerianSet getKeplerianSet () {
      return (choiceID == _KEPLERIANSET) ? (NavModelKeplerianSet)element : null;
   }
   public void setKeplerianSet (NavModelKeplerianSet value) {
      setElement (_KEPLERIANSET, value);
   }
   public boolean isKeplerianSet () {
      return (choiceID == _KEPLERIANSET);
   }

   /**
    * Accessor/mutator methods for nav_KeplerianSet
    */
   public NavModelNAV_KeplerianSet getNav_KeplerianSet () {
      return (choiceID == _NAV_KEPLERIANSET) ? (NavModelNAV_KeplerianSet)element : null;
   }
   public void setNav_KeplerianSet (NavModelNAV_KeplerianSet value) {
      setElement (_NAV_KEPLERIANSET, value);
   }
   public boolean isNav_KeplerianSet () {
      return (choiceID == _NAV_KEPLERIANSET);
   }

   /**
    * Accessor/mutator methods for cnav_KeplerianSet
    */
   public NavModelCNAV_KeplerianSet getCnav_KeplerianSet () {
      return (choiceID == _CNAV_KEPLERIANSET) ? (NavModelCNAV_KeplerianSet)element : null;
   }
   public void setCnav_KeplerianSet (NavModelCNAV_KeplerianSet value) {
      setElement (_CNAV_KEPLERIANSET, value);
   }
   public boolean isCnav_KeplerianSet () {
      return (choiceID == _CNAV_KEPLERIANSET);
   }

   /**
    * Accessor/mutator methods for glonass_ECEF
    */
   public NavModel_GLONASS_ECEF getGlonass_ECEF () {
      return (choiceID == _GLONASS_ECEF) ? (NavModel_GLONASS_ECEF)element : null;
   }
   public void setGlonass_ECEF (NavModel_GLONASS_ECEF value) {
      setElement (_GLONASS_ECEF, value);
   }
   public boolean isGlonass_ECEF () {
      return (choiceID == _GLONASS_ECEF);
   }

   /**
    * Accessor/mutator methods for sbas_ECEF
    */
   public NavModel_SBAS_ECEF getSbas_ECEF () {
      return (choiceID == _SBAS_ECEF) ? (NavModel_SBAS_ECEF)element : null;
   }
   public void setSbas_ECEF (NavModel_SBAS_ECEF value) {
      setElement (_SBAS_ECEF, value);
   }
   public boolean isSbas_ECEF () {
      return (choiceID == _SBAS_ECEF);
   }

   /**
    * Accessor/mutator methods for bds_KeplerianSet_r12
    */
   public NavModel_BDS_KeplerianSet_r12 getBds_KeplerianSet_r12 () {
      return (choiceID == _BDS_KEPLERIANSET_R12) ? (NavModel_BDS_KeplerianSet_r12)element : null;
   }
   public void setBds_KeplerianSet_r12 (NavModel_BDS_KeplerianSet_r12 value) {
      setElement (_BDS_KEPLERIANSET_R12, value);
   }
   public boolean isBds_KeplerianSet_r12 () {
      return (choiceID == _BDS_KEPLERIANSET_R12);
   }

   /**
    * Accessor/mutator methods for bds_KeplerianSet2_r16
    */
   public NavModel_BDS_KeplerianSet2_r16 getBds_KeplerianSet2_r16 () {
      return (choiceID == _BDS_KEPLERIANSET2_R16) ? (NavModel_BDS_KeplerianSet2_r16)element : null;
   }
   public void setBds_KeplerianSet2_r16 (NavModel_BDS_KeplerianSet2_r16 value) {
      setElement (_BDS_KEPLERIANSET2_R16, value);
   }
   public boolean isBds_KeplerianSet2_r16 () {
      return (choiceID == _BDS_KEPLERIANSET2_R16);
   }

   /**
    * Accessor/mutator methods for navic_KeplerianSet_r16
    */
   public NavModel_NavIC_KeplerianSet_r16 getNavic_KeplerianSet_r16 () {
      return (choiceID == _NAVIC_KEPLERIANSET_R16) ? (NavModel_NavIC_KeplerianSet_r16)element : null;
   }
   public void setNavic_KeplerianSet_r16 (NavModel_NavIC_KeplerianSet_r16 value) {
      setElement (_NAVIC_KEPLERIANSET_R16, value);
   }
   public boolean isNavic_KeplerianSet_r16 () {
      return (choiceID == _NAVIC_KEPLERIANSET_R16);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (5, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // keplerianSet
            case 0: { 
               NavModelKeplerianSet keplerianSet;
               element = keplerianSet = new NavModelKeplerianSet();
               keplerianSet.decode (buffer);
               break;
            }

            // nav_KeplerianSet
            case 1: { 
               NavModelNAV_KeplerianSet nav_KeplerianSet;
               element = nav_KeplerianSet = new NavModelNAV_KeplerianSet();
               nav_KeplerianSet.decode (buffer);
               break;
            }

            // cnav_KeplerianSet
            case 2: { 
               NavModelCNAV_KeplerianSet cnav_KeplerianSet;
               element = cnav_KeplerianSet = new NavModelCNAV_KeplerianSet();
               cnav_KeplerianSet.decode (buffer);
               break;
            }

            // glonass_ECEF
            case 3: { 
               NavModel_GLONASS_ECEF glonass_ECEF;
               element = glonass_ECEF = new NavModel_GLONASS_ECEF();
               glonass_ECEF.decode (buffer);
               break;
            }

            // sbas_ECEF
            case 4: { 
               NavModel_SBAS_ECEF sbas_ECEF;
               element = sbas_ECEF = new NavModel_SBAS_ECEF();
               sbas_ECEF.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 6;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // bds_KeplerianSet_r12
            case 0: { 
               NavModel_BDS_KeplerianSet_r12 bds_KeplerianSet_r12;
               element = bds_KeplerianSet_r12 = new NavModel_BDS_KeplerianSet_r12();
               bds_KeplerianSet_r12.decode (buffer);
               break;
            }

            // bds_KeplerianSet2_r16
            case 1: { 
               NavModel_BDS_KeplerianSet2_r16 bds_KeplerianSet2_r16;
               element = bds_KeplerianSet2_r16 = new NavModel_BDS_KeplerianSet2_r16();
               bds_KeplerianSet2_r16.decode (buffer);
               break;
            }

            // navic_KeplerianSet_r16
            case 2: { 
               NavModel_NavIC_KeplerianSet_r16 navic_KeplerianSet_r16;
               element = navic_KeplerianSet_r16 = new NavModel_NavIC_KeplerianSet_r16();
               navic_KeplerianSet_r16.decode (buffer);
               break;
            }

            // extElem1
            case 3: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 5);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 5, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // keplerianSet
            case _KEPLERIANSET:
               NavModelKeplerianSet keplerianSet = (NavModelKeplerianSet) element;
               keplerianSet.encode (buffer);
               break;

            // nav_KeplerianSet
            case _NAV_KEPLERIANSET:
               NavModelNAV_KeplerianSet nav_KeplerianSet = (NavModelNAV_KeplerianSet) element;
               nav_KeplerianSet.encode (buffer);
               break;

            // cnav_KeplerianSet
            case _CNAV_KEPLERIANSET:
               NavModelCNAV_KeplerianSet cnav_KeplerianSet = (NavModelCNAV_KeplerianSet) element;
               cnav_KeplerianSet.encode (buffer);
               break;

            // glonass_ECEF
            case _GLONASS_ECEF:
               NavModel_GLONASS_ECEF glonass_ECEF = (NavModel_GLONASS_ECEF) element;
               glonass_ECEF.encode (buffer);
               break;

            // sbas_ECEF
            case _SBAS_ECEF:
               NavModel_SBAS_ECEF sbas_ECEF = (NavModel_SBAS_ECEF) element;
               sbas_ECEF.encode (buffer);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 6);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1PerEncodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());
         Asn1OpenType openType;

         switch (choiceID) {
            // bds_KeplerianSet_r12
            case _BDS_KEPLERIANSET_R12:
               NavModel_BDS_KeplerianSet_r12 bds_KeplerianSet_r12 = (NavModel_BDS_KeplerianSet_r12) element;
               bds_KeplerianSet_r12.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            // bds_KeplerianSet2_r16
            case _BDS_KEPLERIANSET2_R16:
               NavModel_BDS_KeplerianSet2_r16 bds_KeplerianSet2_r16 = (NavModel_BDS_KeplerianSet2_r16) element;
               bds_KeplerianSet2_r16.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            // navic_KeplerianSet_r16
            case _NAVIC_KEPLERIANSET_R16:
               NavModel_NavIC_KeplerianSet_r16 navic_KeplerianSet_r16 = (NavModel_NavIC_KeplerianSet_r16) element;
               navic_KeplerianSet_r16.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            default:
               openType = (Asn1OpenType)getElement();
         }

         buffer = savedBuffer;
         if (openType != null) {
            buffer.byteAlign();
            openType.encode (buffer);
         }
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
