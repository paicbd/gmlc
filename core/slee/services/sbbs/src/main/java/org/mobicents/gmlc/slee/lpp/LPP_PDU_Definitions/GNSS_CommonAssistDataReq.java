/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_CommonAssistDataReq extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-CommonAssistDataReq";
   }

   protected GNSS_ReferenceTimeReq gnss_ReferenceTimeReq;  // optional
   protected GNSS_ReferenceLocationReq gnss_ReferenceLocationReq;  // optional
   protected GNSS_IonosphericModelReq gnss_IonosphericModelReq;  // optional
   protected GNSS_EarthOrientationParametersReq gnss_EarthOrientationParametersReq;  // optional
   protected GNSS_RTK_ReferenceStationInfoReq_r15 gnss_RTK_ReferenceStationInfoReq_r15;  // optional
   protected GNSS_RTK_AuxiliaryStationDataReq_r15 gnss_RTK_AuxiliaryStationDataReq_r15;  // optional
   protected GNSS_SSR_CorrectionPointsReq_r16 gnss_SSR_CorrectionPointsReq_r16;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_CommonAssistDataReq () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_CommonAssistDataReq (
      GNSS_ReferenceTimeReq gnss_ReferenceTimeReq_,
      GNSS_ReferenceLocationReq gnss_ReferenceLocationReq_,
      GNSS_IonosphericModelReq gnss_IonosphericModelReq_,
      GNSS_EarthOrientationParametersReq gnss_EarthOrientationParametersReq_,
      GNSS_RTK_ReferenceStationInfoReq_r15 gnss_RTK_ReferenceStationInfoReq_r15_,
      GNSS_RTK_AuxiliaryStationDataReq_r15 gnss_RTK_AuxiliaryStationDataReq_r15_,
      GNSS_SSR_CorrectionPointsReq_r16 gnss_SSR_CorrectionPointsReq_r16_
   ) {
      super();
      setGnss_ReferenceTimeReq (gnss_ReferenceTimeReq_);
      setGnss_ReferenceLocationReq (gnss_ReferenceLocationReq_);
      setGnss_IonosphericModelReq (gnss_IonosphericModelReq_);
      setGnss_EarthOrientationParametersReq (gnss_EarthOrientationParametersReq_);
      setGnss_RTK_ReferenceStationInfoReq_r15 (gnss_RTK_ReferenceStationInfoReq_r15_);
      setGnss_RTK_AuxiliaryStationDataReq_r15 (gnss_RTK_AuxiliaryStationDataReq_r15_);
      setGnss_SSR_CorrectionPointsReq_r16 (gnss_SSR_CorrectionPointsReq_r16_);
   }

   public void init () {
      gnss_ReferenceTimeReq = null;
      gnss_ReferenceLocationReq = null;
      gnss_IonosphericModelReq = null;
      gnss_EarthOrientationParametersReq = null;
      gnss_RTK_ReferenceStationInfoReq_r15 = null;
      gnss_RTK_AuxiliaryStationDataReq_r15 = null;
      gnss_SSR_CorrectionPointsReq_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_CommonAssistDataReq) ) return false;

      GNSS_CommonAssistDataReq rhs = (GNSS_CommonAssistDataReq) obj;

      if (gnss_ReferenceTimeReq == null) {
         if (rhs.gnss_ReferenceTimeReq != null) return false;
      }
      else {
         if (!gnss_ReferenceTimeReq.equals(rhs.gnss_ReferenceTimeReq)) {
            return false;
         }
      }

      if (gnss_ReferenceLocationReq == null) {
         if (rhs.gnss_ReferenceLocationReq != null) return false;
      }
      else {
         if (!gnss_ReferenceLocationReq.equals(rhs.gnss_ReferenceLocationReq)) {
            return false;
         }
      }

      if (gnss_IonosphericModelReq == null) {
         if (rhs.gnss_IonosphericModelReq != null) return false;
      }
      else {
         if (!gnss_IonosphericModelReq.equals(rhs.gnss_IonosphericModelReq)) {
            return false;
         }
      }

      if (gnss_EarthOrientationParametersReq == null) {
         if (rhs.gnss_EarthOrientationParametersReq != null) return false;
      }
      else {
         if (!gnss_EarthOrientationParametersReq.equals(rhs.gnss_EarthOrientationParametersReq)) {
            return false;
         }
      }

      if (gnss_RTK_ReferenceStationInfoReq_r15 == null) {
         if (rhs.gnss_RTK_ReferenceStationInfoReq_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_ReferenceStationInfoReq_r15.equals(rhs.gnss_RTK_ReferenceStationInfoReq_r15)) {
            return false;
         }
      }

      if (gnss_RTK_AuxiliaryStationDataReq_r15 == null) {
         if (rhs.gnss_RTK_AuxiliaryStationDataReq_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_AuxiliaryStationDataReq_r15.equals(rhs.gnss_RTK_AuxiliaryStationDataReq_r15)) {
            return false;
         }
      }

      if (gnss_SSR_CorrectionPointsReq_r16 == null) {
         if (rhs.gnss_SSR_CorrectionPointsReq_r16 != null) return false;
      }
      else {
         if (!gnss_SSR_CorrectionPointsReq_r16.equals(rhs.gnss_SSR_CorrectionPointsReq_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gnss_ReferenceTimeReq != null) __code = 31*__code + gnss_ReferenceTimeReq.hashCode();
      if (gnss_ReferenceLocationReq != null) __code = 31*__code + gnss_ReferenceLocationReq.hashCode();
      if (gnss_IonosphericModelReq != null) __code = 31*__code + gnss_IonosphericModelReq.hashCode();
      if (gnss_EarthOrientationParametersReq != null) __code = 31*__code + gnss_EarthOrientationParametersReq.hashCode();
      if (gnss_RTK_ReferenceStationInfoReq_r15 != null) __code = 31*__code + gnss_RTK_ReferenceStationInfoReq_r15.hashCode();
      if (gnss_RTK_AuxiliaryStationDataReq_r15 != null) __code = 31*__code + gnss_RTK_AuxiliaryStationDataReq_r15.hashCode();
      if (gnss_SSR_CorrectionPointsReq_r16 != null) __code = 31*__code + gnss_SSR_CorrectionPointsReq_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Gnss_ReferenceTimeReq
    */
   public GNSS_ReferenceTimeReq getGnss_ReferenceTimeReq () {
      return gnss_ReferenceTimeReq;
   }

   public void setGnss_ReferenceTimeReq (GNSS_ReferenceTimeReq value) {
      this.gnss_ReferenceTimeReq = value;
   }

   public boolean hasGnss_ReferenceTimeReq () {
      return (gnss_ReferenceTimeReq != null);
   }

   /**
    * Accessor/mutator methods for Gnss_ReferenceLocationReq
    */
   public GNSS_ReferenceLocationReq getGnss_ReferenceLocationReq () {
      return gnss_ReferenceLocationReq;
   }

   public void setGnss_ReferenceLocationReq (GNSS_ReferenceLocationReq value) {
      this.gnss_ReferenceLocationReq = value;
   }

   public boolean hasGnss_ReferenceLocationReq () {
      return (gnss_ReferenceLocationReq != null);
   }

   /**
    * Accessor/mutator methods for Gnss_IonosphericModelReq
    */
   public GNSS_IonosphericModelReq getGnss_IonosphericModelReq () {
      return gnss_IonosphericModelReq;
   }

   public void setGnss_IonosphericModelReq (GNSS_IonosphericModelReq value) {
      this.gnss_IonosphericModelReq = value;
   }

   public boolean hasGnss_IonosphericModelReq () {
      return (gnss_IonosphericModelReq != null);
   }

   /**
    * Accessor/mutator methods for Gnss_EarthOrientationParametersReq
    */
   public GNSS_EarthOrientationParametersReq getGnss_EarthOrientationParametersReq () {
      return gnss_EarthOrientationParametersReq;
   }

   public void setGnss_EarthOrientationParametersReq (GNSS_EarthOrientationParametersReq value) {
      this.gnss_EarthOrientationParametersReq = value;
   }

   public boolean hasGnss_EarthOrientationParametersReq () {
      return (gnss_EarthOrientationParametersReq != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_ReferenceStationInfoReq_r15
    */
   public GNSS_RTK_ReferenceStationInfoReq_r15 getGnss_RTK_ReferenceStationInfoReq_r15 () {
      return gnss_RTK_ReferenceStationInfoReq_r15;
   }

   public void setGnss_RTK_ReferenceStationInfoReq_r15 (GNSS_RTK_ReferenceStationInfoReq_r15 value) {
      this.gnss_RTK_ReferenceStationInfoReq_r15 = value;
   }

   public boolean hasGnss_RTK_ReferenceStationInfoReq_r15 () {
      return (gnss_RTK_ReferenceStationInfoReq_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_AuxiliaryStationDataReq_r15
    */
   public GNSS_RTK_AuxiliaryStationDataReq_r15 getGnss_RTK_AuxiliaryStationDataReq_r15 () {
      return gnss_RTK_AuxiliaryStationDataReq_r15;
   }

   public void setGnss_RTK_AuxiliaryStationDataReq_r15 (GNSS_RTK_AuxiliaryStationDataReq_r15 value) {
      this.gnss_RTK_AuxiliaryStationDataReq_r15 = value;
   }

   public boolean hasGnss_RTK_AuxiliaryStationDataReq_r15 () {
      return (gnss_RTK_AuxiliaryStationDataReq_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_CorrectionPointsReq_r16
    */
   public GNSS_SSR_CorrectionPointsReq_r16 getGnss_SSR_CorrectionPointsReq_r16 () {
      return gnss_SSR_CorrectionPointsReq_r16;
   }

   public void setGnss_SSR_CorrectionPointsReq_r16 (GNSS_SSR_CorrectionPointsReq_r16 value) {
      this.gnss_SSR_CorrectionPointsReq_r16 = value;
   }

   public boolean hasGnss_SSR_CorrectionPointsReq_r16 () {
      return (gnss_SSR_CorrectionPointsReq_r16 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gnss_ReferenceTimeReq;
         case 1: return gnss_ReferenceLocationReq;
         case 2: return gnss_IonosphericModelReq;
         case 3: return gnss_EarthOrientationParametersReq;
         case 4: return gnss_RTK_ReferenceStationInfoReq_r15;
         case 5: return gnss_RTK_AuxiliaryStationDataReq_r15;
         case 6: return gnss_SSR_CorrectionPointsReq_r16;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gnss-ReferenceTimeReq";
         case 1: return "gnss-ReferenceLocationReq";
         case 2: return "gnss-IonosphericModelReq";
         case 3: return "gnss-EarthOrientationParametersReq";
         case 4: return "gnss-RTK-ReferenceStationInfoReq-r15";
         case 5: return "gnss-RTK-AuxiliaryStationDataReq-r15";
         case 6: return "gnss-SSR-CorrectionPointsReq-r16";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean gnss_ReferenceTimeReqPresent = buffer.decodeBit ("gnss_ReferenceTimeReqPresent");
      boolean gnss_ReferenceLocationReqPresent = buffer.decodeBit ("gnss_ReferenceLocationReqPresent");
      boolean gnss_IonosphericModelReqPresent = buffer.decodeBit ("gnss_IonosphericModelReqPresent");
      boolean gnss_EarthOrientationParametersReqPresent = buffer.decodeBit ("gnss_EarthOrientationParametersReqPresent");

      // decode gnss_ReferenceTimeReq

      if (gnss_ReferenceTimeReqPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_ReferenceTimeReq", -1);

         gnss_ReferenceTimeReq = new GNSS_ReferenceTimeReq();
         gnss_ReferenceTimeReq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_ReferenceTimeReq", -1);
      }
      else {
         gnss_ReferenceTimeReq = null;
      }

      // decode gnss_ReferenceLocationReq

      if (gnss_ReferenceLocationReqPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_ReferenceLocationReq", -1);

         gnss_ReferenceLocationReq = new GNSS_ReferenceLocationReq();
         gnss_ReferenceLocationReq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_ReferenceLocationReq", -1);
      }
      else {
         gnss_ReferenceLocationReq = null;
      }

      // decode gnss_IonosphericModelReq

      if (gnss_IonosphericModelReqPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_IonosphericModelReq", -1);

         gnss_IonosphericModelReq = new GNSS_IonosphericModelReq();
         gnss_IonosphericModelReq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_IonosphericModelReq", -1);
      }
      else {
         gnss_IonosphericModelReq = null;
      }

      // decode gnss_EarthOrientationParametersReq

      if (gnss_EarthOrientationParametersReqPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_EarthOrientationParametersReq", -1);

         gnss_EarthOrientationParametersReq = new GNSS_EarthOrientationParametersReq();
         gnss_EarthOrientationParametersReq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_EarthOrientationParametersReq", -1);
      }
      else {
         gnss_EarthOrientationParametersReq = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_RTK_ReferenceStationInfoReq_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_RTK_AuxiliaryStationDataReq_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_CorrectionPointsReq_r16Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode gnss_RTK_ReferenceStationInfoReq_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_ReferenceStationInfoReq_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_RTK_ReferenceStationInfoReq_r15 = new GNSS_RTK_ReferenceStationInfoReq_r15();
            gnss_RTK_ReferenceStationInfoReq_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_RTK_ReferenceStationInfoReq_r15", -1);

         }
         else {
            gnss_RTK_ReferenceStationInfoReq_r15 = null;
         }

         // decode gnss_RTK_AuxiliaryStationDataReq_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_AuxiliaryStationDataReq_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_RTK_AuxiliaryStationDataReq_r15 = new GNSS_RTK_AuxiliaryStationDataReq_r15();
            gnss_RTK_AuxiliaryStationDataReq_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_RTK_AuxiliaryStationDataReq_r15", -1);

         }
         else {
            gnss_RTK_AuxiliaryStationDataReq_r15 = null;
         }

         // decode gnss_SSR_CorrectionPointsReq_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_CorrectionPointsReq_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_CorrectionPointsReq_r16 = new GNSS_SSR_CorrectionPointsReq_r16();
            gnss_SSR_CorrectionPointsReq_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_CorrectionPointsReq_r16", -1);

         }
         else {
            gnss_SSR_CorrectionPointsReq_r16 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((gnss_RTK_ReferenceStationInfoReq_r15 != null) ||
      (gnss_RTK_AuxiliaryStationDataReq_r15 != null) ||
      (gnss_SSR_CorrectionPointsReq_r16 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((gnss_ReferenceTimeReq != null), null);
      buffer.encodeBit ((gnss_ReferenceLocationReq != null), null);
      buffer.encodeBit ((gnss_IonosphericModelReq != null), null);
      buffer.encodeBit ((gnss_EarthOrientationParametersReq != null), null);

      // encode gnss_ReferenceTimeReq

      if (gnss_ReferenceTimeReq != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_ReferenceTimeReq", -1);

         gnss_ReferenceTimeReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_ReferenceTimeReq", -1);
      }

      // encode gnss_ReferenceLocationReq

      if (gnss_ReferenceLocationReq != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_ReferenceLocationReq", -1);

         gnss_ReferenceLocationReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_ReferenceLocationReq", -1);
      }

      // encode gnss_IonosphericModelReq

      if (gnss_IonosphericModelReq != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_IonosphericModelReq", -1);

         gnss_IonosphericModelReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_IonosphericModelReq", -1);
      }

      // encode gnss_EarthOrientationParametersReq

      if (gnss_EarthOrientationParametersReq != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_EarthOrientationParametersReq", -1);

         gnss_EarthOrientationParametersReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_EarthOrientationParametersReq", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 3;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((gnss_RTK_ReferenceStationInfoReq_r15 != null), null);
         buffer.encodeBit ((gnss_RTK_AuxiliaryStationDataReq_r15 != null), null);
         buffer.encodeBit ((gnss_SSR_CorrectionPointsReq_r16 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // gnss_RTK_ReferenceStationInfoReq_r15

         if (gnss_RTK_ReferenceStationInfoReq_r15 != null) {
            buffer.reset();
            gnss_RTK_ReferenceStationInfoReq_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_ReferenceStationInfoReq_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_RTK_ReferenceStationInfoReq_r15", -1);
         }

         // gnss_RTK_AuxiliaryStationDataReq_r15

         if (gnss_RTK_AuxiliaryStationDataReq_r15 != null) {
            buffer.reset();
            gnss_RTK_AuxiliaryStationDataReq_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_AuxiliaryStationDataReq_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_RTK_AuxiliaryStationDataReq_r15", -1);
         }

         // gnss_SSR_CorrectionPointsReq_r16

         if (gnss_SSR_CorrectionPointsReq_r16 != null) {
            buffer.reset();
            gnss_SSR_CorrectionPointsReq_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_CorrectionPointsReq_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_CorrectionPointsReq_r16", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
