/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr2 extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _MHZ50 = 0;
   public static final int _MHZ100 = 1;
   public static final int _MHZ200 = 2;
   public static final int _MHZ400 = 3;

   // Singleton instances of PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr2
   protected static final PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr2 _mhz50 = new PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr2(0);
   protected static final PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr2 _mhz100 = new PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr2(1);
   protected static final PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr2 _mhz200 = new PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr2(2);
   protected static final PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr2 _mhz400 = new PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr2(3);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    */
   protected PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr2 (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for mhz50.
    */
   public static PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr2 mhz50() {
      return _mhz50;
   }

   /**
    * Singleton accessor method for mhz100.
    */
   public static PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr2 mhz100() {
      return _mhz100;
   }

   /**
    * Singleton accessor method for mhz200.
    */
   public static PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr2 mhz200() {
      return _mhz200;
   }

   /**
    * Singleton accessor method for mhz400.
    */
   public static PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr2 mhz400() {
      return _mhz400;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr2.valueOf( PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr2.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static PRS_ProcessingCapabilityPerBand_r16_supportedBandwidthPRS_r16_fr2 valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return mhz50();
         case 1: return mhz100();
         case 2: return mhz200();
         case 3: return mhz400();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (4);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      switch ((int)value) {
         case 0: ui = 0; /* mhz50 */break;
         case 1: ui = 1; /* mhz100 */break;
         case 2: ui = 2; /* mhz200 */break;
         case 3: ui = 3; /* mhz400 */break;
         default:
            throw new Asn1InvalidEnumException (value);
      }

      buffer.encodeConsWholeNumber (ui, 4);
   }

}
