/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Components;

import com.objsys.asn1j.runtime.*;

public class MeasuredResults extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "MeasuredResults";
   }

   protected FrequencyInfo frequencyInfo;  // optional
   protected UTRA_CarrierRSSI utra_CarrierRSSI;  // optional
   protected CellMeasuredResultsList cellMeasuredResultsList;  // optional

   public MeasuredResults () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasuredResults (
      FrequencyInfo frequencyInfo_,
      UTRA_CarrierRSSI utra_CarrierRSSI_,
      CellMeasuredResultsList cellMeasuredResultsList_
   ) throws Asn1Exception {
      super();
      setFrequencyInfo (frequencyInfo_);
      setUtra_CarrierRSSI (utra_CarrierRSSI_);
      setCellMeasuredResultsList (cellMeasuredResultsList_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasuredResults (FrequencyInfo frequencyInfo_,
      long utra_CarrierRSSI_,
      CellMeasuredResultsList cellMeasuredResultsList_
   ) throws Asn1Exception {
      super();
      setFrequencyInfo (frequencyInfo_);
      setUtra_CarrierRSSI (utra_CarrierRSSI_);
      setCellMeasuredResultsList (cellMeasuredResultsList_);
   }

   public void init () {
      frequencyInfo = null;
      utra_CarrierRSSI = null;
      cellMeasuredResultsList = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof MeasuredResults) ) return false;

      MeasuredResults rhs = (MeasuredResults) obj;

      if (frequencyInfo == null) {
         if (rhs.frequencyInfo != null) return false;
      }
      else {
         if (!frequencyInfo.equals(rhs.frequencyInfo)) {
            return false;
         }
      }

      if (utra_CarrierRSSI == null) {
         if (rhs.utra_CarrierRSSI != null) return false;
      }
      else {
         if (!utra_CarrierRSSI.equals(rhs.utra_CarrierRSSI)) {
            return false;
         }
      }

      if (cellMeasuredResultsList == null) {
         if (rhs.cellMeasuredResultsList != null) return false;
      }
      else {
         if (!cellMeasuredResultsList.equals(rhs.cellMeasuredResultsList)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (frequencyInfo != null) __code = 31*__code + frequencyInfo.hashCode();
      if (utra_CarrierRSSI != null) __code = 31*__code + utra_CarrierRSSI.hashCode();
      if (cellMeasuredResultsList != null) __code = 31*__code + cellMeasuredResultsList.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for FrequencyInfo
    */
   public FrequencyInfo getFrequencyInfo () {
      return frequencyInfo;
   }

   public void setFrequencyInfo (FrequencyInfo value) {
      this.frequencyInfo = value;
   }

   public boolean hasFrequencyInfo () {
      return (frequencyInfo != null);
   }

   /**
    * Accessor/mutator methods for Utra_CarrierRSSI
    */
   public UTRA_CarrierRSSI getUtra_CarrierRSSI () {
      return utra_CarrierRSSI;
   }

   public void setUtra_CarrierRSSI (UTRA_CarrierRSSI value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 127))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.utra_CarrierRSSI = value;
   }

   public void setUtra_CarrierRSSI (long value) 
      throws Asn1Exception
   {
      setUtra_CarrierRSSI (new UTRA_CarrierRSSI(value));
   }
   public boolean hasUtra_CarrierRSSI () {
      return (utra_CarrierRSSI != null);
   }

   /**
    * Accessor/mutator methods for CellMeasuredResultsList
    */
   public CellMeasuredResultsList getCellMeasuredResultsList () {
      return cellMeasuredResultsList;
   }

   public void setCellMeasuredResultsList (CellMeasuredResultsList value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 32))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.cellMeasuredResultsList = value;
   }

   public boolean hasCellMeasuredResultsList () {
      return (cellMeasuredResultsList != null);
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return frequencyInfo;
         case 1: return utra_CarrierRSSI;
         case 2: return cellMeasuredResultsList;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "frequencyInfo";
         case 1: return "utra-CarrierRSSI";
         case 2: return "cellMeasuredResultsList";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean frequencyInfoPresent = buffer.decodeBit ("frequencyInfoPresent");
      boolean utra_CarrierRSSIPresent = buffer.decodeBit ("utra_CarrierRSSIPresent");
      boolean cellMeasuredResultsListPresent = buffer.decodeBit ("cellMeasuredResultsListPresent");

      // decode frequencyInfo

      if (frequencyInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("frequencyInfo", -1);

         frequencyInfo = new FrequencyInfo();
         frequencyInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("frequencyInfo", -1);
      }
      else {
         frequencyInfo = null;
      }

      // decode utra_CarrierRSSI

      if (utra_CarrierRSSIPresent) {
         buffer.getContext().eventDispatcher.startElement("utra_CarrierRSSI", -1);

         utra_CarrierRSSI = new UTRA_CarrierRSSI();
         utra_CarrierRSSI.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("utra_CarrierRSSI", -1);
      }
      else {
         utra_CarrierRSSI = null;
      }

      // decode cellMeasuredResultsList

      if (cellMeasuredResultsListPresent) {
         buffer.getContext().eventDispatcher.startElement("cellMeasuredResultsList", -1);

         cellMeasuredResultsList = new CellMeasuredResultsList();
         cellMeasuredResultsList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellMeasuredResultsList", -1);
      }
      else {
         cellMeasuredResultsList = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((frequencyInfo != null), null);
      buffer.encodeBit ((utra_CarrierRSSI != null), null);
      buffer.encodeBit ((cellMeasuredResultsList != null), null);

      // encode frequencyInfo

      if (frequencyInfo != null) {
         buffer.getContext().eventDispatcher.startElement("frequencyInfo", -1);

         frequencyInfo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("frequencyInfo", -1);
      }

      // encode utra_CarrierRSSI

      if (utra_CarrierRSSI != null) {
         buffer.getContext().eventDispatcher.startElement("utra_CarrierRSSI", -1);

         utra_CarrierRSSI.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("utra_CarrierRSSI", -1);
      }

      // encode cellMeasuredResultsList

      if (cellMeasuredResultsList != null) {
         buffer.getContext().eventDispatcher.startElement("cellMeasuredResultsList", -1);

         cellMeasuredResultsList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cellMeasuredResultsList", -1);
      }

   }

}
