/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_TRIGGERED_START;

import com.objsys.asn1j.runtime.*;

public class PeriodicParams extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_TRIGGERED_STARTRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_TRIGGERED_STARTRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "PeriodicParams";
   }

   protected Asn1Integer numberOfFixes;
   protected Asn1Integer intervalBetweenFixes;
   protected Asn1Integer startTime;  // optional
   protected Asn1OpenExt extElem1;

   public PeriodicParams () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PeriodicParams (
      Asn1Integer numberOfFixes_,
      Asn1Integer intervalBetweenFixes_,
      Asn1Integer startTime_
   ) throws Asn1Exception {
      super();
      setNumberOfFixes (numberOfFixes_);
      setIntervalBetweenFixes (intervalBetweenFixes_);
      setStartTime (startTime_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PeriodicParams (
      Asn1Integer numberOfFixes_,
      Asn1Integer intervalBetweenFixes_
   ) throws Asn1Exception {
      super();
      setNumberOfFixes (numberOfFixes_);
      setIntervalBetweenFixes (intervalBetweenFixes_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PeriodicParams (long numberOfFixes_,
      long intervalBetweenFixes_,
      long startTime_
   ) throws Asn1Exception {
      super();
      setNumberOfFixes (numberOfFixes_);
      setIntervalBetweenFixes (intervalBetweenFixes_);
      setStartTime (startTime_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public PeriodicParams (
      long numberOfFixes_,
      long intervalBetweenFixes_
   ) throws Asn1Exception {
      super();
      setNumberOfFixes (numberOfFixes_);
      setIntervalBetweenFixes (intervalBetweenFixes_);
   }

   public void init () {
      numberOfFixes = null;
      intervalBetweenFixes = null;
      startTime = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof PeriodicParams) ) return false;

      PeriodicParams rhs = (PeriodicParams) obj;

      if (numberOfFixes == null) {
         if (rhs.numberOfFixes != null) return false;
      }
      else {
         if (!numberOfFixes.equals(rhs.numberOfFixes)) {
            return false;
         }
      }

      if (intervalBetweenFixes == null) {
         if (rhs.intervalBetweenFixes != null) return false;
      }
      else {
         if (!intervalBetweenFixes.equals(rhs.intervalBetweenFixes)) {
            return false;
         }
      }

      if (startTime == null) {
         if (rhs.startTime != null) return false;
      }
      else {
         if (!startTime.equals(rhs.startTime)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (numberOfFixes != null) __code = 31*__code + numberOfFixes.hashCode();
      if (intervalBetweenFixes != null) __code = 31*__code + intervalBetweenFixes.hashCode();
      if (startTime != null) __code = 31*__code + startTime.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for NumberOfFixes
    */
   public Asn1Integer getNumberOfFixes () {
      return numberOfFixes;
   }

   public void setNumberOfFixes (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 8639999))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.numberOfFixes = value;
   }

   public void setNumberOfFixes (long value) 
      throws Asn1Exception
   {
      setNumberOfFixes (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for IntervalBetweenFixes
    */
   public Asn1Integer getIntervalBetweenFixes () {
      return intervalBetweenFixes;
   }

   public void setIntervalBetweenFixes (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 8639999))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.intervalBetweenFixes = value;
   }

   public void setIntervalBetweenFixes (long value) 
      throws Asn1Exception
   {
      setIntervalBetweenFixes (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for StartTime
    */
   public Asn1Integer getStartTime () {
      return startTime;
   }

   public void setStartTime (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 2678400))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.startTime = value;
   }

   public void setStartTime (long value) 
      throws Asn1Exception
   {
      setStartTime (new Asn1Integer(value));
   }
   public boolean hasStartTime () {
      return (startTime != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return numberOfFixes;
         case 1: return intervalBetweenFixes;
         case 2: return startTime;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "numberOfFixes";
         case 1: return "intervalBetweenFixes";
         case 2: return "startTime";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean startTimePresent = buffer.decodeBit ("startTimePresent");

      // decode numberOfFixes

      buffer.getContext().eventDispatcher.startElement("numberOfFixes", -1);

      numberOfFixes = new Asn1Integer();
      numberOfFixes.decode (buffer, 1, 8639999);
      buffer.getContext().eventDispatcher.endElement("numberOfFixes", -1);

      // decode intervalBetweenFixes

      buffer.getContext().eventDispatcher.startElement("intervalBetweenFixes", -1);

      intervalBetweenFixes = new Asn1Integer();
      intervalBetweenFixes.decode (buffer, 1, 8639999);
      buffer.getContext().eventDispatcher.endElement("intervalBetweenFixes", -1);

      // decode startTime

      if (startTimePresent) {
         buffer.getContext().eventDispatcher.startElement("startTime", -1);

         startTime = new Asn1Integer();
         startTime.decode (buffer, 0, 2678400);
         buffer.getContext().eventDispatcher.endElement("startTime", -1);
      }
      else {
         startTime = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((startTime != null), null);

      // encode numberOfFixes

      if (numberOfFixes != null) {
         buffer.getContext().eventDispatcher.startElement("numberOfFixes", -1);

         numberOfFixes.encode (buffer, 1, 8639999);

         buffer.getContext().eventDispatcher.endElement("numberOfFixes", -1);
      }
      else throw new Asn1MissingRequiredException ("numberOfFixes");

      // encode intervalBetweenFixes

      if (intervalBetweenFixes != null) {
         buffer.getContext().eventDispatcher.startElement("intervalBetweenFixes", -1);

         intervalBetweenFixes.encode (buffer, 1, 8639999);

         buffer.getContext().eventDispatcher.endElement("intervalBetweenFixes", -1);
      }
      else throw new Asn1MissingRequiredException ("intervalBetweenFixes");

      // encode startTime

      if (startTime != null) {
         buffer.getContext().eventDispatcher.startElement("startTime", -1);

         startTime.encode (buffer, 0, 2678400);

         buffer.getContext().eventDispatcher.endElement("startTime", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
