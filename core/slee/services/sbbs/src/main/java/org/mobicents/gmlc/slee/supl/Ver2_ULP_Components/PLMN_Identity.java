/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class PLMN_Identity extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "PLMN-Identity";
   }

   protected MCC mcc;  // optional
   protected MNC mnc;

   public PLMN_Identity () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PLMN_Identity (
      MCC mcc_,
      MNC mnc_
   ) throws Asn1Exception {
      super();
      setMcc (mcc_);
      setMnc (mnc_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PLMN_Identity (
      MNC mnc_
   ) throws Asn1Exception {
      super();
      setMnc (mnc_);
   }

   public void init () {
      mcc = null;
      mnc = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof PLMN_Identity) ) return false;

      PLMN_Identity rhs = (PLMN_Identity) obj;

      if (mcc == null) {
         if (rhs.mcc != null) return false;
      }
      else {
         if (!mcc.equals(rhs.mcc)) {
            return false;
         }
      }

      if (mnc == null) {
         if (rhs.mnc != null) return false;
      }
      else {
         if (!mnc.equals(rhs.mnc)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (mcc != null) __code = 31*__code + mcc.hashCode();
      if (mnc != null) __code = 31*__code + mnc.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Mcc
    */
   public MCC getMcc () {
      return mcc;
   }

   public void setMcc (MCC value) 
      throws Asn1Exception
   {
      if (!(value.getElements().length == 3)) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.mcc = value;
   }

   public boolean hasMcc () {
      return (mcc != null);
   }

   /**
    * Accessor/mutator methods for Mnc
    */
   public MNC getMnc () {
      return mnc;
   }

   public void setMnc (MNC value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 2 && value.getElements().length <= 3))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.mnc = value;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return mcc;
         case 1: return mnc;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "mcc";
         case 1: return "mnc";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean mccPresent = buffer.decodeBit ("mccPresent");

      // decode mcc

      if (mccPresent) {
         buffer.getContext().eventDispatcher.startElement("mcc", -1);

         mcc = new MCC();
         mcc.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mcc", -1);
      }
      else {
         mcc = null;
      }

      // decode mnc

      buffer.getContext().eventDispatcher.startElement("mnc", -1);

      mnc = new MNC();
      mnc.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("mnc", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((mcc != null), null);

      // encode mcc

      if (mcc != null) {
         buffer.getContext().eventDispatcher.startElement("mcc", -1);

         mcc.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mcc", -1);
      }

      // encode mnc

      if (mnc != null) {
         buffer.getContext().eventDispatcher.startElement("mnc", -1);

         mnc.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mnc", -1);
      }
      else throw new Asn1MissingRequiredException ("mnc");

   }

}
