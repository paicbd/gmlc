/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NavIC_CorrectionElementAutoNav_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "NavIC-CorrectionElementAutoNav-r16";
   }

   protected SV_ID svID;
   protected Asn1Integer navic_Tod_r16;
   protected Asn1Integer navic_iodec_r16;
   protected Asn1Integer navic_UDRAI_r16;
   protected Asn1Integer navic_UDRArateI_r16;
   protected NavIC_EDC_r16 navic_EDC_r16;
   protected NavIC_CDC_r16 navic_CDC_r16;
   protected Asn1OpenExt extElem1;

   public NavIC_CorrectionElementAutoNav_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NavIC_CorrectionElementAutoNav_r16 (
      SV_ID svID_,
      Asn1Integer navic_Tod_r16_,
      Asn1Integer navic_iodec_r16_,
      Asn1Integer navic_UDRAI_r16_,
      Asn1Integer navic_UDRArateI_r16_,
      NavIC_EDC_r16 navic_EDC_r16_,
      NavIC_CDC_r16 navic_CDC_r16_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setNavic_Tod_r16 (navic_Tod_r16_);
      setNavic_iodec_r16 (navic_iodec_r16_);
      setNavic_UDRAI_r16 (navic_UDRAI_r16_);
      setNavic_UDRArateI_r16 (navic_UDRArateI_r16_);
      setNavic_EDC_r16 (navic_EDC_r16_);
      setNavic_CDC_r16 (navic_CDC_r16_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NavIC_CorrectionElementAutoNav_r16 (SV_ID svID_,
      long navic_Tod_r16_,
      long navic_iodec_r16_,
      long navic_UDRAI_r16_,
      long navic_UDRArateI_r16_,
      NavIC_EDC_r16 navic_EDC_r16_,
      NavIC_CDC_r16 navic_CDC_r16_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setNavic_Tod_r16 (navic_Tod_r16_);
      setNavic_iodec_r16 (navic_iodec_r16_);
      setNavic_UDRAI_r16 (navic_UDRAI_r16_);
      setNavic_UDRArateI_r16 (navic_UDRArateI_r16_);
      setNavic_EDC_r16 (navic_EDC_r16_);
      setNavic_CDC_r16 (navic_CDC_r16_);
   }

   public void init () {
      svID = null;
      navic_Tod_r16 = null;
      navic_iodec_r16 = null;
      navic_UDRAI_r16 = null;
      navic_UDRArateI_r16 = null;
      navic_EDC_r16 = null;
      navic_CDC_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof NavIC_CorrectionElementAutoNav_r16) ) return false;

      NavIC_CorrectionElementAutoNav_r16 rhs = (NavIC_CorrectionElementAutoNav_r16) obj;

      if (svID == null) {
         if (rhs.svID != null) return false;
      }
      else {
         if (!svID.equals(rhs.svID)) {
            return false;
         }
      }

      if (navic_Tod_r16 == null) {
         if (rhs.navic_Tod_r16 != null) return false;
      }
      else {
         if (!navic_Tod_r16.equals(rhs.navic_Tod_r16)) {
            return false;
         }
      }

      if (navic_iodec_r16 == null) {
         if (rhs.navic_iodec_r16 != null) return false;
      }
      else {
         if (!navic_iodec_r16.equals(rhs.navic_iodec_r16)) {
            return false;
         }
      }

      if (navic_UDRAI_r16 == null) {
         if (rhs.navic_UDRAI_r16 != null) return false;
      }
      else {
         if (!navic_UDRAI_r16.equals(rhs.navic_UDRAI_r16)) {
            return false;
         }
      }

      if (navic_UDRArateI_r16 == null) {
         if (rhs.navic_UDRArateI_r16 != null) return false;
      }
      else {
         if (!navic_UDRArateI_r16.equals(rhs.navic_UDRArateI_r16)) {
            return false;
         }
      }

      if (navic_EDC_r16 == null) {
         if (rhs.navic_EDC_r16 != null) return false;
      }
      else {
         if (!navic_EDC_r16.equals(rhs.navic_EDC_r16)) {
            return false;
         }
      }

      if (navic_CDC_r16 == null) {
         if (rhs.navic_CDC_r16 != null) return false;
      }
      else {
         if (!navic_CDC_r16.equals(rhs.navic_CDC_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (svID != null) __code = 31*__code + svID.hashCode();
      if (navic_Tod_r16 != null) __code = 31*__code + navic_Tod_r16.hashCode();
      if (navic_iodec_r16 != null) __code = 31*__code + navic_iodec_r16.hashCode();
      if (navic_UDRAI_r16 != null) __code = 31*__code + navic_UDRAI_r16.hashCode();
      if (navic_UDRArateI_r16 != null) __code = 31*__code + navic_UDRArateI_r16.hashCode();
      if (navic_EDC_r16 != null) __code = 31*__code + navic_EDC_r16.hashCode();
      if (navic_CDC_r16 != null) __code = 31*__code + navic_CDC_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SvID
    */
   public SV_ID getSvID () {
      return svID;
   }

   public void setSvID (SV_ID value) {
      this.svID = value;
   }

   /**
    * Accessor/mutator methods for Navic_Tod_r16
    */
   public Asn1Integer getNavic_Tod_r16 () {
      return navic_Tod_r16;
   }

   public void setNavic_Tod_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_Tod_r16 = value;
   }

   public void setNavic_Tod_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_Tod_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_iodec_r16
    */
   public Asn1Integer getNavic_iodec_r16 () {
      return navic_iodec_r16;
   }

   public void setNavic_iodec_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_iodec_r16 = value;
   }

   public void setNavic_iodec_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_iodec_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_UDRAI_r16
    */
   public Asn1Integer getNavic_UDRAI_r16 () {
      return navic_UDRAI_r16;
   }

   public void setNavic_UDRAI_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -16 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_UDRAI_r16 = value;
   }

   public void setNavic_UDRAI_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_UDRAI_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_UDRArateI_r16
    */
   public Asn1Integer getNavic_UDRArateI_r16 () {
      return navic_UDRArateI_r16;
   }

   public void setNavic_UDRArateI_r16 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -16 && value.value <= 15))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.navic_UDRArateI_r16 = value;
   }

   public void setNavic_UDRArateI_r16 (long value) 
      throws Asn1Exception
   {
      setNavic_UDRArateI_r16 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Navic_EDC_r16
    */
   public NavIC_EDC_r16 getNavic_EDC_r16 () {
      return navic_EDC_r16;
   }

   public void setNavic_EDC_r16 (NavIC_EDC_r16 value) {
      this.navic_EDC_r16 = value;
   }

   /**
    * Accessor/mutator methods for Navic_CDC_r16
    */
   public NavIC_CDC_r16 getNavic_CDC_r16 () {
      return navic_CDC_r16;
   }

   public void setNavic_CDC_r16 (NavIC_CDC_r16 value) {
      this.navic_CDC_r16 = value;
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return svID;
         case 1: return navic_Tod_r16;
         case 2: return navic_iodec_r16;
         case 3: return navic_UDRAI_r16;
         case 4: return navic_UDRArateI_r16;
         case 5: return navic_EDC_r16;
         case 6: return navic_CDC_r16;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "svID";
         case 1: return "navic-Tod-r16";
         case 2: return "navic-iodec-r16";
         case 3: return "navic-UDRAI-r16";
         case 4: return "navic-UDRArateI-r16";
         case 5: return "navic-EDC-r16";
         case 6: return "navic-CDC-r16";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode svID

      buffer.getContext().eventDispatcher.startElement("svID", -1);

      svID = new SV_ID();
      svID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("svID", -1);

      // decode navic_Tod_r16

      buffer.getContext().eventDispatcher.startElement("navic_Tod_r16", -1);

      navic_Tod_r16 = new Asn1Integer();
      navic_Tod_r16.decode (buffer, 0, 65535);
      buffer.getContext().eventDispatcher.endElement("navic_Tod_r16", -1);

      // decode navic_iodec_r16

      buffer.getContext().eventDispatcher.startElement("navic_iodec_r16", -1);

      navic_iodec_r16 = new Asn1Integer();
      navic_iodec_r16.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("navic_iodec_r16", -1);

      // decode navic_UDRAI_r16

      buffer.getContext().eventDispatcher.startElement("navic_UDRAI_r16", -1);

      navic_UDRAI_r16 = new Asn1Integer();
      navic_UDRAI_r16.decode (buffer, -16, 15);
      buffer.getContext().eventDispatcher.endElement("navic_UDRAI_r16", -1);

      // decode navic_UDRArateI_r16

      buffer.getContext().eventDispatcher.startElement("navic_UDRArateI_r16", -1);

      navic_UDRArateI_r16 = new Asn1Integer();
      navic_UDRArateI_r16.decode (buffer, -16, 15);
      buffer.getContext().eventDispatcher.endElement("navic_UDRArateI_r16", -1);

      // decode navic_EDC_r16

      buffer.getContext().eventDispatcher.startElement("navic_EDC_r16", -1);

      navic_EDC_r16 = new NavIC_EDC_r16();
      navic_EDC_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("navic_EDC_r16", -1);

      // decode navic_CDC_r16

      buffer.getContext().eventDispatcher.startElement("navic_CDC_r16", -1);

      navic_CDC_r16 = new NavIC_CDC_r16();
      navic_CDC_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("navic_CDC_r16", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode svID

      if (svID != null) {
         buffer.getContext().eventDispatcher.startElement("svID", -1);

         svID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("svID", -1);
      }
      else throw new Asn1MissingRequiredException ("svID");

      // encode navic_Tod_r16

      if (navic_Tod_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_Tod_r16", -1);

         navic_Tod_r16.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("navic_Tod_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_Tod_r16");

      // encode navic_iodec_r16

      if (navic_iodec_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_iodec_r16", -1);

         navic_iodec_r16.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("navic_iodec_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_iodec_r16");

      // encode navic_UDRAI_r16

      if (navic_UDRAI_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_UDRAI_r16", -1);

         navic_UDRAI_r16.encode (buffer, -16, 15);

         buffer.getContext().eventDispatcher.endElement("navic_UDRAI_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_UDRAI_r16");

      // encode navic_UDRArateI_r16

      if (navic_UDRArateI_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_UDRArateI_r16", -1);

         navic_UDRArateI_r16.encode (buffer, -16, 15);

         buffer.getContext().eventDispatcher.endElement("navic_UDRArateI_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_UDRArateI_r16");

      // encode navic_EDC_r16

      if (navic_EDC_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_EDC_r16", -1);

         navic_EDC_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("navic_EDC_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_EDC_r16");

      // encode navic_CDC_r16

      if (navic_CDC_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("navic_CDC_r16", -1);

         navic_CDC_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("navic_CDC_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("navic_CDC_r16");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
