/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class Sensor_AssistanceDataList_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Sensor-AssistanceDataList-r14";
   }

   protected Asn1Integer refPressure_r14;
   protected EllipsoidPointWithAltitudeAndUncertaintyEllipsoid refPosition_r14;  // optional
   protected Asn1Integer refTemperature_r14;  // optional
   protected Sensor_AssistanceDataList_r14_period_v1520 period_v1520;  // optional
   protected Sensor_AssistanceDataList_r14_area_v1520 area_v1520;  // optional
   protected Asn1OpenExt extElem1;

   public Sensor_AssistanceDataList_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Sensor_AssistanceDataList_r14 (
      Asn1Integer refPressure_r14_,
      EllipsoidPointWithAltitudeAndUncertaintyEllipsoid refPosition_r14_,
      Asn1Integer refTemperature_r14_,
      Sensor_AssistanceDataList_r14_period_v1520 period_v1520_,
      Sensor_AssistanceDataList_r14_area_v1520 area_v1520_
   ) throws Asn1Exception {
      super();
      setRefPressure_r14 (refPressure_r14_);
      setRefPosition_r14 (refPosition_r14_);
      setRefTemperature_r14 (refTemperature_r14_);
      setPeriod_v1520 (period_v1520_);
      setArea_v1520 (area_v1520_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public Sensor_AssistanceDataList_r14 (
      Asn1Integer refPressure_r14_
   ) throws Asn1Exception {
      super();
      setRefPressure_r14 (refPressure_r14_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Sensor_AssistanceDataList_r14 (long refPressure_r14_,
      EllipsoidPointWithAltitudeAndUncertaintyEllipsoid refPosition_r14_,
      long refTemperature_r14_,
      Sensor_AssistanceDataList_r14_period_v1520 period_v1520_,
      Sensor_AssistanceDataList_r14_area_v1520 area_v1520_
   ) throws Asn1Exception {
      super();
      setRefPressure_r14 (refPressure_r14_);
      setRefPosition_r14 (refPosition_r14_);
      setRefTemperature_r14 (refTemperature_r14_);
      setPeriod_v1520 (period_v1520_);
      setArea_v1520 (area_v1520_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public Sensor_AssistanceDataList_r14 (
      long refPressure_r14_
   ) throws Asn1Exception {
      super();
      setRefPressure_r14 (refPressure_r14_);
   }

   public void init () {
      refPressure_r14 = null;
      refPosition_r14 = null;
      refTemperature_r14 = null;
      period_v1520 = null;
      area_v1520 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Sensor_AssistanceDataList_r14) ) return false;

      Sensor_AssistanceDataList_r14 rhs = (Sensor_AssistanceDataList_r14) obj;

      if (refPressure_r14 == null) {
         if (rhs.refPressure_r14 != null) return false;
      }
      else {
         if (!refPressure_r14.equals(rhs.refPressure_r14)) {
            return false;
         }
      }

      if (refPosition_r14 == null) {
         if (rhs.refPosition_r14 != null) return false;
      }
      else {
         if (!refPosition_r14.equals(rhs.refPosition_r14)) {
            return false;
         }
      }

      if (refTemperature_r14 == null) {
         if (rhs.refTemperature_r14 != null) return false;
      }
      else {
         if (!refTemperature_r14.equals(rhs.refTemperature_r14)) {
            return false;
         }
      }

      if (period_v1520 == null) {
         if (rhs.period_v1520 != null) return false;
      }
      else {
         if (!period_v1520.equals(rhs.period_v1520)) {
            return false;
         }
      }

      if (area_v1520 == null) {
         if (rhs.area_v1520 != null) return false;
      }
      else {
         if (!area_v1520.equals(rhs.area_v1520)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (refPressure_r14 != null) __code = 31*__code + refPressure_r14.hashCode();
      if (refPosition_r14 != null) __code = 31*__code + refPosition_r14.hashCode();
      if (refTemperature_r14 != null) __code = 31*__code + refTemperature_r14.hashCode();
      if (period_v1520 != null) __code = 31*__code + period_v1520.hashCode();
      if (area_v1520 != null) __code = 31*__code + area_v1520.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for RefPressure_r14
    */
   public Asn1Integer getRefPressure_r14 () {
      return refPressure_r14;
   }

   public void setRefPressure_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -20000 && value.value <= 10000))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.refPressure_r14 = value;
   }

   public void setRefPressure_r14 (long value) 
      throws Asn1Exception
   {
      setRefPressure_r14 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for RefPosition_r14
    */
   public EllipsoidPointWithAltitudeAndUncertaintyEllipsoid getRefPosition_r14 () {
      return refPosition_r14;
   }

   public void setRefPosition_r14 (EllipsoidPointWithAltitudeAndUncertaintyEllipsoid value) {
      this.refPosition_r14 = value;
   }

   public boolean hasRefPosition_r14 () {
      return (refPosition_r14 != null);
   }

   /**
    * Accessor/mutator methods for RefTemperature_r14
    */
   public Asn1Integer getRefTemperature_r14 () {
      return refTemperature_r14;
   }

   public void setRefTemperature_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -64 && value.value <= 63))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.refTemperature_r14 = value;
   }

   public void setRefTemperature_r14 (long value) 
      throws Asn1Exception
   {
      setRefTemperature_r14 (new Asn1Integer(value));
   }
   public boolean hasRefTemperature_r14 () {
      return (refTemperature_r14 != null);
   }

   /**
    * Accessor/mutator methods for Period_v1520
    */
   public Sensor_AssistanceDataList_r14_period_v1520 getPeriod_v1520 () {
      return period_v1520;
   }

   public void setPeriod_v1520 (Sensor_AssistanceDataList_r14_period_v1520 value) {
      this.period_v1520 = value;
   }

   public boolean hasPeriod_v1520 () {
      return (period_v1520 != null);
   }

   /**
    * Accessor/mutator methods for Area_v1520
    */
   public Sensor_AssistanceDataList_r14_area_v1520 getArea_v1520 () {
      return area_v1520;
   }

   public void setArea_v1520 (Sensor_AssistanceDataList_r14_area_v1520 value) {
      this.area_v1520 = value;
   }

   public boolean hasArea_v1520 () {
      return (area_v1520 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return refPressure_r14;
         case 1: return refPosition_r14;
         case 2: return refTemperature_r14;
         case 3: return period_v1520;
         case 4: return area_v1520;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "refPressure-r14";
         case 1: return "refPosition-r14";
         case 2: return "refTemperature-r14";
         case 3: return "period-v1520";
         case 4: return "area-v1520";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean refPosition_r14Present = buffer.decodeBit ("refPosition_r14Present");
      boolean refTemperature_r14Present = buffer.decodeBit ("refTemperature_r14Present");

      // decode refPressure_r14

      buffer.getContext().eventDispatcher.startElement("refPressure_r14", -1);

      refPressure_r14 = new Asn1Integer();
      refPressure_r14.decode (buffer, -20000, 10000);
      buffer.getContext().eventDispatcher.endElement("refPressure_r14", -1);

      // decode refPosition_r14

      if (refPosition_r14Present) {
         buffer.getContext().eventDispatcher.startElement("refPosition_r14", -1);

         refPosition_r14 = new EllipsoidPointWithAltitudeAndUncertaintyEllipsoid();
         refPosition_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("refPosition_r14", -1);
      }
      else {
         refPosition_r14 = null;
      }

      // decode refTemperature_r14

      if (refTemperature_r14Present) {
         buffer.getContext().eventDispatcher.startElement("refTemperature_r14", -1);

         refTemperature_r14 = new Asn1Integer();
         refTemperature_r14.decode (buffer, -64, 63);
         buffer.getContext().eventDispatcher.endElement("refTemperature_r14", -1);
      }
      else {
         refTemperature_r14 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("period_v1520Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("area_v1520Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode period_v1520

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("period_v1520", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            period_v1520 = new Sensor_AssistanceDataList_r14_period_v1520();
            period_v1520.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("period_v1520", -1);

         }
         else {
            period_v1520 = null;
         }

         // decode area_v1520

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("area_v1520", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            area_v1520 = new Sensor_AssistanceDataList_r14_area_v1520();
            area_v1520.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("area_v1520", -1);

         }
         else {
            area_v1520 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((period_v1520 != null) ||
      (area_v1520 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((refPosition_r14 != null), null);
      buffer.encodeBit ((refTemperature_r14 != null), null);

      // encode refPressure_r14

      if (refPressure_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("refPressure_r14", -1);

         refPressure_r14.encode (buffer, -20000, 10000);

         buffer.getContext().eventDispatcher.endElement("refPressure_r14", -1);
      }
      else throw new Asn1MissingRequiredException ("refPressure_r14");

      // encode refPosition_r14

      if (refPosition_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("refPosition_r14", -1);

         refPosition_r14.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("refPosition_r14", -1);
      }

      // encode refTemperature_r14

      if (refTemperature_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("refTemperature_r14", -1);

         refTemperature_r14.encode (buffer, -64, 63);

         buffer.getContext().eventDispatcher.endElement("refTemperature_r14", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 2;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((period_v1520 != null), null);
         buffer.encodeBit ((area_v1520 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // period_v1520

         if (period_v1520 != null) {
            buffer.reset();
            period_v1520.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("period_v1520", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("period_v1520", -1);
         }

         // area_v1520

         if (area_v1520 != null) {
            buffer.reset();
            area_v1520.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("area_v1520", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("area_v1520", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
