/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_TRIGGERED_START;

import com.objsys.asn1j.runtime.*;

public class AreaIdList extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_TRIGGERED_STARTRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_TRIGGERED_STARTRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "AreaIdList";
   }

   protected AreaIdSet areaIdSet;
   protected AreaIdSetType areaIdSetType = null;  // optional
   protected GeoAreaMappingList geoAreaMappingList;  // optional

   public AreaIdList () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AreaIdList (
      AreaIdSet areaIdSet_,
      AreaIdSetType areaIdSetType_,
      GeoAreaMappingList geoAreaMappingList_
   ) throws Asn1Exception {
      super();
      setAreaIdSet (areaIdSet_);
      setAreaIdSetType (areaIdSetType_);
      setGeoAreaMappingList (geoAreaMappingList_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public AreaIdList (
      AreaIdSet areaIdSet_
   ) throws Asn1Exception {
      super();
      setAreaIdSet (areaIdSet_);
   }

   public void init () {
      areaIdSet = null;
      areaIdSetType = null;
      geoAreaMappingList = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof AreaIdList) ) return false;

      AreaIdList rhs = (AreaIdList) obj;

      if (areaIdSet == null) {
         if (rhs.areaIdSet != null) return false;
      }
      else {
         if (!areaIdSet.equals(rhs.areaIdSet)) {
            return false;
         }
      }

      if (areaIdSetType == null) {
         if (rhs.areaIdSetType != null) return false;
      }
      else {
         if (!areaIdSetType.equals(rhs.areaIdSetType)) {
            return false;
         }
      }

      if (geoAreaMappingList == null) {
         if (rhs.geoAreaMappingList != null) return false;
      }
      else {
         if (!geoAreaMappingList.equals(rhs.geoAreaMappingList)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (areaIdSet != null) __code = 31*__code + areaIdSet.hashCode();
      if (areaIdSetType != null) __code = 31*__code + areaIdSetType.hashCode();
      if (geoAreaMappingList != null) __code = 31*__code + geoAreaMappingList.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for AreaIdSet
    */
   public AreaIdSet getAreaIdSet () {
      return areaIdSet;
   }

   public void setAreaIdSet (AreaIdSet value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 256))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.areaIdSet = value;
   }

   /**
    * Accessor/mutator methods for AreaIdSetType
    */
   public AreaIdSetType getAreaIdSetType () {
      return areaIdSetType;
   }

   public void setAreaIdSetType (AreaIdSetType value) {
      this.areaIdSetType = value;
   }

   public boolean hasAreaIdSetType () {
      return (areaIdSetType != null);
   }

   /**
    * Accessor/mutator methods for GeoAreaMappingList
    */
   public GeoAreaMappingList getGeoAreaMappingList () {
      return geoAreaMappingList;
   }

   public void setGeoAreaMappingList (GeoAreaMappingList value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 32))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.geoAreaMappingList = value;
   }

   public boolean hasGeoAreaMappingList () {
      return (geoAreaMappingList != null);
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return areaIdSet;
         case 1: return areaIdSetType;
         case 2: return geoAreaMappingList;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "areaIdSet";
         case 1: return "areaIdSetType";
         case 2: return "geoAreaMappingList";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean areaIdSetTypePresent = buffer.decodeBit ("areaIdSetTypePresent");
      boolean geoAreaMappingListPresent = buffer.decodeBit ("geoAreaMappingListPresent");

      // decode areaIdSet

      buffer.getContext().eventDispatcher.startElement("areaIdSet", -1);

      areaIdSet = new AreaIdSet();
      areaIdSet.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("areaIdSet", -1);

      // decode areaIdSetType

      if (areaIdSetTypePresent) {
         buffer.getContext().eventDispatcher.startElement("areaIdSetType", -1);

         int tval = AreaIdSetType.decodeEnumValue (buffer);
         areaIdSetType = AreaIdSetType.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("areaIdSetType", -1);
      }
      else {
         areaIdSetType = null;
      }

      // decode geoAreaMappingList

      if (geoAreaMappingListPresent) {
         buffer.getContext().eventDispatcher.startElement("geoAreaMappingList", -1);

         geoAreaMappingList = new GeoAreaMappingList();
         geoAreaMappingList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("geoAreaMappingList", -1);
      }
      else {
         geoAreaMappingList = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((areaIdSetType != null), null);
      buffer.encodeBit ((geoAreaMappingList != null), null);

      // encode areaIdSet

      if (areaIdSet != null) {
         buffer.getContext().eventDispatcher.startElement("areaIdSet", -1);

         areaIdSet.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("areaIdSet", -1);
      }
      else throw new Asn1MissingRequiredException ("areaIdSet");

      // encode areaIdSetType

      if (areaIdSetType != null) {
         buffer.getContext().eventDispatcher.startElement("areaIdSetType", -1);

         areaIdSetType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("areaIdSetType", -1);
      }

      // encode geoAreaMappingList

      if (geoAreaMappingList != null) {
         buffer.getContext().eventDispatcher.startElement("geoAreaMappingList", -1);

         geoAreaMappingList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("geoAreaMappingList", -1);
      }

   }

}
