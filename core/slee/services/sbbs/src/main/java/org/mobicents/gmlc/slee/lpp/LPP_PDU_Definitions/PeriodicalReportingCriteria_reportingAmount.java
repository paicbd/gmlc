/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class PeriodicalReportingCriteria_reportingAmount extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _RA1 = 0;
   public static final int _RA2 = 1;
   public static final int _RA4 = 2;
   public static final int _RA8 = 3;
   public static final int _RA16 = 4;
   public static final int _RA32 = 5;
   public static final int _RA64 = 6;
   public static final int _RA_INFINITY = 7;

   // Singleton instances of PeriodicalReportingCriteria_reportingAmount
   protected static final PeriodicalReportingCriteria_reportingAmount _ra1 = new PeriodicalReportingCriteria_reportingAmount(0);
   protected static final PeriodicalReportingCriteria_reportingAmount _ra2 = new PeriodicalReportingCriteria_reportingAmount(1);
   protected static final PeriodicalReportingCriteria_reportingAmount _ra4 = new PeriodicalReportingCriteria_reportingAmount(2);
   protected static final PeriodicalReportingCriteria_reportingAmount _ra8 = new PeriodicalReportingCriteria_reportingAmount(3);
   protected static final PeriodicalReportingCriteria_reportingAmount _ra16 = new PeriodicalReportingCriteria_reportingAmount(4);
   protected static final PeriodicalReportingCriteria_reportingAmount _ra32 = new PeriodicalReportingCriteria_reportingAmount(5);
   protected static final PeriodicalReportingCriteria_reportingAmount _ra64 = new PeriodicalReportingCriteria_reportingAmount(6);
   protected static final PeriodicalReportingCriteria_reportingAmount _ra_Infinity = new PeriodicalReportingCriteria_reportingAmount(7);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    */
   protected PeriodicalReportingCriteria_reportingAmount (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for ra1.
    */
   public static PeriodicalReportingCriteria_reportingAmount ra1() {
      return _ra1;
   }

   /**
    * Singleton accessor method for ra2.
    */
   public static PeriodicalReportingCriteria_reportingAmount ra2() {
      return _ra2;
   }

   /**
    * Singleton accessor method for ra4.
    */
   public static PeriodicalReportingCriteria_reportingAmount ra4() {
      return _ra4;
   }

   /**
    * Singleton accessor method for ra8.
    */
   public static PeriodicalReportingCriteria_reportingAmount ra8() {
      return _ra8;
   }

   /**
    * Singleton accessor method for ra16.
    */
   public static PeriodicalReportingCriteria_reportingAmount ra16() {
      return _ra16;
   }

   /**
    * Singleton accessor method for ra32.
    */
   public static PeriodicalReportingCriteria_reportingAmount ra32() {
      return _ra32;
   }

   /**
    * Singleton accessor method for ra64.
    */
   public static PeriodicalReportingCriteria_reportingAmount ra64() {
      return _ra64;
   }

   /**
    * Singleton accessor method for ra_Infinity.
    */
   public static PeriodicalReportingCriteria_reportingAmount ra_Infinity() {
      return _ra_Infinity;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return PeriodicalReportingCriteria_reportingAmount.valueOf( PeriodicalReportingCriteria_reportingAmount.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static PeriodicalReportingCriteria_reportingAmount valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return ra1();
         case 1: return ra2();
         case 2: return ra4();
         case 3: return ra8();
         case 4: return ra16();
         case 5: return ra32();
         case 6: return ra64();
         case 7: return ra_Infinity();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (8);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      switch ((int)value) {
         case 0: ui = 0; /* ra1 */break;
         case 1: ui = 1; /* ra2 */break;
         case 2: ui = 2; /* ra4 */break;
         case 3: ui = 3; /* ra8 */break;
         case 4: ui = 4; /* ra16 */break;
         case 5: ui = 5; /* ra32 */break;
         case 6: ui = 6; /* ra64 */break;
         case 7: ui = 7; /* ra_Infinity */break;
         default:
            throw new Asn1InvalidEnumException (value);
      }

      buffer.encodeConsWholeNumber (ui, 8);
   }

}
