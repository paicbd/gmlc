/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Version_2_parameter_extensions;

import com.objsys.asn1j.runtime.*;

public class SupportedBearers extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_Version_2_parameter_extensionsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_Version_2_parameter_extensionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SupportedBearers";
   }

   protected Asn1Boolean gsm;
   protected Asn1Boolean wcdma;
   protected Asn1Boolean lte;
   protected Asn1Boolean cdma;
   protected Asn1Boolean hprd;
   protected Asn1Boolean umb;
   protected Asn1Boolean wlan;
   protected Asn1Boolean wiMAX;
   protected Asn1Boolean nr;  // optional
   protected Asn1OpenExt extElem1;

   public SupportedBearers () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SupportedBearers (
      Asn1Boolean gsm_,
      Asn1Boolean wcdma_,
      Asn1Boolean lte_,
      Asn1Boolean cdma_,
      Asn1Boolean hprd_,
      Asn1Boolean umb_,
      Asn1Boolean wlan_,
      Asn1Boolean wiMAX_,
      Asn1Boolean nr_
   ) {
      super();
      setGsm (gsm_);
      setWcdma (wcdma_);
      setLte (lte_);
      setCdma (cdma_);
      setHprd (hprd_);
      setUmb (umb_);
      setWlan (wlan_);
      setWiMAX (wiMAX_);
      setNr (nr_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SupportedBearers (
      Asn1Boolean gsm_,
      Asn1Boolean wcdma_,
      Asn1Boolean lte_,
      Asn1Boolean cdma_,
      Asn1Boolean hprd_,
      Asn1Boolean umb_,
      Asn1Boolean wlan_,
      Asn1Boolean wiMAX_
   ) {
      super();
      setGsm (gsm_);
      setWcdma (wcdma_);
      setLte (lte_);
      setCdma (cdma_);
      setHprd (hprd_);
      setUmb (umb_);
      setWlan (wlan_);
      setWiMAX (wiMAX_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SupportedBearers (boolean gsm_,
      boolean wcdma_,
      boolean lte_,
      boolean cdma_,
      boolean hprd_,
      boolean umb_,
      boolean wlan_,
      boolean wiMAX_,
      boolean nr_
   ) {
      super();
      setGsm (gsm_);
      setWcdma (wcdma_);
      setLte (lte_);
      setCdma (cdma_);
      setHprd (hprd_);
      setUmb (umb_);
      setWlan (wlan_);
      setWiMAX (wiMAX_);
      setNr (nr_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SupportedBearers (
      boolean gsm_,
      boolean wcdma_,
      boolean lte_,
      boolean cdma_,
      boolean hprd_,
      boolean umb_,
      boolean wlan_,
      boolean wiMAX_
   ) {
      super();
      setGsm (gsm_);
      setWcdma (wcdma_);
      setLte (lte_);
      setCdma (cdma_);
      setHprd (hprd_);
      setUmb (umb_);
      setWlan (wlan_);
      setWiMAX (wiMAX_);
   }

   public void init () {
      gsm = null;
      wcdma = null;
      lte = null;
      cdma = null;
      hprd = null;
      umb = null;
      wlan = null;
      wiMAX = null;
      nr = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof SupportedBearers) ) return false;

      SupportedBearers rhs = (SupportedBearers) obj;

      if (gsm == null) {
         if (rhs.gsm != null) return false;
      }
      else {
         if (!gsm.equals(rhs.gsm)) {
            return false;
         }
      }

      if (wcdma == null) {
         if (rhs.wcdma != null) return false;
      }
      else {
         if (!wcdma.equals(rhs.wcdma)) {
            return false;
         }
      }

      if (lte == null) {
         if (rhs.lte != null) return false;
      }
      else {
         if (!lte.equals(rhs.lte)) {
            return false;
         }
      }

      if (cdma == null) {
         if (rhs.cdma != null) return false;
      }
      else {
         if (!cdma.equals(rhs.cdma)) {
            return false;
         }
      }

      if (hprd == null) {
         if (rhs.hprd != null) return false;
      }
      else {
         if (!hprd.equals(rhs.hprd)) {
            return false;
         }
      }

      if (umb == null) {
         if (rhs.umb != null) return false;
      }
      else {
         if (!umb.equals(rhs.umb)) {
            return false;
         }
      }

      if (wlan == null) {
         if (rhs.wlan != null) return false;
      }
      else {
         if (!wlan.equals(rhs.wlan)) {
            return false;
         }
      }

      if (wiMAX == null) {
         if (rhs.wiMAX != null) return false;
      }
      else {
         if (!wiMAX.equals(rhs.wiMAX)) {
            return false;
         }
      }

      if (nr == null) {
         if (rhs.nr != null) return false;
      }
      else {
         if (!nr.equals(rhs.nr)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gsm != null) __code = 31*__code + gsm.hashCode();
      if (wcdma != null) __code = 31*__code + wcdma.hashCode();
      if (lte != null) __code = 31*__code + lte.hashCode();
      if (cdma != null) __code = 31*__code + cdma.hashCode();
      if (hprd != null) __code = 31*__code + hprd.hashCode();
      if (umb != null) __code = 31*__code + umb.hashCode();
      if (wlan != null) __code = 31*__code + wlan.hashCode();
      if (wiMAX != null) __code = 31*__code + wiMAX.hashCode();
      if (nr != null) __code = 31*__code + nr.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Gsm
    */
   public Asn1Boolean getGsm () {
      return gsm;
   }

   public void setGsm (Asn1Boolean value) {
      this.gsm = value;
   }

   public void setGsm (boolean value) {
      setGsm (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Wcdma
    */
   public Asn1Boolean getWcdma () {
      return wcdma;
   }

   public void setWcdma (Asn1Boolean value) {
      this.wcdma = value;
   }

   public void setWcdma (boolean value) {
      setWcdma (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Lte
    */
   public Asn1Boolean getLte () {
      return lte;
   }

   public void setLte (Asn1Boolean value) {
      this.lte = value;
   }

   public void setLte (boolean value) {
      setLte (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Cdma
    */
   public Asn1Boolean getCdma () {
      return cdma;
   }

   public void setCdma (Asn1Boolean value) {
      this.cdma = value;
   }

   public void setCdma (boolean value) {
      setCdma (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Hprd
    */
   public Asn1Boolean getHprd () {
      return hprd;
   }

   public void setHprd (Asn1Boolean value) {
      this.hprd = value;
   }

   public void setHprd (boolean value) {
      setHprd (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Umb
    */
   public Asn1Boolean getUmb () {
      return umb;
   }

   public void setUmb (Asn1Boolean value) {
      this.umb = value;
   }

   public void setUmb (boolean value) {
      setUmb (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Wlan
    */
   public Asn1Boolean getWlan () {
      return wlan;
   }

   public void setWlan (Asn1Boolean value) {
      this.wlan = value;
   }

   public void setWlan (boolean value) {
      setWlan (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for WiMAX
    */
   public Asn1Boolean getWiMAX () {
      return wiMAX;
   }

   public void setWiMAX (Asn1Boolean value) {
      this.wiMAX = value;
   }

   public void setWiMAX (boolean value) {
      setWiMAX (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Nr
    */
   public Asn1Boolean getNr () {
      return nr;
   }

   public void setNr (Asn1Boolean value) {
      this.nr = value;
   }

   public void setNr (boolean value) {
      setNr (new Asn1Boolean(value));
   }
   public boolean hasNr () {
      return (nr != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gsm;
         case 1: return wcdma;
         case 2: return lte;
         case 3: return cdma;
         case 4: return hprd;
         case 5: return umb;
         case 6: return wlan;
         case 7: return wiMAX;
         case 8: return nr;
         case 9: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gsm";
         case 1: return "wcdma";
         case 2: return "lte";
         case 3: return "cdma";
         case 4: return "hprd";
         case 5: return "umb";
         case 6: return "wlan";
         case 7: return "wiMAX";
         case 8: return "nr";
         case 9: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode gsm

      buffer.getContext().eventDispatcher.startElement("gsm", -1);

      gsm = new Asn1Boolean();
      gsm.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("gsm", -1);

      // decode wcdma

      buffer.getContext().eventDispatcher.startElement("wcdma", -1);

      wcdma = new Asn1Boolean();
      wcdma.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("wcdma", -1);

      // decode lte

      buffer.getContext().eventDispatcher.startElement("lte", -1);

      lte = new Asn1Boolean();
      lte.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("lte", -1);

      // decode cdma

      buffer.getContext().eventDispatcher.startElement("cdma", -1);

      cdma = new Asn1Boolean();
      cdma.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cdma", -1);

      // decode hprd

      buffer.getContext().eventDispatcher.startElement("hprd", -1);

      hprd = new Asn1Boolean();
      hprd.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("hprd", -1);

      // decode umb

      buffer.getContext().eventDispatcher.startElement("umb", -1);

      umb = new Asn1Boolean();
      umb.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("umb", -1);

      // decode wlan

      buffer.getContext().eventDispatcher.startElement("wlan", -1);

      wlan = new Asn1Boolean();
      wlan.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("wlan", -1);

      // decode wiMAX

      buffer.getContext().eventDispatcher.startElement("wiMAX", -1);

      wiMAX = new Asn1Boolean();
      wiMAX.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("wiMAX", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("nrPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode nr

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("nr", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            nr = new Asn1Boolean();
            nr.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("nr", -1);

         }
         else {
            nr = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((nr != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode gsm

      if (gsm != null) {
         buffer.getContext().eventDispatcher.startElement("gsm", -1);

         gsm.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gsm", -1);
      }
      else throw new Asn1MissingRequiredException ("gsm");

      // encode wcdma

      if (wcdma != null) {
         buffer.getContext().eventDispatcher.startElement("wcdma", -1);

         wcdma.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("wcdma", -1);
      }
      else throw new Asn1MissingRequiredException ("wcdma");

      // encode lte

      if (lte != null) {
         buffer.getContext().eventDispatcher.startElement("lte", -1);

         lte.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("lte", -1);
      }
      else throw new Asn1MissingRequiredException ("lte");

      // encode cdma

      if (cdma != null) {
         buffer.getContext().eventDispatcher.startElement("cdma", -1);

         cdma.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cdma", -1);
      }
      else throw new Asn1MissingRequiredException ("cdma");

      // encode hprd

      if (hprd != null) {
         buffer.getContext().eventDispatcher.startElement("hprd", -1);

         hprd.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("hprd", -1);
      }
      else throw new Asn1MissingRequiredException ("hprd");

      // encode umb

      if (umb != null) {
         buffer.getContext().eventDispatcher.startElement("umb", -1);

         umb.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("umb", -1);
      }
      else throw new Asn1MissingRequiredException ("umb");

      // encode wlan

      if (wlan != null) {
         buffer.getContext().eventDispatcher.startElement("wlan", -1);

         wlan.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("wlan", -1);
      }
      else throw new Asn1MissingRequiredException ("wlan");

      // encode wiMAX

      if (wiMAX != null) {
         buffer.getContext().eventDispatcher.startElement("wiMAX", -1);

         wiMAX.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("wiMAX", -1);
      }
      else throw new Asn1MissingRequiredException ("wiMAX");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((nr != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // nr

         if (nr != null) {
            buffer.reset();
            nr.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("nr", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("nr", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
