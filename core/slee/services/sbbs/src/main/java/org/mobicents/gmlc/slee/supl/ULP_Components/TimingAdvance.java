/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Components;

import com.objsys.asn1j.runtime.*;

public class TimingAdvance extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "TimingAdvance";
   }

   protected Asn1Integer ta;
   protected TAResolution tAResolution = null;  // optional
   protected ChipRate chipRate = null;  // optional
   protected Asn1OpenExt extElem1;

   public TimingAdvance () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public TimingAdvance (
      Asn1Integer ta_,
      TAResolution tAResolution_,
      ChipRate chipRate_
   ) throws Asn1Exception {
      super();
      setTa (ta_);
      setTAResolution (tAResolution_);
      setChipRate (chipRate_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public TimingAdvance (
      Asn1Integer ta_
   ) throws Asn1Exception {
      super();
      setTa (ta_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public TimingAdvance (long ta_,
      TAResolution tAResolution_,
      ChipRate chipRate_
   ) throws Asn1Exception {
      super();
      setTa (ta_);
      setTAResolution (tAResolution_);
      setChipRate (chipRate_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public TimingAdvance (
      long ta_
   ) throws Asn1Exception {
      super();
      setTa (ta_);
   }

   public void init () {
      ta = null;
      tAResolution = null;
      chipRate = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof TimingAdvance) ) return false;

      TimingAdvance rhs = (TimingAdvance) obj;

      if (ta == null) {
         if (rhs.ta != null) return false;
      }
      else {
         if (!ta.equals(rhs.ta)) {
            return false;
         }
      }

      if (tAResolution == null) {
         if (rhs.tAResolution != null) return false;
      }
      else {
         if (!tAResolution.equals(rhs.tAResolution)) {
            return false;
         }
      }

      if (chipRate == null) {
         if (rhs.chipRate != null) return false;
      }
      else {
         if (!chipRate.equals(rhs.chipRate)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (ta != null) __code = 31*__code + ta.hashCode();
      if (tAResolution != null) __code = 31*__code + tAResolution.hashCode();
      if (chipRate != null) __code = 31*__code + chipRate.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Ta
    */
   public Asn1Integer getTa () {
      return ta;
   }

   public void setTa (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 8191))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.ta = value;
   }

   public void setTa (long value) 
      throws Asn1Exception
   {
      setTa (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for TAResolution
    */
   public TAResolution getTAResolution () {
      return tAResolution;
   }

   public void setTAResolution (TAResolution value) {
      this.tAResolution = value;
   }

   public boolean hasTAResolution () {
      return (tAResolution != null);
   }

   /**
    * Accessor/mutator methods for ChipRate
    */
   public ChipRate getChipRate () {
      return chipRate;
   }

   public void setChipRate (ChipRate value) {
      this.chipRate = value;
   }

   public boolean hasChipRate () {
      return (chipRate != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ta;
         case 1: return tAResolution;
         case 2: return chipRate;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ta";
         case 1: return "tAResolution";
         case 2: return "chipRate";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean tAResolutionPresent = buffer.decodeBit ("tAResolutionPresent");
      boolean chipRatePresent = buffer.decodeBit ("chipRatePresent");

      // decode ta

      buffer.getContext().eventDispatcher.startElement("ta", -1);

      ta = new Asn1Integer();
      ta.decode (buffer, 0, 8191);
      buffer.getContext().eventDispatcher.endElement("ta", -1);

      // decode tAResolution

      if (tAResolutionPresent) {
         buffer.getContext().eventDispatcher.startElement("tAResolution", -1);

         int tval = TAResolution.decodeEnumValue (buffer);
         tAResolution = TAResolution.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("tAResolution", -1);
      }
      else {
         tAResolution = null;
      }

      // decode chipRate

      if (chipRatePresent) {
         buffer.getContext().eventDispatcher.startElement("chipRate", -1);

         int tval = ChipRate.decodeEnumValue (buffer);
         chipRate = ChipRate.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("chipRate", -1);
      }
      else {
         chipRate = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((tAResolution != null), null);
      buffer.encodeBit ((chipRate != null), null);

      // encode ta

      if (ta != null) {
         buffer.getContext().eventDispatcher.startElement("ta", -1);

         ta.encode (buffer, 0, 8191);

         buffer.getContext().eventDispatcher.endElement("ta", -1);
      }
      else throw new Asn1MissingRequiredException ("ta");

      // encode tAResolution

      if (tAResolution != null) {
         buffer.getContext().eventDispatcher.startElement("tAResolution", -1);

         tAResolution.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("tAResolution", -1);
      }

      // encode chipRate

      if (chipRate != null) {
         buffer.getContext().eventDispatcher.startElement("chipRate", -1);

         chipRate.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("chipRate", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
