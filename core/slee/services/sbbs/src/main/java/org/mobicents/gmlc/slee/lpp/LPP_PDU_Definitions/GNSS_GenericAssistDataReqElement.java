/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_GenericAssistDataReqElement extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-GenericAssistDataReqElement";
   }

   protected GNSS_ID gnss_ID;
   protected SBAS_ID sbas_ID;  // optional
   protected GNSS_TimeModelListReq gnss_TimeModelsReq;  // optional
   protected GNSS_DifferentialCorrectionsReq gnss_DifferentialCorrectionsReq;  // optional
   protected GNSS_NavigationModelReq gnss_NavigationModelReq;  // optional
   protected GNSS_RealTimeIntegrityReq gnss_RealTimeIntegrityReq;  // optional
   protected GNSS_DataBitAssistanceReq gnss_DataBitAssistanceReq;  // optional
   protected GNSS_AcquisitionAssistanceReq gnss_AcquisitionAssistanceReq;  // optional
   protected GNSS_AlmanacReq gnss_AlmanacReq;  // optional
   protected GNSS_UTC_ModelReq gnss_UTCModelReq;  // optional
   protected GNSS_AuxiliaryInformationReq gnss_AuxiliaryInformationReq;  // optional
   protected BDS_DifferentialCorrectionsReq_r12 bds_DifferentialCorrectionsReq_r12;  // optional
   protected BDS_GridModelReq_r12 bds_GridModelReq_r12;  // optional
   protected GNSS_RTK_ObservationsReq_r15 gnss_RTK_ObservationsReq_r15;  // optional
   protected GLO_RTK_BiasInformationReq_r15 glo_RTK_BiasInformationReq_r15;  // optional
   protected GNSS_RTK_MAC_CorrectionDifferencesReq_r15 gnss_RTK_MAC_CorrectionDifferencesReq_r15;  // optional
   protected GNSS_RTK_ResidualsReq_r15 gnss_RTK_ResidualsReq_r15;  // optional
   protected GNSS_RTK_FKP_GradientsReq_r15 gnss_RTK_FKP_GradientsReq_r15;  // optional
   protected GNSS_SSR_OrbitCorrectionsReq_r15 gnss_SSR_OrbitCorrectionsReq_r15;  // optional
   protected GNSS_SSR_ClockCorrectionsReq_r15 gnss_SSR_ClockCorrectionsReq_r15;  // optional
   protected GNSS_SSR_CodeBiasReq_r15 gnss_SSR_CodeBiasReq_r15;  // optional
   protected GNSS_SSR_URA_Req_r16 gnss_SSR_URA_Req_r16;  // optional
   protected GNSS_SSR_PhaseBiasReq_r16 gnss_SSR_PhaseBiasReq_r16;  // optional
   protected GNSS_SSR_STEC_CorrectionReq_r16 gnss_SSR_STEC_CorrectionReq_r16;  // optional
   protected GNSS_SSR_GriddedCorrectionReq_r16 gnss_SSR_GriddedCorrectionReq_r16;  // optional
   protected NavIC_DifferentialCorrectionsReq_r16 navic_DifferentialCorrectionsReq_r16;  // optional
   protected NavIC_GridModelReq_r16 navic_GridModelReq_r16;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_GenericAssistDataReqElement () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_GenericAssistDataReqElement (
      GNSS_ID gnss_ID_,
      SBAS_ID sbas_ID_,
      GNSS_TimeModelListReq gnss_TimeModelsReq_,
      GNSS_DifferentialCorrectionsReq gnss_DifferentialCorrectionsReq_,
      GNSS_NavigationModelReq gnss_NavigationModelReq_,
      GNSS_RealTimeIntegrityReq gnss_RealTimeIntegrityReq_,
      GNSS_DataBitAssistanceReq gnss_DataBitAssistanceReq_,
      GNSS_AcquisitionAssistanceReq gnss_AcquisitionAssistanceReq_,
      GNSS_AlmanacReq gnss_AlmanacReq_,
      GNSS_UTC_ModelReq gnss_UTCModelReq_,
      GNSS_AuxiliaryInformationReq gnss_AuxiliaryInformationReq_,
      BDS_DifferentialCorrectionsReq_r12 bds_DifferentialCorrectionsReq_r12_,
      BDS_GridModelReq_r12 bds_GridModelReq_r12_,
      GNSS_RTK_ObservationsReq_r15 gnss_RTK_ObservationsReq_r15_,
      GLO_RTK_BiasInformationReq_r15 glo_RTK_BiasInformationReq_r15_,
      GNSS_RTK_MAC_CorrectionDifferencesReq_r15 gnss_RTK_MAC_CorrectionDifferencesReq_r15_,
      GNSS_RTK_ResidualsReq_r15 gnss_RTK_ResidualsReq_r15_,
      GNSS_RTK_FKP_GradientsReq_r15 gnss_RTK_FKP_GradientsReq_r15_,
      GNSS_SSR_OrbitCorrectionsReq_r15 gnss_SSR_OrbitCorrectionsReq_r15_,
      GNSS_SSR_ClockCorrectionsReq_r15 gnss_SSR_ClockCorrectionsReq_r15_,
      GNSS_SSR_CodeBiasReq_r15 gnss_SSR_CodeBiasReq_r15_,
      GNSS_SSR_URA_Req_r16 gnss_SSR_URA_Req_r16_,
      GNSS_SSR_PhaseBiasReq_r16 gnss_SSR_PhaseBiasReq_r16_,
      GNSS_SSR_STEC_CorrectionReq_r16 gnss_SSR_STEC_CorrectionReq_r16_,
      GNSS_SSR_GriddedCorrectionReq_r16 gnss_SSR_GriddedCorrectionReq_r16_,
      NavIC_DifferentialCorrectionsReq_r16 navic_DifferentialCorrectionsReq_r16_,
      NavIC_GridModelReq_r16 navic_GridModelReq_r16_
   ) throws Asn1Exception {
      super();
      setGnss_ID (gnss_ID_);
      setSbas_ID (sbas_ID_);
      setGnss_TimeModelsReq (gnss_TimeModelsReq_);
      setGnss_DifferentialCorrectionsReq (gnss_DifferentialCorrectionsReq_);
      setGnss_NavigationModelReq (gnss_NavigationModelReq_);
      setGnss_RealTimeIntegrityReq (gnss_RealTimeIntegrityReq_);
      setGnss_DataBitAssistanceReq (gnss_DataBitAssistanceReq_);
      setGnss_AcquisitionAssistanceReq (gnss_AcquisitionAssistanceReq_);
      setGnss_AlmanacReq (gnss_AlmanacReq_);
      setGnss_UTCModelReq (gnss_UTCModelReq_);
      setGnss_AuxiliaryInformationReq (gnss_AuxiliaryInformationReq_);
      setBds_DifferentialCorrectionsReq_r12 (bds_DifferentialCorrectionsReq_r12_);
      setBds_GridModelReq_r12 (bds_GridModelReq_r12_);
      setGnss_RTK_ObservationsReq_r15 (gnss_RTK_ObservationsReq_r15_);
      setGlo_RTK_BiasInformationReq_r15 (glo_RTK_BiasInformationReq_r15_);
      setGnss_RTK_MAC_CorrectionDifferencesReq_r15 (gnss_RTK_MAC_CorrectionDifferencesReq_r15_);
      setGnss_RTK_ResidualsReq_r15 (gnss_RTK_ResidualsReq_r15_);
      setGnss_RTK_FKP_GradientsReq_r15 (gnss_RTK_FKP_GradientsReq_r15_);
      setGnss_SSR_OrbitCorrectionsReq_r15 (gnss_SSR_OrbitCorrectionsReq_r15_);
      setGnss_SSR_ClockCorrectionsReq_r15 (gnss_SSR_ClockCorrectionsReq_r15_);
      setGnss_SSR_CodeBiasReq_r15 (gnss_SSR_CodeBiasReq_r15_);
      setGnss_SSR_URA_Req_r16 (gnss_SSR_URA_Req_r16_);
      setGnss_SSR_PhaseBiasReq_r16 (gnss_SSR_PhaseBiasReq_r16_);
      setGnss_SSR_STEC_CorrectionReq_r16 (gnss_SSR_STEC_CorrectionReq_r16_);
      setGnss_SSR_GriddedCorrectionReq_r16 (gnss_SSR_GriddedCorrectionReq_r16_);
      setNavic_DifferentialCorrectionsReq_r16 (navic_DifferentialCorrectionsReq_r16_);
      setNavic_GridModelReq_r16 (navic_GridModelReq_r16_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GNSS_GenericAssistDataReqElement (
      GNSS_ID gnss_ID_
   ) throws Asn1Exception {
      super();
      setGnss_ID (gnss_ID_);
   }

   public void init () {
      gnss_ID = null;
      sbas_ID = null;
      gnss_TimeModelsReq = null;
      gnss_DifferentialCorrectionsReq = null;
      gnss_NavigationModelReq = null;
      gnss_RealTimeIntegrityReq = null;
      gnss_DataBitAssistanceReq = null;
      gnss_AcquisitionAssistanceReq = null;
      gnss_AlmanacReq = null;
      gnss_UTCModelReq = null;
      gnss_AuxiliaryInformationReq = null;
      bds_DifferentialCorrectionsReq_r12 = null;
      bds_GridModelReq_r12 = null;
      gnss_RTK_ObservationsReq_r15 = null;
      glo_RTK_BiasInformationReq_r15 = null;
      gnss_RTK_MAC_CorrectionDifferencesReq_r15 = null;
      gnss_RTK_ResidualsReq_r15 = null;
      gnss_RTK_FKP_GradientsReq_r15 = null;
      gnss_SSR_OrbitCorrectionsReq_r15 = null;
      gnss_SSR_ClockCorrectionsReq_r15 = null;
      gnss_SSR_CodeBiasReq_r15 = null;
      gnss_SSR_URA_Req_r16 = null;
      gnss_SSR_PhaseBiasReq_r16 = null;
      gnss_SSR_STEC_CorrectionReq_r16 = null;
      gnss_SSR_GriddedCorrectionReq_r16 = null;
      navic_DifferentialCorrectionsReq_r16 = null;
      navic_GridModelReq_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_GenericAssistDataReqElement) ) return false;

      GNSS_GenericAssistDataReqElement rhs = (GNSS_GenericAssistDataReqElement) obj;

      if (gnss_ID == null) {
         if (rhs.gnss_ID != null) return false;
      }
      else {
         if (!gnss_ID.equals(rhs.gnss_ID)) {
            return false;
         }
      }

      if (sbas_ID == null) {
         if (rhs.sbas_ID != null) return false;
      }
      else {
         if (!sbas_ID.equals(rhs.sbas_ID)) {
            return false;
         }
      }

      if (gnss_TimeModelsReq == null) {
         if (rhs.gnss_TimeModelsReq != null) return false;
      }
      else {
         if (!gnss_TimeModelsReq.equals(rhs.gnss_TimeModelsReq)) {
            return false;
         }
      }

      if (gnss_DifferentialCorrectionsReq == null) {
         if (rhs.gnss_DifferentialCorrectionsReq != null) return false;
      }
      else {
         if (!gnss_DifferentialCorrectionsReq.equals(rhs.gnss_DifferentialCorrectionsReq)) {
            return false;
         }
      }

      if (gnss_NavigationModelReq == null) {
         if (rhs.gnss_NavigationModelReq != null) return false;
      }
      else {
         if (!gnss_NavigationModelReq.equals(rhs.gnss_NavigationModelReq)) {
            return false;
         }
      }

      if (gnss_RealTimeIntegrityReq == null) {
         if (rhs.gnss_RealTimeIntegrityReq != null) return false;
      }
      else {
         if (!gnss_RealTimeIntegrityReq.equals(rhs.gnss_RealTimeIntegrityReq)) {
            return false;
         }
      }

      if (gnss_DataBitAssistanceReq == null) {
         if (rhs.gnss_DataBitAssistanceReq != null) return false;
      }
      else {
         if (!gnss_DataBitAssistanceReq.equals(rhs.gnss_DataBitAssistanceReq)) {
            return false;
         }
      }

      if (gnss_AcquisitionAssistanceReq == null) {
         if (rhs.gnss_AcquisitionAssistanceReq != null) return false;
      }
      else {
         if (!gnss_AcquisitionAssistanceReq.equals(rhs.gnss_AcquisitionAssistanceReq)) {
            return false;
         }
      }

      if (gnss_AlmanacReq == null) {
         if (rhs.gnss_AlmanacReq != null) return false;
      }
      else {
         if (!gnss_AlmanacReq.equals(rhs.gnss_AlmanacReq)) {
            return false;
         }
      }

      if (gnss_UTCModelReq == null) {
         if (rhs.gnss_UTCModelReq != null) return false;
      }
      else {
         if (!gnss_UTCModelReq.equals(rhs.gnss_UTCModelReq)) {
            return false;
         }
      }

      if (gnss_AuxiliaryInformationReq == null) {
         if (rhs.gnss_AuxiliaryInformationReq != null) return false;
      }
      else {
         if (!gnss_AuxiliaryInformationReq.equals(rhs.gnss_AuxiliaryInformationReq)) {
            return false;
         }
      }

      if (bds_DifferentialCorrectionsReq_r12 == null) {
         if (rhs.bds_DifferentialCorrectionsReq_r12 != null) return false;
      }
      else {
         if (!bds_DifferentialCorrectionsReq_r12.equals(rhs.bds_DifferentialCorrectionsReq_r12)) {
            return false;
         }
      }

      if (bds_GridModelReq_r12 == null) {
         if (rhs.bds_GridModelReq_r12 != null) return false;
      }
      else {
         if (!bds_GridModelReq_r12.equals(rhs.bds_GridModelReq_r12)) {
            return false;
         }
      }

      if (gnss_RTK_ObservationsReq_r15 == null) {
         if (rhs.gnss_RTK_ObservationsReq_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_ObservationsReq_r15.equals(rhs.gnss_RTK_ObservationsReq_r15)) {
            return false;
         }
      }

      if (glo_RTK_BiasInformationReq_r15 == null) {
         if (rhs.glo_RTK_BiasInformationReq_r15 != null) return false;
      }
      else {
         if (!glo_RTK_BiasInformationReq_r15.equals(rhs.glo_RTK_BiasInformationReq_r15)) {
            return false;
         }
      }

      if (gnss_RTK_MAC_CorrectionDifferencesReq_r15 == null) {
         if (rhs.gnss_RTK_MAC_CorrectionDifferencesReq_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_MAC_CorrectionDifferencesReq_r15.equals(rhs.gnss_RTK_MAC_CorrectionDifferencesReq_r15)) {
            return false;
         }
      }

      if (gnss_RTK_ResidualsReq_r15 == null) {
         if (rhs.gnss_RTK_ResidualsReq_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_ResidualsReq_r15.equals(rhs.gnss_RTK_ResidualsReq_r15)) {
            return false;
         }
      }

      if (gnss_RTK_FKP_GradientsReq_r15 == null) {
         if (rhs.gnss_RTK_FKP_GradientsReq_r15 != null) return false;
      }
      else {
         if (!gnss_RTK_FKP_GradientsReq_r15.equals(rhs.gnss_RTK_FKP_GradientsReq_r15)) {
            return false;
         }
      }

      if (gnss_SSR_OrbitCorrectionsReq_r15 == null) {
         if (rhs.gnss_SSR_OrbitCorrectionsReq_r15 != null) return false;
      }
      else {
         if (!gnss_SSR_OrbitCorrectionsReq_r15.equals(rhs.gnss_SSR_OrbitCorrectionsReq_r15)) {
            return false;
         }
      }

      if (gnss_SSR_ClockCorrectionsReq_r15 == null) {
         if (rhs.gnss_SSR_ClockCorrectionsReq_r15 != null) return false;
      }
      else {
         if (!gnss_SSR_ClockCorrectionsReq_r15.equals(rhs.gnss_SSR_ClockCorrectionsReq_r15)) {
            return false;
         }
      }

      if (gnss_SSR_CodeBiasReq_r15 == null) {
         if (rhs.gnss_SSR_CodeBiasReq_r15 != null) return false;
      }
      else {
         if (!gnss_SSR_CodeBiasReq_r15.equals(rhs.gnss_SSR_CodeBiasReq_r15)) {
            return false;
         }
      }

      if (gnss_SSR_URA_Req_r16 == null) {
         if (rhs.gnss_SSR_URA_Req_r16 != null) return false;
      }
      else {
         if (!gnss_SSR_URA_Req_r16.equals(rhs.gnss_SSR_URA_Req_r16)) {
            return false;
         }
      }

      if (gnss_SSR_PhaseBiasReq_r16 == null) {
         if (rhs.gnss_SSR_PhaseBiasReq_r16 != null) return false;
      }
      else {
         if (!gnss_SSR_PhaseBiasReq_r16.equals(rhs.gnss_SSR_PhaseBiasReq_r16)) {
            return false;
         }
      }

      if (gnss_SSR_STEC_CorrectionReq_r16 == null) {
         if (rhs.gnss_SSR_STEC_CorrectionReq_r16 != null) return false;
      }
      else {
         if (!gnss_SSR_STEC_CorrectionReq_r16.equals(rhs.gnss_SSR_STEC_CorrectionReq_r16)) {
            return false;
         }
      }

      if (gnss_SSR_GriddedCorrectionReq_r16 == null) {
         if (rhs.gnss_SSR_GriddedCorrectionReq_r16 != null) return false;
      }
      else {
         if (!gnss_SSR_GriddedCorrectionReq_r16.equals(rhs.gnss_SSR_GriddedCorrectionReq_r16)) {
            return false;
         }
      }

      if (navic_DifferentialCorrectionsReq_r16 == null) {
         if (rhs.navic_DifferentialCorrectionsReq_r16 != null) return false;
      }
      else {
         if (!navic_DifferentialCorrectionsReq_r16.equals(rhs.navic_DifferentialCorrectionsReq_r16)) {
            return false;
         }
      }

      if (navic_GridModelReq_r16 == null) {
         if (rhs.navic_GridModelReq_r16 != null) return false;
      }
      else {
         if (!navic_GridModelReq_r16.equals(rhs.navic_GridModelReq_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gnss_ID != null) __code = 31*__code + gnss_ID.hashCode();
      if (sbas_ID != null) __code = 31*__code + sbas_ID.hashCode();
      if (gnss_TimeModelsReq != null) __code = 31*__code + gnss_TimeModelsReq.hashCode();
      if (gnss_DifferentialCorrectionsReq != null) __code = 31*__code + gnss_DifferentialCorrectionsReq.hashCode();
      if (gnss_NavigationModelReq != null) __code = 31*__code + gnss_NavigationModelReq.hashCode();
      if (gnss_RealTimeIntegrityReq != null) __code = 31*__code + gnss_RealTimeIntegrityReq.hashCode();
      if (gnss_DataBitAssistanceReq != null) __code = 31*__code + gnss_DataBitAssistanceReq.hashCode();
      if (gnss_AcquisitionAssistanceReq != null) __code = 31*__code + gnss_AcquisitionAssistanceReq.hashCode();
      if (gnss_AlmanacReq != null) __code = 31*__code + gnss_AlmanacReq.hashCode();
      if (gnss_UTCModelReq != null) __code = 31*__code + gnss_UTCModelReq.hashCode();
      if (gnss_AuxiliaryInformationReq != null) __code = 31*__code + gnss_AuxiliaryInformationReq.hashCode();
      if (bds_DifferentialCorrectionsReq_r12 != null) __code = 31*__code + bds_DifferentialCorrectionsReq_r12.hashCode();
      if (bds_GridModelReq_r12 != null) __code = 31*__code + bds_GridModelReq_r12.hashCode();
      if (gnss_RTK_ObservationsReq_r15 != null) __code = 31*__code + gnss_RTK_ObservationsReq_r15.hashCode();
      if (glo_RTK_BiasInformationReq_r15 != null) __code = 31*__code + glo_RTK_BiasInformationReq_r15.hashCode();
      if (gnss_RTK_MAC_CorrectionDifferencesReq_r15 != null) __code = 31*__code + gnss_RTK_MAC_CorrectionDifferencesReq_r15.hashCode();
      if (gnss_RTK_ResidualsReq_r15 != null) __code = 31*__code + gnss_RTK_ResidualsReq_r15.hashCode();
      if (gnss_RTK_FKP_GradientsReq_r15 != null) __code = 31*__code + gnss_RTK_FKP_GradientsReq_r15.hashCode();
      if (gnss_SSR_OrbitCorrectionsReq_r15 != null) __code = 31*__code + gnss_SSR_OrbitCorrectionsReq_r15.hashCode();
      if (gnss_SSR_ClockCorrectionsReq_r15 != null) __code = 31*__code + gnss_SSR_ClockCorrectionsReq_r15.hashCode();
      if (gnss_SSR_CodeBiasReq_r15 != null) __code = 31*__code + gnss_SSR_CodeBiasReq_r15.hashCode();
      if (gnss_SSR_URA_Req_r16 != null) __code = 31*__code + gnss_SSR_URA_Req_r16.hashCode();
      if (gnss_SSR_PhaseBiasReq_r16 != null) __code = 31*__code + gnss_SSR_PhaseBiasReq_r16.hashCode();
      if (gnss_SSR_STEC_CorrectionReq_r16 != null) __code = 31*__code + gnss_SSR_STEC_CorrectionReq_r16.hashCode();
      if (gnss_SSR_GriddedCorrectionReq_r16 != null) __code = 31*__code + gnss_SSR_GriddedCorrectionReq_r16.hashCode();
      if (navic_DifferentialCorrectionsReq_r16 != null) __code = 31*__code + navic_DifferentialCorrectionsReq_r16.hashCode();
      if (navic_GridModelReq_r16 != null) __code = 31*__code + navic_GridModelReq_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Gnss_ID
    */
   public GNSS_ID getGnss_ID () {
      return gnss_ID;
   }

   public void setGnss_ID (GNSS_ID value) {
      this.gnss_ID = value;
   }

   /**
    * Accessor/mutator methods for Sbas_ID
    */
   public SBAS_ID getSbas_ID () {
      return sbas_ID;
   }

   public void setSbas_ID (SBAS_ID value) {
      this.sbas_ID = value;
   }

   public boolean hasSbas_ID () {
      return (sbas_ID != null);
   }

   /**
    * Accessor/mutator methods for Gnss_TimeModelsReq
    */
   public GNSS_TimeModelListReq getGnss_TimeModelsReq () {
      return gnss_TimeModelsReq;
   }

   public void setGnss_TimeModelsReq (GNSS_TimeModelListReq value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 15))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.gnss_TimeModelsReq = value;
   }

   public boolean hasGnss_TimeModelsReq () {
      return (gnss_TimeModelsReq != null);
   }

   /**
    * Accessor/mutator methods for Gnss_DifferentialCorrectionsReq
    */
   public GNSS_DifferentialCorrectionsReq getGnss_DifferentialCorrectionsReq () {
      return gnss_DifferentialCorrectionsReq;
   }

   public void setGnss_DifferentialCorrectionsReq (GNSS_DifferentialCorrectionsReq value) {
      this.gnss_DifferentialCorrectionsReq = value;
   }

   public boolean hasGnss_DifferentialCorrectionsReq () {
      return (gnss_DifferentialCorrectionsReq != null);
   }

   /**
    * Accessor/mutator methods for Gnss_NavigationModelReq
    */
   public GNSS_NavigationModelReq getGnss_NavigationModelReq () {
      return gnss_NavigationModelReq;
   }

   public void setGnss_NavigationModelReq (GNSS_NavigationModelReq value) {
      this.gnss_NavigationModelReq = value;
   }

   public boolean hasGnss_NavigationModelReq () {
      return (gnss_NavigationModelReq != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RealTimeIntegrityReq
    */
   public GNSS_RealTimeIntegrityReq getGnss_RealTimeIntegrityReq () {
      return gnss_RealTimeIntegrityReq;
   }

   public void setGnss_RealTimeIntegrityReq (GNSS_RealTimeIntegrityReq value) {
      this.gnss_RealTimeIntegrityReq = value;
   }

   public boolean hasGnss_RealTimeIntegrityReq () {
      return (gnss_RealTimeIntegrityReq != null);
   }

   /**
    * Accessor/mutator methods for Gnss_DataBitAssistanceReq
    */
   public GNSS_DataBitAssistanceReq getGnss_DataBitAssistanceReq () {
      return gnss_DataBitAssistanceReq;
   }

   public void setGnss_DataBitAssistanceReq (GNSS_DataBitAssistanceReq value) {
      this.gnss_DataBitAssistanceReq = value;
   }

   public boolean hasGnss_DataBitAssistanceReq () {
      return (gnss_DataBitAssistanceReq != null);
   }

   /**
    * Accessor/mutator methods for Gnss_AcquisitionAssistanceReq
    */
   public GNSS_AcquisitionAssistanceReq getGnss_AcquisitionAssistanceReq () {
      return gnss_AcquisitionAssistanceReq;
   }

   public void setGnss_AcquisitionAssistanceReq (GNSS_AcquisitionAssistanceReq value) {
      this.gnss_AcquisitionAssistanceReq = value;
   }

   public boolean hasGnss_AcquisitionAssistanceReq () {
      return (gnss_AcquisitionAssistanceReq != null);
   }

   /**
    * Accessor/mutator methods for Gnss_AlmanacReq
    */
   public GNSS_AlmanacReq getGnss_AlmanacReq () {
      return gnss_AlmanacReq;
   }

   public void setGnss_AlmanacReq (GNSS_AlmanacReq value) {
      this.gnss_AlmanacReq = value;
   }

   public boolean hasGnss_AlmanacReq () {
      return (gnss_AlmanacReq != null);
   }

   /**
    * Accessor/mutator methods for Gnss_UTCModelReq
    */
   public GNSS_UTC_ModelReq getGnss_UTCModelReq () {
      return gnss_UTCModelReq;
   }

   public void setGnss_UTCModelReq (GNSS_UTC_ModelReq value) {
      this.gnss_UTCModelReq = value;
   }

   public boolean hasGnss_UTCModelReq () {
      return (gnss_UTCModelReq != null);
   }

   /**
    * Accessor/mutator methods for Gnss_AuxiliaryInformationReq
    */
   public GNSS_AuxiliaryInformationReq getGnss_AuxiliaryInformationReq () {
      return gnss_AuxiliaryInformationReq;
   }

   public void setGnss_AuxiliaryInformationReq (GNSS_AuxiliaryInformationReq value) {
      this.gnss_AuxiliaryInformationReq = value;
   }

   public boolean hasGnss_AuxiliaryInformationReq () {
      return (gnss_AuxiliaryInformationReq != null);
   }

   /**
    * Accessor/mutator methods for Bds_DifferentialCorrectionsReq_r12
    */
   public BDS_DifferentialCorrectionsReq_r12 getBds_DifferentialCorrectionsReq_r12 () {
      return bds_DifferentialCorrectionsReq_r12;
   }

   public void setBds_DifferentialCorrectionsReq_r12 (BDS_DifferentialCorrectionsReq_r12 value) {
      this.bds_DifferentialCorrectionsReq_r12 = value;
   }

   public boolean hasBds_DifferentialCorrectionsReq_r12 () {
      return (bds_DifferentialCorrectionsReq_r12 != null);
   }

   /**
    * Accessor/mutator methods for Bds_GridModelReq_r12
    */
   public BDS_GridModelReq_r12 getBds_GridModelReq_r12 () {
      return bds_GridModelReq_r12;
   }

   public void setBds_GridModelReq_r12 (BDS_GridModelReq_r12 value) {
      this.bds_GridModelReq_r12 = value;
   }

   public boolean hasBds_GridModelReq_r12 () {
      return (bds_GridModelReq_r12 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_ObservationsReq_r15
    */
   public GNSS_RTK_ObservationsReq_r15 getGnss_RTK_ObservationsReq_r15 () {
      return gnss_RTK_ObservationsReq_r15;
   }

   public void setGnss_RTK_ObservationsReq_r15 (GNSS_RTK_ObservationsReq_r15 value) {
      this.gnss_RTK_ObservationsReq_r15 = value;
   }

   public boolean hasGnss_RTK_ObservationsReq_r15 () {
      return (gnss_RTK_ObservationsReq_r15 != null);
   }

   /**
    * Accessor/mutator methods for Glo_RTK_BiasInformationReq_r15
    */
   public GLO_RTK_BiasInformationReq_r15 getGlo_RTK_BiasInformationReq_r15 () {
      return glo_RTK_BiasInformationReq_r15;
   }

   public void setGlo_RTK_BiasInformationReq_r15 (GLO_RTK_BiasInformationReq_r15 value) {
      this.glo_RTK_BiasInformationReq_r15 = value;
   }

   public boolean hasGlo_RTK_BiasInformationReq_r15 () {
      return (glo_RTK_BiasInformationReq_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_MAC_CorrectionDifferencesReq_r15
    */
   public GNSS_RTK_MAC_CorrectionDifferencesReq_r15 getGnss_RTK_MAC_CorrectionDifferencesReq_r15 () {
      return gnss_RTK_MAC_CorrectionDifferencesReq_r15;
   }

   public void setGnss_RTK_MAC_CorrectionDifferencesReq_r15 (GNSS_RTK_MAC_CorrectionDifferencesReq_r15 value) {
      this.gnss_RTK_MAC_CorrectionDifferencesReq_r15 = value;
   }

   public boolean hasGnss_RTK_MAC_CorrectionDifferencesReq_r15 () {
      return (gnss_RTK_MAC_CorrectionDifferencesReq_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_ResidualsReq_r15
    */
   public GNSS_RTK_ResidualsReq_r15 getGnss_RTK_ResidualsReq_r15 () {
      return gnss_RTK_ResidualsReq_r15;
   }

   public void setGnss_RTK_ResidualsReq_r15 (GNSS_RTK_ResidualsReq_r15 value) {
      this.gnss_RTK_ResidualsReq_r15 = value;
   }

   public boolean hasGnss_RTK_ResidualsReq_r15 () {
      return (gnss_RTK_ResidualsReq_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_RTK_FKP_GradientsReq_r15
    */
   public GNSS_RTK_FKP_GradientsReq_r15 getGnss_RTK_FKP_GradientsReq_r15 () {
      return gnss_RTK_FKP_GradientsReq_r15;
   }

   public void setGnss_RTK_FKP_GradientsReq_r15 (GNSS_RTK_FKP_GradientsReq_r15 value) {
      this.gnss_RTK_FKP_GradientsReq_r15 = value;
   }

   public boolean hasGnss_RTK_FKP_GradientsReq_r15 () {
      return (gnss_RTK_FKP_GradientsReq_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_OrbitCorrectionsReq_r15
    */
   public GNSS_SSR_OrbitCorrectionsReq_r15 getGnss_SSR_OrbitCorrectionsReq_r15 () {
      return gnss_SSR_OrbitCorrectionsReq_r15;
   }

   public void setGnss_SSR_OrbitCorrectionsReq_r15 (GNSS_SSR_OrbitCorrectionsReq_r15 value) {
      this.gnss_SSR_OrbitCorrectionsReq_r15 = value;
   }

   public boolean hasGnss_SSR_OrbitCorrectionsReq_r15 () {
      return (gnss_SSR_OrbitCorrectionsReq_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_ClockCorrectionsReq_r15
    */
   public GNSS_SSR_ClockCorrectionsReq_r15 getGnss_SSR_ClockCorrectionsReq_r15 () {
      return gnss_SSR_ClockCorrectionsReq_r15;
   }

   public void setGnss_SSR_ClockCorrectionsReq_r15 (GNSS_SSR_ClockCorrectionsReq_r15 value) {
      this.gnss_SSR_ClockCorrectionsReq_r15 = value;
   }

   public boolean hasGnss_SSR_ClockCorrectionsReq_r15 () {
      return (gnss_SSR_ClockCorrectionsReq_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_CodeBiasReq_r15
    */
   public GNSS_SSR_CodeBiasReq_r15 getGnss_SSR_CodeBiasReq_r15 () {
      return gnss_SSR_CodeBiasReq_r15;
   }

   public void setGnss_SSR_CodeBiasReq_r15 (GNSS_SSR_CodeBiasReq_r15 value) {
      this.gnss_SSR_CodeBiasReq_r15 = value;
   }

   public boolean hasGnss_SSR_CodeBiasReq_r15 () {
      return (gnss_SSR_CodeBiasReq_r15 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_URA_Req_r16
    */
   public GNSS_SSR_URA_Req_r16 getGnss_SSR_URA_Req_r16 () {
      return gnss_SSR_URA_Req_r16;
   }

   public void setGnss_SSR_URA_Req_r16 (GNSS_SSR_URA_Req_r16 value) {
      this.gnss_SSR_URA_Req_r16 = value;
   }

   public boolean hasGnss_SSR_URA_Req_r16 () {
      return (gnss_SSR_URA_Req_r16 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_PhaseBiasReq_r16
    */
   public GNSS_SSR_PhaseBiasReq_r16 getGnss_SSR_PhaseBiasReq_r16 () {
      return gnss_SSR_PhaseBiasReq_r16;
   }

   public void setGnss_SSR_PhaseBiasReq_r16 (GNSS_SSR_PhaseBiasReq_r16 value) {
      this.gnss_SSR_PhaseBiasReq_r16 = value;
   }

   public boolean hasGnss_SSR_PhaseBiasReq_r16 () {
      return (gnss_SSR_PhaseBiasReq_r16 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_STEC_CorrectionReq_r16
    */
   public GNSS_SSR_STEC_CorrectionReq_r16 getGnss_SSR_STEC_CorrectionReq_r16 () {
      return gnss_SSR_STEC_CorrectionReq_r16;
   }

   public void setGnss_SSR_STEC_CorrectionReq_r16 (GNSS_SSR_STEC_CorrectionReq_r16 value) {
      this.gnss_SSR_STEC_CorrectionReq_r16 = value;
   }

   public boolean hasGnss_SSR_STEC_CorrectionReq_r16 () {
      return (gnss_SSR_STEC_CorrectionReq_r16 != null);
   }

   /**
    * Accessor/mutator methods for Gnss_SSR_GriddedCorrectionReq_r16
    */
   public GNSS_SSR_GriddedCorrectionReq_r16 getGnss_SSR_GriddedCorrectionReq_r16 () {
      return gnss_SSR_GriddedCorrectionReq_r16;
   }

   public void setGnss_SSR_GriddedCorrectionReq_r16 (GNSS_SSR_GriddedCorrectionReq_r16 value) {
      this.gnss_SSR_GriddedCorrectionReq_r16 = value;
   }

   public boolean hasGnss_SSR_GriddedCorrectionReq_r16 () {
      return (gnss_SSR_GriddedCorrectionReq_r16 != null);
   }

   /**
    * Accessor/mutator methods for Navic_DifferentialCorrectionsReq_r16
    */
   public NavIC_DifferentialCorrectionsReq_r16 getNavic_DifferentialCorrectionsReq_r16 () {
      return navic_DifferentialCorrectionsReq_r16;
   }

   public void setNavic_DifferentialCorrectionsReq_r16 (NavIC_DifferentialCorrectionsReq_r16 value) {
      this.navic_DifferentialCorrectionsReq_r16 = value;
   }

   public boolean hasNavic_DifferentialCorrectionsReq_r16 () {
      return (navic_DifferentialCorrectionsReq_r16 != null);
   }

   /**
    * Accessor/mutator methods for Navic_GridModelReq_r16
    */
   public NavIC_GridModelReq_r16 getNavic_GridModelReq_r16 () {
      return navic_GridModelReq_r16;
   }

   public void setNavic_GridModelReq_r16 (NavIC_GridModelReq_r16 value) {
      this.navic_GridModelReq_r16 = value;
   }

   public boolean hasNavic_GridModelReq_r16 () {
      return (navic_GridModelReq_r16 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 28; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gnss_ID;
         case 1: return sbas_ID;
         case 2: return gnss_TimeModelsReq;
         case 3: return gnss_DifferentialCorrectionsReq;
         case 4: return gnss_NavigationModelReq;
         case 5: return gnss_RealTimeIntegrityReq;
         case 6: return gnss_DataBitAssistanceReq;
         case 7: return gnss_AcquisitionAssistanceReq;
         case 8: return gnss_AlmanacReq;
         case 9: return gnss_UTCModelReq;
         case 10: return gnss_AuxiliaryInformationReq;
         case 11: return bds_DifferentialCorrectionsReq_r12;
         case 12: return bds_GridModelReq_r12;
         case 13: return gnss_RTK_ObservationsReq_r15;
         case 14: return glo_RTK_BiasInformationReq_r15;
         case 15: return gnss_RTK_MAC_CorrectionDifferencesReq_r15;
         case 16: return gnss_RTK_ResidualsReq_r15;
         case 17: return gnss_RTK_FKP_GradientsReq_r15;
         case 18: return gnss_SSR_OrbitCorrectionsReq_r15;
         case 19: return gnss_SSR_ClockCorrectionsReq_r15;
         case 20: return gnss_SSR_CodeBiasReq_r15;
         case 21: return gnss_SSR_URA_Req_r16;
         case 22: return gnss_SSR_PhaseBiasReq_r16;
         case 23: return gnss_SSR_STEC_CorrectionReq_r16;
         case 24: return gnss_SSR_GriddedCorrectionReq_r16;
         case 25: return navic_DifferentialCorrectionsReq_r16;
         case 26: return navic_GridModelReq_r16;
         case 27: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gnss-ID";
         case 1: return "sbas-ID";
         case 2: return "gnss-TimeModelsReq";
         case 3: return "gnss-DifferentialCorrectionsReq";
         case 4: return "gnss-NavigationModelReq";
         case 5: return "gnss-RealTimeIntegrityReq";
         case 6: return "gnss-DataBitAssistanceReq";
         case 7: return "gnss-AcquisitionAssistanceReq";
         case 8: return "gnss-AlmanacReq";
         case 9: return "gnss-UTCModelReq";
         case 10: return "gnss-AuxiliaryInformationReq";
         case 11: return "bds-DifferentialCorrectionsReq-r12";
         case 12: return "bds-GridModelReq-r12";
         case 13: return "gnss-RTK-ObservationsReq-r15";
         case 14: return "glo-RTK-BiasInformationReq-r15";
         case 15: return "gnss-RTK-MAC-CorrectionDifferencesReq-r15";
         case 16: return "gnss-RTK-ResidualsReq-r15";
         case 17: return "gnss-RTK-FKP-GradientsReq-r15";
         case 18: return "gnss-SSR-OrbitCorrectionsReq-r15";
         case 19: return "gnss-SSR-ClockCorrectionsReq-r15";
         case 20: return "gnss-SSR-CodeBiasReq-r15";
         case 21: return "gnss-SSR-URA-Req-r16";
         case 22: return "gnss-SSR-PhaseBiasReq-r16";
         case 23: return "gnss-SSR-STEC-CorrectionReq-r16";
         case 24: return "gnss-SSR-GriddedCorrectionReq-r16";
         case 25: return "navic-DifferentialCorrectionsReq-r16";
         case 26: return "navic-GridModelReq-r16";
         case 27: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean sbas_IDPresent = buffer.decodeBit ("sbas_IDPresent");
      boolean gnss_TimeModelsReqPresent = buffer.decodeBit ("gnss_TimeModelsReqPresent");
      boolean gnss_DifferentialCorrectionsReqPresent = buffer.decodeBit ("gnss_DifferentialCorrectionsReqPresent");
      boolean gnss_NavigationModelReqPresent = buffer.decodeBit ("gnss_NavigationModelReqPresent");
      boolean gnss_RealTimeIntegrityReqPresent = buffer.decodeBit ("gnss_RealTimeIntegrityReqPresent");
      boolean gnss_DataBitAssistanceReqPresent = buffer.decodeBit ("gnss_DataBitAssistanceReqPresent");
      boolean gnss_AcquisitionAssistanceReqPresent = buffer.decodeBit ("gnss_AcquisitionAssistanceReqPresent");
      boolean gnss_AlmanacReqPresent = buffer.decodeBit ("gnss_AlmanacReqPresent");
      boolean gnss_UTCModelReqPresent = buffer.decodeBit ("gnss_UTCModelReqPresent");
      boolean gnss_AuxiliaryInformationReqPresent = buffer.decodeBit ("gnss_AuxiliaryInformationReqPresent");

      // decode gnss_ID

      buffer.getContext().eventDispatcher.startElement("gnss_ID", -1);

      gnss_ID = new GNSS_ID();
      gnss_ID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("gnss_ID", -1);

      // decode sbas_ID

      if (sbas_IDPresent) {
         buffer.getContext().eventDispatcher.startElement("sbas_ID", -1);

         sbas_ID = new SBAS_ID();
         sbas_ID.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sbas_ID", -1);
      }
      else {
         sbas_ID = null;
      }

      // decode gnss_TimeModelsReq

      if (gnss_TimeModelsReqPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_TimeModelsReq", -1);

         gnss_TimeModelsReq = new GNSS_TimeModelListReq();
         gnss_TimeModelsReq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_TimeModelsReq", -1);
      }
      else {
         gnss_TimeModelsReq = null;
      }

      // decode gnss_DifferentialCorrectionsReq

      if (gnss_DifferentialCorrectionsReqPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_DifferentialCorrectionsReq", -1);

         gnss_DifferentialCorrectionsReq = new GNSS_DifferentialCorrectionsReq();
         gnss_DifferentialCorrectionsReq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_DifferentialCorrectionsReq", -1);
      }
      else {
         gnss_DifferentialCorrectionsReq = null;
      }

      // decode gnss_NavigationModelReq

      if (gnss_NavigationModelReqPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_NavigationModelReq", -1);

         gnss_NavigationModelReq = new GNSS_NavigationModelReq();
         gnss_NavigationModelReq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_NavigationModelReq", -1);
      }
      else {
         gnss_NavigationModelReq = null;
      }

      // decode gnss_RealTimeIntegrityReq

      if (gnss_RealTimeIntegrityReqPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_RealTimeIntegrityReq", -1);

         gnss_RealTimeIntegrityReq = new GNSS_RealTimeIntegrityReq();
         gnss_RealTimeIntegrityReq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_RealTimeIntegrityReq", -1);
      }
      else {
         gnss_RealTimeIntegrityReq = null;
      }

      // decode gnss_DataBitAssistanceReq

      if (gnss_DataBitAssistanceReqPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_DataBitAssistanceReq", -1);

         gnss_DataBitAssistanceReq = new GNSS_DataBitAssistanceReq();
         gnss_DataBitAssistanceReq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_DataBitAssistanceReq", -1);
      }
      else {
         gnss_DataBitAssistanceReq = null;
      }

      // decode gnss_AcquisitionAssistanceReq

      if (gnss_AcquisitionAssistanceReqPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_AcquisitionAssistanceReq", -1);

         gnss_AcquisitionAssistanceReq = new GNSS_AcquisitionAssistanceReq();
         gnss_AcquisitionAssistanceReq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_AcquisitionAssistanceReq", -1);
      }
      else {
         gnss_AcquisitionAssistanceReq = null;
      }

      // decode gnss_AlmanacReq

      if (gnss_AlmanacReqPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_AlmanacReq", -1);

         gnss_AlmanacReq = new GNSS_AlmanacReq();
         gnss_AlmanacReq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_AlmanacReq", -1);
      }
      else {
         gnss_AlmanacReq = null;
      }

      // decode gnss_UTCModelReq

      if (gnss_UTCModelReqPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_UTCModelReq", -1);

         gnss_UTCModelReq = new GNSS_UTC_ModelReq();
         gnss_UTCModelReq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_UTCModelReq", -1);
      }
      else {
         gnss_UTCModelReq = null;
      }

      // decode gnss_AuxiliaryInformationReq

      if (gnss_AuxiliaryInformationReqPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_AuxiliaryInformationReq", -1);

         gnss_AuxiliaryInformationReq = new GNSS_AuxiliaryInformationReq();
         gnss_AuxiliaryInformationReq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_AuxiliaryInformationReq", -1);
      }
      else {
         gnss_AuxiliaryInformationReq = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("bds_DifferentialCorrectionsReq_r12Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("bds_GridModelReq_r12Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_RTK_ObservationsReq_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("glo_RTK_BiasInformationReq_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_RTK_MAC_CorrectionDifferencesReq_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_RTK_ResidualsReq_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_RTK_FKP_GradientsReq_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_OrbitCorrectionsReq_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_ClockCorrectionsReq_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_CodeBiasReq_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_URA_Req_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_PhaseBiasReq_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_STEC_CorrectionReq_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("gnss_SSR_GriddedCorrectionReq_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("navic_DifferentialCorrectionsReq_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("navic_GridModelReq_r16Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode bds_DifferentialCorrectionsReq_r12

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("bds_DifferentialCorrectionsReq_r12", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            bds_DifferentialCorrectionsReq_r12 = new BDS_DifferentialCorrectionsReq_r12();
            bds_DifferentialCorrectionsReq_r12.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("bds_DifferentialCorrectionsReq_r12", -1);

         }
         else {
            bds_DifferentialCorrectionsReq_r12 = null;
         }

         // decode bds_GridModelReq_r12

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("bds_GridModelReq_r12", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            bds_GridModelReq_r12 = new BDS_GridModelReq_r12();
            bds_GridModelReq_r12.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("bds_GridModelReq_r12", -1);

         }
         else {
            bds_GridModelReq_r12 = null;
         }

         // decode gnss_RTK_ObservationsReq_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_ObservationsReq_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_RTK_ObservationsReq_r15 = new GNSS_RTK_ObservationsReq_r15();
            gnss_RTK_ObservationsReq_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_RTK_ObservationsReq_r15", -1);

         }
         else {
            gnss_RTK_ObservationsReq_r15 = null;
         }

         // decode glo_RTK_BiasInformationReq_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("glo_RTK_BiasInformationReq_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            glo_RTK_BiasInformationReq_r15 = new GLO_RTK_BiasInformationReq_r15();
            glo_RTK_BiasInformationReq_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("glo_RTK_BiasInformationReq_r15", -1);

         }
         else {
            glo_RTK_BiasInformationReq_r15 = null;
         }

         // decode gnss_RTK_MAC_CorrectionDifferencesReq_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_MAC_CorrectionDifferencesReq_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_RTK_MAC_CorrectionDifferencesReq_r15 = new GNSS_RTK_MAC_CorrectionDifferencesReq_r15();
            gnss_RTK_MAC_CorrectionDifferencesReq_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_RTK_MAC_CorrectionDifferencesReq_r15", -1);

         }
         else {
            gnss_RTK_MAC_CorrectionDifferencesReq_r15 = null;
         }

         // decode gnss_RTK_ResidualsReq_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_ResidualsReq_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_RTK_ResidualsReq_r15 = new GNSS_RTK_ResidualsReq_r15();
            gnss_RTK_ResidualsReq_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_RTK_ResidualsReq_r15", -1);

         }
         else {
            gnss_RTK_ResidualsReq_r15 = null;
         }

         // decode gnss_RTK_FKP_GradientsReq_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_FKP_GradientsReq_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_RTK_FKP_GradientsReq_r15 = new GNSS_RTK_FKP_GradientsReq_r15();
            gnss_RTK_FKP_GradientsReq_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_RTK_FKP_GradientsReq_r15", -1);

         }
         else {
            gnss_RTK_FKP_GradientsReq_r15 = null;
         }

         // decode gnss_SSR_OrbitCorrectionsReq_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_OrbitCorrectionsReq_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_OrbitCorrectionsReq_r15 = new GNSS_SSR_OrbitCorrectionsReq_r15();
            gnss_SSR_OrbitCorrectionsReq_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_OrbitCorrectionsReq_r15", -1);

         }
         else {
            gnss_SSR_OrbitCorrectionsReq_r15 = null;
         }

         // decode gnss_SSR_ClockCorrectionsReq_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_ClockCorrectionsReq_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_ClockCorrectionsReq_r15 = new GNSS_SSR_ClockCorrectionsReq_r15();
            gnss_SSR_ClockCorrectionsReq_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_ClockCorrectionsReq_r15", -1);

         }
         else {
            gnss_SSR_ClockCorrectionsReq_r15 = null;
         }

         // decode gnss_SSR_CodeBiasReq_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_CodeBiasReq_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_CodeBiasReq_r15 = new GNSS_SSR_CodeBiasReq_r15();
            gnss_SSR_CodeBiasReq_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_CodeBiasReq_r15", -1);

         }
         else {
            gnss_SSR_CodeBiasReq_r15 = null;
         }

         // decode gnss_SSR_URA_Req_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_URA_Req_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_URA_Req_r16 = new GNSS_SSR_URA_Req_r16();
            gnss_SSR_URA_Req_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_URA_Req_r16", -1);

         }
         else {
            gnss_SSR_URA_Req_r16 = null;
         }

         // decode gnss_SSR_PhaseBiasReq_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_PhaseBiasReq_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_PhaseBiasReq_r16 = new GNSS_SSR_PhaseBiasReq_r16();
            gnss_SSR_PhaseBiasReq_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_PhaseBiasReq_r16", -1);

         }
         else {
            gnss_SSR_PhaseBiasReq_r16 = null;
         }

         // decode gnss_SSR_STEC_CorrectionReq_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_STEC_CorrectionReq_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_STEC_CorrectionReq_r16 = new GNSS_SSR_STEC_CorrectionReq_r16();
            gnss_SSR_STEC_CorrectionReq_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_STEC_CorrectionReq_r16", -1);

         }
         else {
            gnss_SSR_STEC_CorrectionReq_r16 = null;
         }

         // decode gnss_SSR_GriddedCorrectionReq_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_GriddedCorrectionReq_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            gnss_SSR_GriddedCorrectionReq_r16 = new GNSS_SSR_GriddedCorrectionReq_r16();
            gnss_SSR_GriddedCorrectionReq_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("gnss_SSR_GriddedCorrectionReq_r16", -1);

         }
         else {
            gnss_SSR_GriddedCorrectionReq_r16 = null;
         }

         // decode navic_DifferentialCorrectionsReq_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("navic_DifferentialCorrectionsReq_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            navic_DifferentialCorrectionsReq_r16 = new NavIC_DifferentialCorrectionsReq_r16();
            navic_DifferentialCorrectionsReq_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("navic_DifferentialCorrectionsReq_r16", -1);

         }
         else {
            navic_DifferentialCorrectionsReq_r16 = null;
         }

         // decode navic_GridModelReq_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("navic_GridModelReq_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            navic_GridModelReq_r16 = new NavIC_GridModelReq_r16();
            navic_GridModelReq_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("navic_GridModelReq_r16", -1);

         }
         else {
            navic_GridModelReq_r16 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((bds_DifferentialCorrectionsReq_r12 != null) ||
      (bds_GridModelReq_r12 != null) ||
      (gnss_RTK_ObservationsReq_r15 != null) ||
      (glo_RTK_BiasInformationReq_r15 != null) ||
      (gnss_RTK_MAC_CorrectionDifferencesReq_r15 != null) ||
      (gnss_RTK_ResidualsReq_r15 != null) ||
      (gnss_RTK_FKP_GradientsReq_r15 != null) ||
      (gnss_SSR_OrbitCorrectionsReq_r15 != null) ||
      (gnss_SSR_ClockCorrectionsReq_r15 != null) ||
      (gnss_SSR_CodeBiasReq_r15 != null) ||
      (gnss_SSR_URA_Req_r16 != null) ||
      (gnss_SSR_PhaseBiasReq_r16 != null) ||
      (gnss_SSR_STEC_CorrectionReq_r16 != null) ||
      (gnss_SSR_GriddedCorrectionReq_r16 != null) ||
      (navic_DifferentialCorrectionsReq_r16 != null) ||
      (navic_GridModelReq_r16 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((sbas_ID != null), null);
      buffer.encodeBit ((gnss_TimeModelsReq != null), null);
      buffer.encodeBit ((gnss_DifferentialCorrectionsReq != null), null);
      buffer.encodeBit ((gnss_NavigationModelReq != null), null);
      buffer.encodeBit ((gnss_RealTimeIntegrityReq != null), null);
      buffer.encodeBit ((gnss_DataBitAssistanceReq != null), null);
      buffer.encodeBit ((gnss_AcquisitionAssistanceReq != null), null);
      buffer.encodeBit ((gnss_AlmanacReq != null), null);
      buffer.encodeBit ((gnss_UTCModelReq != null), null);
      buffer.encodeBit ((gnss_AuxiliaryInformationReq != null), null);

      // encode gnss_ID

      if (gnss_ID != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_ID", -1);

         gnss_ID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_ID", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_ID");

      // encode sbas_ID

      if (sbas_ID != null) {
         buffer.getContext().eventDispatcher.startElement("sbas_ID", -1);

         sbas_ID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sbas_ID", -1);
      }

      // encode gnss_TimeModelsReq

      if (gnss_TimeModelsReq != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_TimeModelsReq", -1);

         gnss_TimeModelsReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_TimeModelsReq", -1);
      }

      // encode gnss_DifferentialCorrectionsReq

      if (gnss_DifferentialCorrectionsReq != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_DifferentialCorrectionsReq", -1);

         gnss_DifferentialCorrectionsReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_DifferentialCorrectionsReq", -1);
      }

      // encode gnss_NavigationModelReq

      if (gnss_NavigationModelReq != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_NavigationModelReq", -1);

         gnss_NavigationModelReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_NavigationModelReq", -1);
      }

      // encode gnss_RealTimeIntegrityReq

      if (gnss_RealTimeIntegrityReq != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_RealTimeIntegrityReq", -1);

         gnss_RealTimeIntegrityReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_RealTimeIntegrityReq", -1);
      }

      // encode gnss_DataBitAssistanceReq

      if (gnss_DataBitAssistanceReq != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_DataBitAssistanceReq", -1);

         gnss_DataBitAssistanceReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_DataBitAssistanceReq", -1);
      }

      // encode gnss_AcquisitionAssistanceReq

      if (gnss_AcquisitionAssistanceReq != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_AcquisitionAssistanceReq", -1);

         gnss_AcquisitionAssistanceReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_AcquisitionAssistanceReq", -1);
      }

      // encode gnss_AlmanacReq

      if (gnss_AlmanacReq != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_AlmanacReq", -1);

         gnss_AlmanacReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_AlmanacReq", -1);
      }

      // encode gnss_UTCModelReq

      if (gnss_UTCModelReq != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_UTCModelReq", -1);

         gnss_UTCModelReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_UTCModelReq", -1);
      }

      // encode gnss_AuxiliaryInformationReq

      if (gnss_AuxiliaryInformationReq != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_AuxiliaryInformationReq", -1);

         gnss_AuxiliaryInformationReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_AuxiliaryInformationReq", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 16;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((bds_DifferentialCorrectionsReq_r12 != null), null);
         buffer.encodeBit ((bds_GridModelReq_r12 != null), null);
         buffer.encodeBit ((gnss_RTK_ObservationsReq_r15 != null), null);
         buffer.encodeBit ((glo_RTK_BiasInformationReq_r15 != null), null);
         buffer.encodeBit ((gnss_RTK_MAC_CorrectionDifferencesReq_r15 != null), null);
         buffer.encodeBit ((gnss_RTK_ResidualsReq_r15 != null), null);
         buffer.encodeBit ((gnss_RTK_FKP_GradientsReq_r15 != null), null);
         buffer.encodeBit ((gnss_SSR_OrbitCorrectionsReq_r15 != null), null);
         buffer.encodeBit ((gnss_SSR_ClockCorrectionsReq_r15 != null), null);
         buffer.encodeBit ((gnss_SSR_CodeBiasReq_r15 != null), null);
         buffer.encodeBit ((gnss_SSR_URA_Req_r16 != null), null);
         buffer.encodeBit ((gnss_SSR_PhaseBiasReq_r16 != null), null);
         buffer.encodeBit ((gnss_SSR_STEC_CorrectionReq_r16 != null), null);
         buffer.encodeBit ((gnss_SSR_GriddedCorrectionReq_r16 != null), null);
         buffer.encodeBit ((navic_DifferentialCorrectionsReq_r16 != null), null);
         buffer.encodeBit ((navic_GridModelReq_r16 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // bds_DifferentialCorrectionsReq_r12

         if (bds_DifferentialCorrectionsReq_r12 != null) {
            buffer.reset();
            bds_DifferentialCorrectionsReq_r12.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("bds_DifferentialCorrectionsReq_r12", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("bds_DifferentialCorrectionsReq_r12", -1);
         }

         // bds_GridModelReq_r12

         if (bds_GridModelReq_r12 != null) {
            buffer.reset();
            bds_GridModelReq_r12.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("bds_GridModelReq_r12", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("bds_GridModelReq_r12", -1);
         }

         // gnss_RTK_ObservationsReq_r15

         if (gnss_RTK_ObservationsReq_r15 != null) {
            buffer.reset();
            gnss_RTK_ObservationsReq_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_ObservationsReq_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_RTK_ObservationsReq_r15", -1);
         }

         // glo_RTK_BiasInformationReq_r15

         if (glo_RTK_BiasInformationReq_r15 != null) {
            buffer.reset();
            glo_RTK_BiasInformationReq_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("glo_RTK_BiasInformationReq_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("glo_RTK_BiasInformationReq_r15", -1);
         }

         // gnss_RTK_MAC_CorrectionDifferencesReq_r15

         if (gnss_RTK_MAC_CorrectionDifferencesReq_r15 != null) {
            buffer.reset();
            gnss_RTK_MAC_CorrectionDifferencesReq_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_MAC_CorrectionDifferencesReq_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_RTK_MAC_CorrectionDifferencesReq_r15", -1);
         }

         // gnss_RTK_ResidualsReq_r15

         if (gnss_RTK_ResidualsReq_r15 != null) {
            buffer.reset();
            gnss_RTK_ResidualsReq_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_ResidualsReq_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_RTK_ResidualsReq_r15", -1);
         }

         // gnss_RTK_FKP_GradientsReq_r15

         if (gnss_RTK_FKP_GradientsReq_r15 != null) {
            buffer.reset();
            gnss_RTK_FKP_GradientsReq_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_RTK_FKP_GradientsReq_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_RTK_FKP_GradientsReq_r15", -1);
         }

         // gnss_SSR_OrbitCorrectionsReq_r15

         if (gnss_SSR_OrbitCorrectionsReq_r15 != null) {
            buffer.reset();
            gnss_SSR_OrbitCorrectionsReq_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_OrbitCorrectionsReq_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_OrbitCorrectionsReq_r15", -1);
         }

         // gnss_SSR_ClockCorrectionsReq_r15

         if (gnss_SSR_ClockCorrectionsReq_r15 != null) {
            buffer.reset();
            gnss_SSR_ClockCorrectionsReq_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_ClockCorrectionsReq_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_ClockCorrectionsReq_r15", -1);
         }

         // gnss_SSR_CodeBiasReq_r15

         if (gnss_SSR_CodeBiasReq_r15 != null) {
            buffer.reset();
            gnss_SSR_CodeBiasReq_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_CodeBiasReq_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_CodeBiasReq_r15", -1);
         }

         // gnss_SSR_URA_Req_r16

         if (gnss_SSR_URA_Req_r16 != null) {
            buffer.reset();
            gnss_SSR_URA_Req_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_URA_Req_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_URA_Req_r16", -1);
         }

         // gnss_SSR_PhaseBiasReq_r16

         if (gnss_SSR_PhaseBiasReq_r16 != null) {
            buffer.reset();
            gnss_SSR_PhaseBiasReq_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_PhaseBiasReq_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_PhaseBiasReq_r16", -1);
         }

         // gnss_SSR_STEC_CorrectionReq_r16

         if (gnss_SSR_STEC_CorrectionReq_r16 != null) {
            buffer.reset();
            gnss_SSR_STEC_CorrectionReq_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_STEC_CorrectionReq_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_STEC_CorrectionReq_r16", -1);
         }

         // gnss_SSR_GriddedCorrectionReq_r16

         if (gnss_SSR_GriddedCorrectionReq_r16 != null) {
            buffer.reset();
            gnss_SSR_GriddedCorrectionReq_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("gnss_SSR_GriddedCorrectionReq_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("gnss_SSR_GriddedCorrectionReq_r16", -1);
         }

         // navic_DifferentialCorrectionsReq_r16

         if (navic_DifferentialCorrectionsReq_r16 != null) {
            buffer.reset();
            navic_DifferentialCorrectionsReq_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("navic_DifferentialCorrectionsReq_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("navic_DifferentialCorrectionsReq_r16", -1);
         }

         // navic_GridModelReq_r16

         if (navic_GridModelReq_r16 != null) {
            buffer.reset();
            navic_GridModelReq_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("navic_GridModelReq_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("navic_GridModelReq_r16", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
