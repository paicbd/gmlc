/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class PeriodicalReportingCriteria_reportingInterval extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _NOPERIODICALREPORTING = 0;
   public static final int _RI0_25 = 1;
   public static final int _RI0_5 = 2;
   public static final int _RI1 = 3;
   public static final int _RI2 = 4;
   public static final int _RI4 = 5;
   public static final int _RI8 = 6;
   public static final int _RI16 = 7;
   public static final int _RI32 = 8;
   public static final int _RI64 = 9;

   // Singleton instances of PeriodicalReportingCriteria_reportingInterval
   protected static final PeriodicalReportingCriteria_reportingInterval _noPeriodicalReporting = new PeriodicalReportingCriteria_reportingInterval(0);
   protected static final PeriodicalReportingCriteria_reportingInterval _ri0_25 = new PeriodicalReportingCriteria_reportingInterval(1);
   protected static final PeriodicalReportingCriteria_reportingInterval _ri0_5 = new PeriodicalReportingCriteria_reportingInterval(2);
   protected static final PeriodicalReportingCriteria_reportingInterval _ri1 = new PeriodicalReportingCriteria_reportingInterval(3);
   protected static final PeriodicalReportingCriteria_reportingInterval _ri2 = new PeriodicalReportingCriteria_reportingInterval(4);
   protected static final PeriodicalReportingCriteria_reportingInterval _ri4 = new PeriodicalReportingCriteria_reportingInterval(5);
   protected static final PeriodicalReportingCriteria_reportingInterval _ri8 = new PeriodicalReportingCriteria_reportingInterval(6);
   protected static final PeriodicalReportingCriteria_reportingInterval _ri16 = new PeriodicalReportingCriteria_reportingInterval(7);
   protected static final PeriodicalReportingCriteria_reportingInterval _ri32 = new PeriodicalReportingCriteria_reportingInterval(8);
   protected static final PeriodicalReportingCriteria_reportingInterval _ri64 = new PeriodicalReportingCriteria_reportingInterval(9);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    */
   protected PeriodicalReportingCriteria_reportingInterval (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for noPeriodicalReporting.
    */
   public static PeriodicalReportingCriteria_reportingInterval noPeriodicalReporting() {
      return _noPeriodicalReporting;
   }

   /**
    * Singleton accessor method for ri0_25.
    */
   public static PeriodicalReportingCriteria_reportingInterval ri0_25() {
      return _ri0_25;
   }

   /**
    * Singleton accessor method for ri0_5.
    */
   public static PeriodicalReportingCriteria_reportingInterval ri0_5() {
      return _ri0_5;
   }

   /**
    * Singleton accessor method for ri1.
    */
   public static PeriodicalReportingCriteria_reportingInterval ri1() {
      return _ri1;
   }

   /**
    * Singleton accessor method for ri2.
    */
   public static PeriodicalReportingCriteria_reportingInterval ri2() {
      return _ri2;
   }

   /**
    * Singleton accessor method for ri4.
    */
   public static PeriodicalReportingCriteria_reportingInterval ri4() {
      return _ri4;
   }

   /**
    * Singleton accessor method for ri8.
    */
   public static PeriodicalReportingCriteria_reportingInterval ri8() {
      return _ri8;
   }

   /**
    * Singleton accessor method for ri16.
    */
   public static PeriodicalReportingCriteria_reportingInterval ri16() {
      return _ri16;
   }

   /**
    * Singleton accessor method for ri32.
    */
   public static PeriodicalReportingCriteria_reportingInterval ri32() {
      return _ri32;
   }

   /**
    * Singleton accessor method for ri64.
    */
   public static PeriodicalReportingCriteria_reportingInterval ri64() {
      return _ri64;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return PeriodicalReportingCriteria_reportingInterval.valueOf( PeriodicalReportingCriteria_reportingInterval.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static PeriodicalReportingCriteria_reportingInterval valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return noPeriodicalReporting();
         case 1: return ri0_25();
         case 2: return ri0_5();
         case 3: return ri1();
         case 4: return ri2();
         case 5: return ri4();
         case 6: return ri8();
         case 7: return ri16();
         case 8: return ri32();
         case 9: return ri64();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (10);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      switch ((int)value) {
         case 0: ui = 0; /* noPeriodicalReporting */break;
         case 1: ui = 1; /* ri0_25 */break;
         case 2: ui = 2; /* ri0_5 */break;
         case 3: ui = 3; /* ri1 */break;
         case 4: ui = 4; /* ri2 */break;
         case 5: ui = 5; /* ri4 */break;
         case 6: ui = 6; /* ri8 */break;
         case 7: ui = 7; /* ri16 */break;
         case 8: ui = 8; /* ri32 */break;
         case 9: ui = 9; /* ri64 */break;
         default:
            throw new Asn1InvalidEnumException (value);
      }

      buffer.encodeConsWholeNumber (ui, 10);
   }

}
