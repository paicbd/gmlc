/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class RTD extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "RTD";
   }

   protected Asn1Integer rTDValue;
   protected RTDUnits rTDUnits = null;
   protected Asn1Integer rTDAccuracy;  // optional
   protected Asn1OpenExt extElem1;

   public RTD () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RTD (
      Asn1Integer rTDValue_,
      RTDUnits rTDUnits_,
      Asn1Integer rTDAccuracy_
   ) throws Asn1Exception {
      super();
      setRTDValue (rTDValue_);
      setRTDUnits (rTDUnits_);
      setRTDAccuracy (rTDAccuracy_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RTD (
      Asn1Integer rTDValue_,
      RTDUnits rTDUnits_
   ) throws Asn1Exception {
      super();
      setRTDValue (rTDValue_);
      setRTDUnits (rTDUnits_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RTD (long rTDValue_,
      RTDUnits rTDUnits_,
      long rTDAccuracy_
   ) throws Asn1Exception {
      super();
      setRTDValue (rTDValue_);
      setRTDUnits (rTDUnits_);
      setRTDAccuracy (rTDAccuracy_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public RTD (
      long rTDValue_,
      RTDUnits rTDUnits_
   ) throws Asn1Exception {
      super();
      setRTDValue (rTDValue_);
      setRTDUnits (rTDUnits_);
   }

   public void init () {
      rTDValue = null;
      rTDUnits = null;
      rTDAccuracy = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof RTD) ) return false;

      RTD rhs = (RTD) obj;

      if (rTDValue == null) {
         if (rhs.rTDValue != null) return false;
      }
      else {
         if (!rTDValue.equals(rhs.rTDValue)) {
            return false;
         }
      }

      if (rTDUnits == null) {
         if (rhs.rTDUnits != null) return false;
      }
      else {
         if (!rTDUnits.equals(rhs.rTDUnits)) {
            return false;
         }
      }

      if (rTDAccuracy == null) {
         if (rhs.rTDAccuracy != null) return false;
      }
      else {
         if (!rTDAccuracy.equals(rhs.rTDAccuracy)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (rTDValue != null) __code = 31*__code + rTDValue.hashCode();
      if (rTDUnits != null) __code = 31*__code + rTDUnits.hashCode();
      if (rTDAccuracy != null) __code = 31*__code + rTDAccuracy.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for RTDValue
    */
   public Asn1Integer getRTDValue () {
      return rTDValue;
   }

   public void setRTDValue (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 16777216))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.rTDValue = value;
   }

   public void setRTDValue (long value) 
      throws Asn1Exception
   {
      setRTDValue (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for RTDUnits
    */
   public RTDUnits getRTDUnits () {
      return rTDUnits;
   }

   public void setRTDUnits (RTDUnits value) {
      this.rTDUnits = value;
   }

   /**
    * Accessor/mutator methods for RTDAccuracy
    */
   public Asn1Integer getRTDAccuracy () {
      return rTDAccuracy;
   }

   public void setRTDAccuracy (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.rTDAccuracy = value;
   }

   public void setRTDAccuracy (long value) 
      throws Asn1Exception
   {
      setRTDAccuracy (new Asn1Integer(value));
   }
   public boolean hasRTDAccuracy () {
      return (rTDAccuracy != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rTDValue;
         case 1: return rTDUnits;
         case 2: return rTDAccuracy;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rTDValue";
         case 1: return "rTDUnits";
         case 2: return "rTDAccuracy";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean rTDAccuracyPresent = buffer.decodeBit ("rTDAccuracyPresent");

      // decode rTDValue

      buffer.getContext().eventDispatcher.startElement("rTDValue", -1);

      rTDValue = new Asn1Integer();
      rTDValue.decode (buffer, 0, 16777216);
      buffer.getContext().eventDispatcher.endElement("rTDValue", -1);

      // decode rTDUnits

      buffer.getContext().eventDispatcher.startElement("rTDUnits", -1);

      {
         int tval = RTDUnits.decodeEnumValue (buffer);
         rTDUnits = RTDUnits.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("rTDUnits", -1);

      // decode rTDAccuracy

      if (rTDAccuracyPresent) {
         buffer.getContext().eventDispatcher.startElement("rTDAccuracy", -1);

         rTDAccuracy = new Asn1Integer();
         rTDAccuracy.decode (buffer, 0, 255);
         buffer.getContext().eventDispatcher.endElement("rTDAccuracy", -1);
      }
      else {
         rTDAccuracy = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((rTDAccuracy != null), null);

      // encode rTDValue

      if (rTDValue != null) {
         buffer.getContext().eventDispatcher.startElement("rTDValue", -1);

         rTDValue.encode (buffer, 0, 16777216);

         buffer.getContext().eventDispatcher.endElement("rTDValue", -1);
      }
      else throw new Asn1MissingRequiredException ("rTDValue");

      // encode rTDUnits

      if (rTDUnits != null) {
         buffer.getContext().eventDispatcher.startElement("rTDUnits", -1);

         rTDUnits.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rTDUnits", -1);
      }
      else throw new Asn1MissingRequiredException ("rTDUnits");

      // encode rTDAccuracy

      if (rTDAccuracy != null) {
         buffer.getContext().eventDispatcher.startElement("rTDAccuracy", -1);

         rTDAccuracy.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("rTDAccuracy", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
