/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Components;

import com.objsys.asn1j.runtime.*;

public class SetSessionID extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SetSessionID";
   }

   protected Asn1Integer sessionId;
   protected SETId setId;

   public SetSessionID () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SetSessionID (
      Asn1Integer sessionId_,
      SETId setId_
   ) throws Asn1Exception {
      super();
      setSessionId (sessionId_);
      setSetId (setId_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SetSessionID (long sessionId_,
      SETId setId_
   ) throws Asn1Exception {
      super();
      setSessionId (sessionId_);
      setSetId (setId_);
   }

   public void init () {
      sessionId = null;
      setId = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof SetSessionID) ) return false;

      SetSessionID rhs = (SetSessionID) obj;

      if (sessionId == null) {
         if (rhs.sessionId != null) return false;
      }
      else {
         if (!sessionId.equals(rhs.sessionId)) {
            return false;
         }
      }

      if (setId == null) {
         if (rhs.setId != null) return false;
      }
      else {
         if (!setId.equals(rhs.setId)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (sessionId != null) __code = 31*__code + sessionId.hashCode();
      if (setId != null) __code = 31*__code + setId.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SessionId
    */
   public Asn1Integer getSessionId () {
      return sessionId;
   }

   public void setSessionId (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 65535))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sessionId = value;
   }

   public void setSessionId (long value) 
      throws Asn1Exception
   {
      setSessionId (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SetId
    */
   public SETId getSetId () {
      return setId;
   }

   public void setSetId (SETId value) {
      this.setId = value;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sessionId;
         case 1: return setId;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sessionId";
         case 1: return "setId";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode sessionId

      buffer.getContext().eventDispatcher.startElement("sessionId", -1);

      sessionId = new Asn1Integer();
      sessionId.decode (buffer, 0, 65535);
      buffer.getContext().eventDispatcher.endElement("sessionId", -1);

      // decode setId

      buffer.getContext().eventDispatcher.startElement("setId", -1);

      setId = new SETId();
      setId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("setId", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode sessionId

      if (sessionId != null) {
         buffer.getContext().eventDispatcher.startElement("sessionId", -1);

         sessionId.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("sessionId", -1);
      }
      else throw new Asn1MissingRequiredException ("sessionId");

      // encode setId

      if (setId != null) {
         buffer.getContext().eventDispatcher.startElement("setId", -1);

         setId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("setId", -1);
      }
      else throw new Asn1MissingRequiredException ("setId");

   }

}
