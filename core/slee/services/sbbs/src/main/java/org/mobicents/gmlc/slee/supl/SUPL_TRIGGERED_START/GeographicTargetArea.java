/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_TRIGGERED_START;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.CircularArea;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.EllipticalArea;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.PolygonArea;

public class GeographicTargetArea extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_TRIGGERED_STARTRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_TRIGGERED_STARTRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GeographicTargetArea";
   }

   // Choice element identifier constants
   public final static byte _CIRCULARAREA = 1;
   public final static byte _ELLIPTICALAREA = 2;
   public final static byte _POLYGONAREA = 3;
   public final static byte _EXTELEM1 = 4;

   public GeographicTargetArea () {
      super();
   }

   public GeographicTargetArea (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _CIRCULARAREA: return "circularArea";
      case _ELLIPTICALAREA: return "ellipticalArea";
      case _POLYGONAREA: return "polygonArea";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for circularArea
    */
   public CircularArea getCircularArea () {
      return (choiceID == _CIRCULARAREA) ? (CircularArea)element : null;
   }
   public void setCircularArea (CircularArea value) {
      setElement (_CIRCULARAREA, value);
   }
   public boolean isCircularArea () {
      return (choiceID == _CIRCULARAREA);
   }

   /**
    * Accessor/mutator methods for ellipticalArea
    */
   public EllipticalArea getEllipticalArea () {
      return (choiceID == _ELLIPTICALAREA) ? (EllipticalArea)element : null;
   }
   public void setEllipticalArea (EllipticalArea value) {
      setElement (_ELLIPTICALAREA, value);
   }
   public boolean isEllipticalArea () {
      return (choiceID == _ELLIPTICALAREA);
   }

   /**
    * Accessor/mutator methods for polygonArea
    */
   public PolygonArea getPolygonArea () {
      return (choiceID == _POLYGONAREA) ? (PolygonArea)element : null;
   }
   public void setPolygonArea (PolygonArea value) {
      setElement (_POLYGONAREA, value);
   }
   public boolean isPolygonArea () {
      return (choiceID == _POLYGONAREA);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (3, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // circularArea
            case 0: { 
               CircularArea circularArea;
               element = circularArea = new CircularArea();
               circularArea.decode (buffer);
               break;
            }

            // ellipticalArea
            case 1: { 
               EllipticalArea ellipticalArea;
               element = ellipticalArea = new EllipticalArea();
               ellipticalArea.decode (buffer);
               break;
            }

            // polygonArea
            case 2: { 
               PolygonArea polygonArea;
               element = polygonArea = new PolygonArea();
               polygonArea.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 4;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         setElement (_EXTELEM1, openType);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 3);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 3, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // circularArea
            case _CIRCULARAREA:
               CircularArea circularArea = (CircularArea) element;
               circularArea.encode (buffer);
               break;

            // ellipticalArea
            case _ELLIPTICALAREA:
               EllipticalArea ellipticalArea = (EllipticalArea) element;
               ellipticalArea.encode (buffer);
               break;

            // polygonArea
            case _POLYGONAREA:
               PolygonArea polygonArea = (PolygonArea) element;
               polygonArea.encode (buffer);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 4);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1OpenType openType = (Asn1OpenType) element;
         buffer.byteAlign();
         openType.encode (buffer);
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
