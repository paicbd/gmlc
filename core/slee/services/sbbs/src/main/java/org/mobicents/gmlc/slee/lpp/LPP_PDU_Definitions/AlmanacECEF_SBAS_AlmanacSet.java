/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class AlmanacECEF_SBAS_AlmanacSet extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "AlmanacECEF-SBAS-AlmanacSet";
   }

   protected Asn1Integer sbasAlmDataID;
   protected SV_ID svID;
   protected Asn1BitString sbasAlmHealth;
   protected Asn1Integer sbasAlmXg;
   protected Asn1Integer sbasAlmYg;
   protected Asn1Integer sbasAlmZg;
   protected Asn1Integer sbasAlmXgdot;
   protected Asn1Integer sbasAlmYgDot;
   protected Asn1Integer sbasAlmZgDot;
   protected Asn1Integer sbasAlmTo;
   protected Asn1OpenExt extElem1;

   public AlmanacECEF_SBAS_AlmanacSet () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AlmanacECEF_SBAS_AlmanacSet (
      Asn1Integer sbasAlmDataID_,
      SV_ID svID_,
      Asn1BitString sbasAlmHealth_,
      Asn1Integer sbasAlmXg_,
      Asn1Integer sbasAlmYg_,
      Asn1Integer sbasAlmZg_,
      Asn1Integer sbasAlmXgdot_,
      Asn1Integer sbasAlmYgDot_,
      Asn1Integer sbasAlmZgDot_,
      Asn1Integer sbasAlmTo_
   ) throws Asn1Exception {
      super();
      setSbasAlmDataID (sbasAlmDataID_);
      setSvID (svID_);
      setSbasAlmHealth (sbasAlmHealth_);
      setSbasAlmXg (sbasAlmXg_);
      setSbasAlmYg (sbasAlmYg_);
      setSbasAlmZg (sbasAlmZg_);
      setSbasAlmXgdot (sbasAlmXgdot_);
      setSbasAlmYgDot (sbasAlmYgDot_);
      setSbasAlmZgDot (sbasAlmZgDot_);
      setSbasAlmTo (sbasAlmTo_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AlmanacECEF_SBAS_AlmanacSet (long sbasAlmDataID_,
      SV_ID svID_,
      Asn1BitString sbasAlmHealth_,
      long sbasAlmXg_,
      long sbasAlmYg_,
      long sbasAlmZg_,
      long sbasAlmXgdot_,
      long sbasAlmYgDot_,
      long sbasAlmZgDot_,
      long sbasAlmTo_
   ) throws Asn1Exception {
      super();
      setSbasAlmDataID (sbasAlmDataID_);
      setSvID (svID_);
      setSbasAlmHealth (sbasAlmHealth_);
      setSbasAlmXg (sbasAlmXg_);
      setSbasAlmYg (sbasAlmYg_);
      setSbasAlmZg (sbasAlmZg_);
      setSbasAlmXgdot (sbasAlmXgdot_);
      setSbasAlmYgDot (sbasAlmYgDot_);
      setSbasAlmZgDot (sbasAlmZgDot_);
      setSbasAlmTo (sbasAlmTo_);
   }

   public void init () {
      sbasAlmDataID = null;
      svID = null;
      sbasAlmHealth = null;
      sbasAlmXg = null;
      sbasAlmYg = null;
      sbasAlmZg = null;
      sbasAlmXgdot = null;
      sbasAlmYgDot = null;
      sbasAlmZgDot = null;
      sbasAlmTo = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof AlmanacECEF_SBAS_AlmanacSet) ) return false;

      AlmanacECEF_SBAS_AlmanacSet rhs = (AlmanacECEF_SBAS_AlmanacSet) obj;

      if (sbasAlmDataID == null) {
         if (rhs.sbasAlmDataID != null) return false;
      }
      else {
         if (!sbasAlmDataID.equals(rhs.sbasAlmDataID)) {
            return false;
         }
      }

      if (svID == null) {
         if (rhs.svID != null) return false;
      }
      else {
         if (!svID.equals(rhs.svID)) {
            return false;
         }
      }

      if (sbasAlmHealth == null) {
         if (rhs.sbasAlmHealth != null) return false;
      }
      else {
         if (!sbasAlmHealth.equals(rhs.sbasAlmHealth)) {
            return false;
         }
      }

      if (sbasAlmXg == null) {
         if (rhs.sbasAlmXg != null) return false;
      }
      else {
         if (!sbasAlmXg.equals(rhs.sbasAlmXg)) {
            return false;
         }
      }

      if (sbasAlmYg == null) {
         if (rhs.sbasAlmYg != null) return false;
      }
      else {
         if (!sbasAlmYg.equals(rhs.sbasAlmYg)) {
            return false;
         }
      }

      if (sbasAlmZg == null) {
         if (rhs.sbasAlmZg != null) return false;
      }
      else {
         if (!sbasAlmZg.equals(rhs.sbasAlmZg)) {
            return false;
         }
      }

      if (sbasAlmXgdot == null) {
         if (rhs.sbasAlmXgdot != null) return false;
      }
      else {
         if (!sbasAlmXgdot.equals(rhs.sbasAlmXgdot)) {
            return false;
         }
      }

      if (sbasAlmYgDot == null) {
         if (rhs.sbasAlmYgDot != null) return false;
      }
      else {
         if (!sbasAlmYgDot.equals(rhs.sbasAlmYgDot)) {
            return false;
         }
      }

      if (sbasAlmZgDot == null) {
         if (rhs.sbasAlmZgDot != null) return false;
      }
      else {
         if (!sbasAlmZgDot.equals(rhs.sbasAlmZgDot)) {
            return false;
         }
      }

      if (sbasAlmTo == null) {
         if (rhs.sbasAlmTo != null) return false;
      }
      else {
         if (!sbasAlmTo.equals(rhs.sbasAlmTo)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (sbasAlmDataID != null) __code = 31*__code + sbasAlmDataID.hashCode();
      if (svID != null) __code = 31*__code + svID.hashCode();
      if (sbasAlmHealth != null) __code = 31*__code + sbasAlmHealth.hashCode();
      if (sbasAlmXg != null) __code = 31*__code + sbasAlmXg.hashCode();
      if (sbasAlmYg != null) __code = 31*__code + sbasAlmYg.hashCode();
      if (sbasAlmZg != null) __code = 31*__code + sbasAlmZg.hashCode();
      if (sbasAlmXgdot != null) __code = 31*__code + sbasAlmXgdot.hashCode();
      if (sbasAlmYgDot != null) __code = 31*__code + sbasAlmYgDot.hashCode();
      if (sbasAlmZgDot != null) __code = 31*__code + sbasAlmZgDot.hashCode();
      if (sbasAlmTo != null) __code = 31*__code + sbasAlmTo.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SbasAlmDataID
    */
   public Asn1Integer getSbasAlmDataID () {
      return sbasAlmDataID;
   }

   public void setSbasAlmDataID (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 3))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sbasAlmDataID = value;
   }

   public void setSbasAlmDataID (long value) 
      throws Asn1Exception
   {
      setSbasAlmDataID (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SvID
    */
   public SV_ID getSvID () {
      return svID;
   }

   public void setSvID (SV_ID value) {
      this.svID = value;
   }

   /**
    * Accessor/mutator methods for SbasAlmHealth
    */
   public Asn1BitString getSbasAlmHealth () {
      return sbasAlmHealth;
   }

   public void setSbasAlmHealth (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 8)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.sbasAlmHealth = value;
   }

   /**
    * Accessor/mutator methods for SbasAlmXg
    */
   public Asn1Integer getSbasAlmXg () {
      return sbasAlmXg;
   }

   public void setSbasAlmXg (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -16384 && value.value <= 16383))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sbasAlmXg = value;
   }

   public void setSbasAlmXg (long value) 
      throws Asn1Exception
   {
      setSbasAlmXg (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SbasAlmYg
    */
   public Asn1Integer getSbasAlmYg () {
      return sbasAlmYg;
   }

   public void setSbasAlmYg (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -16384 && value.value <= 16383))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sbasAlmYg = value;
   }

   public void setSbasAlmYg (long value) 
      throws Asn1Exception
   {
      setSbasAlmYg (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SbasAlmZg
    */
   public Asn1Integer getSbasAlmZg () {
      return sbasAlmZg;
   }

   public void setSbasAlmZg (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -256 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sbasAlmZg = value;
   }

   public void setSbasAlmZg (long value) 
      throws Asn1Exception
   {
      setSbasAlmZg (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SbasAlmXgdot
    */
   public Asn1Integer getSbasAlmXgdot () {
      return sbasAlmXgdot;
   }

   public void setSbasAlmXgdot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -4 && value.value <= 3))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sbasAlmXgdot = value;
   }

   public void setSbasAlmXgdot (long value) 
      throws Asn1Exception
   {
      setSbasAlmXgdot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SbasAlmYgDot
    */
   public Asn1Integer getSbasAlmYgDot () {
      return sbasAlmYgDot;
   }

   public void setSbasAlmYgDot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -4 && value.value <= 3))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sbasAlmYgDot = value;
   }

   public void setSbasAlmYgDot (long value) 
      throws Asn1Exception
   {
      setSbasAlmYgDot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SbasAlmZgDot
    */
   public Asn1Integer getSbasAlmZgDot () {
      return sbasAlmZgDot;
   }

   public void setSbasAlmZgDot (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8 && value.value <= 7))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sbasAlmZgDot = value;
   }

   public void setSbasAlmZgDot (long value) 
      throws Asn1Exception
   {
      setSbasAlmZgDot (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for SbasAlmTo
    */
   public Asn1Integer getSbasAlmTo () {
      return sbasAlmTo;
   }

   public void setSbasAlmTo (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 2047))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.sbasAlmTo = value;
   }

   public void setSbasAlmTo (long value) 
      throws Asn1Exception
   {
      setSbasAlmTo (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 11; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sbasAlmDataID;
         case 1: return svID;
         case 2: return sbasAlmHealth;
         case 3: return sbasAlmXg;
         case 4: return sbasAlmYg;
         case 5: return sbasAlmZg;
         case 6: return sbasAlmXgdot;
         case 7: return sbasAlmYgDot;
         case 8: return sbasAlmZgDot;
         case 9: return sbasAlmTo;
         case 10: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sbasAlmDataID";
         case 1: return "svID";
         case 2: return "sbasAlmHealth";
         case 3: return "sbasAlmXg";
         case 4: return "sbasAlmYg";
         case 5: return "sbasAlmZg";
         case 6: return "sbasAlmXgdot";
         case 7: return "sbasAlmYgDot";
         case 8: return "sbasAlmZgDot";
         case 9: return "sbasAlmTo";
         case 10: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode sbasAlmDataID

      buffer.getContext().eventDispatcher.startElement("sbasAlmDataID", -1);

      sbasAlmDataID = new Asn1Integer();
      sbasAlmDataID.decode (buffer, 0, 3);
      buffer.getContext().eventDispatcher.endElement("sbasAlmDataID", -1);

      // decode svID

      buffer.getContext().eventDispatcher.startElement("svID", -1);

      svID = new SV_ID();
      svID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("svID", -1);

      // decode sbasAlmHealth

      buffer.getContext().eventDispatcher.startElement("sbasAlmHealth", -1);

      sbasAlmHealth = new Asn1BitString();
      sbasAlmHealth.decode (buffer, 8, 8);
      buffer.getContext().eventDispatcher.endElement("sbasAlmHealth", -1);

      // decode sbasAlmXg

      buffer.getContext().eventDispatcher.startElement("sbasAlmXg", -1);

      sbasAlmXg = new Asn1Integer();
      sbasAlmXg.decode (buffer, -16384, 16383);
      buffer.getContext().eventDispatcher.endElement("sbasAlmXg", -1);

      // decode sbasAlmYg

      buffer.getContext().eventDispatcher.startElement("sbasAlmYg", -1);

      sbasAlmYg = new Asn1Integer();
      sbasAlmYg.decode (buffer, -16384, 16383);
      buffer.getContext().eventDispatcher.endElement("sbasAlmYg", -1);

      // decode sbasAlmZg

      buffer.getContext().eventDispatcher.startElement("sbasAlmZg", -1);

      sbasAlmZg = new Asn1Integer();
      sbasAlmZg.decode (buffer, -256, 255);
      buffer.getContext().eventDispatcher.endElement("sbasAlmZg", -1);

      // decode sbasAlmXgdot

      buffer.getContext().eventDispatcher.startElement("sbasAlmXgdot", -1);

      sbasAlmXgdot = new Asn1Integer();
      sbasAlmXgdot.decode (buffer, -4, 3);
      buffer.getContext().eventDispatcher.endElement("sbasAlmXgdot", -1);

      // decode sbasAlmYgDot

      buffer.getContext().eventDispatcher.startElement("sbasAlmYgDot", -1);

      sbasAlmYgDot = new Asn1Integer();
      sbasAlmYgDot.decode (buffer, -4, 3);
      buffer.getContext().eventDispatcher.endElement("sbasAlmYgDot", -1);

      // decode sbasAlmZgDot

      buffer.getContext().eventDispatcher.startElement("sbasAlmZgDot", -1);

      sbasAlmZgDot = new Asn1Integer();
      sbasAlmZgDot.decode (buffer, -8, 7);
      buffer.getContext().eventDispatcher.endElement("sbasAlmZgDot", -1);

      // decode sbasAlmTo

      buffer.getContext().eventDispatcher.startElement("sbasAlmTo", -1);

      sbasAlmTo = new Asn1Integer();
      sbasAlmTo.decode (buffer, 0, 2047);
      buffer.getContext().eventDispatcher.endElement("sbasAlmTo", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode sbasAlmDataID

      if (sbasAlmDataID != null) {
         buffer.getContext().eventDispatcher.startElement("sbasAlmDataID", -1);

         sbasAlmDataID.encode (buffer, 0, 3);

         buffer.getContext().eventDispatcher.endElement("sbasAlmDataID", -1);
      }
      else throw new Asn1MissingRequiredException ("sbasAlmDataID");

      // encode svID

      if (svID != null) {
         buffer.getContext().eventDispatcher.startElement("svID", -1);

         svID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("svID", -1);
      }
      else throw new Asn1MissingRequiredException ("svID");

      // encode sbasAlmHealth

      if (sbasAlmHealth != null) {
         buffer.getContext().eventDispatcher.startElement("sbasAlmHealth", -1);

         sbasAlmHealth.encode (buffer, 8, 8);

         buffer.getContext().eventDispatcher.endElement("sbasAlmHealth", -1);
      }
      else throw new Asn1MissingRequiredException ("sbasAlmHealth");

      // encode sbasAlmXg

      if (sbasAlmXg != null) {
         buffer.getContext().eventDispatcher.startElement("sbasAlmXg", -1);

         sbasAlmXg.encode (buffer, -16384, 16383);

         buffer.getContext().eventDispatcher.endElement("sbasAlmXg", -1);
      }
      else throw new Asn1MissingRequiredException ("sbasAlmXg");

      // encode sbasAlmYg

      if (sbasAlmYg != null) {
         buffer.getContext().eventDispatcher.startElement("sbasAlmYg", -1);

         sbasAlmYg.encode (buffer, -16384, 16383);

         buffer.getContext().eventDispatcher.endElement("sbasAlmYg", -1);
      }
      else throw new Asn1MissingRequiredException ("sbasAlmYg");

      // encode sbasAlmZg

      if (sbasAlmZg != null) {
         buffer.getContext().eventDispatcher.startElement("sbasAlmZg", -1);

         sbasAlmZg.encode (buffer, -256, 255);

         buffer.getContext().eventDispatcher.endElement("sbasAlmZg", -1);
      }
      else throw new Asn1MissingRequiredException ("sbasAlmZg");

      // encode sbasAlmXgdot

      if (sbasAlmXgdot != null) {
         buffer.getContext().eventDispatcher.startElement("sbasAlmXgdot", -1);

         sbasAlmXgdot.encode (buffer, -4, 3);

         buffer.getContext().eventDispatcher.endElement("sbasAlmXgdot", -1);
      }
      else throw new Asn1MissingRequiredException ("sbasAlmXgdot");

      // encode sbasAlmYgDot

      if (sbasAlmYgDot != null) {
         buffer.getContext().eventDispatcher.startElement("sbasAlmYgDot", -1);

         sbasAlmYgDot.encode (buffer, -4, 3);

         buffer.getContext().eventDispatcher.endElement("sbasAlmYgDot", -1);
      }
      else throw new Asn1MissingRequiredException ("sbasAlmYgDot");

      // encode sbasAlmZgDot

      if (sbasAlmZgDot != null) {
         buffer.getContext().eventDispatcher.startElement("sbasAlmZgDot", -1);

         sbasAlmZgDot.encode (buffer, -8, 7);

         buffer.getContext().eventDispatcher.endElement("sbasAlmZgDot", -1);
      }
      else throw new Asn1MissingRequiredException ("sbasAlmZgDot");

      // encode sbasAlmTo

      if (sbasAlmTo != null) {
         buffer.getContext().eventDispatcher.startElement("sbasAlmTo", -1);

         sbasAlmTo.encode (buffer, 0, 2047);

         buffer.getContext().eventDispatcher.endElement("sbasAlmTo", -1);
      }
      else throw new Asn1MissingRequiredException ("sbasAlmTo");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
