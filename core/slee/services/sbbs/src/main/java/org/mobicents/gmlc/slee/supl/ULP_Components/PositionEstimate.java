/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Components;

import com.objsys.asn1j.runtime.*;

public class PositionEstimate extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "PositionEstimate";
   }

   protected PositionEstimate_latitudeSign latitudeSign = null;
   protected Asn1Integer latitude;
   protected Asn1Integer longitude;
   protected PositionEstimate_uncertainty uncertainty;  // optional
   protected Asn1Integer confidence;  // optional
   protected AltitudeInfo altitudeInfo;  // optional
   protected Asn1OpenExt extElem1;

   public PositionEstimate () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PositionEstimate (
      PositionEstimate_latitudeSign latitudeSign_,
      Asn1Integer latitude_,
      Asn1Integer longitude_,
      PositionEstimate_uncertainty uncertainty_,
      Asn1Integer confidence_,
      AltitudeInfo altitudeInfo_
   ) throws Asn1Exception {
      super();
      setLatitudeSign (latitudeSign_);
      setLatitude (latitude_);
      setLongitude (longitude_);
      setUncertainty (uncertainty_);
      setConfidence (confidence_);
      setAltitudeInfo (altitudeInfo_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PositionEstimate (
      PositionEstimate_latitudeSign latitudeSign_,
      Asn1Integer latitude_,
      Asn1Integer longitude_
   ) throws Asn1Exception {
      super();
      setLatitudeSign (latitudeSign_);
      setLatitude (latitude_);
      setLongitude (longitude_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PositionEstimate (PositionEstimate_latitudeSign latitudeSign_,
      long latitude_,
      long longitude_,
      PositionEstimate_uncertainty uncertainty_,
      long confidence_,
      AltitudeInfo altitudeInfo_
   ) throws Asn1Exception {
      super();
      setLatitudeSign (latitudeSign_);
      setLatitude (latitude_);
      setLongitude (longitude_);
      setUncertainty (uncertainty_);
      setConfidence (confidence_);
      setAltitudeInfo (altitudeInfo_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public PositionEstimate (
      PositionEstimate_latitudeSign latitudeSign_,
      long latitude_,
      long longitude_
   ) throws Asn1Exception {
      super();
      setLatitudeSign (latitudeSign_);
      setLatitude (latitude_);
      setLongitude (longitude_);
   }

   public void init () {
      latitudeSign = null;
      latitude = null;
      longitude = null;
      uncertainty = null;
      confidence = null;
      altitudeInfo = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof PositionEstimate) ) return false;

      PositionEstimate rhs = (PositionEstimate) obj;

      if (latitudeSign == null) {
         if (rhs.latitudeSign != null) return false;
      }
      else {
         if (!latitudeSign.equals(rhs.latitudeSign)) {
            return false;
         }
      }

      if (latitude == null) {
         if (rhs.latitude != null) return false;
      }
      else {
         if (!latitude.equals(rhs.latitude)) {
            return false;
         }
      }

      if (longitude == null) {
         if (rhs.longitude != null) return false;
      }
      else {
         if (!longitude.equals(rhs.longitude)) {
            return false;
         }
      }

      if (uncertainty == null) {
         if (rhs.uncertainty != null) return false;
      }
      else {
         if (!uncertainty.equals(rhs.uncertainty)) {
            return false;
         }
      }

      if (confidence == null) {
         if (rhs.confidence != null) return false;
      }
      else {
         if (!confidence.equals(rhs.confidence)) {
            return false;
         }
      }

      if (altitudeInfo == null) {
         if (rhs.altitudeInfo != null) return false;
      }
      else {
         if (!altitudeInfo.equals(rhs.altitudeInfo)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (latitudeSign != null) __code = 31*__code + latitudeSign.hashCode();
      if (latitude != null) __code = 31*__code + latitude.hashCode();
      if (longitude != null) __code = 31*__code + longitude.hashCode();
      if (uncertainty != null) __code = 31*__code + uncertainty.hashCode();
      if (confidence != null) __code = 31*__code + confidence.hashCode();
      if (altitudeInfo != null) __code = 31*__code + altitudeInfo.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for LatitudeSign
    */
   public PositionEstimate_latitudeSign getLatitudeSign () {
      return latitudeSign;
   }

   public void setLatitudeSign (PositionEstimate_latitudeSign value) {
      this.latitudeSign = value;
   }

   /**
    * Accessor/mutator methods for Latitude
    */
   public Asn1Integer getLatitude () {
      return latitude;
   }

   public void setLatitude (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.latitude = value;
   }

   public void setLatitude (long value) 
      throws Asn1Exception
   {
      setLatitude (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Longitude
    */
   public Asn1Integer getLongitude () {
      return longitude;
   }

   public void setLongitude (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -8388608 && value.value <= 8388607))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.longitude = value;
   }

   public void setLongitude (long value) 
      throws Asn1Exception
   {
      setLongitude (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Uncertainty
    */
   public PositionEstimate_uncertainty getUncertainty () {
      return uncertainty;
   }

   public void setUncertainty (PositionEstimate_uncertainty value) {
      this.uncertainty = value;
   }

   public boolean hasUncertainty () {
      return (uncertainty != null);
   }

   /**
    * Accessor/mutator methods for Confidence
    */
   public Asn1Integer getConfidence () {
      return confidence;
   }

   public void setConfidence (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 100))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.confidence = value;
   }

   public void setConfidence (long value) 
      throws Asn1Exception
   {
      setConfidence (new Asn1Integer(value));
   }
   public boolean hasConfidence () {
      return (confidence != null);
   }

   /**
    * Accessor/mutator methods for AltitudeInfo
    */
   public AltitudeInfo getAltitudeInfo () {
      return altitudeInfo;
   }

   public void setAltitudeInfo (AltitudeInfo value) {
      this.altitudeInfo = value;
   }

   public boolean hasAltitudeInfo () {
      return (altitudeInfo != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return latitudeSign;
         case 1: return latitude;
         case 2: return longitude;
         case 3: return uncertainty;
         case 4: return confidence;
         case 5: return altitudeInfo;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "latitudeSign";
         case 1: return "latitude";
         case 2: return "longitude";
         case 3: return "uncertainty";
         case 4: return "confidence";
         case 5: return "altitudeInfo";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean uncertaintyPresent = buffer.decodeBit ("uncertaintyPresent");
      boolean confidencePresent = buffer.decodeBit ("confidencePresent");
      boolean altitudeInfoPresent = buffer.decodeBit ("altitudeInfoPresent");

      // decode latitudeSign

      buffer.getContext().eventDispatcher.startElement("latitudeSign", -1);

      {
         int tval = PositionEstimate_latitudeSign.decodeEnumValue (buffer);
         latitudeSign = PositionEstimate_latitudeSign.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("latitudeSign", -1);

      // decode latitude

      buffer.getContext().eventDispatcher.startElement("latitude", -1);

      latitude = new Asn1Integer();
      latitude.decode (buffer, 0, 8388607);
      buffer.getContext().eventDispatcher.endElement("latitude", -1);

      // decode longitude

      buffer.getContext().eventDispatcher.startElement("longitude", -1);

      longitude = new Asn1Integer();
      longitude.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("longitude", -1);

      // decode uncertainty

      if (uncertaintyPresent) {
         buffer.getContext().eventDispatcher.startElement("uncertainty", -1);

         uncertainty = new PositionEstimate_uncertainty();
         uncertainty.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("uncertainty", -1);
      }
      else {
         uncertainty = null;
      }

      // decode confidence

      if (confidencePresent) {
         buffer.getContext().eventDispatcher.startElement("confidence", -1);

         confidence = new Asn1Integer();
         confidence.decode (buffer, 0, 100);
         buffer.getContext().eventDispatcher.endElement("confidence", -1);
      }
      else {
         confidence = null;
      }

      // decode altitudeInfo

      if (altitudeInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("altitudeInfo", -1);

         altitudeInfo = new AltitudeInfo();
         altitudeInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("altitudeInfo", -1);
      }
      else {
         altitudeInfo = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((uncertainty != null), null);
      buffer.encodeBit ((confidence != null), null);
      buffer.encodeBit ((altitudeInfo != null), null);

      // encode latitudeSign

      if (latitudeSign != null) {
         buffer.getContext().eventDispatcher.startElement("latitudeSign", -1);

         latitudeSign.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("latitudeSign", -1);
      }
      else throw new Asn1MissingRequiredException ("latitudeSign");

      // encode latitude

      if (latitude != null) {
         buffer.getContext().eventDispatcher.startElement("latitude", -1);

         latitude.encode (buffer, 0, 8388607);

         buffer.getContext().eventDispatcher.endElement("latitude", -1);
      }
      else throw new Asn1MissingRequiredException ("latitude");

      // encode longitude

      if (longitude != null) {
         buffer.getContext().eventDispatcher.startElement("longitude", -1);

         longitude.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("longitude", -1);
      }
      else throw new Asn1MissingRequiredException ("longitude");

      // encode uncertainty

      if (uncertainty != null) {
         buffer.getContext().eventDispatcher.startElement("uncertainty", -1);

         uncertainty.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("uncertainty", -1);
      }

      // encode confidence

      if (confidence != null) {
         buffer.getContext().eventDispatcher.startElement("confidence", -1);

         confidence.encode (buffer, 0, 100);

         buffer.getContext().eventDispatcher.endElement("confidence", -1);
      }

      // encode altitudeInfo

      if (altitudeInfo != null) {
         buffer.getContext().eventDispatcher.startElement("altitudeInfo", -1);

         altitudeInfo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("altitudeInfo", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
