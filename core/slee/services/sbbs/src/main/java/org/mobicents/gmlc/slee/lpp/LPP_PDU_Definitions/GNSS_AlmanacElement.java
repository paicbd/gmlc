/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_AlmanacElement extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-AlmanacElement";
   }

   // Choice element identifier constants
   public final static byte _KEPLERIANALMANACSET = 1;
   public final static byte _KEPLERIANNAV_ALMANAC = 2;
   public final static byte _KEPLERIANREDUCEDALMANAC = 3;
   public final static byte _KEPLERIANMIDIALMANAC = 4;
   public final static byte _KEPLERIANGLONASS = 5;
   public final static byte _ECEF_SBAS_ALMANAC = 6;
   public final static byte _KEPLERIANBDS_ALMANAC_R12 = 7;
   public final static byte _KEPLERIANNAVIC_ALMANAC_R16 = 8;
   public final static byte _EXTELEM1 = 9;

   public GNSS_AlmanacElement () {
      super();
   }

   public GNSS_AlmanacElement (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _KEPLERIANALMANACSET: return "keplerianAlmanacSet";
      case _KEPLERIANNAV_ALMANAC: return "keplerianNAV_Almanac";
      case _KEPLERIANREDUCEDALMANAC: return "keplerianReducedAlmanac";
      case _KEPLERIANMIDIALMANAC: return "keplerianMidiAlmanac";
      case _KEPLERIANGLONASS: return "keplerianGLONASS";
      case _ECEF_SBAS_ALMANAC: return "ecef_SBAS_Almanac";
      case _KEPLERIANBDS_ALMANAC_R12: return "keplerianBDS_Almanac_r12";
      case _KEPLERIANNAVIC_ALMANAC_R16: return "keplerianNavIC_Almanac_r16";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for keplerianAlmanacSet
    */
   public AlmanacKeplerianSet getKeplerianAlmanacSet () {
      return (choiceID == _KEPLERIANALMANACSET) ? (AlmanacKeplerianSet)element : null;
   }
   public void setKeplerianAlmanacSet (AlmanacKeplerianSet value) {
      setElement (_KEPLERIANALMANACSET, value);
   }
   public boolean isKeplerianAlmanacSet () {
      return (choiceID == _KEPLERIANALMANACSET);
   }

   /**
    * Accessor/mutator methods for keplerianNAV_Almanac
    */
   public AlmanacNAV_KeplerianSet getKeplerianNAV_Almanac () {
      return (choiceID == _KEPLERIANNAV_ALMANAC) ? (AlmanacNAV_KeplerianSet)element : null;
   }
   public void setKeplerianNAV_Almanac (AlmanacNAV_KeplerianSet value) {
      setElement (_KEPLERIANNAV_ALMANAC, value);
   }
   public boolean isKeplerianNAV_Almanac () {
      return (choiceID == _KEPLERIANNAV_ALMANAC);
   }

   /**
    * Accessor/mutator methods for keplerianReducedAlmanac
    */
   public AlmanacReducedKeplerianSet getKeplerianReducedAlmanac () {
      return (choiceID == _KEPLERIANREDUCEDALMANAC) ? (AlmanacReducedKeplerianSet)element : null;
   }
   public void setKeplerianReducedAlmanac (AlmanacReducedKeplerianSet value) {
      setElement (_KEPLERIANREDUCEDALMANAC, value);
   }
   public boolean isKeplerianReducedAlmanac () {
      return (choiceID == _KEPLERIANREDUCEDALMANAC);
   }

   /**
    * Accessor/mutator methods for keplerianMidiAlmanac
    */
   public AlmanacMidiAlmanacSet getKeplerianMidiAlmanac () {
      return (choiceID == _KEPLERIANMIDIALMANAC) ? (AlmanacMidiAlmanacSet)element : null;
   }
   public void setKeplerianMidiAlmanac (AlmanacMidiAlmanacSet value) {
      setElement (_KEPLERIANMIDIALMANAC, value);
   }
   public boolean isKeplerianMidiAlmanac () {
      return (choiceID == _KEPLERIANMIDIALMANAC);
   }

   /**
    * Accessor/mutator methods for keplerianGLONASS
    */
   public AlmanacGLONASS_AlmanacSet getKeplerianGLONASS () {
      return (choiceID == _KEPLERIANGLONASS) ? (AlmanacGLONASS_AlmanacSet)element : null;
   }
   public void setKeplerianGLONASS (AlmanacGLONASS_AlmanacSet value) {
      setElement (_KEPLERIANGLONASS, value);
   }
   public boolean isKeplerianGLONASS () {
      return (choiceID == _KEPLERIANGLONASS);
   }

   /**
    * Accessor/mutator methods for ecef_SBAS_Almanac
    */
   public AlmanacECEF_SBAS_AlmanacSet getEcef_SBAS_Almanac () {
      return (choiceID == _ECEF_SBAS_ALMANAC) ? (AlmanacECEF_SBAS_AlmanacSet)element : null;
   }
   public void setEcef_SBAS_Almanac (AlmanacECEF_SBAS_AlmanacSet value) {
      setElement (_ECEF_SBAS_ALMANAC, value);
   }
   public boolean isEcef_SBAS_Almanac () {
      return (choiceID == _ECEF_SBAS_ALMANAC);
   }

   /**
    * Accessor/mutator methods for keplerianBDS_Almanac_r12
    */
   public AlmanacBDS_AlmanacSet_r12 getKeplerianBDS_Almanac_r12 () {
      return (choiceID == _KEPLERIANBDS_ALMANAC_R12) ? (AlmanacBDS_AlmanacSet_r12)element : null;
   }
   public void setKeplerianBDS_Almanac_r12 (AlmanacBDS_AlmanacSet_r12 value) {
      setElement (_KEPLERIANBDS_ALMANAC_R12, value);
   }
   public boolean isKeplerianBDS_Almanac_r12 () {
      return (choiceID == _KEPLERIANBDS_ALMANAC_R12);
   }

   /**
    * Accessor/mutator methods for keplerianNavIC_Almanac_r16
    */
   public AlmanacNavIC_AlmanacSet_r16 getKeplerianNavIC_Almanac_r16 () {
      return (choiceID == _KEPLERIANNAVIC_ALMANAC_R16) ? (AlmanacNavIC_AlmanacSet_r16)element : null;
   }
   public void setKeplerianNavIC_Almanac_r16 (AlmanacNavIC_AlmanacSet_r16 value) {
      setElement (_KEPLERIANNAVIC_ALMANAC_R16, value);
   }
   public boolean isKeplerianNavIC_Almanac_r16 () {
      return (choiceID == _KEPLERIANNAVIC_ALMANAC_R16);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (6, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // keplerianAlmanacSet
            case 0: { 
               AlmanacKeplerianSet keplerianAlmanacSet;
               element = keplerianAlmanacSet = new AlmanacKeplerianSet();
               keplerianAlmanacSet.decode (buffer);
               break;
            }

            // keplerianNAV_Almanac
            case 1: { 
               AlmanacNAV_KeplerianSet keplerianNAV_Almanac;
               element = keplerianNAV_Almanac = new AlmanacNAV_KeplerianSet();
               keplerianNAV_Almanac.decode (buffer);
               break;
            }

            // keplerianReducedAlmanac
            case 2: { 
               AlmanacReducedKeplerianSet keplerianReducedAlmanac;
               element = keplerianReducedAlmanac = new AlmanacReducedKeplerianSet();
               keplerianReducedAlmanac.decode (buffer);
               break;
            }

            // keplerianMidiAlmanac
            case 3: { 
               AlmanacMidiAlmanacSet keplerianMidiAlmanac;
               element = keplerianMidiAlmanac = new AlmanacMidiAlmanacSet();
               keplerianMidiAlmanac.decode (buffer);
               break;
            }

            // keplerianGLONASS
            case 4: { 
               AlmanacGLONASS_AlmanacSet keplerianGLONASS;
               element = keplerianGLONASS = new AlmanacGLONASS_AlmanacSet();
               keplerianGLONASS.decode (buffer);
               break;
            }

            // ecef_SBAS_Almanac
            case 5: { 
               AlmanacECEF_SBAS_AlmanacSet ecef_SBAS_Almanac;
               element = ecef_SBAS_Almanac = new AlmanacECEF_SBAS_AlmanacSet();
               ecef_SBAS_Almanac.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 7;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // keplerianBDS_Almanac_r12
            case 0: { 
               AlmanacBDS_AlmanacSet_r12 keplerianBDS_Almanac_r12;
               element = keplerianBDS_Almanac_r12 = new AlmanacBDS_AlmanacSet_r12();
               keplerianBDS_Almanac_r12.decode (buffer);
               break;
            }

            // keplerianNavIC_Almanac_r16
            case 1: { 
               AlmanacNavIC_AlmanacSet_r16 keplerianNavIC_Almanac_r16;
               element = keplerianNavIC_Almanac_r16 = new AlmanacNavIC_AlmanacSet_r16();
               keplerianNavIC_Almanac_r16.decode (buffer);
               break;
            }

            // extElem1
            case 2: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 6);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 6, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // keplerianAlmanacSet
            case _KEPLERIANALMANACSET:
               AlmanacKeplerianSet keplerianAlmanacSet = (AlmanacKeplerianSet) element;
               keplerianAlmanacSet.encode (buffer);
               break;

            // keplerianNAV_Almanac
            case _KEPLERIANNAV_ALMANAC:
               AlmanacNAV_KeplerianSet keplerianNAV_Almanac = (AlmanacNAV_KeplerianSet) element;
               keplerianNAV_Almanac.encode (buffer);
               break;

            // keplerianReducedAlmanac
            case _KEPLERIANREDUCEDALMANAC:
               AlmanacReducedKeplerianSet keplerianReducedAlmanac = (AlmanacReducedKeplerianSet) element;
               keplerianReducedAlmanac.encode (buffer);
               break;

            // keplerianMidiAlmanac
            case _KEPLERIANMIDIALMANAC:
               AlmanacMidiAlmanacSet keplerianMidiAlmanac = (AlmanacMidiAlmanacSet) element;
               keplerianMidiAlmanac.encode (buffer);
               break;

            // keplerianGLONASS
            case _KEPLERIANGLONASS:
               AlmanacGLONASS_AlmanacSet keplerianGLONASS = (AlmanacGLONASS_AlmanacSet) element;
               keplerianGLONASS.encode (buffer);
               break;

            // ecef_SBAS_Almanac
            case _ECEF_SBAS_ALMANAC:
               AlmanacECEF_SBAS_AlmanacSet ecef_SBAS_Almanac = (AlmanacECEF_SBAS_AlmanacSet) element;
               ecef_SBAS_Almanac.encode (buffer);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 7);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1PerEncodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());
         Asn1OpenType openType;

         switch (choiceID) {
            // keplerianBDS_Almanac_r12
            case _KEPLERIANBDS_ALMANAC_R12:
               AlmanacBDS_AlmanacSet_r12 keplerianBDS_Almanac_r12 = (AlmanacBDS_AlmanacSet_r12) element;
               keplerianBDS_Almanac_r12.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            // keplerianNavIC_Almanac_r16
            case _KEPLERIANNAVIC_ALMANAC_R16:
               AlmanacNavIC_AlmanacSet_r16 keplerianNavIC_Almanac_r16 = (AlmanacNavIC_AlmanacSet_r16) element;
               keplerianNavIC_Almanac_r16.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            default:
               openType = (Asn1OpenType)getElement();
         }

         buffer = savedBuffer;
         if (openType != null) {
            buffer.byteAlign();
            openType.encode (buffer);
         }
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
