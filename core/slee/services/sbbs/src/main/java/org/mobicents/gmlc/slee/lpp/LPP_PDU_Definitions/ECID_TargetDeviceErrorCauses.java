/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class ECID_TargetDeviceErrorCauses extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ECID-TargetDeviceErrorCauses";
   }

   protected ECID_TargetDeviceErrorCauses_cause cause = null;
   protected Asn1Null rsrpMeasurementNotPossible;  // optional
   protected Asn1Null rsrqMeasurementNotPossible;  // optional
   protected Asn1Null ueRxTxMeasurementNotPossible;  // optional
   protected Asn1Null nrsrpMeasurementNotPossible_r14;  // optional
   protected Asn1Null nrsrqMeasurementNotPossible_r14;  // optional
   protected Asn1OpenExt extElem1;

   public ECID_TargetDeviceErrorCauses () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ECID_TargetDeviceErrorCauses (
      ECID_TargetDeviceErrorCauses_cause cause_,
      Asn1Null rsrpMeasurementNotPossible_,
      Asn1Null rsrqMeasurementNotPossible_,
      Asn1Null ueRxTxMeasurementNotPossible_,
      Asn1Null nrsrpMeasurementNotPossible_r14_,
      Asn1Null nrsrqMeasurementNotPossible_r14_
   ) {
      super();
      setCause (cause_);
      setRsrpMeasurementNotPossible (rsrpMeasurementNotPossible_);
      setRsrqMeasurementNotPossible (rsrqMeasurementNotPossible_);
      setUeRxTxMeasurementNotPossible (ueRxTxMeasurementNotPossible_);
      setNrsrpMeasurementNotPossible_r14 (nrsrpMeasurementNotPossible_r14_);
      setNrsrqMeasurementNotPossible_r14 (nrsrqMeasurementNotPossible_r14_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ECID_TargetDeviceErrorCauses (
      ECID_TargetDeviceErrorCauses_cause cause_
   ) {
      super();
      setCause (cause_);
   }

   public void init () {
      cause = null;
      rsrpMeasurementNotPossible = null;
      rsrqMeasurementNotPossible = null;
      ueRxTxMeasurementNotPossible = null;
      nrsrpMeasurementNotPossible_r14 = null;
      nrsrqMeasurementNotPossible_r14 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof ECID_TargetDeviceErrorCauses) ) return false;

      ECID_TargetDeviceErrorCauses rhs = (ECID_TargetDeviceErrorCauses) obj;

      if (cause == null) {
         if (rhs.cause != null) return false;
      }
      else {
         if (!cause.equals(rhs.cause)) {
            return false;
         }
      }

      if (rsrpMeasurementNotPossible == null) {
         if (rhs.rsrpMeasurementNotPossible != null) return false;
      }
      else {
         if (!rsrpMeasurementNotPossible.equals(rhs.rsrpMeasurementNotPossible)) {
            return false;
         }
      }

      if (rsrqMeasurementNotPossible == null) {
         if (rhs.rsrqMeasurementNotPossible != null) return false;
      }
      else {
         if (!rsrqMeasurementNotPossible.equals(rhs.rsrqMeasurementNotPossible)) {
            return false;
         }
      }

      if (ueRxTxMeasurementNotPossible == null) {
         if (rhs.ueRxTxMeasurementNotPossible != null) return false;
      }
      else {
         if (!ueRxTxMeasurementNotPossible.equals(rhs.ueRxTxMeasurementNotPossible)) {
            return false;
         }
      }

      if (nrsrpMeasurementNotPossible_r14 == null) {
         if (rhs.nrsrpMeasurementNotPossible_r14 != null) return false;
      }
      else {
         if (!nrsrpMeasurementNotPossible_r14.equals(rhs.nrsrpMeasurementNotPossible_r14)) {
            return false;
         }
      }

      if (nrsrqMeasurementNotPossible_r14 == null) {
         if (rhs.nrsrqMeasurementNotPossible_r14 != null) return false;
      }
      else {
         if (!nrsrqMeasurementNotPossible_r14.equals(rhs.nrsrqMeasurementNotPossible_r14)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (cause != null) __code = 31*__code + cause.hashCode();
      if (rsrpMeasurementNotPossible != null) __code = 31*__code + rsrpMeasurementNotPossible.hashCode();
      if (rsrqMeasurementNotPossible != null) __code = 31*__code + rsrqMeasurementNotPossible.hashCode();
      if (ueRxTxMeasurementNotPossible != null) __code = 31*__code + ueRxTxMeasurementNotPossible.hashCode();
      if (nrsrpMeasurementNotPossible_r14 != null) __code = 31*__code + nrsrpMeasurementNotPossible_r14.hashCode();
      if (nrsrqMeasurementNotPossible_r14 != null) __code = 31*__code + nrsrqMeasurementNotPossible_r14.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Cause
    */
   public ECID_TargetDeviceErrorCauses_cause getCause () {
      return cause;
   }

   public void setCause (ECID_TargetDeviceErrorCauses_cause value) {
      this.cause = value;
   }

   /**
    * Accessor/mutator methods for RsrpMeasurementNotPossible
    */
   public Asn1Null getRsrpMeasurementNotPossible () {
      return rsrpMeasurementNotPossible;
   }

   public void setRsrpMeasurementNotPossible (Asn1Null value) {
      this.rsrpMeasurementNotPossible = value;
   }

   public boolean hasRsrpMeasurementNotPossible () {
      return (rsrpMeasurementNotPossible != null);
   }

   /**
    * Accessor/mutator methods for RsrqMeasurementNotPossible
    */
   public Asn1Null getRsrqMeasurementNotPossible () {
      return rsrqMeasurementNotPossible;
   }

   public void setRsrqMeasurementNotPossible (Asn1Null value) {
      this.rsrqMeasurementNotPossible = value;
   }

   public boolean hasRsrqMeasurementNotPossible () {
      return (rsrqMeasurementNotPossible != null);
   }

   /**
    * Accessor/mutator methods for UeRxTxMeasurementNotPossible
    */
   public Asn1Null getUeRxTxMeasurementNotPossible () {
      return ueRxTxMeasurementNotPossible;
   }

   public void setUeRxTxMeasurementNotPossible (Asn1Null value) {
      this.ueRxTxMeasurementNotPossible = value;
   }

   public boolean hasUeRxTxMeasurementNotPossible () {
      return (ueRxTxMeasurementNotPossible != null);
   }

   /**
    * Accessor/mutator methods for NrsrpMeasurementNotPossible_r14
    */
   public Asn1Null getNrsrpMeasurementNotPossible_r14 () {
      return nrsrpMeasurementNotPossible_r14;
   }

   public void setNrsrpMeasurementNotPossible_r14 (Asn1Null value) {
      this.nrsrpMeasurementNotPossible_r14 = value;
   }

   public boolean hasNrsrpMeasurementNotPossible_r14 () {
      return (nrsrpMeasurementNotPossible_r14 != null);
   }

   /**
    * Accessor/mutator methods for NrsrqMeasurementNotPossible_r14
    */
   public Asn1Null getNrsrqMeasurementNotPossible_r14 () {
      return nrsrqMeasurementNotPossible_r14;
   }

   public void setNrsrqMeasurementNotPossible_r14 (Asn1Null value) {
      this.nrsrqMeasurementNotPossible_r14 = value;
   }

   public boolean hasNrsrqMeasurementNotPossible_r14 () {
      return (nrsrqMeasurementNotPossible_r14 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cause;
         case 1: return rsrpMeasurementNotPossible;
         case 2: return rsrqMeasurementNotPossible;
         case 3: return ueRxTxMeasurementNotPossible;
         case 4: return nrsrpMeasurementNotPossible_r14;
         case 5: return nrsrqMeasurementNotPossible_r14;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cause";
         case 1: return "rsrpMeasurementNotPossible";
         case 2: return "rsrqMeasurementNotPossible";
         case 3: return "ueRxTxMeasurementNotPossible";
         case 4: return "nrsrpMeasurementNotPossible-r14";
         case 5: return "nrsrqMeasurementNotPossible-r14";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean rsrpMeasurementNotPossiblePresent = buffer.decodeBit ("rsrpMeasurementNotPossiblePresent");
      boolean rsrqMeasurementNotPossiblePresent = buffer.decodeBit ("rsrqMeasurementNotPossiblePresent");
      boolean ueRxTxMeasurementNotPossiblePresent = buffer.decodeBit ("ueRxTxMeasurementNotPossiblePresent");

      // decode cause

      buffer.getContext().eventDispatcher.startElement("cause", -1);

      {
         int tval = ECID_TargetDeviceErrorCauses_cause.decodeEnumValue (buffer);
         cause = ECID_TargetDeviceErrorCauses_cause.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("cause", -1);

      // decode rsrpMeasurementNotPossible

      if (rsrpMeasurementNotPossiblePresent) {
         buffer.getContext().eventDispatcher.startElement("rsrpMeasurementNotPossible", -1);

         rsrpMeasurementNotPossible = Asn1Null.NULL_VALUE;
         rsrpMeasurementNotPossible.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rsrpMeasurementNotPossible", -1);
      }
      else {
         rsrpMeasurementNotPossible = null;
      }

      // decode rsrqMeasurementNotPossible

      if (rsrqMeasurementNotPossiblePresent) {
         buffer.getContext().eventDispatcher.startElement("rsrqMeasurementNotPossible", -1);

         rsrqMeasurementNotPossible = Asn1Null.NULL_VALUE;
         rsrqMeasurementNotPossible.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rsrqMeasurementNotPossible", -1);
      }
      else {
         rsrqMeasurementNotPossible = null;
      }

      // decode ueRxTxMeasurementNotPossible

      if (ueRxTxMeasurementNotPossiblePresent) {
         buffer.getContext().eventDispatcher.startElement("ueRxTxMeasurementNotPossible", -1);

         ueRxTxMeasurementNotPossible = Asn1Null.NULL_VALUE;
         ueRxTxMeasurementNotPossible.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ueRxTxMeasurementNotPossible", -1);
      }
      else {
         ueRxTxMeasurementNotPossible = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("nrsrpMeasurementNotPossible_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("nrsrqMeasurementNotPossible_r14Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode nrsrpMeasurementNotPossible_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("nrsrpMeasurementNotPossible_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            nrsrpMeasurementNotPossible_r14 = new Asn1Null();
            nrsrpMeasurementNotPossible_r14.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("nrsrpMeasurementNotPossible_r14", -1);

         }
         else {
            nrsrpMeasurementNotPossible_r14 = null;
         }

         // decode nrsrqMeasurementNotPossible_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("nrsrqMeasurementNotPossible_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            nrsrqMeasurementNotPossible_r14 = new Asn1Null();
            nrsrqMeasurementNotPossible_r14.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("nrsrqMeasurementNotPossible_r14", -1);

         }
         else {
            nrsrqMeasurementNotPossible_r14 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((nrsrpMeasurementNotPossible_r14 != null) ||
      (nrsrqMeasurementNotPossible_r14 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((rsrpMeasurementNotPossible != null), null);
      buffer.encodeBit ((rsrqMeasurementNotPossible != null), null);
      buffer.encodeBit ((ueRxTxMeasurementNotPossible != null), null);

      // encode cause

      if (cause != null) {
         buffer.getContext().eventDispatcher.startElement("cause", -1);

         cause.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cause", -1);
      }
      else throw new Asn1MissingRequiredException ("cause");

      // encode rsrpMeasurementNotPossible

      if (rsrpMeasurementNotPossible != null) {
         buffer.getContext().eventDispatcher.startElement("rsrpMeasurementNotPossible", -1);

         rsrpMeasurementNotPossible.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rsrpMeasurementNotPossible", -1);
      }

      // encode rsrqMeasurementNotPossible

      if (rsrqMeasurementNotPossible != null) {
         buffer.getContext().eventDispatcher.startElement("rsrqMeasurementNotPossible", -1);

         rsrqMeasurementNotPossible.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rsrqMeasurementNotPossible", -1);
      }

      // encode ueRxTxMeasurementNotPossible

      if (ueRxTxMeasurementNotPossible != null) {
         buffer.getContext().eventDispatcher.startElement("ueRxTxMeasurementNotPossible", -1);

         ueRxTxMeasurementNotPossible.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ueRxTxMeasurementNotPossible", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 2;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((nrsrpMeasurementNotPossible_r14 != null), null);
         buffer.encodeBit ((nrsrqMeasurementNotPossible_r14 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // nrsrpMeasurementNotPossible_r14

         if (nrsrpMeasurementNotPossible_r14 != null) {
            buffer.reset();
            nrsrpMeasurementNotPossible_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("nrsrpMeasurementNotPossible_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("nrsrpMeasurementNotPossible_r14", -1);
         }

         // nrsrqMeasurementNotPossible_r14

         if (nrsrqMeasurementNotPossible_r14 != null) {
            buffer.reset();
            nrsrqMeasurementNotPossible_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("nrsrqMeasurementNotPossible_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("nrsrqMeasurementNotPossible_r14", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
