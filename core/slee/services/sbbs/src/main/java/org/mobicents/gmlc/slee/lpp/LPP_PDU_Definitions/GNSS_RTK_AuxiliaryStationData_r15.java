/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_RTK_AuxiliaryStationData_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-RTK-AuxiliaryStationData-r15";
   }

   protected GNSS_NetworkID_r15 networkID_r15;
   protected GNSS_SubNetworkID_r15 subNetworkID_r15;  // optional
   protected GNSS_ReferenceStationID_r15 master_referenceStationID_r15;
   protected AuxiliaryStationList_r15 auxiliaryStationList_r15;
   protected Asn1OpenExt extElem1;

   public GNSS_RTK_AuxiliaryStationData_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_RTK_AuxiliaryStationData_r15 (
      GNSS_NetworkID_r15 networkID_r15_,
      GNSS_SubNetworkID_r15 subNetworkID_r15_,
      GNSS_ReferenceStationID_r15 master_referenceStationID_r15_,
      AuxiliaryStationList_r15 auxiliaryStationList_r15_
   ) throws Asn1Exception {
      super();
      setNetworkID_r15 (networkID_r15_);
      setSubNetworkID_r15 (subNetworkID_r15_);
      setMaster_referenceStationID_r15 (master_referenceStationID_r15_);
      setAuxiliaryStationList_r15 (auxiliaryStationList_r15_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GNSS_RTK_AuxiliaryStationData_r15 (
      GNSS_NetworkID_r15 networkID_r15_,
      GNSS_ReferenceStationID_r15 master_referenceStationID_r15_,
      AuxiliaryStationList_r15 auxiliaryStationList_r15_
   ) throws Asn1Exception {
      super();
      setNetworkID_r15 (networkID_r15_);
      setMaster_referenceStationID_r15 (master_referenceStationID_r15_);
      setAuxiliaryStationList_r15 (auxiliaryStationList_r15_);
   }

   public void init () {
      networkID_r15 = null;
      subNetworkID_r15 = null;
      master_referenceStationID_r15 = null;
      auxiliaryStationList_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_RTK_AuxiliaryStationData_r15) ) return false;

      GNSS_RTK_AuxiliaryStationData_r15 rhs = (GNSS_RTK_AuxiliaryStationData_r15) obj;

      if (networkID_r15 == null) {
         if (rhs.networkID_r15 != null) return false;
      }
      else {
         if (!networkID_r15.equals(rhs.networkID_r15)) {
            return false;
         }
      }

      if (subNetworkID_r15 == null) {
         if (rhs.subNetworkID_r15 != null) return false;
      }
      else {
         if (!subNetworkID_r15.equals(rhs.subNetworkID_r15)) {
            return false;
         }
      }

      if (master_referenceStationID_r15 == null) {
         if (rhs.master_referenceStationID_r15 != null) return false;
      }
      else {
         if (!master_referenceStationID_r15.equals(rhs.master_referenceStationID_r15)) {
            return false;
         }
      }

      if (auxiliaryStationList_r15 == null) {
         if (rhs.auxiliaryStationList_r15 != null) return false;
      }
      else {
         if (!auxiliaryStationList_r15.equals(rhs.auxiliaryStationList_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (networkID_r15 != null) __code = 31*__code + networkID_r15.hashCode();
      if (subNetworkID_r15 != null) __code = 31*__code + subNetworkID_r15.hashCode();
      if (master_referenceStationID_r15 != null) __code = 31*__code + master_referenceStationID_r15.hashCode();
      if (auxiliaryStationList_r15 != null) __code = 31*__code + auxiliaryStationList_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for NetworkID_r15
    */
   public GNSS_NetworkID_r15 getNetworkID_r15 () {
      return networkID_r15;
   }

   public void setNetworkID_r15 (GNSS_NetworkID_r15 value) {
      this.networkID_r15 = value;
   }

   /**
    * Accessor/mutator methods for SubNetworkID_r15
    */
   public GNSS_SubNetworkID_r15 getSubNetworkID_r15 () {
      return subNetworkID_r15;
   }

   public void setSubNetworkID_r15 (GNSS_SubNetworkID_r15 value) {
      this.subNetworkID_r15 = value;
   }

   public boolean hasSubNetworkID_r15 () {
      return (subNetworkID_r15 != null);
   }

   /**
    * Accessor/mutator methods for Master_referenceStationID_r15
    */
   public GNSS_ReferenceStationID_r15 getMaster_referenceStationID_r15 () {
      return master_referenceStationID_r15;
   }

   public void setMaster_referenceStationID_r15 (GNSS_ReferenceStationID_r15 value) {
      this.master_referenceStationID_r15 = value;
   }

   /**
    * Accessor/mutator methods for AuxiliaryStationList_r15
    */
   public AuxiliaryStationList_r15 getAuxiliaryStationList_r15 () {
      return auxiliaryStationList_r15;
   }

   public void setAuxiliaryStationList_r15 (AuxiliaryStationList_r15 value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 32))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.auxiliaryStationList_r15 = value;
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return networkID_r15;
         case 1: return subNetworkID_r15;
         case 2: return master_referenceStationID_r15;
         case 3: return auxiliaryStationList_r15;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "networkID-r15";
         case 1: return "subNetworkID-r15";
         case 2: return "master-referenceStationID-r15";
         case 3: return "auxiliaryStationList-r15";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean subNetworkID_r15Present = buffer.decodeBit ("subNetworkID_r15Present");

      // decode networkID_r15

      buffer.getContext().eventDispatcher.startElement("networkID_r15", -1);

      networkID_r15 = new GNSS_NetworkID_r15();
      networkID_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("networkID_r15", -1);

      // decode subNetworkID_r15

      if (subNetworkID_r15Present) {
         buffer.getContext().eventDispatcher.startElement("subNetworkID_r15", -1);

         subNetworkID_r15 = new GNSS_SubNetworkID_r15();
         subNetworkID_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("subNetworkID_r15", -1);
      }
      else {
         subNetworkID_r15 = null;
      }

      // decode master_referenceStationID_r15

      buffer.getContext().eventDispatcher.startElement("master_referenceStationID_r15", -1);

      master_referenceStationID_r15 = new GNSS_ReferenceStationID_r15();
      master_referenceStationID_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("master_referenceStationID_r15", -1);

      // decode auxiliaryStationList_r15

      buffer.getContext().eventDispatcher.startElement("auxiliaryStationList_r15", -1);

      auxiliaryStationList_r15 = new AuxiliaryStationList_r15();
      auxiliaryStationList_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("auxiliaryStationList_r15", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((subNetworkID_r15 != null), null);

      // encode networkID_r15

      if (networkID_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("networkID_r15", -1);

         networkID_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("networkID_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("networkID_r15");

      // encode subNetworkID_r15

      if (subNetworkID_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("subNetworkID_r15", -1);

         subNetworkID_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("subNetworkID_r15", -1);
      }

      // encode master_referenceStationID_r15

      if (master_referenceStationID_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("master_referenceStationID_r15", -1);

         master_referenceStationID_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("master_referenceStationID_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("master_referenceStationID_r15");

      // encode auxiliaryStationList_r15

      if (auxiliaryStationList_r15 != null) {
         buffer.getContext().eventDispatcher.startElement("auxiliaryStationList_r15", -1);

         auxiliaryStationList_r15.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("auxiliaryStationList_r15", -1);
      }
      else throw new Asn1MissingRequiredException ("auxiliaryStationList_r15");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
