/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Version_2_message_extensions;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.MultipleLocationIds;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.UTRAN_GPSReferenceTimeResult;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.UTRAN_GANSSReferenceTimeResult;

public class Ver2_SUPL_POS_INIT_extension extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_Version_2_message_extensionsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_Version_2_message_extensionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Ver2-SUPL-POS-INIT-extension";
   }

   protected MultipleLocationIds multipleLocationIds;  // optional
   protected UTRAN_GPSReferenceTimeResult utran_GPSReferenceTimeResult;  // optional
   protected UTRAN_GANSSReferenceTimeResult utran_GANSSReferenceTimeResult;  // optional
   protected AMF_Identifier servingAMF;  // optional
   protected Asn1OpenExt extElem1;

   public Ver2_SUPL_POS_INIT_extension () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Ver2_SUPL_POS_INIT_extension (
      MultipleLocationIds multipleLocationIds_,
      UTRAN_GPSReferenceTimeResult utran_GPSReferenceTimeResult_,
      UTRAN_GANSSReferenceTimeResult utran_GANSSReferenceTimeResult_,
      AMF_Identifier servingAMF_
   ) throws Asn1Exception {
      super();
      setMultipleLocationIds (multipleLocationIds_);
      setUtran_GPSReferenceTimeResult (utran_GPSReferenceTimeResult_);
      setUtran_GANSSReferenceTimeResult (utran_GANSSReferenceTimeResult_);
      setServingAMF (servingAMF_);
   }

   public void init () {
      multipleLocationIds = null;
      utran_GPSReferenceTimeResult = null;
      utran_GANSSReferenceTimeResult = null;
      servingAMF = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Ver2_SUPL_POS_INIT_extension) ) return false;

      Ver2_SUPL_POS_INIT_extension rhs = (Ver2_SUPL_POS_INIT_extension) obj;

      if (multipleLocationIds == null) {
         if (rhs.multipleLocationIds != null) return false;
      }
      else {
         if (!multipleLocationIds.equals(rhs.multipleLocationIds)) {
            return false;
         }
      }

      if (utran_GPSReferenceTimeResult == null) {
         if (rhs.utran_GPSReferenceTimeResult != null) return false;
      }
      else {
         if (!utran_GPSReferenceTimeResult.equals(rhs.utran_GPSReferenceTimeResult)) {
            return false;
         }
      }

      if (utran_GANSSReferenceTimeResult == null) {
         if (rhs.utran_GANSSReferenceTimeResult != null) return false;
      }
      else {
         if (!utran_GANSSReferenceTimeResult.equals(rhs.utran_GANSSReferenceTimeResult)) {
            return false;
         }
      }

      if (servingAMF == null) {
         if (rhs.servingAMF != null) return false;
      }
      else {
         if (!servingAMF.equals(rhs.servingAMF)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (multipleLocationIds != null) __code = 31*__code + multipleLocationIds.hashCode();
      if (utran_GPSReferenceTimeResult != null) __code = 31*__code + utran_GPSReferenceTimeResult.hashCode();
      if (utran_GANSSReferenceTimeResult != null) __code = 31*__code + utran_GANSSReferenceTimeResult.hashCode();
      if (servingAMF != null) __code = 31*__code + servingAMF.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for MultipleLocationIds
    */
   public MultipleLocationIds getMultipleLocationIds () {
      return multipleLocationIds;
   }

   public void setMultipleLocationIds (MultipleLocationIds value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 64))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.multipleLocationIds = value;
   }

   public boolean hasMultipleLocationIds () {
      return (multipleLocationIds != null);
   }

   /**
    * Accessor/mutator methods for Utran_GPSReferenceTimeResult
    */
   public UTRAN_GPSReferenceTimeResult getUtran_GPSReferenceTimeResult () {
      return utran_GPSReferenceTimeResult;
   }

   public void setUtran_GPSReferenceTimeResult (UTRAN_GPSReferenceTimeResult value) {
      this.utran_GPSReferenceTimeResult = value;
   }

   public boolean hasUtran_GPSReferenceTimeResult () {
      return (utran_GPSReferenceTimeResult != null);
   }

   /**
    * Accessor/mutator methods for Utran_GANSSReferenceTimeResult
    */
   public UTRAN_GANSSReferenceTimeResult getUtran_GANSSReferenceTimeResult () {
      return utran_GANSSReferenceTimeResult;
   }

   public void setUtran_GANSSReferenceTimeResult (UTRAN_GANSSReferenceTimeResult value) {
      this.utran_GANSSReferenceTimeResult = value;
   }

   public boolean hasUtran_GANSSReferenceTimeResult () {
      return (utran_GANSSReferenceTimeResult != null);
   }

   /**
    * Accessor/mutator methods for ServingAMF
    */
   public AMF_Identifier getServingAMF () {
      return servingAMF;
   }

   public void setServingAMF (AMF_Identifier value) {
      this.servingAMF = value;
   }

   public boolean hasServingAMF () {
      return (servingAMF != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return multipleLocationIds;
         case 1: return utran_GPSReferenceTimeResult;
         case 2: return utran_GANSSReferenceTimeResult;
         case 3: return servingAMF;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "multipleLocationIds";
         case 1: return "utran-GPSReferenceTimeResult";
         case 2: return "utran-GANSSReferenceTimeResult";
         case 3: return "servingAMF";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean multipleLocationIdsPresent = buffer.decodeBit ("multipleLocationIdsPresent");
      boolean utran_GPSReferenceTimeResultPresent = buffer.decodeBit ("utran_GPSReferenceTimeResultPresent");
      boolean utran_GANSSReferenceTimeResultPresent = buffer.decodeBit ("utran_GANSSReferenceTimeResultPresent");

      // decode multipleLocationIds

      if (multipleLocationIdsPresent) {
         buffer.getContext().eventDispatcher.startElement("multipleLocationIds", -1);

         multipleLocationIds = new MultipleLocationIds();
         multipleLocationIds.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("multipleLocationIds", -1);
      }
      else {
         multipleLocationIds = null;
      }

      // decode utran_GPSReferenceTimeResult

      if (utran_GPSReferenceTimeResultPresent) {
         buffer.getContext().eventDispatcher.startElement("utran_GPSReferenceTimeResult", -1);

         utran_GPSReferenceTimeResult = new UTRAN_GPSReferenceTimeResult();
         utran_GPSReferenceTimeResult.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("utran_GPSReferenceTimeResult", -1);
      }
      else {
         utran_GPSReferenceTimeResult = null;
      }

      // decode utran_GANSSReferenceTimeResult

      if (utran_GANSSReferenceTimeResultPresent) {
         buffer.getContext().eventDispatcher.startElement("utran_GANSSReferenceTimeResult", -1);

         utran_GANSSReferenceTimeResult = new UTRAN_GANSSReferenceTimeResult();
         utran_GANSSReferenceTimeResult.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("utran_GANSSReferenceTimeResult", -1);
      }
      else {
         utran_GANSSReferenceTimeResult = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("servingAMFPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode servingAMF

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("servingAMF", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            servingAMF = new AMF_Identifier();
            servingAMF.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("servingAMF", -1);

         }
         else {
            servingAMF = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((servingAMF != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((multipleLocationIds != null), null);
      buffer.encodeBit ((utran_GPSReferenceTimeResult != null), null);
      buffer.encodeBit ((utran_GANSSReferenceTimeResult != null), null);

      // encode multipleLocationIds

      if (multipleLocationIds != null) {
         buffer.getContext().eventDispatcher.startElement("multipleLocationIds", -1);

         multipleLocationIds.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("multipleLocationIds", -1);
      }

      // encode utran_GPSReferenceTimeResult

      if (utran_GPSReferenceTimeResult != null) {
         buffer.getContext().eventDispatcher.startElement("utran_GPSReferenceTimeResult", -1);

         utran_GPSReferenceTimeResult.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("utran_GPSReferenceTimeResult", -1);
      }

      // encode utran_GANSSReferenceTimeResult

      if (utran_GANSSReferenceTimeResult != null) {
         buffer.getContext().eventDispatcher.startElement("utran_GANSSReferenceTimeResult", -1);

         utran_GANSSReferenceTimeResult.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("utran_GANSSReferenceTimeResult", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((servingAMF != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // servingAMF

         if (servingAMF != null) {
            buffer.reset();
            servingAMF.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("servingAMF", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("servingAMF", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
