/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class Velocity extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Velocity";
   }

   // Choice element identifier constants
   public final static byte _HORIZONTALVELOCITY = 1;
   public final static byte _HORIZONTALWITHVERTICALVELOCITY = 2;
   public final static byte _HORIZONTALVELOCITYWITHUNCERTAINTY = 3;
   public final static byte _HORIZONTALWITHVERTICALVELOCITYANDUNCERTAINTY = 4;
   public final static byte _EXTELEM1 = 5;

   public Velocity () {
      super();
   }

   public Velocity (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _HORIZONTALVELOCITY: return "horizontalVelocity";
      case _HORIZONTALWITHVERTICALVELOCITY: return "horizontalWithVerticalVelocity";
      case _HORIZONTALVELOCITYWITHUNCERTAINTY: return "horizontalVelocityWithUncertainty";
      case _HORIZONTALWITHVERTICALVELOCITYANDUNCERTAINTY: return "horizontalWithVerticalVelocityAndUncertainty";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for horizontalVelocity
    */
   public HorizontalVelocity getHorizontalVelocity () {
      return (choiceID == _HORIZONTALVELOCITY) ? (HorizontalVelocity)element : null;
   }
   public void setHorizontalVelocity (HorizontalVelocity value) {
      setElement (_HORIZONTALVELOCITY, value);
   }
   public boolean isHorizontalVelocity () {
      return (choiceID == _HORIZONTALVELOCITY);
   }

   /**
    * Accessor/mutator methods for horizontalWithVerticalVelocity
    */
   public HorizontalWithVerticalVelocity getHorizontalWithVerticalVelocity () {
      return (choiceID == _HORIZONTALWITHVERTICALVELOCITY) ? (HorizontalWithVerticalVelocity)element : null;
   }
   public void setHorizontalWithVerticalVelocity (HorizontalWithVerticalVelocity value) {
      setElement (_HORIZONTALWITHVERTICALVELOCITY, value);
   }
   public boolean isHorizontalWithVerticalVelocity () {
      return (choiceID == _HORIZONTALWITHVERTICALVELOCITY);
   }

   /**
    * Accessor/mutator methods for horizontalVelocityWithUncertainty
    */
   public HorizontalVelocityWithUncertainty getHorizontalVelocityWithUncertainty () {
      return (choiceID == _HORIZONTALVELOCITYWITHUNCERTAINTY) ? (HorizontalVelocityWithUncertainty)element : null;
   }
   public void setHorizontalVelocityWithUncertainty (HorizontalVelocityWithUncertainty value) {
      setElement (_HORIZONTALVELOCITYWITHUNCERTAINTY, value);
   }
   public boolean isHorizontalVelocityWithUncertainty () {
      return (choiceID == _HORIZONTALVELOCITYWITHUNCERTAINTY);
   }

   /**
    * Accessor/mutator methods for horizontalWithVerticalVelocityAndUncertainty
    */
   public HorizontalWithVerticalVelocityAndUncertainty getHorizontalWithVerticalVelocityAndUncertainty () {
      return (choiceID == _HORIZONTALWITHVERTICALVELOCITYANDUNCERTAINTY) ? (HorizontalWithVerticalVelocityAndUncertainty)element : null;
   }
   public void setHorizontalWithVerticalVelocityAndUncertainty (HorizontalWithVerticalVelocityAndUncertainty value) {
      setElement (_HORIZONTALWITHVERTICALVELOCITYANDUNCERTAINTY, value);
   }
   public boolean isHorizontalWithVerticalVelocityAndUncertainty () {
      return (choiceID == _HORIZONTALWITHVERTICALVELOCITYANDUNCERTAINTY);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (4, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // horizontalVelocity
            case 0: { 
               HorizontalVelocity horizontalVelocity;
               element = horizontalVelocity = new HorizontalVelocity();
               horizontalVelocity.decode (buffer);
               break;
            }

            // horizontalWithVerticalVelocity
            case 1: { 
               HorizontalWithVerticalVelocity horizontalWithVerticalVelocity;
               element = horizontalWithVerticalVelocity = new HorizontalWithVerticalVelocity();
               horizontalWithVerticalVelocity.decode (buffer);
               break;
            }

            // horizontalVelocityWithUncertainty
            case 2: { 
               HorizontalVelocityWithUncertainty horizontalVelocityWithUncertainty;
               element = horizontalVelocityWithUncertainty = new HorizontalVelocityWithUncertainty();
               horizontalVelocityWithUncertainty.decode (buffer);
               break;
            }

            // horizontalWithVerticalVelocityAndUncertainty
            case 3: { 
               HorizontalWithVerticalVelocityAndUncertainty horizontalWithVerticalVelocityAndUncertainty;
               element = horizontalWithVerticalVelocityAndUncertainty = new HorizontalWithVerticalVelocityAndUncertainty();
               horizontalWithVerticalVelocityAndUncertainty.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 5;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         setElement (_EXTELEM1, openType);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 4);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 4, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // horizontalVelocity
            case _HORIZONTALVELOCITY:
               HorizontalVelocity horizontalVelocity = (HorizontalVelocity) element;
               horizontalVelocity.encode (buffer);
               break;

            // horizontalWithVerticalVelocity
            case _HORIZONTALWITHVERTICALVELOCITY:
               HorizontalWithVerticalVelocity horizontalWithVerticalVelocity = (HorizontalWithVerticalVelocity) element;
               horizontalWithVerticalVelocity.encode (buffer);
               break;

            // horizontalVelocityWithUncertainty
            case _HORIZONTALVELOCITYWITHUNCERTAINTY:
               HorizontalVelocityWithUncertainty horizontalVelocityWithUncertainty = (HorizontalVelocityWithUncertainty) element;
               horizontalVelocityWithUncertainty.encode (buffer);
               break;

            // horizontalWithVerticalVelocityAndUncertainty
            case _HORIZONTALWITHVERTICALVELOCITYANDUNCERTAINTY:
               HorizontalWithVerticalVelocityAndUncertainty horizontalWithVerticalVelocityAndUncertainty = (HorizontalWithVerticalVelocityAndUncertainty) element;
               horizontalWithVerticalVelocityAndUncertainty.encode (buffer);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 5);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1OpenType openType = (Asn1OpenType) element;
         buffer.byteAlign();
         openType.encode (buffer);
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
