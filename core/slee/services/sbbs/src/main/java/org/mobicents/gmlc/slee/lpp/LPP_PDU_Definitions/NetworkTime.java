/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NetworkTime extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "NetworkTime";
   }

   protected Asn1Integer secondsFromFrameStructureStart;
   protected Asn1Integer fractionalSecondsFromFrameStructureStart;
   protected Asn1Integer frameDrift;  // optional
   protected NetworkTime_cellID cellID;
   protected Asn1OpenExt extElem1;

   public NetworkTime () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NetworkTime (
      Asn1Integer secondsFromFrameStructureStart_,
      Asn1Integer fractionalSecondsFromFrameStructureStart_,
      Asn1Integer frameDrift_,
      NetworkTime_cellID cellID_
   ) throws Asn1Exception {
      super();
      setSecondsFromFrameStructureStart (secondsFromFrameStructureStart_);
      setFractionalSecondsFromFrameStructureStart (fractionalSecondsFromFrameStructureStart_);
      setFrameDrift (frameDrift_);
      setCellID (cellID_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public NetworkTime (
      Asn1Integer secondsFromFrameStructureStart_,
      Asn1Integer fractionalSecondsFromFrameStructureStart_,
      NetworkTime_cellID cellID_
   ) throws Asn1Exception {
      super();
      setSecondsFromFrameStructureStart (secondsFromFrameStructureStart_);
      setFractionalSecondsFromFrameStructureStart (fractionalSecondsFromFrameStructureStart_);
      setCellID (cellID_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NetworkTime (long secondsFromFrameStructureStart_,
      long fractionalSecondsFromFrameStructureStart_,
      long frameDrift_,
      NetworkTime_cellID cellID_
   ) throws Asn1Exception {
      super();
      setSecondsFromFrameStructureStart (secondsFromFrameStructureStart_);
      setFractionalSecondsFromFrameStructureStart (fractionalSecondsFromFrameStructureStart_);
      setFrameDrift (frameDrift_);
      setCellID (cellID_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public NetworkTime (
      long secondsFromFrameStructureStart_,
      long fractionalSecondsFromFrameStructureStart_,
      NetworkTime_cellID cellID_
   ) throws Asn1Exception {
      super();
      setSecondsFromFrameStructureStart (secondsFromFrameStructureStart_);
      setFractionalSecondsFromFrameStructureStart (fractionalSecondsFromFrameStructureStart_);
      setCellID (cellID_);
   }

   public void init () {
      secondsFromFrameStructureStart = null;
      fractionalSecondsFromFrameStructureStart = null;
      frameDrift = null;
      cellID = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof NetworkTime) ) return false;

      NetworkTime rhs = (NetworkTime) obj;

      if (secondsFromFrameStructureStart == null) {
         if (rhs.secondsFromFrameStructureStart != null) return false;
      }
      else {
         if (!secondsFromFrameStructureStart.equals(rhs.secondsFromFrameStructureStart)) {
            return false;
         }
      }

      if (fractionalSecondsFromFrameStructureStart == null) {
         if (rhs.fractionalSecondsFromFrameStructureStart != null) return false;
      }
      else {
         if (!fractionalSecondsFromFrameStructureStart.equals(rhs.fractionalSecondsFromFrameStructureStart)) {
            return false;
         }
      }

      if (frameDrift == null) {
         if (rhs.frameDrift != null) return false;
      }
      else {
         if (!frameDrift.equals(rhs.frameDrift)) {
            return false;
         }
      }

      if (cellID == null) {
         if (rhs.cellID != null) return false;
      }
      else {
         if (!cellID.equals(rhs.cellID)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (secondsFromFrameStructureStart != null) __code = 31*__code + secondsFromFrameStructureStart.hashCode();
      if (fractionalSecondsFromFrameStructureStart != null) __code = 31*__code + fractionalSecondsFromFrameStructureStart.hashCode();
      if (frameDrift != null) __code = 31*__code + frameDrift.hashCode();
      if (cellID != null) __code = 31*__code + cellID.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SecondsFromFrameStructureStart
    */
   public Asn1Integer getSecondsFromFrameStructureStart () {
      return secondsFromFrameStructureStart;
   }

   public void setSecondsFromFrameStructureStart (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 12533))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.secondsFromFrameStructureStart = value;
   }

   public void setSecondsFromFrameStructureStart (long value) 
      throws Asn1Exception
   {
      setSecondsFromFrameStructureStart (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for FractionalSecondsFromFrameStructureStart
    */
   public Asn1Integer getFractionalSecondsFromFrameStructureStart () {
      return fractionalSecondsFromFrameStructureStart;
   }

   public void setFractionalSecondsFromFrameStructureStart (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 3999999))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.fractionalSecondsFromFrameStructureStart = value;
   }

   public void setFractionalSecondsFromFrameStructureStart (long value) 
      throws Asn1Exception
   {
      setFractionalSecondsFromFrameStructureStart (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for FrameDrift
    */
   public Asn1Integer getFrameDrift () {
      return frameDrift;
   }

   public void setFrameDrift (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -64 && value.value <= 63))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.frameDrift = value;
   }

   public void setFrameDrift (long value) 
      throws Asn1Exception
   {
      setFrameDrift (new Asn1Integer(value));
   }
   public boolean hasFrameDrift () {
      return (frameDrift != null);
   }

   /**
    * Accessor/mutator methods for CellID
    */
   public NetworkTime_cellID getCellID () {
      return cellID;
   }

   public void setCellID (NetworkTime_cellID value) {
      this.cellID = value;
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return secondsFromFrameStructureStart;
         case 1: return fractionalSecondsFromFrameStructureStart;
         case 2: return frameDrift;
         case 3: return cellID;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "secondsFromFrameStructureStart";
         case 1: return "fractionalSecondsFromFrameStructureStart";
         case 2: return "frameDrift";
         case 3: return "cellID";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean frameDriftPresent = buffer.decodeBit ("frameDriftPresent");

      // decode secondsFromFrameStructureStart

      buffer.getContext().eventDispatcher.startElement("secondsFromFrameStructureStart", -1);

      secondsFromFrameStructureStart = new Asn1Integer();
      secondsFromFrameStructureStart.decode (buffer, 0, 12533);
      buffer.getContext().eventDispatcher.endElement("secondsFromFrameStructureStart", -1);

      // decode fractionalSecondsFromFrameStructureStart

      buffer.getContext().eventDispatcher.startElement("fractionalSecondsFromFrameStructureStart", -1);

      fractionalSecondsFromFrameStructureStart = new Asn1Integer();
      fractionalSecondsFromFrameStructureStart.decode (buffer, 0, 3999999);
      buffer.getContext().eventDispatcher.endElement("fractionalSecondsFromFrameStructureStart", -1);

      // decode frameDrift

      if (frameDriftPresent) {
         buffer.getContext().eventDispatcher.startElement("frameDrift", -1);

         frameDrift = new Asn1Integer();
         frameDrift.decode (buffer, -64, 63);
         buffer.getContext().eventDispatcher.endElement("frameDrift", -1);
      }
      else {
         frameDrift = null;
      }

      // decode cellID

      buffer.getContext().eventDispatcher.startElement("cellID", -1);

      cellID = new NetworkTime_cellID();
      cellID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cellID", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((frameDrift != null), null);

      // encode secondsFromFrameStructureStart

      if (secondsFromFrameStructureStart != null) {
         buffer.getContext().eventDispatcher.startElement("secondsFromFrameStructureStart", -1);

         secondsFromFrameStructureStart.encode (buffer, 0, 12533);

         buffer.getContext().eventDispatcher.endElement("secondsFromFrameStructureStart", -1);
      }
      else throw new Asn1MissingRequiredException ("secondsFromFrameStructureStart");

      // encode fractionalSecondsFromFrameStructureStart

      if (fractionalSecondsFromFrameStructureStart != null) {
         buffer.getContext().eventDispatcher.startElement("fractionalSecondsFromFrameStructureStart", -1);

         fractionalSecondsFromFrameStructureStart.encode (buffer, 0, 3999999);

         buffer.getContext().eventDispatcher.endElement("fractionalSecondsFromFrameStructureStart", -1);
      }
      else throw new Asn1MissingRequiredException ("fractionalSecondsFromFrameStructureStart");

      // encode frameDrift

      if (frameDrift != null) {
         buffer.getContext().eventDispatcher.startElement("frameDrift", -1);

         frameDrift.encode (buffer, -64, 63);

         buffer.getContext().eventDispatcher.endElement("frameDrift", -1);
      }

      // encode cellID

      if (cellID != null) {
         buffer.getContext().eventDispatcher.startElement("cellID", -1);

         cellID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cellID", -1);
      }
      else throw new Asn1MissingRequiredException ("cellID");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
