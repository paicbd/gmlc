/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class OTDOA_NeighbourCellInfoNB_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "OTDOA-NeighbourCellInfoNB-r14";
   }

   protected Asn1Integer physCellIdNB_r14;  // optional
   protected ECGI cellGlobalIdNB_r14;  // optional
   protected CarrierFreq_NB_r14 carrierFreq_r14;  // optional
   protected ARFCN_ValueEUTRA_r14 earfcn_r14;  // optional
   protected OTDOA_NeighbourCellInfoNB_r14_eutra_NumCRS_Ports_r14 eutra_NumCRS_Ports_r14 = null;  // optional
   protected OTDOA_NeighbourCellInfoNB_r14_otdoa_SIB1_NB_repetitions_r14 otdoa_SIB1_NB_repetitions_r14 = null;  // optional
   protected PRS_Info_NB_r14 nprsInfo_r14;  // optional
   protected Asn1Integer nprs_slotNumberOffset_r14;  // optional
   protected Asn1Integer nprs_SFN_Offset_r14;  // optional
   protected Asn1Integer nprs_SubframeOffset_r14;  // optional
   protected Asn1Integer expectedRSTD_r14;  // optional
   protected Asn1Integer expectedRSTD_Uncertainty_r14;  // optional
   protected Asn1Integer prsNeighbourCellIndex_r14;  // optional
   protected PRS_Info_NB_r14 nprsInfo_Type2_v1470;  // optional
   protected TDD_Config_v1520 tdd_config_r15;  // optional
   protected Asn1OpenExt extElem1;

   public OTDOA_NeighbourCellInfoNB_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public OTDOA_NeighbourCellInfoNB_r14 (
      Asn1Integer physCellIdNB_r14_,
      ECGI cellGlobalIdNB_r14_,
      CarrierFreq_NB_r14 carrierFreq_r14_,
      ARFCN_ValueEUTRA_r14 earfcn_r14_,
      OTDOA_NeighbourCellInfoNB_r14_eutra_NumCRS_Ports_r14 eutra_NumCRS_Ports_r14_,
      OTDOA_NeighbourCellInfoNB_r14_otdoa_SIB1_NB_repetitions_r14 otdoa_SIB1_NB_repetitions_r14_,
      PRS_Info_NB_r14 nprsInfo_r14_,
      Asn1Integer nprs_slotNumberOffset_r14_,
      Asn1Integer nprs_SFN_Offset_r14_,
      Asn1Integer nprs_SubframeOffset_r14_,
      Asn1Integer expectedRSTD_r14_,
      Asn1Integer expectedRSTD_Uncertainty_r14_,
      Asn1Integer prsNeighbourCellIndex_r14_,
      PRS_Info_NB_r14 nprsInfo_Type2_v1470_,
      TDD_Config_v1520 tdd_config_r15_
   ) throws Asn1Exception {
      super();
      setPhysCellIdNB_r14 (physCellIdNB_r14_);
      setCellGlobalIdNB_r14 (cellGlobalIdNB_r14_);
      setCarrierFreq_r14 (carrierFreq_r14_);
      setEarfcn_r14 (earfcn_r14_);
      setEutra_NumCRS_Ports_r14 (eutra_NumCRS_Ports_r14_);
      setOtdoa_SIB1_NB_repetitions_r14 (otdoa_SIB1_NB_repetitions_r14_);
      setNprsInfo_r14 (nprsInfo_r14_);
      setNprs_slotNumberOffset_r14 (nprs_slotNumberOffset_r14_);
      setNprs_SFN_Offset_r14 (nprs_SFN_Offset_r14_);
      setNprs_SubframeOffset_r14 (nprs_SubframeOffset_r14_);
      setExpectedRSTD_r14 (expectedRSTD_r14_);
      setExpectedRSTD_Uncertainty_r14 (expectedRSTD_Uncertainty_r14_);
      setPrsNeighbourCellIndex_r14 (prsNeighbourCellIndex_r14_);
      setNprsInfo_Type2_v1470 (nprsInfo_Type2_v1470_);
      setTdd_config_r15 (tdd_config_r15_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public OTDOA_NeighbourCellInfoNB_r14 (long physCellIdNB_r14_,
      ECGI cellGlobalIdNB_r14_,
      CarrierFreq_NB_r14 carrierFreq_r14_,
      long earfcn_r14_,
      OTDOA_NeighbourCellInfoNB_r14_eutra_NumCRS_Ports_r14 eutra_NumCRS_Ports_r14_,
      OTDOA_NeighbourCellInfoNB_r14_otdoa_SIB1_NB_repetitions_r14 otdoa_SIB1_NB_repetitions_r14_,
      PRS_Info_NB_r14 nprsInfo_r14_,
      long nprs_slotNumberOffset_r14_,
      long nprs_SFN_Offset_r14_,
      long nprs_SubframeOffset_r14_,
      long expectedRSTD_r14_,
      long expectedRSTD_Uncertainty_r14_,
      long prsNeighbourCellIndex_r14_,
      PRS_Info_NB_r14 nprsInfo_Type2_v1470_,
      TDD_Config_v1520 tdd_config_r15_
   ) throws Asn1Exception {
      super();
      setPhysCellIdNB_r14 (physCellIdNB_r14_);
      setCellGlobalIdNB_r14 (cellGlobalIdNB_r14_);
      setCarrierFreq_r14 (carrierFreq_r14_);
      setEarfcn_r14 (earfcn_r14_);
      setEutra_NumCRS_Ports_r14 (eutra_NumCRS_Ports_r14_);
      setOtdoa_SIB1_NB_repetitions_r14 (otdoa_SIB1_NB_repetitions_r14_);
      setNprsInfo_r14 (nprsInfo_r14_);
      setNprs_slotNumberOffset_r14 (nprs_slotNumberOffset_r14_);
      setNprs_SFN_Offset_r14 (nprs_SFN_Offset_r14_);
      setNprs_SubframeOffset_r14 (nprs_SubframeOffset_r14_);
      setExpectedRSTD_r14 (expectedRSTD_r14_);
      setExpectedRSTD_Uncertainty_r14 (expectedRSTD_Uncertainty_r14_);
      setPrsNeighbourCellIndex_r14 (prsNeighbourCellIndex_r14_);
      setNprsInfo_Type2_v1470 (nprsInfo_Type2_v1470_);
      setTdd_config_r15 (tdd_config_r15_);
   }

   public void init () {
      physCellIdNB_r14 = null;
      cellGlobalIdNB_r14 = null;
      carrierFreq_r14 = null;
      earfcn_r14 = null;
      eutra_NumCRS_Ports_r14 = null;
      otdoa_SIB1_NB_repetitions_r14 = null;
      nprsInfo_r14 = null;
      nprs_slotNumberOffset_r14 = null;
      nprs_SFN_Offset_r14 = null;
      nprs_SubframeOffset_r14 = null;
      expectedRSTD_r14 = null;
      expectedRSTD_Uncertainty_r14 = null;
      prsNeighbourCellIndex_r14 = null;
      nprsInfo_Type2_v1470 = null;
      tdd_config_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof OTDOA_NeighbourCellInfoNB_r14) ) return false;

      OTDOA_NeighbourCellInfoNB_r14 rhs = (OTDOA_NeighbourCellInfoNB_r14) obj;

      if (physCellIdNB_r14 == null) {
         if (rhs.physCellIdNB_r14 != null) return false;
      }
      else {
         if (!physCellIdNB_r14.equals(rhs.physCellIdNB_r14)) {
            return false;
         }
      }

      if (cellGlobalIdNB_r14 == null) {
         if (rhs.cellGlobalIdNB_r14 != null) return false;
      }
      else {
         if (!cellGlobalIdNB_r14.equals(rhs.cellGlobalIdNB_r14)) {
            return false;
         }
      }

      if (carrierFreq_r14 == null) {
         if (rhs.carrierFreq_r14 != null) return false;
      }
      else {
         if (!carrierFreq_r14.equals(rhs.carrierFreq_r14)) {
            return false;
         }
      }

      if (earfcn_r14 == null) {
         if (rhs.earfcn_r14 != null) return false;
      }
      else {
         if (!earfcn_r14.equals(rhs.earfcn_r14)) {
            return false;
         }
      }

      if (eutra_NumCRS_Ports_r14 == null) {
         if (rhs.eutra_NumCRS_Ports_r14 != null) return false;
      }
      else {
         if (!eutra_NumCRS_Ports_r14.equals(rhs.eutra_NumCRS_Ports_r14)) {
            return false;
         }
      }

      if (otdoa_SIB1_NB_repetitions_r14 == null) {
         if (rhs.otdoa_SIB1_NB_repetitions_r14 != null) return false;
      }
      else {
         if (!otdoa_SIB1_NB_repetitions_r14.equals(rhs.otdoa_SIB1_NB_repetitions_r14)) {
            return false;
         }
      }

      if (nprsInfo_r14 == null) {
         if (rhs.nprsInfo_r14 != null) return false;
      }
      else {
         if (!nprsInfo_r14.equals(rhs.nprsInfo_r14)) {
            return false;
         }
      }

      if (nprs_slotNumberOffset_r14 == null) {
         if (rhs.nprs_slotNumberOffset_r14 != null) return false;
      }
      else {
         if (!nprs_slotNumberOffset_r14.equals(rhs.nprs_slotNumberOffset_r14)) {
            return false;
         }
      }

      if (nprs_SFN_Offset_r14 == null) {
         if (rhs.nprs_SFN_Offset_r14 != null) return false;
      }
      else {
         if (!nprs_SFN_Offset_r14.equals(rhs.nprs_SFN_Offset_r14)) {
            return false;
         }
      }

      if (nprs_SubframeOffset_r14 == null) {
         if (rhs.nprs_SubframeOffset_r14 != null) return false;
      }
      else {
         if (!nprs_SubframeOffset_r14.equals(rhs.nprs_SubframeOffset_r14)) {
            return false;
         }
      }

      if (expectedRSTD_r14 == null) {
         if (rhs.expectedRSTD_r14 != null) return false;
      }
      else {
         if (!expectedRSTD_r14.equals(rhs.expectedRSTD_r14)) {
            return false;
         }
      }

      if (expectedRSTD_Uncertainty_r14 == null) {
         if (rhs.expectedRSTD_Uncertainty_r14 != null) return false;
      }
      else {
         if (!expectedRSTD_Uncertainty_r14.equals(rhs.expectedRSTD_Uncertainty_r14)) {
            return false;
         }
      }

      if (prsNeighbourCellIndex_r14 == null) {
         if (rhs.prsNeighbourCellIndex_r14 != null) return false;
      }
      else {
         if (!prsNeighbourCellIndex_r14.equals(rhs.prsNeighbourCellIndex_r14)) {
            return false;
         }
      }

      if (nprsInfo_Type2_v1470 == null) {
         if (rhs.nprsInfo_Type2_v1470 != null) return false;
      }
      else {
         if (!nprsInfo_Type2_v1470.equals(rhs.nprsInfo_Type2_v1470)) {
            return false;
         }
      }

      if (tdd_config_r15 == null) {
         if (rhs.tdd_config_r15 != null) return false;
      }
      else {
         if (!tdd_config_r15.equals(rhs.tdd_config_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (physCellIdNB_r14 != null) __code = 31*__code + physCellIdNB_r14.hashCode();
      if (cellGlobalIdNB_r14 != null) __code = 31*__code + cellGlobalIdNB_r14.hashCode();
      if (carrierFreq_r14 != null) __code = 31*__code + carrierFreq_r14.hashCode();
      if (earfcn_r14 != null) __code = 31*__code + earfcn_r14.hashCode();
      if (eutra_NumCRS_Ports_r14 != null) __code = 31*__code + eutra_NumCRS_Ports_r14.hashCode();
      if (otdoa_SIB1_NB_repetitions_r14 != null) __code = 31*__code + otdoa_SIB1_NB_repetitions_r14.hashCode();
      if (nprsInfo_r14 != null) __code = 31*__code + nprsInfo_r14.hashCode();
      if (nprs_slotNumberOffset_r14 != null) __code = 31*__code + nprs_slotNumberOffset_r14.hashCode();
      if (nprs_SFN_Offset_r14 != null) __code = 31*__code + nprs_SFN_Offset_r14.hashCode();
      if (nprs_SubframeOffset_r14 != null) __code = 31*__code + nprs_SubframeOffset_r14.hashCode();
      if (expectedRSTD_r14 != null) __code = 31*__code + expectedRSTD_r14.hashCode();
      if (expectedRSTD_Uncertainty_r14 != null) __code = 31*__code + expectedRSTD_Uncertainty_r14.hashCode();
      if (prsNeighbourCellIndex_r14 != null) __code = 31*__code + prsNeighbourCellIndex_r14.hashCode();
      if (nprsInfo_Type2_v1470 != null) __code = 31*__code + nprsInfo_Type2_v1470.hashCode();
      if (tdd_config_r15 != null) __code = 31*__code + tdd_config_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for PhysCellIdNB_r14
    */
   public Asn1Integer getPhysCellIdNB_r14 () {
      return physCellIdNB_r14;
   }

   public void setPhysCellIdNB_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 503))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.physCellIdNB_r14 = value;
   }

   public void setPhysCellIdNB_r14 (long value) 
      throws Asn1Exception
   {
      setPhysCellIdNB_r14 (new Asn1Integer(value));
   }
   public boolean hasPhysCellIdNB_r14 () {
      return (physCellIdNB_r14 != null);
   }

   /**
    * Accessor/mutator methods for CellGlobalIdNB_r14
    */
   public ECGI getCellGlobalIdNB_r14 () {
      return cellGlobalIdNB_r14;
   }

   public void setCellGlobalIdNB_r14 (ECGI value) {
      this.cellGlobalIdNB_r14 = value;
   }

   public boolean hasCellGlobalIdNB_r14 () {
      return (cellGlobalIdNB_r14 != null);
   }

   /**
    * Accessor/mutator methods for CarrierFreq_r14
    */
   public CarrierFreq_NB_r14 getCarrierFreq_r14 () {
      return carrierFreq_r14;
   }

   public void setCarrierFreq_r14 (CarrierFreq_NB_r14 value) {
      this.carrierFreq_r14 = value;
   }

   public boolean hasCarrierFreq_r14 () {
      return (carrierFreq_r14 != null);
   }

   /**
    * Accessor/mutator methods for Earfcn_r14
    */
   public ARFCN_ValueEUTRA_r14 getEarfcn_r14 () {
      return earfcn_r14;
   }

   public void setEarfcn_r14 (ARFCN_ValueEUTRA_r14 value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 262143))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.earfcn_r14 = value;
   }

   public void setEarfcn_r14 (long value) 
      throws Asn1Exception
   {
      setEarfcn_r14 (new ARFCN_ValueEUTRA_r14(value));
   }
   public boolean hasEarfcn_r14 () {
      return (earfcn_r14 != null);
   }

   /**
    * Accessor/mutator methods for Eutra_NumCRS_Ports_r14
    */
   public OTDOA_NeighbourCellInfoNB_r14_eutra_NumCRS_Ports_r14 getEutra_NumCRS_Ports_r14 () {
      return eutra_NumCRS_Ports_r14;
   }

   public void setEutra_NumCRS_Ports_r14 (OTDOA_NeighbourCellInfoNB_r14_eutra_NumCRS_Ports_r14 value) {
      this.eutra_NumCRS_Ports_r14 = value;
   }

   public boolean hasEutra_NumCRS_Ports_r14 () {
      return (eutra_NumCRS_Ports_r14 != null);
   }

   /**
    * Accessor/mutator methods for Otdoa_SIB1_NB_repetitions_r14
    */
   public OTDOA_NeighbourCellInfoNB_r14_otdoa_SIB1_NB_repetitions_r14 getOtdoa_SIB1_NB_repetitions_r14 () {
      return otdoa_SIB1_NB_repetitions_r14;
   }

   public void setOtdoa_SIB1_NB_repetitions_r14 (OTDOA_NeighbourCellInfoNB_r14_otdoa_SIB1_NB_repetitions_r14 value) {
      this.otdoa_SIB1_NB_repetitions_r14 = value;
   }

   public boolean hasOtdoa_SIB1_NB_repetitions_r14 () {
      return (otdoa_SIB1_NB_repetitions_r14 != null);
   }

   /**
    * Accessor/mutator methods for NprsInfo_r14
    */
   public PRS_Info_NB_r14 getNprsInfo_r14 () {
      return nprsInfo_r14;
   }

   public void setNprsInfo_r14 (PRS_Info_NB_r14 value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 5))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.nprsInfo_r14 = value;
   }

   public boolean hasNprsInfo_r14 () {
      return (nprsInfo_r14 != null);
   }

   /**
    * Accessor/mutator methods for Nprs_slotNumberOffset_r14
    */
   public Asn1Integer getNprs_slotNumberOffset_r14 () {
      return nprs_slotNumberOffset_r14;
   }

   public void setNprs_slotNumberOffset_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 19))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nprs_slotNumberOffset_r14 = value;
   }

   public void setNprs_slotNumberOffset_r14 (long value) 
      throws Asn1Exception
   {
      setNprs_slotNumberOffset_r14 (new Asn1Integer(value));
   }
   public boolean hasNprs_slotNumberOffset_r14 () {
      return (nprs_slotNumberOffset_r14 != null);
   }

   /**
    * Accessor/mutator methods for Nprs_SFN_Offset_r14
    */
   public Asn1Integer getNprs_SFN_Offset_r14 () {
      return nprs_SFN_Offset_r14;
   }

   public void setNprs_SFN_Offset_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 63))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nprs_SFN_Offset_r14 = value;
   }

   public void setNprs_SFN_Offset_r14 (long value) 
      throws Asn1Exception
   {
      setNprs_SFN_Offset_r14 (new Asn1Integer(value));
   }
   public boolean hasNprs_SFN_Offset_r14 () {
      return (nprs_SFN_Offset_r14 != null);
   }

   /**
    * Accessor/mutator methods for Nprs_SubframeOffset_r14
    */
   public Asn1Integer getNprs_SubframeOffset_r14 () {
      return nprs_SubframeOffset_r14;
   }

   public void setNprs_SubframeOffset_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1279))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nprs_SubframeOffset_r14 = value;
   }

   public void setNprs_SubframeOffset_r14 (long value) 
      throws Asn1Exception
   {
      setNprs_SubframeOffset_r14 (new Asn1Integer(value));
   }
   public boolean hasNprs_SubframeOffset_r14 () {
      return (nprs_SubframeOffset_r14 != null);
   }

   /**
    * Accessor/mutator methods for ExpectedRSTD_r14
    */
   public Asn1Integer getExpectedRSTD_r14 () {
      return expectedRSTD_r14;
   }

   public void setExpectedRSTD_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 16383))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.expectedRSTD_r14 = value;
   }

   public void setExpectedRSTD_r14 (long value) 
      throws Asn1Exception
   {
      setExpectedRSTD_r14 (new Asn1Integer(value));
   }
   public boolean hasExpectedRSTD_r14 () {
      return (expectedRSTD_r14 != null);
   }

   /**
    * Accessor/mutator methods for ExpectedRSTD_Uncertainty_r14
    */
   public Asn1Integer getExpectedRSTD_Uncertainty_r14 () {
      return expectedRSTD_Uncertainty_r14;
   }

   public void setExpectedRSTD_Uncertainty_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1023))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.expectedRSTD_Uncertainty_r14 = value;
   }

   public void setExpectedRSTD_Uncertainty_r14 (long value) 
      throws Asn1Exception
   {
      setExpectedRSTD_Uncertainty_r14 (new Asn1Integer(value));
   }
   public boolean hasExpectedRSTD_Uncertainty_r14 () {
      return (expectedRSTD_Uncertainty_r14 != null);
   }

   /**
    * Accessor/mutator methods for PrsNeighbourCellIndex_r14
    */
   public Asn1Integer getPrsNeighbourCellIndex_r14 () {
      return prsNeighbourCellIndex_r14;
   }

   public void setPrsNeighbourCellIndex_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 72))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.prsNeighbourCellIndex_r14 = value;
   }

   public void setPrsNeighbourCellIndex_r14 (long value) 
      throws Asn1Exception
   {
      setPrsNeighbourCellIndex_r14 (new Asn1Integer(value));
   }
   public boolean hasPrsNeighbourCellIndex_r14 () {
      return (prsNeighbourCellIndex_r14 != null);
   }

   /**
    * Accessor/mutator methods for NprsInfo_Type2_v1470
    */
   public PRS_Info_NB_r14 getNprsInfo_Type2_v1470 () {
      return nprsInfo_Type2_v1470;
   }

   public void setNprsInfo_Type2_v1470 (PRS_Info_NB_r14 value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 5))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.nprsInfo_Type2_v1470 = value;
   }

   public boolean hasNprsInfo_Type2_v1470 () {
      return (nprsInfo_Type2_v1470 != null);
   }

   /**
    * Accessor/mutator methods for Tdd_config_r15
    */
   public TDD_Config_v1520 getTdd_config_r15 () {
      return tdd_config_r15;
   }

   public void setTdd_config_r15 (TDD_Config_v1520 value) {
      this.tdd_config_r15 = value;
   }

   public boolean hasTdd_config_r15 () {
      return (tdd_config_r15 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 16; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return physCellIdNB_r14;
         case 1: return cellGlobalIdNB_r14;
         case 2: return carrierFreq_r14;
         case 3: return earfcn_r14;
         case 4: return eutra_NumCRS_Ports_r14;
         case 5: return otdoa_SIB1_NB_repetitions_r14;
         case 6: return nprsInfo_r14;
         case 7: return nprs_slotNumberOffset_r14;
         case 8: return nprs_SFN_Offset_r14;
         case 9: return nprs_SubframeOffset_r14;
         case 10: return expectedRSTD_r14;
         case 11: return expectedRSTD_Uncertainty_r14;
         case 12: return prsNeighbourCellIndex_r14;
         case 13: return nprsInfo_Type2_v1470;
         case 14: return tdd_config_r15;
         case 15: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "physCellIdNB-r14";
         case 1: return "cellGlobalIdNB-r14";
         case 2: return "carrierFreq-r14";
         case 3: return "earfcn-r14";
         case 4: return "eutra-NumCRS-Ports-r14";
         case 5: return "otdoa-SIB1-NB-repetitions-r14";
         case 6: return "nprsInfo-r14";
         case 7: return "nprs-slotNumberOffset-r14";
         case 8: return "nprs-SFN-Offset-r14";
         case 9: return "nprs-SubframeOffset-r14";
         case 10: return "expectedRSTD-r14";
         case 11: return "expectedRSTD-Uncertainty-r14";
         case 12: return "prsNeighbourCellIndex-r14";
         case 13: return "nprsInfo-Type2-v1470";
         case 14: return "tdd-config-r15";
         case 15: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean physCellIdNB_r14Present = buffer.decodeBit ("physCellIdNB_r14Present");
      boolean cellGlobalIdNB_r14Present = buffer.decodeBit ("cellGlobalIdNB_r14Present");
      boolean carrierFreq_r14Present = buffer.decodeBit ("carrierFreq_r14Present");
      boolean earfcn_r14Present = buffer.decodeBit ("earfcn_r14Present");
      boolean eutra_NumCRS_Ports_r14Present = buffer.decodeBit ("eutra_NumCRS_Ports_r14Present");
      boolean otdoa_SIB1_NB_repetitions_r14Present = buffer.decodeBit ("otdoa_SIB1_NB_repetitions_r14Present");
      boolean nprsInfo_r14Present = buffer.decodeBit ("nprsInfo_r14Present");
      boolean nprs_slotNumberOffset_r14Present = buffer.decodeBit ("nprs_slotNumberOffset_r14Present");
      boolean nprs_SFN_Offset_r14Present = buffer.decodeBit ("nprs_SFN_Offset_r14Present");
      boolean nprs_SubframeOffset_r14Present = buffer.decodeBit ("nprs_SubframeOffset_r14Present");
      boolean expectedRSTD_r14Present = buffer.decodeBit ("expectedRSTD_r14Present");
      boolean expectedRSTD_Uncertainty_r14Present = buffer.decodeBit ("expectedRSTD_Uncertainty_r14Present");
      boolean prsNeighbourCellIndex_r14Present = buffer.decodeBit ("prsNeighbourCellIndex_r14Present");

      // decode physCellIdNB_r14

      if (physCellIdNB_r14Present) {
         buffer.getContext().eventDispatcher.startElement("physCellIdNB_r14", -1);

         physCellIdNB_r14 = new Asn1Integer();
         physCellIdNB_r14.decode (buffer, 0, 503);
         buffer.getContext().eventDispatcher.endElement("physCellIdNB_r14", -1);
      }
      else {
         physCellIdNB_r14 = null;
      }

      // decode cellGlobalIdNB_r14

      if (cellGlobalIdNB_r14Present) {
         buffer.getContext().eventDispatcher.startElement("cellGlobalIdNB_r14", -1);

         cellGlobalIdNB_r14 = new ECGI();
         cellGlobalIdNB_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellGlobalIdNB_r14", -1);
      }
      else {
         cellGlobalIdNB_r14 = null;
      }

      // decode carrierFreq_r14

      if (carrierFreq_r14Present) {
         buffer.getContext().eventDispatcher.startElement("carrierFreq_r14", -1);

         carrierFreq_r14 = new CarrierFreq_NB_r14();
         carrierFreq_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("carrierFreq_r14", -1);
      }
      else {
         carrierFreq_r14 = null;
      }

      // decode earfcn_r14

      if (earfcn_r14Present) {
         buffer.getContext().eventDispatcher.startElement("earfcn_r14", -1);

         earfcn_r14 = new ARFCN_ValueEUTRA_r14();
         earfcn_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("earfcn_r14", -1);
      }
      else {
         earfcn_r14 = null;
      }

      // decode eutra_NumCRS_Ports_r14

      if (eutra_NumCRS_Ports_r14Present) {
         buffer.getContext().eventDispatcher.startElement("eutra_NumCRS_Ports_r14", -1);

         int tval = OTDOA_NeighbourCellInfoNB_r14_eutra_NumCRS_Ports_r14.decodeEnumValue (buffer);
         eutra_NumCRS_Ports_r14 = OTDOA_NeighbourCellInfoNB_r14_eutra_NumCRS_Ports_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("eutra_NumCRS_Ports_r14", -1);
      }
      else {
         eutra_NumCRS_Ports_r14 = null;
      }

      // decode otdoa_SIB1_NB_repetitions_r14

      if (otdoa_SIB1_NB_repetitions_r14Present) {
         buffer.getContext().eventDispatcher.startElement("otdoa_SIB1_NB_repetitions_r14", -1);

         int tval = OTDOA_NeighbourCellInfoNB_r14_otdoa_SIB1_NB_repetitions_r14.decodeEnumValue (buffer);
         otdoa_SIB1_NB_repetitions_r14 = OTDOA_NeighbourCellInfoNB_r14_otdoa_SIB1_NB_repetitions_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("otdoa_SIB1_NB_repetitions_r14", -1);
      }
      else {
         otdoa_SIB1_NB_repetitions_r14 = null;
      }

      // decode nprsInfo_r14

      if (nprsInfo_r14Present) {
         buffer.getContext().eventDispatcher.startElement("nprsInfo_r14", -1);

         nprsInfo_r14 = new PRS_Info_NB_r14();
         nprsInfo_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nprsInfo_r14", -1);
      }
      else {
         nprsInfo_r14 = null;
      }

      // decode nprs_slotNumberOffset_r14

      if (nprs_slotNumberOffset_r14Present) {
         buffer.getContext().eventDispatcher.startElement("nprs_slotNumberOffset_r14", -1);

         nprs_slotNumberOffset_r14 = new Asn1Integer();
         nprs_slotNumberOffset_r14.decode (buffer, 0, 19);
         buffer.getContext().eventDispatcher.endElement("nprs_slotNumberOffset_r14", -1);
      }
      else {
         nprs_slotNumberOffset_r14 = null;
      }

      // decode nprs_SFN_Offset_r14

      if (nprs_SFN_Offset_r14Present) {
         buffer.getContext().eventDispatcher.startElement("nprs_SFN_Offset_r14", -1);

         nprs_SFN_Offset_r14 = new Asn1Integer();
         nprs_SFN_Offset_r14.decode (buffer, 0, 63);
         buffer.getContext().eventDispatcher.endElement("nprs_SFN_Offset_r14", -1);
      }
      else {
         nprs_SFN_Offset_r14 = null;
      }

      // decode nprs_SubframeOffset_r14

      if (nprs_SubframeOffset_r14Present) {
         buffer.getContext().eventDispatcher.startElement("nprs_SubframeOffset_r14", -1);

         nprs_SubframeOffset_r14 = new Asn1Integer();
         nprs_SubframeOffset_r14.decode (buffer, 0, 1279);
         buffer.getContext().eventDispatcher.endElement("nprs_SubframeOffset_r14", -1);
      }
      else {
         nprs_SubframeOffset_r14 = null;
      }

      // decode expectedRSTD_r14

      if (expectedRSTD_r14Present) {
         buffer.getContext().eventDispatcher.startElement("expectedRSTD_r14", -1);

         expectedRSTD_r14 = new Asn1Integer();
         expectedRSTD_r14.decode (buffer, 0, 16383);
         buffer.getContext().eventDispatcher.endElement("expectedRSTD_r14", -1);
      }
      else {
         expectedRSTD_r14 = null;
      }

      // decode expectedRSTD_Uncertainty_r14

      if (expectedRSTD_Uncertainty_r14Present) {
         buffer.getContext().eventDispatcher.startElement("expectedRSTD_Uncertainty_r14", -1);

         expectedRSTD_Uncertainty_r14 = new Asn1Integer();
         expectedRSTD_Uncertainty_r14.decode (buffer, 0, 1023);
         buffer.getContext().eventDispatcher.endElement("expectedRSTD_Uncertainty_r14", -1);
      }
      else {
         expectedRSTD_Uncertainty_r14 = null;
      }

      // decode prsNeighbourCellIndex_r14

      if (prsNeighbourCellIndex_r14Present) {
         buffer.getContext().eventDispatcher.startElement("prsNeighbourCellIndex_r14", -1);

         prsNeighbourCellIndex_r14 = new Asn1Integer();
         prsNeighbourCellIndex_r14.decode (buffer, 1, 72);
         buffer.getContext().eventDispatcher.endElement("prsNeighbourCellIndex_r14", -1);
      }
      else {
         prsNeighbourCellIndex_r14 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("nprsInfo_Type2_v1470Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("tdd_config_r15Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode nprsInfo_Type2_v1470

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("nprsInfo_Type2_v1470", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            nprsInfo_Type2_v1470 = new PRS_Info_NB_r14();
            nprsInfo_Type2_v1470.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("nprsInfo_Type2_v1470", -1);

         }
         else {
            nprsInfo_Type2_v1470 = null;
         }

         // decode tdd_config_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("tdd_config_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            tdd_config_r15 = new TDD_Config_v1520();
            tdd_config_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("tdd_config_r15", -1);

         }
         else {
            tdd_config_r15 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((nprsInfo_Type2_v1470 != null) ||
      (tdd_config_r15 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((physCellIdNB_r14 != null), null);
      buffer.encodeBit ((cellGlobalIdNB_r14 != null), null);
      buffer.encodeBit ((carrierFreq_r14 != null), null);
      buffer.encodeBit ((earfcn_r14 != null), null);
      buffer.encodeBit ((eutra_NumCRS_Ports_r14 != null), null);
      buffer.encodeBit ((otdoa_SIB1_NB_repetitions_r14 != null), null);
      buffer.encodeBit ((nprsInfo_r14 != null), null);
      buffer.encodeBit ((nprs_slotNumberOffset_r14 != null), null);
      buffer.encodeBit ((nprs_SFN_Offset_r14 != null), null);
      buffer.encodeBit ((nprs_SubframeOffset_r14 != null), null);
      buffer.encodeBit ((expectedRSTD_r14 != null), null);
      buffer.encodeBit ((expectedRSTD_Uncertainty_r14 != null), null);
      buffer.encodeBit ((prsNeighbourCellIndex_r14 != null), null);

      // encode physCellIdNB_r14

      if (physCellIdNB_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("physCellIdNB_r14", -1);

         physCellIdNB_r14.encode (buffer, 0, 503);

         buffer.getContext().eventDispatcher.endElement("physCellIdNB_r14", -1);
      }

      // encode cellGlobalIdNB_r14

      if (cellGlobalIdNB_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("cellGlobalIdNB_r14", -1);

         cellGlobalIdNB_r14.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cellGlobalIdNB_r14", -1);
      }

      // encode carrierFreq_r14

      if (carrierFreq_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("carrierFreq_r14", -1);

         carrierFreq_r14.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("carrierFreq_r14", -1);
      }

      // encode earfcn_r14

      if (earfcn_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("earfcn_r14", -1);

         earfcn_r14.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("earfcn_r14", -1);
      }

      // encode eutra_NumCRS_Ports_r14

      if (eutra_NumCRS_Ports_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("eutra_NumCRS_Ports_r14", -1);

         eutra_NumCRS_Ports_r14.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("eutra_NumCRS_Ports_r14", -1);
      }

      // encode otdoa_SIB1_NB_repetitions_r14

      if (otdoa_SIB1_NB_repetitions_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("otdoa_SIB1_NB_repetitions_r14", -1);

         otdoa_SIB1_NB_repetitions_r14.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("otdoa_SIB1_NB_repetitions_r14", -1);
      }

      // encode nprsInfo_r14

      if (nprsInfo_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("nprsInfo_r14", -1);

         nprsInfo_r14.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nprsInfo_r14", -1);
      }

      // encode nprs_slotNumberOffset_r14

      if (nprs_slotNumberOffset_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("nprs_slotNumberOffset_r14", -1);

         nprs_slotNumberOffset_r14.encode (buffer, 0, 19);

         buffer.getContext().eventDispatcher.endElement("nprs_slotNumberOffset_r14", -1);
      }

      // encode nprs_SFN_Offset_r14

      if (nprs_SFN_Offset_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("nprs_SFN_Offset_r14", -1);

         nprs_SFN_Offset_r14.encode (buffer, 0, 63);

         buffer.getContext().eventDispatcher.endElement("nprs_SFN_Offset_r14", -1);
      }

      // encode nprs_SubframeOffset_r14

      if (nprs_SubframeOffset_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("nprs_SubframeOffset_r14", -1);

         nprs_SubframeOffset_r14.encode (buffer, 0, 1279);

         buffer.getContext().eventDispatcher.endElement("nprs_SubframeOffset_r14", -1);
      }

      // encode expectedRSTD_r14

      if (expectedRSTD_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("expectedRSTD_r14", -1);

         expectedRSTD_r14.encode (buffer, 0, 16383);

         buffer.getContext().eventDispatcher.endElement("expectedRSTD_r14", -1);
      }

      // encode expectedRSTD_Uncertainty_r14

      if (expectedRSTD_Uncertainty_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("expectedRSTD_Uncertainty_r14", -1);

         expectedRSTD_Uncertainty_r14.encode (buffer, 0, 1023);

         buffer.getContext().eventDispatcher.endElement("expectedRSTD_Uncertainty_r14", -1);
      }

      // encode prsNeighbourCellIndex_r14

      if (prsNeighbourCellIndex_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("prsNeighbourCellIndex_r14", -1);

         prsNeighbourCellIndex_r14.encode (buffer, 1, 72);

         buffer.getContext().eventDispatcher.endElement("prsNeighbourCellIndex_r14", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 2;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((nprsInfo_Type2_v1470 != null), null);
         buffer.encodeBit ((tdd_config_r15 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // nprsInfo_Type2_v1470

         if (nprsInfo_Type2_v1470 != null) {
            buffer.reset();
            nprsInfo_Type2_v1470.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("nprsInfo_Type2_v1470", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("nprsInfo_Type2_v1470", -1);
         }

         // tdd_config_r15

         if (tdd_config_r15 != null) {
            buffer.reset();
            tdd_config_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("tdd_config_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("tdd_config_r15", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
