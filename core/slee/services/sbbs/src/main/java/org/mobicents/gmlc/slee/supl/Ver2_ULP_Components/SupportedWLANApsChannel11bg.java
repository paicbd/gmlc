/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class SupportedWLANApsChannel11bg extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SupportedWLANApsChannel11bg";
   }

   protected Asn1Boolean ch1;
   protected Asn1Boolean ch2;
   protected Asn1Boolean ch3;
   protected Asn1Boolean ch4;
   protected Asn1Boolean ch5;
   protected Asn1Boolean ch6;
   protected Asn1Boolean ch7;
   protected Asn1Boolean ch8;
   protected Asn1Boolean ch9;
   protected Asn1Boolean ch10;
   protected Asn1Boolean ch11;
   protected Asn1Boolean ch12;
   protected Asn1Boolean ch13;
   protected Asn1Boolean ch14;

   public SupportedWLANApsChannel11bg () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SupportedWLANApsChannel11bg (
      Asn1Boolean ch1_,
      Asn1Boolean ch2_,
      Asn1Boolean ch3_,
      Asn1Boolean ch4_,
      Asn1Boolean ch5_,
      Asn1Boolean ch6_,
      Asn1Boolean ch7_,
      Asn1Boolean ch8_,
      Asn1Boolean ch9_,
      Asn1Boolean ch10_,
      Asn1Boolean ch11_,
      Asn1Boolean ch12_,
      Asn1Boolean ch13_,
      Asn1Boolean ch14_
   ) {
      super();
      setCh1 (ch1_);
      setCh2 (ch2_);
      setCh3 (ch3_);
      setCh4 (ch4_);
      setCh5 (ch5_);
      setCh6 (ch6_);
      setCh7 (ch7_);
      setCh8 (ch8_);
      setCh9 (ch9_);
      setCh10 (ch10_);
      setCh11 (ch11_);
      setCh12 (ch12_);
      setCh13 (ch13_);
      setCh14 (ch14_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SupportedWLANApsChannel11bg (boolean ch1_,
      boolean ch2_,
      boolean ch3_,
      boolean ch4_,
      boolean ch5_,
      boolean ch6_,
      boolean ch7_,
      boolean ch8_,
      boolean ch9_,
      boolean ch10_,
      boolean ch11_,
      boolean ch12_,
      boolean ch13_,
      boolean ch14_
   ) {
      super();
      setCh1 (ch1_);
      setCh2 (ch2_);
      setCh3 (ch3_);
      setCh4 (ch4_);
      setCh5 (ch5_);
      setCh6 (ch6_);
      setCh7 (ch7_);
      setCh8 (ch8_);
      setCh9 (ch9_);
      setCh10 (ch10_);
      setCh11 (ch11_);
      setCh12 (ch12_);
      setCh13 (ch13_);
      setCh14 (ch14_);
   }

   public void init () {
      ch1 = null;
      ch2 = null;
      ch3 = null;
      ch4 = null;
      ch5 = null;
      ch6 = null;
      ch7 = null;
      ch8 = null;
      ch9 = null;
      ch10 = null;
      ch11 = null;
      ch12 = null;
      ch13 = null;
      ch14 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof SupportedWLANApsChannel11bg) ) return false;

      SupportedWLANApsChannel11bg rhs = (SupportedWLANApsChannel11bg) obj;

      if (ch1 == null) {
         if (rhs.ch1 != null) return false;
      }
      else {
         if (!ch1.equals(rhs.ch1)) {
            return false;
         }
      }

      if (ch2 == null) {
         if (rhs.ch2 != null) return false;
      }
      else {
         if (!ch2.equals(rhs.ch2)) {
            return false;
         }
      }

      if (ch3 == null) {
         if (rhs.ch3 != null) return false;
      }
      else {
         if (!ch3.equals(rhs.ch3)) {
            return false;
         }
      }

      if (ch4 == null) {
         if (rhs.ch4 != null) return false;
      }
      else {
         if (!ch4.equals(rhs.ch4)) {
            return false;
         }
      }

      if (ch5 == null) {
         if (rhs.ch5 != null) return false;
      }
      else {
         if (!ch5.equals(rhs.ch5)) {
            return false;
         }
      }

      if (ch6 == null) {
         if (rhs.ch6 != null) return false;
      }
      else {
         if (!ch6.equals(rhs.ch6)) {
            return false;
         }
      }

      if (ch7 == null) {
         if (rhs.ch7 != null) return false;
      }
      else {
         if (!ch7.equals(rhs.ch7)) {
            return false;
         }
      }

      if (ch8 == null) {
         if (rhs.ch8 != null) return false;
      }
      else {
         if (!ch8.equals(rhs.ch8)) {
            return false;
         }
      }

      if (ch9 == null) {
         if (rhs.ch9 != null) return false;
      }
      else {
         if (!ch9.equals(rhs.ch9)) {
            return false;
         }
      }

      if (ch10 == null) {
         if (rhs.ch10 != null) return false;
      }
      else {
         if (!ch10.equals(rhs.ch10)) {
            return false;
         }
      }

      if (ch11 == null) {
         if (rhs.ch11 != null) return false;
      }
      else {
         if (!ch11.equals(rhs.ch11)) {
            return false;
         }
      }

      if (ch12 == null) {
         if (rhs.ch12 != null) return false;
      }
      else {
         if (!ch12.equals(rhs.ch12)) {
            return false;
         }
      }

      if (ch13 == null) {
         if (rhs.ch13 != null) return false;
      }
      else {
         if (!ch13.equals(rhs.ch13)) {
            return false;
         }
      }

      if (ch14 == null) {
         if (rhs.ch14 != null) return false;
      }
      else {
         if (!ch14.equals(rhs.ch14)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (ch1 != null) __code = 31*__code + ch1.hashCode();
      if (ch2 != null) __code = 31*__code + ch2.hashCode();
      if (ch3 != null) __code = 31*__code + ch3.hashCode();
      if (ch4 != null) __code = 31*__code + ch4.hashCode();
      if (ch5 != null) __code = 31*__code + ch5.hashCode();
      if (ch6 != null) __code = 31*__code + ch6.hashCode();
      if (ch7 != null) __code = 31*__code + ch7.hashCode();
      if (ch8 != null) __code = 31*__code + ch8.hashCode();
      if (ch9 != null) __code = 31*__code + ch9.hashCode();
      if (ch10 != null) __code = 31*__code + ch10.hashCode();
      if (ch11 != null) __code = 31*__code + ch11.hashCode();
      if (ch12 != null) __code = 31*__code + ch12.hashCode();
      if (ch13 != null) __code = 31*__code + ch13.hashCode();
      if (ch14 != null) __code = 31*__code + ch14.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Ch1
    */
   public Asn1Boolean getCh1 () {
      return ch1;
   }

   public void setCh1 (Asn1Boolean value) {
      this.ch1 = value;
   }

   public void setCh1 (boolean value) {
      setCh1 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch2
    */
   public Asn1Boolean getCh2 () {
      return ch2;
   }

   public void setCh2 (Asn1Boolean value) {
      this.ch2 = value;
   }

   public void setCh2 (boolean value) {
      setCh2 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch3
    */
   public Asn1Boolean getCh3 () {
      return ch3;
   }

   public void setCh3 (Asn1Boolean value) {
      this.ch3 = value;
   }

   public void setCh3 (boolean value) {
      setCh3 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch4
    */
   public Asn1Boolean getCh4 () {
      return ch4;
   }

   public void setCh4 (Asn1Boolean value) {
      this.ch4 = value;
   }

   public void setCh4 (boolean value) {
      setCh4 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch5
    */
   public Asn1Boolean getCh5 () {
      return ch5;
   }

   public void setCh5 (Asn1Boolean value) {
      this.ch5 = value;
   }

   public void setCh5 (boolean value) {
      setCh5 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch6
    */
   public Asn1Boolean getCh6 () {
      return ch6;
   }

   public void setCh6 (Asn1Boolean value) {
      this.ch6 = value;
   }

   public void setCh6 (boolean value) {
      setCh6 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch7
    */
   public Asn1Boolean getCh7 () {
      return ch7;
   }

   public void setCh7 (Asn1Boolean value) {
      this.ch7 = value;
   }

   public void setCh7 (boolean value) {
      setCh7 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch8
    */
   public Asn1Boolean getCh8 () {
      return ch8;
   }

   public void setCh8 (Asn1Boolean value) {
      this.ch8 = value;
   }

   public void setCh8 (boolean value) {
      setCh8 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch9
    */
   public Asn1Boolean getCh9 () {
      return ch9;
   }

   public void setCh9 (Asn1Boolean value) {
      this.ch9 = value;
   }

   public void setCh9 (boolean value) {
      setCh9 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch10
    */
   public Asn1Boolean getCh10 () {
      return ch10;
   }

   public void setCh10 (Asn1Boolean value) {
      this.ch10 = value;
   }

   public void setCh10 (boolean value) {
      setCh10 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch11
    */
   public Asn1Boolean getCh11 () {
      return ch11;
   }

   public void setCh11 (Asn1Boolean value) {
      this.ch11 = value;
   }

   public void setCh11 (boolean value) {
      setCh11 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch12
    */
   public Asn1Boolean getCh12 () {
      return ch12;
   }

   public void setCh12 (Asn1Boolean value) {
      this.ch12 = value;
   }

   public void setCh12 (boolean value) {
      setCh12 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch13
    */
   public Asn1Boolean getCh13 () {
      return ch13;
   }

   public void setCh13 (Asn1Boolean value) {
      this.ch13 = value;
   }

   public void setCh13 (boolean value) {
      setCh13 (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ch14
    */
   public Asn1Boolean getCh14 () {
      return ch14;
   }

   public void setCh14 (Asn1Boolean value) {
      this.ch14 = value;
   }

   public void setCh14 (boolean value) {
      setCh14 (new Asn1Boolean(value));
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ch1;
         case 1: return ch2;
         case 2: return ch3;
         case 3: return ch4;
         case 4: return ch5;
         case 5: return ch6;
         case 6: return ch7;
         case 7: return ch8;
         case 8: return ch9;
         case 9: return ch10;
         case 10: return ch11;
         case 11: return ch12;
         case 12: return ch13;
         case 13: return ch14;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ch1";
         case 1: return "ch2";
         case 2: return "ch3";
         case 3: return "ch4";
         case 4: return "ch5";
         case 5: return "ch6";
         case 6: return "ch7";
         case 7: return "ch8";
         case 8: return "ch9";
         case 9: return "ch10";
         case 10: return "ch11";
         case 11: return "ch12";
         case 12: return "ch13";
         case 13: return "ch14";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode ch1

      buffer.getContext().eventDispatcher.startElement("ch1", -1);

      ch1 = new Asn1Boolean();
      ch1.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch1", -1);

      // decode ch2

      buffer.getContext().eventDispatcher.startElement("ch2", -1);

      ch2 = new Asn1Boolean();
      ch2.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch2", -1);

      // decode ch3

      buffer.getContext().eventDispatcher.startElement("ch3", -1);

      ch3 = new Asn1Boolean();
      ch3.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch3", -1);

      // decode ch4

      buffer.getContext().eventDispatcher.startElement("ch4", -1);

      ch4 = new Asn1Boolean();
      ch4.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch4", -1);

      // decode ch5

      buffer.getContext().eventDispatcher.startElement("ch5", -1);

      ch5 = new Asn1Boolean();
      ch5.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch5", -1);

      // decode ch6

      buffer.getContext().eventDispatcher.startElement("ch6", -1);

      ch6 = new Asn1Boolean();
      ch6.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch6", -1);

      // decode ch7

      buffer.getContext().eventDispatcher.startElement("ch7", -1);

      ch7 = new Asn1Boolean();
      ch7.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch7", -1);

      // decode ch8

      buffer.getContext().eventDispatcher.startElement("ch8", -1);

      ch8 = new Asn1Boolean();
      ch8.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch8", -1);

      // decode ch9

      buffer.getContext().eventDispatcher.startElement("ch9", -1);

      ch9 = new Asn1Boolean();
      ch9.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch9", -1);

      // decode ch10

      buffer.getContext().eventDispatcher.startElement("ch10", -1);

      ch10 = new Asn1Boolean();
      ch10.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch10", -1);

      // decode ch11

      buffer.getContext().eventDispatcher.startElement("ch11", -1);

      ch11 = new Asn1Boolean();
      ch11.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch11", -1);

      // decode ch12

      buffer.getContext().eventDispatcher.startElement("ch12", -1);

      ch12 = new Asn1Boolean();
      ch12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch12", -1);

      // decode ch13

      buffer.getContext().eventDispatcher.startElement("ch13", -1);

      ch13 = new Asn1Boolean();
      ch13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch13", -1);

      // decode ch14

      buffer.getContext().eventDispatcher.startElement("ch14", -1);

      ch14 = new Asn1Boolean();
      ch14.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ch14", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode ch1

      if (ch1 != null) {
         buffer.getContext().eventDispatcher.startElement("ch1", -1);

         ch1.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch1", -1);
      }
      else throw new Asn1MissingRequiredException ("ch1");

      // encode ch2

      if (ch2 != null) {
         buffer.getContext().eventDispatcher.startElement("ch2", -1);

         ch2.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch2", -1);
      }
      else throw new Asn1MissingRequiredException ("ch2");

      // encode ch3

      if (ch3 != null) {
         buffer.getContext().eventDispatcher.startElement("ch3", -1);

         ch3.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch3", -1);
      }
      else throw new Asn1MissingRequiredException ("ch3");

      // encode ch4

      if (ch4 != null) {
         buffer.getContext().eventDispatcher.startElement("ch4", -1);

         ch4.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch4", -1);
      }
      else throw new Asn1MissingRequiredException ("ch4");

      // encode ch5

      if (ch5 != null) {
         buffer.getContext().eventDispatcher.startElement("ch5", -1);

         ch5.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch5", -1);
      }
      else throw new Asn1MissingRequiredException ("ch5");

      // encode ch6

      if (ch6 != null) {
         buffer.getContext().eventDispatcher.startElement("ch6", -1);

         ch6.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch6", -1);
      }
      else throw new Asn1MissingRequiredException ("ch6");

      // encode ch7

      if (ch7 != null) {
         buffer.getContext().eventDispatcher.startElement("ch7", -1);

         ch7.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch7", -1);
      }
      else throw new Asn1MissingRequiredException ("ch7");

      // encode ch8

      if (ch8 != null) {
         buffer.getContext().eventDispatcher.startElement("ch8", -1);

         ch8.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch8", -1);
      }
      else throw new Asn1MissingRequiredException ("ch8");

      // encode ch9

      if (ch9 != null) {
         buffer.getContext().eventDispatcher.startElement("ch9", -1);

         ch9.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch9", -1);
      }
      else throw new Asn1MissingRequiredException ("ch9");

      // encode ch10

      if (ch10 != null) {
         buffer.getContext().eventDispatcher.startElement("ch10", -1);

         ch10.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch10", -1);
      }
      else throw new Asn1MissingRequiredException ("ch10");

      // encode ch11

      if (ch11 != null) {
         buffer.getContext().eventDispatcher.startElement("ch11", -1);

         ch11.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch11", -1);
      }
      else throw new Asn1MissingRequiredException ("ch11");

      // encode ch12

      if (ch12 != null) {
         buffer.getContext().eventDispatcher.startElement("ch12", -1);

         ch12.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch12", -1);
      }
      else throw new Asn1MissingRequiredException ("ch12");

      // encode ch13

      if (ch13 != null) {
         buffer.getContext().eventDispatcher.startElement("ch13", -1);

         ch13.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch13", -1);
      }
      else throw new Asn1MissingRequiredException ("ch13");

      // encode ch14

      if (ch14 != null) {
         buffer.getContext().eventDispatcher.startElement("ch14", -1);

         ch14.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ch14", -1);
      }
      else throw new Asn1MissingRequiredException ("ch14");

   }

}
