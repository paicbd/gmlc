/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class MBS_BeaconMeasElement_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "MBS-BeaconMeasElement-r13";
   }

   protected Asn1Integer transmitterID_r13;
   protected Asn1Integer codePhase_r13;
   protected Asn1Integer codePhaseRMSError_r13;
   protected Asn1Integer rssi_r14;  // optional
   protected Asn1OpenExt extElem1;

   public MBS_BeaconMeasElement_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MBS_BeaconMeasElement_r13 (
      Asn1Integer transmitterID_r13_,
      Asn1Integer codePhase_r13_,
      Asn1Integer codePhaseRMSError_r13_,
      Asn1Integer rssi_r14_
   ) throws Asn1Exception {
      super();
      setTransmitterID_r13 (transmitterID_r13_);
      setCodePhase_r13 (codePhase_r13_);
      setCodePhaseRMSError_r13 (codePhaseRMSError_r13_);
      setRssi_r14 (rssi_r14_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MBS_BeaconMeasElement_r13 (
      Asn1Integer transmitterID_r13_,
      Asn1Integer codePhase_r13_,
      Asn1Integer codePhaseRMSError_r13_
   ) throws Asn1Exception {
      super();
      setTransmitterID_r13 (transmitterID_r13_);
      setCodePhase_r13 (codePhase_r13_);
      setCodePhaseRMSError_r13 (codePhaseRMSError_r13_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MBS_BeaconMeasElement_r13 (long transmitterID_r13_,
      long codePhase_r13_,
      long codePhaseRMSError_r13_,
      long rssi_r14_
   ) throws Asn1Exception {
      super();
      setTransmitterID_r13 (transmitterID_r13_);
      setCodePhase_r13 (codePhase_r13_);
      setCodePhaseRMSError_r13 (codePhaseRMSError_r13_);
      setRssi_r14 (rssi_r14_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MBS_BeaconMeasElement_r13 (
      long transmitterID_r13_,
      long codePhase_r13_,
      long codePhaseRMSError_r13_
   ) throws Asn1Exception {
      super();
      setTransmitterID_r13 (transmitterID_r13_);
      setCodePhase_r13 (codePhase_r13_);
      setCodePhaseRMSError_r13 (codePhaseRMSError_r13_);
   }

   public void init () {
      transmitterID_r13 = null;
      codePhase_r13 = null;
      codePhaseRMSError_r13 = null;
      rssi_r14 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof MBS_BeaconMeasElement_r13) ) return false;

      MBS_BeaconMeasElement_r13 rhs = (MBS_BeaconMeasElement_r13) obj;

      if (transmitterID_r13 == null) {
         if (rhs.transmitterID_r13 != null) return false;
      }
      else {
         if (!transmitterID_r13.equals(rhs.transmitterID_r13)) {
            return false;
         }
      }

      if (codePhase_r13 == null) {
         if (rhs.codePhase_r13 != null) return false;
      }
      else {
         if (!codePhase_r13.equals(rhs.codePhase_r13)) {
            return false;
         }
      }

      if (codePhaseRMSError_r13 == null) {
         if (rhs.codePhaseRMSError_r13 != null) return false;
      }
      else {
         if (!codePhaseRMSError_r13.equals(rhs.codePhaseRMSError_r13)) {
            return false;
         }
      }

      if (rssi_r14 == null) {
         if (rhs.rssi_r14 != null) return false;
      }
      else {
         if (!rssi_r14.equals(rhs.rssi_r14)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (transmitterID_r13 != null) __code = 31*__code + transmitterID_r13.hashCode();
      if (codePhase_r13 != null) __code = 31*__code + codePhase_r13.hashCode();
      if (codePhaseRMSError_r13 != null) __code = 31*__code + codePhaseRMSError_r13.hashCode();
      if (rssi_r14 != null) __code = 31*__code + rssi_r14.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for TransmitterID_r13
    */
   public Asn1Integer getTransmitterID_r13 () {
      return transmitterID_r13;
   }

   public void setTransmitterID_r13 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 32767))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.transmitterID_r13 = value;
   }

   public void setTransmitterID_r13 (long value) 
      throws Asn1Exception
   {
      setTransmitterID_r13 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CodePhase_r13
    */
   public Asn1Integer getCodePhase_r13 () {
      return codePhase_r13;
   }

   public void setCodePhase_r13 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 2097151))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.codePhase_r13 = value;
   }

   public void setCodePhase_r13 (long value) 
      throws Asn1Exception
   {
      setCodePhase_r13 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CodePhaseRMSError_r13
    */
   public Asn1Integer getCodePhaseRMSError_r13 () {
      return codePhaseRMSError_r13;
   }

   public void setCodePhaseRMSError_r13 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 63))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.codePhaseRMSError_r13 = value;
   }

   public void setCodePhaseRMSError_r13 (long value) 
      throws Asn1Exception
   {
      setCodePhaseRMSError_r13 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Rssi_r14
    */
   public Asn1Integer getRssi_r14 () {
      return rssi_r14;
   }

   public void setRssi_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= -130 && value.value <= -30))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.rssi_r14 = value;
   }

   public void setRssi_r14 (long value) 
      throws Asn1Exception
   {
      setRssi_r14 (new Asn1Integer(value));
   }
   public boolean hasRssi_r14 () {
      return (rssi_r14 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return transmitterID_r13;
         case 1: return codePhase_r13;
         case 2: return codePhaseRMSError_r13;
         case 3: return rssi_r14;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "transmitterID-r13";
         case 1: return "codePhase-r13";
         case 2: return "codePhaseRMSError-r13";
         case 3: return "rssi-r14";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode transmitterID_r13

      buffer.getContext().eventDispatcher.startElement("transmitterID_r13", -1);

      transmitterID_r13 = new Asn1Integer();
      transmitterID_r13.decode (buffer, 0, 32767);
      buffer.getContext().eventDispatcher.endElement("transmitterID_r13", -1);

      // decode codePhase_r13

      buffer.getContext().eventDispatcher.startElement("codePhase_r13", -1);

      codePhase_r13 = new Asn1Integer();
      codePhase_r13.decode (buffer, 0, 2097151);
      buffer.getContext().eventDispatcher.endElement("codePhase_r13", -1);

      // decode codePhaseRMSError_r13

      buffer.getContext().eventDispatcher.startElement("codePhaseRMSError_r13", -1);

      codePhaseRMSError_r13 = new Asn1Integer();
      codePhaseRMSError_r13.decode (buffer, 0, 63);
      buffer.getContext().eventDispatcher.endElement("codePhaseRMSError_r13", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("rssi_r14Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode rssi_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("rssi_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            rssi_r14 = new Asn1Integer();
            rssi_r14.decode (buffer, -130, -30);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("rssi_r14", -1);

         }
         else {
            rssi_r14 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((rssi_r14 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode transmitterID_r13

      if (transmitterID_r13 != null) {
         buffer.getContext().eventDispatcher.startElement("transmitterID_r13", -1);

         transmitterID_r13.encode (buffer, 0, 32767);

         buffer.getContext().eventDispatcher.endElement("transmitterID_r13", -1);
      }
      else throw new Asn1MissingRequiredException ("transmitterID_r13");

      // encode codePhase_r13

      if (codePhase_r13 != null) {
         buffer.getContext().eventDispatcher.startElement("codePhase_r13", -1);

         codePhase_r13.encode (buffer, 0, 2097151);

         buffer.getContext().eventDispatcher.endElement("codePhase_r13", -1);
      }
      else throw new Asn1MissingRequiredException ("codePhase_r13");

      // encode codePhaseRMSError_r13

      if (codePhaseRMSError_r13 != null) {
         buffer.getContext().eventDispatcher.startElement("codePhaseRMSError_r13", -1);

         codePhaseRMSError_r13.encode (buffer, 0, 63);

         buffer.getContext().eventDispatcher.endElement("codePhaseRMSError_r13", -1);
      }
      else throw new Asn1MissingRequiredException ("codePhaseRMSError_r13");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((rssi_r14 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // rssi_r14

         if (rssi_r14 != null) {
            buffer.reset();
            rssi_r14.encode (buffer, -130, -30);
            buffer.getContext().eventDispatcher.startElement("rssi_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("rssi_r14", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
