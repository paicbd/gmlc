/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class DisplacementTimeStamp_r15 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "DisplacementTimeStamp-r15";
   }

   // Choice element identifier constants
   public final static byte _UTCTIME_R15 = 1;
   public final static byte _GNSSTIME_R15 = 2;
   public final static byte _SYSTEMFRAMENUMBER_R15 = 3;
   public final static byte _MEASUREMENTSFN_R15 = 4;
   public final static byte _EXTELEM1 = 5;

   public DisplacementTimeStamp_r15 () {
      super();
   }

   public DisplacementTimeStamp_r15 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _UTCTIME_R15: return "utcTime_r15";
      case _GNSSTIME_R15: return "gnssTime_r15";
      case _SYSTEMFRAMENUMBER_R15: return "systemFrameNumber_r15";
      case _MEASUREMENTSFN_R15: return "measurementSFN_r15";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for utcTime_r15
    */
   public UTC_Time_r15 getUtcTime_r15 () {
      return (choiceID == _UTCTIME_R15) ? (UTC_Time_r15)element : null;
   }
   public void setUtcTime_r15 (UTC_Time_r15 value) {
      setElement (_UTCTIME_R15, value);
   }
   public boolean isUtcTime_r15 () {
      return (choiceID == _UTCTIME_R15);
   }

   /**
    * Accessor/mutator methods for gnssTime_r15
    */
   public MeasurementReferenceTime getGnssTime_r15 () {
      return (choiceID == _GNSSTIME_R15) ? (MeasurementReferenceTime)element : null;
   }
   public void setGnssTime_r15 (MeasurementReferenceTime value) {
      setElement (_GNSSTIME_R15, value);
   }
   public boolean isGnssTime_r15 () {
      return (choiceID == _GNSSTIME_R15);
   }

   /**
    * Accessor/mutator methods for systemFrameNumber_r15
    */
   public SFN_r15 getSystemFrameNumber_r15 () {
      return (choiceID == _SYSTEMFRAMENUMBER_R15) ? (SFN_r15)element : null;
   }
   public void setSystemFrameNumber_r15 (SFN_r15 value) {
      setElement (_SYSTEMFRAMENUMBER_R15, value);
   }
   public boolean isSystemFrameNumber_r15 () {
      return (choiceID == _SYSTEMFRAMENUMBER_R15);
   }

   /**
    * Accessor/mutator methods for measurementSFN_r15
    */
   public Asn1Integer getMeasurementSFN_r15 () {
      return (choiceID == _MEASUREMENTSFN_R15) ? (Asn1Integer)element : null;
   }
   public void setMeasurementSFN_r15 (Asn1Integer value) {
      setElement (_MEASUREMENTSFN_R15, value);
   }
   public boolean isMeasurementSFN_r15 () {
      return (choiceID == _MEASUREMENTSFN_R15);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (4, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // utcTime_r15
            case 0: { 
               UTC_Time_r15 utcTime_r15;
               element = utcTime_r15 = new UTC_Time_r15();
               utcTime_r15.decode (buffer);
               break;
            }

            // gnssTime_r15
            case 1: { 
               MeasurementReferenceTime gnssTime_r15;
               element = gnssTime_r15 = new MeasurementReferenceTime();
               gnssTime_r15.decode (buffer);
               break;
            }

            // systemFrameNumber_r15
            case 2: { 
               SFN_r15 systemFrameNumber_r15;
               element = systemFrameNumber_r15 = new SFN_r15();
               systemFrameNumber_r15.decode (buffer);
               break;
            }

            // measurementSFN_r15
            case 3: { 
               Asn1Integer measurementSFN_r15;
               element = measurementSFN_r15 = new Asn1Integer();
               measurementSFN_r15.decode (buffer, -8192, 9214);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 5;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         setElement (_EXTELEM1, openType);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 4);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 4, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // utcTime_r15
            case _UTCTIME_R15:
               UTC_Time_r15 utcTime_r15 = (UTC_Time_r15) element;
               utcTime_r15.encode (buffer);
               break;

            // gnssTime_r15
            case _GNSSTIME_R15:
               MeasurementReferenceTime gnssTime_r15 = (MeasurementReferenceTime) element;
               gnssTime_r15.encode (buffer);
               break;

            // systemFrameNumber_r15
            case _SYSTEMFRAMENUMBER_R15:
               SFN_r15 systemFrameNumber_r15 = (SFN_r15) element;
               systemFrameNumber_r15.encode (buffer);
               break;

            // measurementSFN_r15
            case _MEASUREMENTSFN_R15:
               Asn1Integer measurementSFN_r15 = (Asn1Integer) element;
               measurementSFN_r15.encode (buffer, -8192, 9214);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 5);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1OpenType openType = (Asn1OpenType) element;
         buffer.byteAlign();
         openType.encode (buffer);
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
