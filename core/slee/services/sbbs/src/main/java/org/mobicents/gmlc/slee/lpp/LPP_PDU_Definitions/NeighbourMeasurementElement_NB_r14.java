/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NeighbourMeasurementElement_NB_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "NeighbourMeasurementElement-NB-r14";
   }

   protected Asn1Integer physCellIdNeighbour_r14;
   protected ECGI cellGlobalIdNeighbour_r14;  // optional
   protected ARFCN_ValueEUTRA_r14 earfcnNeighbour_r14;  // optional
   protected Asn1Integer rstd_r14;
   protected OTDOA_MeasQuality rstd_Quality_r14;
   protected Asn1Integer tpIdNeighbour_r14;  // optional
   protected Asn1Integer prsIdNeighbour_r14;  // optional
   protected Asn1Integer delta_rstd_r14;  // optional
   protected AdditionalPathList_r14 additionalPathsNeighbour_r14;  // optional
   protected Asn1Integer nprsIdNeighbour_r14;  // optional
   protected CarrierFreqOffsetNB_r14 carrierFreqOffsetNB_Neighbour_r14 = null;  // optional
   protected Asn1OpenExt extElem1;

   public NeighbourMeasurementElement_NB_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NeighbourMeasurementElement_NB_r14 (
      Asn1Integer physCellIdNeighbour_r14_,
      ECGI cellGlobalIdNeighbour_r14_,
      ARFCN_ValueEUTRA_r14 earfcnNeighbour_r14_,
      Asn1Integer rstd_r14_,
      OTDOA_MeasQuality rstd_Quality_r14_,
      Asn1Integer tpIdNeighbour_r14_,
      Asn1Integer prsIdNeighbour_r14_,
      Asn1Integer delta_rstd_r14_,
      AdditionalPathList_r14 additionalPathsNeighbour_r14_,
      Asn1Integer nprsIdNeighbour_r14_,
      CarrierFreqOffsetNB_r14 carrierFreqOffsetNB_Neighbour_r14_
   ) throws Asn1Exception {
      super();
      setPhysCellIdNeighbour_r14 (physCellIdNeighbour_r14_);
      setCellGlobalIdNeighbour_r14 (cellGlobalIdNeighbour_r14_);
      setEarfcnNeighbour_r14 (earfcnNeighbour_r14_);
      setRstd_r14 (rstd_r14_);
      setRstd_Quality_r14 (rstd_Quality_r14_);
      setTpIdNeighbour_r14 (tpIdNeighbour_r14_);
      setPrsIdNeighbour_r14 (prsIdNeighbour_r14_);
      setDelta_rstd_r14 (delta_rstd_r14_);
      setAdditionalPathsNeighbour_r14 (additionalPathsNeighbour_r14_);
      setNprsIdNeighbour_r14 (nprsIdNeighbour_r14_);
      setCarrierFreqOffsetNB_Neighbour_r14 (carrierFreqOffsetNB_Neighbour_r14_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public NeighbourMeasurementElement_NB_r14 (
      Asn1Integer physCellIdNeighbour_r14_,
      Asn1Integer rstd_r14_,
      OTDOA_MeasQuality rstd_Quality_r14_
   ) throws Asn1Exception {
      super();
      setPhysCellIdNeighbour_r14 (physCellIdNeighbour_r14_);
      setRstd_r14 (rstd_r14_);
      setRstd_Quality_r14 (rstd_Quality_r14_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NeighbourMeasurementElement_NB_r14 (long physCellIdNeighbour_r14_,
      ECGI cellGlobalIdNeighbour_r14_,
      long earfcnNeighbour_r14_,
      long rstd_r14_,
      OTDOA_MeasQuality rstd_Quality_r14_,
      long tpIdNeighbour_r14_,
      long prsIdNeighbour_r14_,
      long delta_rstd_r14_,
      AdditionalPathList_r14 additionalPathsNeighbour_r14_,
      long nprsIdNeighbour_r14_,
      CarrierFreqOffsetNB_r14 carrierFreqOffsetNB_Neighbour_r14_
   ) throws Asn1Exception {
      super();
      setPhysCellIdNeighbour_r14 (physCellIdNeighbour_r14_);
      setCellGlobalIdNeighbour_r14 (cellGlobalIdNeighbour_r14_);
      setEarfcnNeighbour_r14 (earfcnNeighbour_r14_);
      setRstd_r14 (rstd_r14_);
      setRstd_Quality_r14 (rstd_Quality_r14_);
      setTpIdNeighbour_r14 (tpIdNeighbour_r14_);
      setPrsIdNeighbour_r14 (prsIdNeighbour_r14_);
      setDelta_rstd_r14 (delta_rstd_r14_);
      setAdditionalPathsNeighbour_r14 (additionalPathsNeighbour_r14_);
      setNprsIdNeighbour_r14 (nprsIdNeighbour_r14_);
      setCarrierFreqOffsetNB_Neighbour_r14 (carrierFreqOffsetNB_Neighbour_r14_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public NeighbourMeasurementElement_NB_r14 (
      long physCellIdNeighbour_r14_,
      long rstd_r14_,
      OTDOA_MeasQuality rstd_Quality_r14_
   ) throws Asn1Exception {
      super();
      setPhysCellIdNeighbour_r14 (physCellIdNeighbour_r14_);
      setRstd_r14 (rstd_r14_);
      setRstd_Quality_r14 (rstd_Quality_r14_);
   }

   public void init () {
      physCellIdNeighbour_r14 = null;
      cellGlobalIdNeighbour_r14 = null;
      earfcnNeighbour_r14 = null;
      rstd_r14 = null;
      rstd_Quality_r14 = null;
      tpIdNeighbour_r14 = null;
      prsIdNeighbour_r14 = null;
      delta_rstd_r14 = null;
      additionalPathsNeighbour_r14 = null;
      nprsIdNeighbour_r14 = null;
      carrierFreqOffsetNB_Neighbour_r14 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof NeighbourMeasurementElement_NB_r14) ) return false;

      NeighbourMeasurementElement_NB_r14 rhs = (NeighbourMeasurementElement_NB_r14) obj;

      if (physCellIdNeighbour_r14 == null) {
         if (rhs.physCellIdNeighbour_r14 != null) return false;
      }
      else {
         if (!physCellIdNeighbour_r14.equals(rhs.physCellIdNeighbour_r14)) {
            return false;
         }
      }

      if (cellGlobalIdNeighbour_r14 == null) {
         if (rhs.cellGlobalIdNeighbour_r14 != null) return false;
      }
      else {
         if (!cellGlobalIdNeighbour_r14.equals(rhs.cellGlobalIdNeighbour_r14)) {
            return false;
         }
      }

      if (earfcnNeighbour_r14 == null) {
         if (rhs.earfcnNeighbour_r14 != null) return false;
      }
      else {
         if (!earfcnNeighbour_r14.equals(rhs.earfcnNeighbour_r14)) {
            return false;
         }
      }

      if (rstd_r14 == null) {
         if (rhs.rstd_r14 != null) return false;
      }
      else {
         if (!rstd_r14.equals(rhs.rstd_r14)) {
            return false;
         }
      }

      if (rstd_Quality_r14 == null) {
         if (rhs.rstd_Quality_r14 != null) return false;
      }
      else {
         if (!rstd_Quality_r14.equals(rhs.rstd_Quality_r14)) {
            return false;
         }
      }

      if (tpIdNeighbour_r14 == null) {
         if (rhs.tpIdNeighbour_r14 != null) return false;
      }
      else {
         if (!tpIdNeighbour_r14.equals(rhs.tpIdNeighbour_r14)) {
            return false;
         }
      }

      if (prsIdNeighbour_r14 == null) {
         if (rhs.prsIdNeighbour_r14 != null) return false;
      }
      else {
         if (!prsIdNeighbour_r14.equals(rhs.prsIdNeighbour_r14)) {
            return false;
         }
      }

      if (delta_rstd_r14 == null) {
         if (rhs.delta_rstd_r14 != null) return false;
      }
      else {
         if (!delta_rstd_r14.equals(rhs.delta_rstd_r14)) {
            return false;
         }
      }

      if (additionalPathsNeighbour_r14 == null) {
         if (rhs.additionalPathsNeighbour_r14 != null) return false;
      }
      else {
         if (!additionalPathsNeighbour_r14.equals(rhs.additionalPathsNeighbour_r14)) {
            return false;
         }
      }

      if (nprsIdNeighbour_r14 == null) {
         if (rhs.nprsIdNeighbour_r14 != null) return false;
      }
      else {
         if (!nprsIdNeighbour_r14.equals(rhs.nprsIdNeighbour_r14)) {
            return false;
         }
      }

      if (carrierFreqOffsetNB_Neighbour_r14 == null) {
         if (rhs.carrierFreqOffsetNB_Neighbour_r14 != null) return false;
      }
      else {
         if (!carrierFreqOffsetNB_Neighbour_r14.equals(rhs.carrierFreqOffsetNB_Neighbour_r14)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (physCellIdNeighbour_r14 != null) __code = 31*__code + physCellIdNeighbour_r14.hashCode();
      if (cellGlobalIdNeighbour_r14 != null) __code = 31*__code + cellGlobalIdNeighbour_r14.hashCode();
      if (earfcnNeighbour_r14 != null) __code = 31*__code + earfcnNeighbour_r14.hashCode();
      if (rstd_r14 != null) __code = 31*__code + rstd_r14.hashCode();
      if (rstd_Quality_r14 != null) __code = 31*__code + rstd_Quality_r14.hashCode();
      if (tpIdNeighbour_r14 != null) __code = 31*__code + tpIdNeighbour_r14.hashCode();
      if (prsIdNeighbour_r14 != null) __code = 31*__code + prsIdNeighbour_r14.hashCode();
      if (delta_rstd_r14 != null) __code = 31*__code + delta_rstd_r14.hashCode();
      if (additionalPathsNeighbour_r14 != null) __code = 31*__code + additionalPathsNeighbour_r14.hashCode();
      if (nprsIdNeighbour_r14 != null) __code = 31*__code + nprsIdNeighbour_r14.hashCode();
      if (carrierFreqOffsetNB_Neighbour_r14 != null) __code = 31*__code + carrierFreqOffsetNB_Neighbour_r14.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for PhysCellIdNeighbour_r14
    */
   public Asn1Integer getPhysCellIdNeighbour_r14 () {
      return physCellIdNeighbour_r14;
   }

   public void setPhysCellIdNeighbour_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 503))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.physCellIdNeighbour_r14 = value;
   }

   public void setPhysCellIdNeighbour_r14 (long value) 
      throws Asn1Exception
   {
      setPhysCellIdNeighbour_r14 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for CellGlobalIdNeighbour_r14
    */
   public ECGI getCellGlobalIdNeighbour_r14 () {
      return cellGlobalIdNeighbour_r14;
   }

   public void setCellGlobalIdNeighbour_r14 (ECGI value) {
      this.cellGlobalIdNeighbour_r14 = value;
   }

   public boolean hasCellGlobalIdNeighbour_r14 () {
      return (cellGlobalIdNeighbour_r14 != null);
   }

   /**
    * Accessor/mutator methods for EarfcnNeighbour_r14
    */
   public ARFCN_ValueEUTRA_r14 getEarfcnNeighbour_r14 () {
      return earfcnNeighbour_r14;
   }

   public void setEarfcnNeighbour_r14 (ARFCN_ValueEUTRA_r14 value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 262143))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.earfcnNeighbour_r14 = value;
   }

   public void setEarfcnNeighbour_r14 (long value) 
      throws Asn1Exception
   {
      setEarfcnNeighbour_r14 (new ARFCN_ValueEUTRA_r14(value));
   }
   public boolean hasEarfcnNeighbour_r14 () {
      return (earfcnNeighbour_r14 != null);
   }

   /**
    * Accessor/mutator methods for Rstd_r14
    */
   public Asn1Integer getRstd_r14 () {
      return rstd_r14;
   }

   public void setRstd_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 12711))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.rstd_r14 = value;
   }

   public void setRstd_r14 (long value) 
      throws Asn1Exception
   {
      setRstd_r14 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Rstd_Quality_r14
    */
   public OTDOA_MeasQuality getRstd_Quality_r14 () {
      return rstd_Quality_r14;
   }

   public void setRstd_Quality_r14 (OTDOA_MeasQuality value) {
      this.rstd_Quality_r14 = value;
   }

   /**
    * Accessor/mutator methods for TpIdNeighbour_r14
    */
   public Asn1Integer getTpIdNeighbour_r14 () {
      return tpIdNeighbour_r14;
   }

   public void setTpIdNeighbour_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.tpIdNeighbour_r14 = value;
   }

   public void setTpIdNeighbour_r14 (long value) 
      throws Asn1Exception
   {
      setTpIdNeighbour_r14 (new Asn1Integer(value));
   }
   public boolean hasTpIdNeighbour_r14 () {
      return (tpIdNeighbour_r14 != null);
   }

   /**
    * Accessor/mutator methods for PrsIdNeighbour_r14
    */
   public Asn1Integer getPrsIdNeighbour_r14 () {
      return prsIdNeighbour_r14;
   }

   public void setPrsIdNeighbour_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.prsIdNeighbour_r14 = value;
   }

   public void setPrsIdNeighbour_r14 (long value) 
      throws Asn1Exception
   {
      setPrsIdNeighbour_r14 (new Asn1Integer(value));
   }
   public boolean hasPrsIdNeighbour_r14 () {
      return (prsIdNeighbour_r14 != null);
   }

   /**
    * Accessor/mutator methods for Delta_rstd_r14
    */
   public Asn1Integer getDelta_rstd_r14 () {
      return delta_rstd_r14;
   }

   public void setDelta_rstd_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 5))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.delta_rstd_r14 = value;
   }

   public void setDelta_rstd_r14 (long value) 
      throws Asn1Exception
   {
      setDelta_rstd_r14 (new Asn1Integer(value));
   }
   public boolean hasDelta_rstd_r14 () {
      return (delta_rstd_r14 != null);
   }

   /**
    * Accessor/mutator methods for AdditionalPathsNeighbour_r14
    */
   public AdditionalPathList_r14 getAdditionalPathsNeighbour_r14 () {
      return additionalPathsNeighbour_r14;
   }

   public void setAdditionalPathsNeighbour_r14 (AdditionalPathList_r14 value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 2))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.additionalPathsNeighbour_r14 = value;
   }

   public boolean hasAdditionalPathsNeighbour_r14 () {
      return (additionalPathsNeighbour_r14 != null);
   }

   /**
    * Accessor/mutator methods for NprsIdNeighbour_r14
    */
   public Asn1Integer getNprsIdNeighbour_r14 () {
      return nprsIdNeighbour_r14;
   }

   public void setNprsIdNeighbour_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nprsIdNeighbour_r14 = value;
   }

   public void setNprsIdNeighbour_r14 (long value) 
      throws Asn1Exception
   {
      setNprsIdNeighbour_r14 (new Asn1Integer(value));
   }
   public boolean hasNprsIdNeighbour_r14 () {
      return (nprsIdNeighbour_r14 != null);
   }

   /**
    * Accessor/mutator methods for CarrierFreqOffsetNB_Neighbour_r14
    */
   public CarrierFreqOffsetNB_r14 getCarrierFreqOffsetNB_Neighbour_r14 () {
      return carrierFreqOffsetNB_Neighbour_r14;
   }

   public void setCarrierFreqOffsetNB_Neighbour_r14 (CarrierFreqOffsetNB_r14 value) {
      this.carrierFreqOffsetNB_Neighbour_r14 = value;
   }

   public boolean hasCarrierFreqOffsetNB_Neighbour_r14 () {
      return (carrierFreqOffsetNB_Neighbour_r14 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 12; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return physCellIdNeighbour_r14;
         case 1: return cellGlobalIdNeighbour_r14;
         case 2: return earfcnNeighbour_r14;
         case 3: return rstd_r14;
         case 4: return rstd_Quality_r14;
         case 5: return tpIdNeighbour_r14;
         case 6: return prsIdNeighbour_r14;
         case 7: return delta_rstd_r14;
         case 8: return additionalPathsNeighbour_r14;
         case 9: return nprsIdNeighbour_r14;
         case 10: return carrierFreqOffsetNB_Neighbour_r14;
         case 11: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "physCellIdNeighbour-r14";
         case 1: return "cellGlobalIdNeighbour-r14";
         case 2: return "earfcnNeighbour-r14";
         case 3: return "rstd-r14";
         case 4: return "rstd-Quality-r14";
         case 5: return "tpIdNeighbour-r14";
         case 6: return "prsIdNeighbour-r14";
         case 7: return "delta-rstd-r14";
         case 8: return "additionalPathsNeighbour-r14";
         case 9: return "nprsIdNeighbour-r14";
         case 10: return "carrierFreqOffsetNB-Neighbour-r14";
         case 11: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean cellGlobalIdNeighbour_r14Present = buffer.decodeBit ("cellGlobalIdNeighbour_r14Present");
      boolean earfcnNeighbour_r14Present = buffer.decodeBit ("earfcnNeighbour_r14Present");
      boolean tpIdNeighbour_r14Present = buffer.decodeBit ("tpIdNeighbour_r14Present");
      boolean prsIdNeighbour_r14Present = buffer.decodeBit ("prsIdNeighbour_r14Present");
      boolean delta_rstd_r14Present = buffer.decodeBit ("delta_rstd_r14Present");
      boolean additionalPathsNeighbour_r14Present = buffer.decodeBit ("additionalPathsNeighbour_r14Present");
      boolean nprsIdNeighbour_r14Present = buffer.decodeBit ("nprsIdNeighbour_r14Present");
      boolean carrierFreqOffsetNB_Neighbour_r14Present = buffer.decodeBit ("carrierFreqOffsetNB_Neighbour_r14Present");

      // decode physCellIdNeighbour_r14

      buffer.getContext().eventDispatcher.startElement("physCellIdNeighbour_r14", -1);

      physCellIdNeighbour_r14 = new Asn1Integer();
      physCellIdNeighbour_r14.decode (buffer, 0, 503);
      buffer.getContext().eventDispatcher.endElement("physCellIdNeighbour_r14", -1);

      // decode cellGlobalIdNeighbour_r14

      if (cellGlobalIdNeighbour_r14Present) {
         buffer.getContext().eventDispatcher.startElement("cellGlobalIdNeighbour_r14", -1);

         cellGlobalIdNeighbour_r14 = new ECGI();
         cellGlobalIdNeighbour_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellGlobalIdNeighbour_r14", -1);
      }
      else {
         cellGlobalIdNeighbour_r14 = null;
      }

      // decode earfcnNeighbour_r14

      if (earfcnNeighbour_r14Present) {
         buffer.getContext().eventDispatcher.startElement("earfcnNeighbour_r14", -1);

         earfcnNeighbour_r14 = new ARFCN_ValueEUTRA_r14();
         earfcnNeighbour_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("earfcnNeighbour_r14", -1);
      }
      else {
         earfcnNeighbour_r14 = null;
      }

      // decode rstd_r14

      buffer.getContext().eventDispatcher.startElement("rstd_r14", -1);

      rstd_r14 = new Asn1Integer();
      rstd_r14.decode (buffer, 0, 12711);
      buffer.getContext().eventDispatcher.endElement("rstd_r14", -1);

      // decode rstd_Quality_r14

      buffer.getContext().eventDispatcher.startElement("rstd_Quality_r14", -1);

      rstd_Quality_r14 = new OTDOA_MeasQuality();
      rstd_Quality_r14.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("rstd_Quality_r14", -1);

      // decode tpIdNeighbour_r14

      if (tpIdNeighbour_r14Present) {
         buffer.getContext().eventDispatcher.startElement("tpIdNeighbour_r14", -1);

         tpIdNeighbour_r14 = new Asn1Integer();
         tpIdNeighbour_r14.decode (buffer, 0, 4095);
         buffer.getContext().eventDispatcher.endElement("tpIdNeighbour_r14", -1);
      }
      else {
         tpIdNeighbour_r14 = null;
      }

      // decode prsIdNeighbour_r14

      if (prsIdNeighbour_r14Present) {
         buffer.getContext().eventDispatcher.startElement("prsIdNeighbour_r14", -1);

         prsIdNeighbour_r14 = new Asn1Integer();
         prsIdNeighbour_r14.decode (buffer, 0, 4095);
         buffer.getContext().eventDispatcher.endElement("prsIdNeighbour_r14", -1);
      }
      else {
         prsIdNeighbour_r14 = null;
      }

      // decode delta_rstd_r14

      if (delta_rstd_r14Present) {
         buffer.getContext().eventDispatcher.startElement("delta_rstd_r14", -1);

         delta_rstd_r14 = new Asn1Integer();
         delta_rstd_r14.decode (buffer, 0, 5);
         buffer.getContext().eventDispatcher.endElement("delta_rstd_r14", -1);
      }
      else {
         delta_rstd_r14 = null;
      }

      // decode additionalPathsNeighbour_r14

      if (additionalPathsNeighbour_r14Present) {
         buffer.getContext().eventDispatcher.startElement("additionalPathsNeighbour_r14", -1);

         additionalPathsNeighbour_r14 = new AdditionalPathList_r14();
         additionalPathsNeighbour_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("additionalPathsNeighbour_r14", -1);
      }
      else {
         additionalPathsNeighbour_r14 = null;
      }

      // decode nprsIdNeighbour_r14

      if (nprsIdNeighbour_r14Present) {
         buffer.getContext().eventDispatcher.startElement("nprsIdNeighbour_r14", -1);

         nprsIdNeighbour_r14 = new Asn1Integer();
         nprsIdNeighbour_r14.decode (buffer, 0, 4095);
         buffer.getContext().eventDispatcher.endElement("nprsIdNeighbour_r14", -1);
      }
      else {
         nprsIdNeighbour_r14 = null;
      }

      // decode carrierFreqOffsetNB_Neighbour_r14

      if (carrierFreqOffsetNB_Neighbour_r14Present) {
         buffer.getContext().eventDispatcher.startElement("carrierFreqOffsetNB_Neighbour_r14", -1);

         int tval = CarrierFreqOffsetNB_r14.decodeEnumValue (buffer);
         carrierFreqOffsetNB_Neighbour_r14 = CarrierFreqOffsetNB_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("carrierFreqOffsetNB_Neighbour_r14", -1);
      }
      else {
         carrierFreqOffsetNB_Neighbour_r14 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((cellGlobalIdNeighbour_r14 != null), null);
      buffer.encodeBit ((earfcnNeighbour_r14 != null), null);
      buffer.encodeBit ((tpIdNeighbour_r14 != null), null);
      buffer.encodeBit ((prsIdNeighbour_r14 != null), null);
      buffer.encodeBit ((delta_rstd_r14 != null), null);
      buffer.encodeBit ((additionalPathsNeighbour_r14 != null), null);
      buffer.encodeBit ((nprsIdNeighbour_r14 != null), null);
      buffer.encodeBit ((carrierFreqOffsetNB_Neighbour_r14 != null), null);

      // encode physCellIdNeighbour_r14

      if (physCellIdNeighbour_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("physCellIdNeighbour_r14", -1);

         physCellIdNeighbour_r14.encode (buffer, 0, 503);

         buffer.getContext().eventDispatcher.endElement("physCellIdNeighbour_r14", -1);
      }
      else throw new Asn1MissingRequiredException ("physCellIdNeighbour_r14");

      // encode cellGlobalIdNeighbour_r14

      if (cellGlobalIdNeighbour_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("cellGlobalIdNeighbour_r14", -1);

         cellGlobalIdNeighbour_r14.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cellGlobalIdNeighbour_r14", -1);
      }

      // encode earfcnNeighbour_r14

      if (earfcnNeighbour_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("earfcnNeighbour_r14", -1);

         earfcnNeighbour_r14.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("earfcnNeighbour_r14", -1);
      }

      // encode rstd_r14

      if (rstd_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("rstd_r14", -1);

         rstd_r14.encode (buffer, 0, 12711);

         buffer.getContext().eventDispatcher.endElement("rstd_r14", -1);
      }
      else throw new Asn1MissingRequiredException ("rstd_r14");

      // encode rstd_Quality_r14

      if (rstd_Quality_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("rstd_Quality_r14", -1);

         rstd_Quality_r14.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rstd_Quality_r14", -1);
      }
      else throw new Asn1MissingRequiredException ("rstd_Quality_r14");

      // encode tpIdNeighbour_r14

      if (tpIdNeighbour_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("tpIdNeighbour_r14", -1);

         tpIdNeighbour_r14.encode (buffer, 0, 4095);

         buffer.getContext().eventDispatcher.endElement("tpIdNeighbour_r14", -1);
      }

      // encode prsIdNeighbour_r14

      if (prsIdNeighbour_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("prsIdNeighbour_r14", -1);

         prsIdNeighbour_r14.encode (buffer, 0, 4095);

         buffer.getContext().eventDispatcher.endElement("prsIdNeighbour_r14", -1);
      }

      // encode delta_rstd_r14

      if (delta_rstd_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("delta_rstd_r14", -1);

         delta_rstd_r14.encode (buffer, 0, 5);

         buffer.getContext().eventDispatcher.endElement("delta_rstd_r14", -1);
      }

      // encode additionalPathsNeighbour_r14

      if (additionalPathsNeighbour_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("additionalPathsNeighbour_r14", -1);

         additionalPathsNeighbour_r14.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("additionalPathsNeighbour_r14", -1);
      }

      // encode nprsIdNeighbour_r14

      if (nprsIdNeighbour_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("nprsIdNeighbour_r14", -1);

         nprsIdNeighbour_r14.encode (buffer, 0, 4095);

         buffer.getContext().eventDispatcher.endElement("nprsIdNeighbour_r14", -1);
      }

      // encode carrierFreqOffsetNB_Neighbour_r14

      if (carrierFreqOffsetNB_Neighbour_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("carrierFreqOffsetNB_Neighbour_r14", -1);

         carrierFreqOffsetNB_Neighbour_r14.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("carrierFreqOffsetNB_Neighbour_r14", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
