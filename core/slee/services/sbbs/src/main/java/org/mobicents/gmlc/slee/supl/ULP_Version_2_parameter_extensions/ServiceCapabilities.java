/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Version_2_parameter_extensions;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.Ver2_ULP_Components.ReportingCap;

public class ServiceCapabilities extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_Version_2_parameter_extensionsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_Version_2_parameter_extensionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ServiceCapabilities";
   }

   protected ServicesSupported servicesSupported;
   protected ReportingCap reportingCapabilities;  // optional
   protected EventTriggerCapabilities eventTriggerCapabilities;  // optional
   protected SessionCapabilities sessionCapabilities;
   protected Asn1OpenExt extElem1;

   public ServiceCapabilities () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ServiceCapabilities (
      ServicesSupported servicesSupported_,
      ReportingCap reportingCapabilities_,
      EventTriggerCapabilities eventTriggerCapabilities_,
      SessionCapabilities sessionCapabilities_
   ) {
      super();
      setServicesSupported (servicesSupported_);
      setReportingCapabilities (reportingCapabilities_);
      setEventTriggerCapabilities (eventTriggerCapabilities_);
      setSessionCapabilities (sessionCapabilities_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ServiceCapabilities (
      ServicesSupported servicesSupported_,
      SessionCapabilities sessionCapabilities_
   ) {
      super();
      setServicesSupported (servicesSupported_);
      setSessionCapabilities (sessionCapabilities_);
   }

   public void init () {
      servicesSupported = null;
      reportingCapabilities = null;
      eventTriggerCapabilities = null;
      sessionCapabilities = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof ServiceCapabilities) ) return false;

      ServiceCapabilities rhs = (ServiceCapabilities) obj;

      if (servicesSupported == null) {
         if (rhs.servicesSupported != null) return false;
      }
      else {
         if (!servicesSupported.equals(rhs.servicesSupported)) {
            return false;
         }
      }

      if (reportingCapabilities == null) {
         if (rhs.reportingCapabilities != null) return false;
      }
      else {
         if (!reportingCapabilities.equals(rhs.reportingCapabilities)) {
            return false;
         }
      }

      if (eventTriggerCapabilities == null) {
         if (rhs.eventTriggerCapabilities != null) return false;
      }
      else {
         if (!eventTriggerCapabilities.equals(rhs.eventTriggerCapabilities)) {
            return false;
         }
      }

      if (sessionCapabilities == null) {
         if (rhs.sessionCapabilities != null) return false;
      }
      else {
         if (!sessionCapabilities.equals(rhs.sessionCapabilities)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (servicesSupported != null) __code = 31*__code + servicesSupported.hashCode();
      if (reportingCapabilities != null) __code = 31*__code + reportingCapabilities.hashCode();
      if (eventTriggerCapabilities != null) __code = 31*__code + eventTriggerCapabilities.hashCode();
      if (sessionCapabilities != null) __code = 31*__code + sessionCapabilities.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for ServicesSupported
    */
   public ServicesSupported getServicesSupported () {
      return servicesSupported;
   }

   public void setServicesSupported (ServicesSupported value) {
      this.servicesSupported = value;
   }

   /**
    * Accessor/mutator methods for ReportingCapabilities
    */
   public ReportingCap getReportingCapabilities () {
      return reportingCapabilities;
   }

   public void setReportingCapabilities (ReportingCap value) {
      this.reportingCapabilities = value;
   }

   public boolean hasReportingCapabilities () {
      return (reportingCapabilities != null);
   }

   /**
    * Accessor/mutator methods for EventTriggerCapabilities
    */
   public EventTriggerCapabilities getEventTriggerCapabilities () {
      return eventTriggerCapabilities;
   }

   public void setEventTriggerCapabilities (EventTriggerCapabilities value) {
      this.eventTriggerCapabilities = value;
   }

   public boolean hasEventTriggerCapabilities () {
      return (eventTriggerCapabilities != null);
   }

   /**
    * Accessor/mutator methods for SessionCapabilities
    */
   public SessionCapabilities getSessionCapabilities () {
      return sessionCapabilities;
   }

   public void setSessionCapabilities (SessionCapabilities value) {
      this.sessionCapabilities = value;
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return servicesSupported;
         case 1: return reportingCapabilities;
         case 2: return eventTriggerCapabilities;
         case 3: return sessionCapabilities;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "servicesSupported";
         case 1: return "reportingCapabilities";
         case 2: return "eventTriggerCapabilities";
         case 3: return "sessionCapabilities";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean reportingCapabilitiesPresent = buffer.decodeBit ("reportingCapabilitiesPresent");
      boolean eventTriggerCapabilitiesPresent = buffer.decodeBit ("eventTriggerCapabilitiesPresent");

      // decode servicesSupported

      buffer.getContext().eventDispatcher.startElement("servicesSupported", -1);

      servicesSupported = new ServicesSupported();
      servicesSupported.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("servicesSupported", -1);

      // decode reportingCapabilities

      if (reportingCapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("reportingCapabilities", -1);

         reportingCapabilities = new ReportingCap();
         reportingCapabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("reportingCapabilities", -1);
      }
      else {
         reportingCapabilities = null;
      }

      // decode eventTriggerCapabilities

      if (eventTriggerCapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("eventTriggerCapabilities", -1);

         eventTriggerCapabilities = new EventTriggerCapabilities();
         eventTriggerCapabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("eventTriggerCapabilities", -1);
      }
      else {
         eventTriggerCapabilities = null;
      }

      // decode sessionCapabilities

      buffer.getContext().eventDispatcher.startElement("sessionCapabilities", -1);

      sessionCapabilities = new SessionCapabilities();
      sessionCapabilities.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sessionCapabilities", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((reportingCapabilities != null), null);
      buffer.encodeBit ((eventTriggerCapabilities != null), null);

      // encode servicesSupported

      if (servicesSupported != null) {
         buffer.getContext().eventDispatcher.startElement("servicesSupported", -1);

         servicesSupported.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("servicesSupported", -1);
      }
      else throw new Asn1MissingRequiredException ("servicesSupported");

      // encode reportingCapabilities

      if (reportingCapabilities != null) {
         buffer.getContext().eventDispatcher.startElement("reportingCapabilities", -1);

         reportingCapabilities.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportingCapabilities", -1);
      }

      // encode eventTriggerCapabilities

      if (eventTriggerCapabilities != null) {
         buffer.getContext().eventDispatcher.startElement("eventTriggerCapabilities", -1);

         eventTriggerCapabilities.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("eventTriggerCapabilities", -1);
      }

      // encode sessionCapabilities

      if (sessionCapabilities != null) {
         buffer.getContext().eventDispatcher.startElement("sessionCapabilities", -1);

         sessionCapabilities.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sessionCapabilities", -1);
      }
      else throw new Asn1MissingRequiredException ("sessionCapabilities");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
