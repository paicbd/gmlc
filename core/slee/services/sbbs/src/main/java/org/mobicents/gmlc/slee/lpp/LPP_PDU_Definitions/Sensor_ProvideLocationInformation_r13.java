/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class Sensor_ProvideLocationInformation_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Sensor-ProvideLocationInformation-r13";
   }

   protected Sensor_MeasurementInformation_r13 sensor_MeasurementInformation_r13;  // optional
   protected Sensor_Error_r13 sensor_Error_r13;  // optional
   protected Sensor_MotionInformation_r15 sensor_MotionInformation_r15;  // optional
   protected Asn1OpenExt extElem1;

   public Sensor_ProvideLocationInformation_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Sensor_ProvideLocationInformation_r13 (
      Sensor_MeasurementInformation_r13 sensor_MeasurementInformation_r13_,
      Sensor_Error_r13 sensor_Error_r13_,
      Sensor_MotionInformation_r15 sensor_MotionInformation_r15_
   ) {
      super();
      setSensor_MeasurementInformation_r13 (sensor_MeasurementInformation_r13_);
      setSensor_Error_r13 (sensor_Error_r13_);
      setSensor_MotionInformation_r15 (sensor_MotionInformation_r15_);
   }

   public void init () {
      sensor_MeasurementInformation_r13 = null;
      sensor_Error_r13 = null;
      sensor_MotionInformation_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Sensor_ProvideLocationInformation_r13) ) return false;

      Sensor_ProvideLocationInformation_r13 rhs = (Sensor_ProvideLocationInformation_r13) obj;

      if (sensor_MeasurementInformation_r13 == null) {
         if (rhs.sensor_MeasurementInformation_r13 != null) return false;
      }
      else {
         if (!sensor_MeasurementInformation_r13.equals(rhs.sensor_MeasurementInformation_r13)) {
            return false;
         }
      }

      if (sensor_Error_r13 == null) {
         if (rhs.sensor_Error_r13 != null) return false;
      }
      else {
         if (!sensor_Error_r13.equals(rhs.sensor_Error_r13)) {
            return false;
         }
      }

      if (sensor_MotionInformation_r15 == null) {
         if (rhs.sensor_MotionInformation_r15 != null) return false;
      }
      else {
         if (!sensor_MotionInformation_r15.equals(rhs.sensor_MotionInformation_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (sensor_MeasurementInformation_r13 != null) __code = 31*__code + sensor_MeasurementInformation_r13.hashCode();
      if (sensor_Error_r13 != null) __code = 31*__code + sensor_Error_r13.hashCode();
      if (sensor_MotionInformation_r15 != null) __code = 31*__code + sensor_MotionInformation_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Sensor_MeasurementInformation_r13
    */
   public Sensor_MeasurementInformation_r13 getSensor_MeasurementInformation_r13 () {
      return sensor_MeasurementInformation_r13;
   }

   public void setSensor_MeasurementInformation_r13 (Sensor_MeasurementInformation_r13 value) {
      this.sensor_MeasurementInformation_r13 = value;
   }

   public boolean hasSensor_MeasurementInformation_r13 () {
      return (sensor_MeasurementInformation_r13 != null);
   }

   /**
    * Accessor/mutator methods for Sensor_Error_r13
    */
   public Sensor_Error_r13 getSensor_Error_r13 () {
      return sensor_Error_r13;
   }

   public void setSensor_Error_r13 (Sensor_Error_r13 value) {
      this.sensor_Error_r13 = value;
   }

   public boolean hasSensor_Error_r13 () {
      return (sensor_Error_r13 != null);
   }

   /**
    * Accessor/mutator methods for Sensor_MotionInformation_r15
    */
   public Sensor_MotionInformation_r15 getSensor_MotionInformation_r15 () {
      return sensor_MotionInformation_r15;
   }

   public void setSensor_MotionInformation_r15 (Sensor_MotionInformation_r15 value) {
      this.sensor_MotionInformation_r15 = value;
   }

   public boolean hasSensor_MotionInformation_r15 () {
      return (sensor_MotionInformation_r15 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sensor_MeasurementInformation_r13;
         case 1: return sensor_Error_r13;
         case 2: return sensor_MotionInformation_r15;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sensor-MeasurementInformation-r13";
         case 1: return "sensor-Error-r13";
         case 2: return "sensor-MotionInformation-r15";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean sensor_MeasurementInformation_r13Present = buffer.decodeBit ("sensor_MeasurementInformation_r13Present");
      boolean sensor_Error_r13Present = buffer.decodeBit ("sensor_Error_r13Present");

      // decode sensor_MeasurementInformation_r13

      if (sensor_MeasurementInformation_r13Present) {
         buffer.getContext().eventDispatcher.startElement("sensor_MeasurementInformation_r13", -1);

         sensor_MeasurementInformation_r13 = new Sensor_MeasurementInformation_r13();
         sensor_MeasurementInformation_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sensor_MeasurementInformation_r13", -1);
      }
      else {
         sensor_MeasurementInformation_r13 = null;
      }

      // decode sensor_Error_r13

      if (sensor_Error_r13Present) {
         buffer.getContext().eventDispatcher.startElement("sensor_Error_r13", -1);

         sensor_Error_r13 = new Sensor_Error_r13();
         sensor_Error_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sensor_Error_r13", -1);
      }
      else {
         sensor_Error_r13 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("sensor_MotionInformation_r15Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode sensor_MotionInformation_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("sensor_MotionInformation_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            sensor_MotionInformation_r15 = new Sensor_MotionInformation_r15();
            sensor_MotionInformation_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("sensor_MotionInformation_r15", -1);

         }
         else {
            sensor_MotionInformation_r15 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((sensor_MotionInformation_r15 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((sensor_MeasurementInformation_r13 != null), null);
      buffer.encodeBit ((sensor_Error_r13 != null), null);

      // encode sensor_MeasurementInformation_r13

      if (sensor_MeasurementInformation_r13 != null) {
         buffer.getContext().eventDispatcher.startElement("sensor_MeasurementInformation_r13", -1);

         sensor_MeasurementInformation_r13.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sensor_MeasurementInformation_r13", -1);
      }

      // encode sensor_Error_r13

      if (sensor_Error_r13 != null) {
         buffer.getContext().eventDispatcher.startElement("sensor_Error_r13", -1);

         sensor_Error_r13.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sensor_Error_r13", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((sensor_MotionInformation_r15 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // sensor_MotionInformation_r15

         if (sensor_MotionInformation_r15 != null) {
            buffer.reset();
            sensor_MotionInformation_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("sensor_MotionInformation_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("sensor_MotionInformation_r15", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
