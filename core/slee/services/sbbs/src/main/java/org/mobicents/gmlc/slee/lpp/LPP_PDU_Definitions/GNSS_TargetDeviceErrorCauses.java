/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_TargetDeviceErrorCauses extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-TargetDeviceErrorCauses";
   }

   protected GNSS_TargetDeviceErrorCauses_cause cause = null;
   protected Asn1Null fineTimeAssistanceMeasurementsNotPossible;  // optional
   protected Asn1Null adrMeasurementsNotPossible;  // optional
   protected Asn1Null multiFrequencyMeasurementsNotPossible;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_TargetDeviceErrorCauses () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_TargetDeviceErrorCauses (
      GNSS_TargetDeviceErrorCauses_cause cause_,
      Asn1Null fineTimeAssistanceMeasurementsNotPossible_,
      Asn1Null adrMeasurementsNotPossible_,
      Asn1Null multiFrequencyMeasurementsNotPossible_
   ) {
      super();
      setCause (cause_);
      setFineTimeAssistanceMeasurementsNotPossible (fineTimeAssistanceMeasurementsNotPossible_);
      setAdrMeasurementsNotPossible (adrMeasurementsNotPossible_);
      setMultiFrequencyMeasurementsNotPossible (multiFrequencyMeasurementsNotPossible_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GNSS_TargetDeviceErrorCauses (
      GNSS_TargetDeviceErrorCauses_cause cause_
   ) {
      super();
      setCause (cause_);
   }

   public void init () {
      cause = null;
      fineTimeAssistanceMeasurementsNotPossible = null;
      adrMeasurementsNotPossible = null;
      multiFrequencyMeasurementsNotPossible = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_TargetDeviceErrorCauses) ) return false;

      GNSS_TargetDeviceErrorCauses rhs = (GNSS_TargetDeviceErrorCauses) obj;

      if (cause == null) {
         if (rhs.cause != null) return false;
      }
      else {
         if (!cause.equals(rhs.cause)) {
            return false;
         }
      }

      if (fineTimeAssistanceMeasurementsNotPossible == null) {
         if (rhs.fineTimeAssistanceMeasurementsNotPossible != null) return false;
      }
      else {
         if (!fineTimeAssistanceMeasurementsNotPossible.equals(rhs.fineTimeAssistanceMeasurementsNotPossible)) {
            return false;
         }
      }

      if (adrMeasurementsNotPossible == null) {
         if (rhs.adrMeasurementsNotPossible != null) return false;
      }
      else {
         if (!adrMeasurementsNotPossible.equals(rhs.adrMeasurementsNotPossible)) {
            return false;
         }
      }

      if (multiFrequencyMeasurementsNotPossible == null) {
         if (rhs.multiFrequencyMeasurementsNotPossible != null) return false;
      }
      else {
         if (!multiFrequencyMeasurementsNotPossible.equals(rhs.multiFrequencyMeasurementsNotPossible)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (cause != null) __code = 31*__code + cause.hashCode();
      if (fineTimeAssistanceMeasurementsNotPossible != null) __code = 31*__code + fineTimeAssistanceMeasurementsNotPossible.hashCode();
      if (adrMeasurementsNotPossible != null) __code = 31*__code + adrMeasurementsNotPossible.hashCode();
      if (multiFrequencyMeasurementsNotPossible != null) __code = 31*__code + multiFrequencyMeasurementsNotPossible.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Cause
    */
   public GNSS_TargetDeviceErrorCauses_cause getCause () {
      return cause;
   }

   public void setCause (GNSS_TargetDeviceErrorCauses_cause value) {
      this.cause = value;
   }

   /**
    * Accessor/mutator methods for FineTimeAssistanceMeasurementsNotPossible
    */
   public Asn1Null getFineTimeAssistanceMeasurementsNotPossible () {
      return fineTimeAssistanceMeasurementsNotPossible;
   }

   public void setFineTimeAssistanceMeasurementsNotPossible (Asn1Null value) {
      this.fineTimeAssistanceMeasurementsNotPossible = value;
   }

   public boolean hasFineTimeAssistanceMeasurementsNotPossible () {
      return (fineTimeAssistanceMeasurementsNotPossible != null);
   }

   /**
    * Accessor/mutator methods for AdrMeasurementsNotPossible
    */
   public Asn1Null getAdrMeasurementsNotPossible () {
      return adrMeasurementsNotPossible;
   }

   public void setAdrMeasurementsNotPossible (Asn1Null value) {
      this.adrMeasurementsNotPossible = value;
   }

   public boolean hasAdrMeasurementsNotPossible () {
      return (adrMeasurementsNotPossible != null);
   }

   /**
    * Accessor/mutator methods for MultiFrequencyMeasurementsNotPossible
    */
   public Asn1Null getMultiFrequencyMeasurementsNotPossible () {
      return multiFrequencyMeasurementsNotPossible;
   }

   public void setMultiFrequencyMeasurementsNotPossible (Asn1Null value) {
      this.multiFrequencyMeasurementsNotPossible = value;
   }

   public boolean hasMultiFrequencyMeasurementsNotPossible () {
      return (multiFrequencyMeasurementsNotPossible != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cause;
         case 1: return fineTimeAssistanceMeasurementsNotPossible;
         case 2: return adrMeasurementsNotPossible;
         case 3: return multiFrequencyMeasurementsNotPossible;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cause";
         case 1: return "fineTimeAssistanceMeasurementsNotPossible";
         case 2: return "adrMeasurementsNotPossible";
         case 3: return "multiFrequencyMeasurementsNotPossible";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean fineTimeAssistanceMeasurementsNotPossiblePresent = buffer.decodeBit ("fineTimeAssistanceMeasurementsNotPossiblePresent");
      boolean adrMeasurementsNotPossiblePresent = buffer.decodeBit ("adrMeasurementsNotPossiblePresent");
      boolean multiFrequencyMeasurementsNotPossiblePresent = buffer.decodeBit ("multiFrequencyMeasurementsNotPossiblePresent");

      // decode cause

      buffer.getContext().eventDispatcher.startElement("cause", -1);

      {
         int tval = GNSS_TargetDeviceErrorCauses_cause.decodeEnumValue (buffer);
         cause = GNSS_TargetDeviceErrorCauses_cause.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("cause", -1);

      // decode fineTimeAssistanceMeasurementsNotPossible

      if (fineTimeAssistanceMeasurementsNotPossiblePresent) {
         buffer.getContext().eventDispatcher.startElement("fineTimeAssistanceMeasurementsNotPossible", -1);

         fineTimeAssistanceMeasurementsNotPossible = Asn1Null.NULL_VALUE;
         fineTimeAssistanceMeasurementsNotPossible.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("fineTimeAssistanceMeasurementsNotPossible", -1);
      }
      else {
         fineTimeAssistanceMeasurementsNotPossible = null;
      }

      // decode adrMeasurementsNotPossible

      if (adrMeasurementsNotPossiblePresent) {
         buffer.getContext().eventDispatcher.startElement("adrMeasurementsNotPossible", -1);

         adrMeasurementsNotPossible = Asn1Null.NULL_VALUE;
         adrMeasurementsNotPossible.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("adrMeasurementsNotPossible", -1);
      }
      else {
         adrMeasurementsNotPossible = null;
      }

      // decode multiFrequencyMeasurementsNotPossible

      if (multiFrequencyMeasurementsNotPossiblePresent) {
         buffer.getContext().eventDispatcher.startElement("multiFrequencyMeasurementsNotPossible", -1);

         multiFrequencyMeasurementsNotPossible = Asn1Null.NULL_VALUE;
         multiFrequencyMeasurementsNotPossible.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("multiFrequencyMeasurementsNotPossible", -1);
      }
      else {
         multiFrequencyMeasurementsNotPossible = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((fineTimeAssistanceMeasurementsNotPossible != null), null);
      buffer.encodeBit ((adrMeasurementsNotPossible != null), null);
      buffer.encodeBit ((multiFrequencyMeasurementsNotPossible != null), null);

      // encode cause

      if (cause != null) {
         buffer.getContext().eventDispatcher.startElement("cause", -1);

         cause.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cause", -1);
      }
      else throw new Asn1MissingRequiredException ("cause");

      // encode fineTimeAssistanceMeasurementsNotPossible

      if (fineTimeAssistanceMeasurementsNotPossible != null) {
         buffer.getContext().eventDispatcher.startElement("fineTimeAssistanceMeasurementsNotPossible", -1);

         fineTimeAssistanceMeasurementsNotPossible.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("fineTimeAssistanceMeasurementsNotPossible", -1);
      }

      // encode adrMeasurementsNotPossible

      if (adrMeasurementsNotPossible != null) {
         buffer.getContext().eventDispatcher.startElement("adrMeasurementsNotPossible", -1);

         adrMeasurementsNotPossible.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("adrMeasurementsNotPossible", -1);
      }

      // encode multiFrequencyMeasurementsNotPossible

      if (multiFrequencyMeasurementsNotPossible != null) {
         buffer.getContext().eventDispatcher.startElement("multiFrequencyMeasurementsNotPossible", -1);

         multiFrequencyMeasurementsNotPossible.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("multiFrequencyMeasurementsNotPossible", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
