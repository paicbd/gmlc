/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Version_2_parameter_extensions;

import com.objsys.asn1j.runtime.*;

public class EventTriggerCapabilities extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_Version_2_parameter_extensionsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_Version_2_parameter_extensionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "EventTriggerCapabilities";
   }

   protected GeoAreaShapesSupported geoAreaShapesSupported;
   protected Asn1Integer maxNumGeoAreaSupported;  // optional
   protected Asn1Integer maxAreaIdListSupported;  // optional
   protected Asn1Integer maxAreaIdSupportedPerList;  // optional
   protected Asn1OpenExt extElem1;

   public EventTriggerCapabilities () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EventTriggerCapabilities (
      GeoAreaShapesSupported geoAreaShapesSupported_,
      Asn1Integer maxNumGeoAreaSupported_,
      Asn1Integer maxAreaIdListSupported_,
      Asn1Integer maxAreaIdSupportedPerList_
   ) throws Asn1Exception {
      super();
      setGeoAreaShapesSupported (geoAreaShapesSupported_);
      setMaxNumGeoAreaSupported (maxNumGeoAreaSupported_);
      setMaxAreaIdListSupported (maxAreaIdListSupported_);
      setMaxAreaIdSupportedPerList (maxAreaIdSupportedPerList_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EventTriggerCapabilities (
      GeoAreaShapesSupported geoAreaShapesSupported_
   ) throws Asn1Exception {
      super();
      setGeoAreaShapesSupported (geoAreaShapesSupported_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EventTriggerCapabilities (GeoAreaShapesSupported geoAreaShapesSupported_,
      long maxNumGeoAreaSupported_,
      long maxAreaIdListSupported_,
      long maxAreaIdSupportedPerList_
   ) throws Asn1Exception {
      super();
      setGeoAreaShapesSupported (geoAreaShapesSupported_);
      setMaxNumGeoAreaSupported (maxNumGeoAreaSupported_);
      setMaxAreaIdListSupported (maxAreaIdListSupported_);
      setMaxAreaIdSupportedPerList (maxAreaIdSupportedPerList_);
   }

   public void init () {
      geoAreaShapesSupported = null;
      maxNumGeoAreaSupported = null;
      maxAreaIdListSupported = null;
      maxAreaIdSupportedPerList = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof EventTriggerCapabilities) ) return false;

      EventTriggerCapabilities rhs = (EventTriggerCapabilities) obj;

      if (geoAreaShapesSupported == null) {
         if (rhs.geoAreaShapesSupported != null) return false;
      }
      else {
         if (!geoAreaShapesSupported.equals(rhs.geoAreaShapesSupported)) {
            return false;
         }
      }

      if (maxNumGeoAreaSupported == null) {
         if (rhs.maxNumGeoAreaSupported != null) return false;
      }
      else {
         if (!maxNumGeoAreaSupported.equals(rhs.maxNumGeoAreaSupported)) {
            return false;
         }
      }

      if (maxAreaIdListSupported == null) {
         if (rhs.maxAreaIdListSupported != null) return false;
      }
      else {
         if (!maxAreaIdListSupported.equals(rhs.maxAreaIdListSupported)) {
            return false;
         }
      }

      if (maxAreaIdSupportedPerList == null) {
         if (rhs.maxAreaIdSupportedPerList != null) return false;
      }
      else {
         if (!maxAreaIdSupportedPerList.equals(rhs.maxAreaIdSupportedPerList)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (geoAreaShapesSupported != null) __code = 31*__code + geoAreaShapesSupported.hashCode();
      if (maxNumGeoAreaSupported != null) __code = 31*__code + maxNumGeoAreaSupported.hashCode();
      if (maxAreaIdListSupported != null) __code = 31*__code + maxAreaIdListSupported.hashCode();
      if (maxAreaIdSupportedPerList != null) __code = 31*__code + maxAreaIdSupportedPerList.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for GeoAreaShapesSupported
    */
   public GeoAreaShapesSupported getGeoAreaShapesSupported () {
      return geoAreaShapesSupported;
   }

   public void setGeoAreaShapesSupported (GeoAreaShapesSupported value) {
      this.geoAreaShapesSupported = value;
   }

   /**
    * Accessor/mutator methods for MaxNumGeoAreaSupported
    */
   public Asn1Integer getMaxNumGeoAreaSupported () {
      return maxNumGeoAreaSupported;
   }

   public void setMaxNumGeoAreaSupported (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 32))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.maxNumGeoAreaSupported = value;
   }

   public void setMaxNumGeoAreaSupported (long value) 
      throws Asn1Exception
   {
      setMaxNumGeoAreaSupported (new Asn1Integer(value));
   }
   public boolean hasMaxNumGeoAreaSupported () {
      return (maxNumGeoAreaSupported != null);
   }

   /**
    * Accessor/mutator methods for MaxAreaIdListSupported
    */
   public Asn1Integer getMaxAreaIdListSupported () {
      return maxAreaIdListSupported;
   }

   public void setMaxAreaIdListSupported (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 32))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.maxAreaIdListSupported = value;
   }

   public void setMaxAreaIdListSupported (long value) 
      throws Asn1Exception
   {
      setMaxAreaIdListSupported (new Asn1Integer(value));
   }
   public boolean hasMaxAreaIdListSupported () {
      return (maxAreaIdListSupported != null);
   }

   /**
    * Accessor/mutator methods for MaxAreaIdSupportedPerList
    */
   public Asn1Integer getMaxAreaIdSupportedPerList () {
      return maxAreaIdSupportedPerList;
   }

   public void setMaxAreaIdSupportedPerList (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 256))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.maxAreaIdSupportedPerList = value;
   }

   public void setMaxAreaIdSupportedPerList (long value) 
      throws Asn1Exception
   {
      setMaxAreaIdSupportedPerList (new Asn1Integer(value));
   }
   public boolean hasMaxAreaIdSupportedPerList () {
      return (maxAreaIdSupportedPerList != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return geoAreaShapesSupported;
         case 1: return maxNumGeoAreaSupported;
         case 2: return maxAreaIdListSupported;
         case 3: return maxAreaIdSupportedPerList;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "geoAreaShapesSupported";
         case 1: return "maxNumGeoAreaSupported";
         case 2: return "maxAreaIdListSupported";
         case 3: return "maxAreaIdSupportedPerList";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean maxNumGeoAreaSupportedPresent = buffer.decodeBit ("maxNumGeoAreaSupportedPresent");
      boolean maxAreaIdListSupportedPresent = buffer.decodeBit ("maxAreaIdListSupportedPresent");
      boolean maxAreaIdSupportedPerListPresent = buffer.decodeBit ("maxAreaIdSupportedPerListPresent");

      // decode geoAreaShapesSupported

      buffer.getContext().eventDispatcher.startElement("geoAreaShapesSupported", -1);

      geoAreaShapesSupported = new GeoAreaShapesSupported();
      geoAreaShapesSupported.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("geoAreaShapesSupported", -1);

      // decode maxNumGeoAreaSupported

      if (maxNumGeoAreaSupportedPresent) {
         buffer.getContext().eventDispatcher.startElement("maxNumGeoAreaSupported", -1);

         maxNumGeoAreaSupported = new Asn1Integer();
         maxNumGeoAreaSupported.decode (buffer, 0, 32);
         buffer.getContext().eventDispatcher.endElement("maxNumGeoAreaSupported", -1);
      }
      else {
         maxNumGeoAreaSupported = null;
      }

      // decode maxAreaIdListSupported

      if (maxAreaIdListSupportedPresent) {
         buffer.getContext().eventDispatcher.startElement("maxAreaIdListSupported", -1);

         maxAreaIdListSupported = new Asn1Integer();
         maxAreaIdListSupported.decode (buffer, 0, 32);
         buffer.getContext().eventDispatcher.endElement("maxAreaIdListSupported", -1);
      }
      else {
         maxAreaIdListSupported = null;
      }

      // decode maxAreaIdSupportedPerList

      if (maxAreaIdSupportedPerListPresent) {
         buffer.getContext().eventDispatcher.startElement("maxAreaIdSupportedPerList", -1);

         maxAreaIdSupportedPerList = new Asn1Integer();
         maxAreaIdSupportedPerList.decode (buffer, 0, 256);
         buffer.getContext().eventDispatcher.endElement("maxAreaIdSupportedPerList", -1);
      }
      else {
         maxAreaIdSupportedPerList = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((maxNumGeoAreaSupported != null), null);
      buffer.encodeBit ((maxAreaIdListSupported != null), null);
      buffer.encodeBit ((maxAreaIdSupportedPerList != null), null);

      // encode geoAreaShapesSupported

      if (geoAreaShapesSupported != null) {
         buffer.getContext().eventDispatcher.startElement("geoAreaShapesSupported", -1);

         geoAreaShapesSupported.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("geoAreaShapesSupported", -1);
      }
      else throw new Asn1MissingRequiredException ("geoAreaShapesSupported");

      // encode maxNumGeoAreaSupported

      if (maxNumGeoAreaSupported != null) {
         buffer.getContext().eventDispatcher.startElement("maxNumGeoAreaSupported", -1);

         maxNumGeoAreaSupported.encode (buffer, 0, 32);

         buffer.getContext().eventDispatcher.endElement("maxNumGeoAreaSupported", -1);
      }

      // encode maxAreaIdListSupported

      if (maxAreaIdListSupported != null) {
         buffer.getContext().eventDispatcher.startElement("maxAreaIdListSupported", -1);

         maxAreaIdListSupported.encode (buffer, 0, 32);

         buffer.getContext().eventDispatcher.endElement("maxAreaIdListSupported", -1);
      }

      // encode maxAreaIdSupportedPerList

      if (maxAreaIdSupportedPerList != null) {
         buffer.getContext().eventDispatcher.startElement("maxAreaIdSupportedPerList", -1);

         maxAreaIdSupportedPerList.encode (buffer, 0, 256);

         buffer.getContext().eventDispatcher.endElement("maxAreaIdSupportedPerList", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
