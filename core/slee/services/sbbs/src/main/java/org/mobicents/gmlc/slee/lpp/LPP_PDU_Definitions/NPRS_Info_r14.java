/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class NPRS_Info_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "NPRS-Info-r14";
   }

   protected NPRS_Info_r14_operationModeInfoNPRS_r14 operationModeInfoNPRS_r14 = null;
   protected CarrierFreq_NB_r14 nprs_carrier_r14;  // optional
   protected Asn1Integer nprsSequenceInfo_r14;  // optional
   protected Asn1Integer nprsID_r14;  // optional
   protected NPRS_Info_r14_partA_r14 partA_r14;  // optional
   protected NPRS_Info_r14_partB_r14 partB_r14;  // optional
   protected NPRS_Info_r14_partA_TDD_r15 partA_TDD_r15;  // optional
   protected Asn1OpenExt extElem1;

   public NPRS_Info_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NPRS_Info_r14 (
      NPRS_Info_r14_operationModeInfoNPRS_r14 operationModeInfoNPRS_r14_,
      CarrierFreq_NB_r14 nprs_carrier_r14_,
      Asn1Integer nprsSequenceInfo_r14_,
      Asn1Integer nprsID_r14_,
      NPRS_Info_r14_partA_r14 partA_r14_,
      NPRS_Info_r14_partB_r14 partB_r14_,
      NPRS_Info_r14_partA_TDD_r15 partA_TDD_r15_
   ) throws Asn1Exception {
      super();
      setOperationModeInfoNPRS_r14 (operationModeInfoNPRS_r14_);
      setNprs_carrier_r14 (nprs_carrier_r14_);
      setNprsSequenceInfo_r14 (nprsSequenceInfo_r14_);
      setNprsID_r14 (nprsID_r14_);
      setPartA_r14 (partA_r14_);
      setPartB_r14 (partB_r14_);
      setPartA_TDD_r15 (partA_TDD_r15_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public NPRS_Info_r14 (
      NPRS_Info_r14_operationModeInfoNPRS_r14 operationModeInfoNPRS_r14_
   ) throws Asn1Exception {
      super();
      setOperationModeInfoNPRS_r14 (operationModeInfoNPRS_r14_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NPRS_Info_r14 (NPRS_Info_r14_operationModeInfoNPRS_r14 operationModeInfoNPRS_r14_,
      CarrierFreq_NB_r14 nprs_carrier_r14_,
      long nprsSequenceInfo_r14_,
      long nprsID_r14_,
      NPRS_Info_r14_partA_r14 partA_r14_,
      NPRS_Info_r14_partB_r14 partB_r14_,
      NPRS_Info_r14_partA_TDD_r15 partA_TDD_r15_
   ) throws Asn1Exception {
      super();
      setOperationModeInfoNPRS_r14 (operationModeInfoNPRS_r14_);
      setNprs_carrier_r14 (nprs_carrier_r14_);
      setNprsSequenceInfo_r14 (nprsSequenceInfo_r14_);
      setNprsID_r14 (nprsID_r14_);
      setPartA_r14 (partA_r14_);
      setPartB_r14 (partB_r14_);
      setPartA_TDD_r15 (partA_TDD_r15_);
   }

   public void init () {
      operationModeInfoNPRS_r14 = null;
      nprs_carrier_r14 = null;
      nprsSequenceInfo_r14 = null;
      nprsID_r14 = null;
      partA_r14 = null;
      partB_r14 = null;
      partA_TDD_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof NPRS_Info_r14) ) return false;

      NPRS_Info_r14 rhs = (NPRS_Info_r14) obj;

      if (operationModeInfoNPRS_r14 == null) {
         if (rhs.operationModeInfoNPRS_r14 != null) return false;
      }
      else {
         if (!operationModeInfoNPRS_r14.equals(rhs.operationModeInfoNPRS_r14)) {
            return false;
         }
      }

      if (nprs_carrier_r14 == null) {
         if (rhs.nprs_carrier_r14 != null) return false;
      }
      else {
         if (!nprs_carrier_r14.equals(rhs.nprs_carrier_r14)) {
            return false;
         }
      }

      if (nprsSequenceInfo_r14 == null) {
         if (rhs.nprsSequenceInfo_r14 != null) return false;
      }
      else {
         if (!nprsSequenceInfo_r14.equals(rhs.nprsSequenceInfo_r14)) {
            return false;
         }
      }

      if (nprsID_r14 == null) {
         if (rhs.nprsID_r14 != null) return false;
      }
      else {
         if (!nprsID_r14.equals(rhs.nprsID_r14)) {
            return false;
         }
      }

      if (partA_r14 == null) {
         if (rhs.partA_r14 != null) return false;
      }
      else {
         if (!partA_r14.equals(rhs.partA_r14)) {
            return false;
         }
      }

      if (partB_r14 == null) {
         if (rhs.partB_r14 != null) return false;
      }
      else {
         if (!partB_r14.equals(rhs.partB_r14)) {
            return false;
         }
      }

      if (partA_TDD_r15 == null) {
         if (rhs.partA_TDD_r15 != null) return false;
      }
      else {
         if (!partA_TDD_r15.equals(rhs.partA_TDD_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (operationModeInfoNPRS_r14 != null) __code = 31*__code + operationModeInfoNPRS_r14.hashCode();
      if (nprs_carrier_r14 != null) __code = 31*__code + nprs_carrier_r14.hashCode();
      if (nprsSequenceInfo_r14 != null) __code = 31*__code + nprsSequenceInfo_r14.hashCode();
      if (nprsID_r14 != null) __code = 31*__code + nprsID_r14.hashCode();
      if (partA_r14 != null) __code = 31*__code + partA_r14.hashCode();
      if (partB_r14 != null) __code = 31*__code + partB_r14.hashCode();
      if (partA_TDD_r15 != null) __code = 31*__code + partA_TDD_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for OperationModeInfoNPRS_r14
    */
   public NPRS_Info_r14_operationModeInfoNPRS_r14 getOperationModeInfoNPRS_r14 () {
      return operationModeInfoNPRS_r14;
   }

   public void setOperationModeInfoNPRS_r14 (NPRS_Info_r14_operationModeInfoNPRS_r14 value) {
      this.operationModeInfoNPRS_r14 = value;
   }

   /**
    * Accessor/mutator methods for Nprs_carrier_r14
    */
   public CarrierFreq_NB_r14 getNprs_carrier_r14 () {
      return nprs_carrier_r14;
   }

   public void setNprs_carrier_r14 (CarrierFreq_NB_r14 value) {
      this.nprs_carrier_r14 = value;
   }

   public boolean hasNprs_carrier_r14 () {
      return (nprs_carrier_r14 != null);
   }

   /**
    * Accessor/mutator methods for NprsSequenceInfo_r14
    */
   public Asn1Integer getNprsSequenceInfo_r14 () {
      return nprsSequenceInfo_r14;
   }

   public void setNprsSequenceInfo_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 174))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nprsSequenceInfo_r14 = value;
   }

   public void setNprsSequenceInfo_r14 (long value) 
      throws Asn1Exception
   {
      setNprsSequenceInfo_r14 (new Asn1Integer(value));
   }
   public boolean hasNprsSequenceInfo_r14 () {
      return (nprsSequenceInfo_r14 != null);
   }

   /**
    * Accessor/mutator methods for NprsID_r14
    */
   public Asn1Integer getNprsID_r14 () {
      return nprsID_r14;
   }

   public void setNprsID_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 4095))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.nprsID_r14 = value;
   }

   public void setNprsID_r14 (long value) 
      throws Asn1Exception
   {
      setNprsID_r14 (new Asn1Integer(value));
   }
   public boolean hasNprsID_r14 () {
      return (nprsID_r14 != null);
   }

   /**
    * Accessor/mutator methods for PartA_r14
    */
   public NPRS_Info_r14_partA_r14 getPartA_r14 () {
      return partA_r14;
   }

   public void setPartA_r14 (NPRS_Info_r14_partA_r14 value) {
      this.partA_r14 = value;
   }

   public boolean hasPartA_r14 () {
      return (partA_r14 != null);
   }

   /**
    * Accessor/mutator methods for PartB_r14
    */
   public NPRS_Info_r14_partB_r14 getPartB_r14 () {
      return partB_r14;
   }

   public void setPartB_r14 (NPRS_Info_r14_partB_r14 value) {
      this.partB_r14 = value;
   }

   public boolean hasPartB_r14 () {
      return (partB_r14 != null);
   }

   /**
    * Accessor/mutator methods for PartA_TDD_r15
    */
   public NPRS_Info_r14_partA_TDD_r15 getPartA_TDD_r15 () {
      return partA_TDD_r15;
   }

   public void setPartA_TDD_r15 (NPRS_Info_r14_partA_TDD_r15 value) {
      this.partA_TDD_r15 = value;
   }

   public boolean hasPartA_TDD_r15 () {
      return (partA_TDD_r15 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return operationModeInfoNPRS_r14;
         case 1: return nprs_carrier_r14;
         case 2: return nprsSequenceInfo_r14;
         case 3: return nprsID_r14;
         case 4: return partA_r14;
         case 5: return partB_r14;
         case 6: return partA_TDD_r15;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "operationModeInfoNPRS-r14";
         case 1: return "nprs-carrier-r14";
         case 2: return "nprsSequenceInfo-r14";
         case 3: return "nprsID-r14";
         case 4: return "partA-r14";
         case 5: return "partB-r14";
         case 6: return "partA-TDD-r15";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean nprs_carrier_r14Present = buffer.decodeBit ("nprs_carrier_r14Present");
      boolean nprsSequenceInfo_r14Present = buffer.decodeBit ("nprsSequenceInfo_r14Present");
      boolean nprsID_r14Present = buffer.decodeBit ("nprsID_r14Present");
      boolean partA_r14Present = buffer.decodeBit ("partA_r14Present");
      boolean partB_r14Present = buffer.decodeBit ("partB_r14Present");

      // decode operationModeInfoNPRS_r14

      buffer.getContext().eventDispatcher.startElement("operationModeInfoNPRS_r14", -1);

      {
         int tval = NPRS_Info_r14_operationModeInfoNPRS_r14.decodeEnumValue (buffer);
         operationModeInfoNPRS_r14 = NPRS_Info_r14_operationModeInfoNPRS_r14.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("operationModeInfoNPRS_r14", -1);

      // decode nprs_carrier_r14

      if (nprs_carrier_r14Present) {
         buffer.getContext().eventDispatcher.startElement("nprs_carrier_r14", -1);

         nprs_carrier_r14 = new CarrierFreq_NB_r14();
         nprs_carrier_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nprs_carrier_r14", -1);
      }
      else {
         nprs_carrier_r14 = null;
      }

      // decode nprsSequenceInfo_r14

      if (nprsSequenceInfo_r14Present) {
         buffer.getContext().eventDispatcher.startElement("nprsSequenceInfo_r14", -1);

         nprsSequenceInfo_r14 = new Asn1Integer();
         nprsSequenceInfo_r14.decode (buffer, 0, 174);
         buffer.getContext().eventDispatcher.endElement("nprsSequenceInfo_r14", -1);
      }
      else {
         nprsSequenceInfo_r14 = null;
      }

      // decode nprsID_r14

      if (nprsID_r14Present) {
         buffer.getContext().eventDispatcher.startElement("nprsID_r14", -1);

         nprsID_r14 = new Asn1Integer();
         nprsID_r14.decode (buffer, 0, 4095);
         buffer.getContext().eventDispatcher.endElement("nprsID_r14", -1);
      }
      else {
         nprsID_r14 = null;
      }

      // decode partA_r14

      if (partA_r14Present) {
         buffer.getContext().eventDispatcher.startElement("partA_r14", -1);

         partA_r14 = new NPRS_Info_r14_partA_r14();
         partA_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("partA_r14", -1);
      }
      else {
         partA_r14 = null;
      }

      // decode partB_r14

      if (partB_r14Present) {
         buffer.getContext().eventDispatcher.startElement("partB_r14", -1);

         partB_r14 = new NPRS_Info_r14_partB_r14();
         partB_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("partB_r14", -1);
      }
      else {
         partB_r14 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("partA_TDD_r15Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode partA_TDD_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("partA_TDD_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            partA_TDD_r15 = new NPRS_Info_r14_partA_TDD_r15();
            partA_TDD_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("partA_TDD_r15", -1);

         }
         else {
            partA_TDD_r15 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((partA_TDD_r15 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((nprs_carrier_r14 != null), null);
      buffer.encodeBit ((nprsSequenceInfo_r14 != null), null);
      buffer.encodeBit ((nprsID_r14 != null), null);
      buffer.encodeBit ((partA_r14 != null), null);
      buffer.encodeBit ((partB_r14 != null), null);

      // encode operationModeInfoNPRS_r14

      if (operationModeInfoNPRS_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("operationModeInfoNPRS_r14", -1);

         operationModeInfoNPRS_r14.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("operationModeInfoNPRS_r14", -1);
      }
      else throw new Asn1MissingRequiredException ("operationModeInfoNPRS_r14");

      // encode nprs_carrier_r14

      if (nprs_carrier_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("nprs_carrier_r14", -1);

         nprs_carrier_r14.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nprs_carrier_r14", -1);
      }

      // encode nprsSequenceInfo_r14

      if (nprsSequenceInfo_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("nprsSequenceInfo_r14", -1);

         nprsSequenceInfo_r14.encode (buffer, 0, 174);

         buffer.getContext().eventDispatcher.endElement("nprsSequenceInfo_r14", -1);
      }

      // encode nprsID_r14

      if (nprsID_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("nprsID_r14", -1);

         nprsID_r14.encode (buffer, 0, 4095);

         buffer.getContext().eventDispatcher.endElement("nprsID_r14", -1);
      }

      // encode partA_r14

      if (partA_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("partA_r14", -1);

         partA_r14.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("partA_r14", -1);
      }

      // encode partB_r14

      if (partB_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("partB_r14", -1);

         partB_r14.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("partB_r14", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((partA_TDD_r15 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // partA_TDD_r15

         if (partA_TDD_r15 != null) {
            buffer.reset();
            partA_TDD_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("partA_TDD_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("partA_TDD_r15", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
