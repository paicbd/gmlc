/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_SupportElement extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-SupportElement";
   }

   protected GNSS_ID gnss_ID;
   protected SBAS_IDs sbas_IDs;  // optional
   protected PositioningModes agnss_Modes;
   protected GNSS_SignalIDs gnss_Signals;
   protected GNSS_SupportElement_fta_MeasSupport fta_MeasSupport;  // optional
   protected Asn1Boolean adr_Support;
   protected Asn1Boolean velocityMeasurementSupport;
   protected GNSS_SupportElement_adrEnhancementsSupport_r15 adrEnhancementsSupport_r15 = null;  // optional
   protected PositioningModes ha_gnss_Modes_r15;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_SupportElement () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_SupportElement (
      GNSS_ID gnss_ID_,
      SBAS_IDs sbas_IDs_,
      PositioningModes agnss_Modes_,
      GNSS_SignalIDs gnss_Signals_,
      GNSS_SupportElement_fta_MeasSupport fta_MeasSupport_,
      Asn1Boolean adr_Support_,
      Asn1Boolean velocityMeasurementSupport_,
      GNSS_SupportElement_adrEnhancementsSupport_r15 adrEnhancementsSupport_r15_,
      PositioningModes ha_gnss_Modes_r15_
   ) {
      super();
      setGnss_ID (gnss_ID_);
      setSbas_IDs (sbas_IDs_);
      setAgnss_Modes (agnss_Modes_);
      setGnss_Signals (gnss_Signals_);
      setFta_MeasSupport (fta_MeasSupport_);
      setAdr_Support (adr_Support_);
      setVelocityMeasurementSupport (velocityMeasurementSupport_);
      setAdrEnhancementsSupport_r15 (adrEnhancementsSupport_r15_);
      setHa_gnss_Modes_r15 (ha_gnss_Modes_r15_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GNSS_SupportElement (
      GNSS_ID gnss_ID_,
      PositioningModes agnss_Modes_,
      GNSS_SignalIDs gnss_Signals_,
      Asn1Boolean adr_Support_,
      Asn1Boolean velocityMeasurementSupport_
   ) {
      super();
      setGnss_ID (gnss_ID_);
      setAgnss_Modes (agnss_Modes_);
      setGnss_Signals (gnss_Signals_);
      setAdr_Support (adr_Support_);
      setVelocityMeasurementSupport (velocityMeasurementSupport_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GNSS_SupportElement (GNSS_ID gnss_ID_,
      SBAS_IDs sbas_IDs_,
      PositioningModes agnss_Modes_,
      GNSS_SignalIDs gnss_Signals_,
      GNSS_SupportElement_fta_MeasSupport fta_MeasSupport_,
      boolean adr_Support_,
      boolean velocityMeasurementSupport_,
      GNSS_SupportElement_adrEnhancementsSupport_r15 adrEnhancementsSupport_r15_,
      PositioningModes ha_gnss_Modes_r15_
   ) {
      super();
      setGnss_ID (gnss_ID_);
      setSbas_IDs (sbas_IDs_);
      setAgnss_Modes (agnss_Modes_);
      setGnss_Signals (gnss_Signals_);
      setFta_MeasSupport (fta_MeasSupport_);
      setAdr_Support (adr_Support_);
      setVelocityMeasurementSupport (velocityMeasurementSupport_);
      setAdrEnhancementsSupport_r15 (adrEnhancementsSupport_r15_);
      setHa_gnss_Modes_r15 (ha_gnss_Modes_r15_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public GNSS_SupportElement (
      GNSS_ID gnss_ID_,
      PositioningModes agnss_Modes_,
      GNSS_SignalIDs gnss_Signals_,
      boolean adr_Support_,
      boolean velocityMeasurementSupport_
   ) {
      super();
      setGnss_ID (gnss_ID_);
      setAgnss_Modes (agnss_Modes_);
      setGnss_Signals (gnss_Signals_);
      setAdr_Support (adr_Support_);
      setVelocityMeasurementSupport (velocityMeasurementSupport_);
   }

   public void init () {
      gnss_ID = null;
      sbas_IDs = null;
      agnss_Modes = null;
      gnss_Signals = null;
      fta_MeasSupport = null;
      adr_Support = null;
      velocityMeasurementSupport = null;
      adrEnhancementsSupport_r15 = null;
      ha_gnss_Modes_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_SupportElement) ) return false;

      GNSS_SupportElement rhs = (GNSS_SupportElement) obj;

      if (gnss_ID == null) {
         if (rhs.gnss_ID != null) return false;
      }
      else {
         if (!gnss_ID.equals(rhs.gnss_ID)) {
            return false;
         }
      }

      if (sbas_IDs == null) {
         if (rhs.sbas_IDs != null) return false;
      }
      else {
         if (!sbas_IDs.equals(rhs.sbas_IDs)) {
            return false;
         }
      }

      if (agnss_Modes == null) {
         if (rhs.agnss_Modes != null) return false;
      }
      else {
         if (!agnss_Modes.equals(rhs.agnss_Modes)) {
            return false;
         }
      }

      if (gnss_Signals == null) {
         if (rhs.gnss_Signals != null) return false;
      }
      else {
         if (!gnss_Signals.equals(rhs.gnss_Signals)) {
            return false;
         }
      }

      if (fta_MeasSupport == null) {
         if (rhs.fta_MeasSupport != null) return false;
      }
      else {
         if (!fta_MeasSupport.equals(rhs.fta_MeasSupport)) {
            return false;
         }
      }

      if (adr_Support == null) {
         if (rhs.adr_Support != null) return false;
      }
      else {
         if (!adr_Support.equals(rhs.adr_Support)) {
            return false;
         }
      }

      if (velocityMeasurementSupport == null) {
         if (rhs.velocityMeasurementSupport != null) return false;
      }
      else {
         if (!velocityMeasurementSupport.equals(rhs.velocityMeasurementSupport)) {
            return false;
         }
      }

      if (adrEnhancementsSupport_r15 == null) {
         if (rhs.adrEnhancementsSupport_r15 != null) return false;
      }
      else {
         if (!adrEnhancementsSupport_r15.equals(rhs.adrEnhancementsSupport_r15)) {
            return false;
         }
      }

      if (ha_gnss_Modes_r15 == null) {
         if (rhs.ha_gnss_Modes_r15 != null) return false;
      }
      else {
         if (!ha_gnss_Modes_r15.equals(rhs.ha_gnss_Modes_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gnss_ID != null) __code = 31*__code + gnss_ID.hashCode();
      if (sbas_IDs != null) __code = 31*__code + sbas_IDs.hashCode();
      if (agnss_Modes != null) __code = 31*__code + agnss_Modes.hashCode();
      if (gnss_Signals != null) __code = 31*__code + gnss_Signals.hashCode();
      if (fta_MeasSupport != null) __code = 31*__code + fta_MeasSupport.hashCode();
      if (adr_Support != null) __code = 31*__code + adr_Support.hashCode();
      if (velocityMeasurementSupport != null) __code = 31*__code + velocityMeasurementSupport.hashCode();
      if (adrEnhancementsSupport_r15 != null) __code = 31*__code + adrEnhancementsSupport_r15.hashCode();
      if (ha_gnss_Modes_r15 != null) __code = 31*__code + ha_gnss_Modes_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Gnss_ID
    */
   public GNSS_ID getGnss_ID () {
      return gnss_ID;
   }

   public void setGnss_ID (GNSS_ID value) {
      this.gnss_ID = value;
   }

   /**
    * Accessor/mutator methods for Sbas_IDs
    */
   public SBAS_IDs getSbas_IDs () {
      return sbas_IDs;
   }

   public void setSbas_IDs (SBAS_IDs value) {
      this.sbas_IDs = value;
   }

   public boolean hasSbas_IDs () {
      return (sbas_IDs != null);
   }

   /**
    * Accessor/mutator methods for Agnss_Modes
    */
   public PositioningModes getAgnss_Modes () {
      return agnss_Modes;
   }

   public void setAgnss_Modes (PositioningModes value) {
      this.agnss_Modes = value;
   }

   /**
    * Accessor/mutator methods for Gnss_Signals
    */
   public GNSS_SignalIDs getGnss_Signals () {
      return gnss_Signals;
   }

   public void setGnss_Signals (GNSS_SignalIDs value) {
      this.gnss_Signals = value;
   }

   /**
    * Accessor/mutator methods for Fta_MeasSupport
    */
   public GNSS_SupportElement_fta_MeasSupport getFta_MeasSupport () {
      return fta_MeasSupport;
   }

   public void setFta_MeasSupport (GNSS_SupportElement_fta_MeasSupport value) {
      this.fta_MeasSupport = value;
   }

   public boolean hasFta_MeasSupport () {
      return (fta_MeasSupport != null);
   }

   /**
    * Accessor/mutator methods for Adr_Support
    */
   public Asn1Boolean getAdr_Support () {
      return adr_Support;
   }

   public void setAdr_Support (Asn1Boolean value) {
      this.adr_Support = value;
   }

   public void setAdr_Support (boolean value) {
      setAdr_Support (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for VelocityMeasurementSupport
    */
   public Asn1Boolean getVelocityMeasurementSupport () {
      return velocityMeasurementSupport;
   }

   public void setVelocityMeasurementSupport (Asn1Boolean value) {
      this.velocityMeasurementSupport = value;
   }

   public void setVelocityMeasurementSupport (boolean value) {
      setVelocityMeasurementSupport (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for AdrEnhancementsSupport_r15
    */
   public GNSS_SupportElement_adrEnhancementsSupport_r15 getAdrEnhancementsSupport_r15 () {
      return adrEnhancementsSupport_r15;
   }

   public void setAdrEnhancementsSupport_r15 (GNSS_SupportElement_adrEnhancementsSupport_r15 value) {
      this.adrEnhancementsSupport_r15 = value;
   }

   public boolean hasAdrEnhancementsSupport_r15 () {
      return (adrEnhancementsSupport_r15 != null);
   }

   /**
    * Accessor/mutator methods for Ha_gnss_Modes_r15
    */
   public PositioningModes getHa_gnss_Modes_r15 () {
      return ha_gnss_Modes_r15;
   }

   public void setHa_gnss_Modes_r15 (PositioningModes value) {
      this.ha_gnss_Modes_r15 = value;
   }

   public boolean hasHa_gnss_Modes_r15 () {
      return (ha_gnss_Modes_r15 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gnss_ID;
         case 1: return sbas_IDs;
         case 2: return agnss_Modes;
         case 3: return gnss_Signals;
         case 4: return fta_MeasSupport;
         case 5: return adr_Support;
         case 6: return velocityMeasurementSupport;
         case 7: return adrEnhancementsSupport_r15;
         case 8: return ha_gnss_Modes_r15;
         case 9: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gnss-ID";
         case 1: return "sbas-IDs";
         case 2: return "agnss-Modes";
         case 3: return "gnss-Signals";
         case 4: return "fta-MeasSupport";
         case 5: return "adr-Support";
         case 6: return "velocityMeasurementSupport";
         case 7: return "adrEnhancementsSupport-r15";
         case 8: return "ha-gnss-Modes-r15";
         case 9: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean sbas_IDsPresent = buffer.decodeBit ("sbas_IDsPresent");
      boolean fta_MeasSupportPresent = buffer.decodeBit ("fta_MeasSupportPresent");

      // decode gnss_ID

      buffer.getContext().eventDispatcher.startElement("gnss_ID", -1);

      gnss_ID = new GNSS_ID();
      gnss_ID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("gnss_ID", -1);

      // decode sbas_IDs

      if (sbas_IDsPresent) {
         buffer.getContext().eventDispatcher.startElement("sbas_IDs", -1);

         sbas_IDs = new SBAS_IDs();
         sbas_IDs.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sbas_IDs", -1);
      }
      else {
         sbas_IDs = null;
      }

      // decode agnss_Modes

      buffer.getContext().eventDispatcher.startElement("agnss_Modes", -1);

      agnss_Modes = new PositioningModes();
      agnss_Modes.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("agnss_Modes", -1);

      // decode gnss_Signals

      buffer.getContext().eventDispatcher.startElement("gnss_Signals", -1);

      gnss_Signals = new GNSS_SignalIDs();
      gnss_Signals.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("gnss_Signals", -1);

      // decode fta_MeasSupport

      if (fta_MeasSupportPresent) {
         buffer.getContext().eventDispatcher.startElement("fta_MeasSupport", -1);

         fta_MeasSupport = new GNSS_SupportElement_fta_MeasSupport();
         fta_MeasSupport.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("fta_MeasSupport", -1);
      }
      else {
         fta_MeasSupport = null;
      }

      // decode adr_Support

      buffer.getContext().eventDispatcher.startElement("adr_Support", -1);

      adr_Support = new Asn1Boolean();
      adr_Support.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("adr_Support", -1);

      // decode velocityMeasurementSupport

      buffer.getContext().eventDispatcher.startElement("velocityMeasurementSupport", -1);

      velocityMeasurementSupport = new Asn1Boolean();
      velocityMeasurementSupport.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("velocityMeasurementSupport", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("adrEnhancementsSupport_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("ha_gnss_Modes_r15Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode adrEnhancementsSupport_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("adrEnhancementsSupport_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = GNSS_SupportElement_adrEnhancementsSupport_r15.decodeEnumValue (buffer);
               adrEnhancementsSupport_r15 = GNSS_SupportElement_adrEnhancementsSupport_r15.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("adrEnhancementsSupport_r15", -1);

         }
         else {
            adrEnhancementsSupport_r15 = null;
         }

         // decode ha_gnss_Modes_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("ha_gnss_Modes_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            ha_gnss_Modes_r15 = new PositioningModes();
            ha_gnss_Modes_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("ha_gnss_Modes_r15", -1);

         }
         else {
            ha_gnss_Modes_r15 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((adrEnhancementsSupport_r15 != null) ||
      (ha_gnss_Modes_r15 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((sbas_IDs != null), null);
      buffer.encodeBit ((fta_MeasSupport != null), null);

      // encode gnss_ID

      if (gnss_ID != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_ID", -1);

         gnss_ID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_ID", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_ID");

      // encode sbas_IDs

      if (sbas_IDs != null) {
         buffer.getContext().eventDispatcher.startElement("sbas_IDs", -1);

         sbas_IDs.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sbas_IDs", -1);
      }

      // encode agnss_Modes

      if (agnss_Modes != null) {
         buffer.getContext().eventDispatcher.startElement("agnss_Modes", -1);

         agnss_Modes.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("agnss_Modes", -1);
      }
      else throw new Asn1MissingRequiredException ("agnss_Modes");

      // encode gnss_Signals

      if (gnss_Signals != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_Signals", -1);

         gnss_Signals.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_Signals", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_Signals");

      // encode fta_MeasSupport

      if (fta_MeasSupport != null) {
         buffer.getContext().eventDispatcher.startElement("fta_MeasSupport", -1);

         fta_MeasSupport.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("fta_MeasSupport", -1);
      }

      // encode adr_Support

      if (adr_Support != null) {
         buffer.getContext().eventDispatcher.startElement("adr_Support", -1);

         adr_Support.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("adr_Support", -1);
      }
      else throw new Asn1MissingRequiredException ("adr_Support");

      // encode velocityMeasurementSupport

      if (velocityMeasurementSupport != null) {
         buffer.getContext().eventDispatcher.startElement("velocityMeasurementSupport", -1);

         velocityMeasurementSupport.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("velocityMeasurementSupport", -1);
      }
      else throw new Asn1MissingRequiredException ("velocityMeasurementSupport");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 2;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((adrEnhancementsSupport_r15 != null), null);
         buffer.encodeBit ((ha_gnss_Modes_r15 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // adrEnhancementsSupport_r15

         if (adrEnhancementsSupport_r15 != null) {
            buffer.reset();
            adrEnhancementsSupport_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("adrEnhancementsSupport_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("adrEnhancementsSupport_r15", -1);
         }

         // ha_gnss_Modes_r15

         if (ha_gnss_Modes_r15 != null) {
            buffer.reset();
            ha_gnss_Modes_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("ha_gnss_Modes_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("ha_gnss_Modes_r15", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
