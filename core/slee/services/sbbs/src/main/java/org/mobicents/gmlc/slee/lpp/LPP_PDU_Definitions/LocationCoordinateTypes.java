/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class LocationCoordinateTypes extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "LocationCoordinateTypes";
   }

   protected Asn1Boolean ellipsoidPoint;
   protected Asn1Boolean ellipsoidPointWithUncertaintyCircle;
   protected Asn1Boolean ellipsoidPointWithUncertaintyEllipse;
   protected Asn1Boolean polygon;
   protected Asn1Boolean ellipsoidPointWithAltitude;
   protected Asn1Boolean ellipsoidPointWithAltitudeAndUncertaintyEllipsoid;
   protected Asn1Boolean ellipsoidArc;
   protected Asn1Boolean highAccuracyEllipsoidPointWithUncertaintyEllipse_r15;  // optional
   protected Asn1Boolean highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15;  // optional
   protected Asn1OpenExt extElem1;

   public LocationCoordinateTypes () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public LocationCoordinateTypes (
      Asn1Boolean ellipsoidPoint_,
      Asn1Boolean ellipsoidPointWithUncertaintyCircle_,
      Asn1Boolean ellipsoidPointWithUncertaintyEllipse_,
      Asn1Boolean polygon_,
      Asn1Boolean ellipsoidPointWithAltitude_,
      Asn1Boolean ellipsoidPointWithAltitudeAndUncertaintyEllipsoid_,
      Asn1Boolean ellipsoidArc_,
      Asn1Boolean highAccuracyEllipsoidPointWithUncertaintyEllipse_r15_,
      Asn1Boolean highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15_
   ) {
      super();
      setEllipsoidPoint (ellipsoidPoint_);
      setEllipsoidPointWithUncertaintyCircle (ellipsoidPointWithUncertaintyCircle_);
      setEllipsoidPointWithUncertaintyEllipse (ellipsoidPointWithUncertaintyEllipse_);
      setPolygon (polygon_);
      setEllipsoidPointWithAltitude (ellipsoidPointWithAltitude_);
      setEllipsoidPointWithAltitudeAndUncertaintyEllipsoid (ellipsoidPointWithAltitudeAndUncertaintyEllipsoid_);
      setEllipsoidArc (ellipsoidArc_);
      setHighAccuracyEllipsoidPointWithUncertaintyEllipse_r15 (highAccuracyEllipsoidPointWithUncertaintyEllipse_r15_);
      setHighAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15 (highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public LocationCoordinateTypes (
      Asn1Boolean ellipsoidPoint_,
      Asn1Boolean ellipsoidPointWithUncertaintyCircle_,
      Asn1Boolean ellipsoidPointWithUncertaintyEllipse_,
      Asn1Boolean polygon_,
      Asn1Boolean ellipsoidPointWithAltitude_,
      Asn1Boolean ellipsoidPointWithAltitudeAndUncertaintyEllipsoid_,
      Asn1Boolean ellipsoidArc_
   ) {
      super();
      setEllipsoidPoint (ellipsoidPoint_);
      setEllipsoidPointWithUncertaintyCircle (ellipsoidPointWithUncertaintyCircle_);
      setEllipsoidPointWithUncertaintyEllipse (ellipsoidPointWithUncertaintyEllipse_);
      setPolygon (polygon_);
      setEllipsoidPointWithAltitude (ellipsoidPointWithAltitude_);
      setEllipsoidPointWithAltitudeAndUncertaintyEllipsoid (ellipsoidPointWithAltitudeAndUncertaintyEllipsoid_);
      setEllipsoidArc (ellipsoidArc_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public LocationCoordinateTypes (boolean ellipsoidPoint_,
      boolean ellipsoidPointWithUncertaintyCircle_,
      boolean ellipsoidPointWithUncertaintyEllipse_,
      boolean polygon_,
      boolean ellipsoidPointWithAltitude_,
      boolean ellipsoidPointWithAltitudeAndUncertaintyEllipsoid_,
      boolean ellipsoidArc_,
      boolean highAccuracyEllipsoidPointWithUncertaintyEllipse_r15_,
      boolean highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15_
   ) {
      super();
      setEllipsoidPoint (ellipsoidPoint_);
      setEllipsoidPointWithUncertaintyCircle (ellipsoidPointWithUncertaintyCircle_);
      setEllipsoidPointWithUncertaintyEllipse (ellipsoidPointWithUncertaintyEllipse_);
      setPolygon (polygon_);
      setEllipsoidPointWithAltitude (ellipsoidPointWithAltitude_);
      setEllipsoidPointWithAltitudeAndUncertaintyEllipsoid (ellipsoidPointWithAltitudeAndUncertaintyEllipsoid_);
      setEllipsoidArc (ellipsoidArc_);
      setHighAccuracyEllipsoidPointWithUncertaintyEllipse_r15 (highAccuracyEllipsoidPointWithUncertaintyEllipse_r15_);
      setHighAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15 (highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public LocationCoordinateTypes (
      boolean ellipsoidPoint_,
      boolean ellipsoidPointWithUncertaintyCircle_,
      boolean ellipsoidPointWithUncertaintyEllipse_,
      boolean polygon_,
      boolean ellipsoidPointWithAltitude_,
      boolean ellipsoidPointWithAltitudeAndUncertaintyEllipsoid_,
      boolean ellipsoidArc_
   ) {
      super();
      setEllipsoidPoint (ellipsoidPoint_);
      setEllipsoidPointWithUncertaintyCircle (ellipsoidPointWithUncertaintyCircle_);
      setEllipsoidPointWithUncertaintyEllipse (ellipsoidPointWithUncertaintyEllipse_);
      setPolygon (polygon_);
      setEllipsoidPointWithAltitude (ellipsoidPointWithAltitude_);
      setEllipsoidPointWithAltitudeAndUncertaintyEllipsoid (ellipsoidPointWithAltitudeAndUncertaintyEllipsoid_);
      setEllipsoidArc (ellipsoidArc_);
   }

   public void init () {
      ellipsoidPoint = null;
      ellipsoidPointWithUncertaintyCircle = null;
      ellipsoidPointWithUncertaintyEllipse = null;
      polygon = null;
      ellipsoidPointWithAltitude = null;
      ellipsoidPointWithAltitudeAndUncertaintyEllipsoid = null;
      ellipsoidArc = null;
      highAccuracyEllipsoidPointWithUncertaintyEllipse_r15 = null;
      highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof LocationCoordinateTypes) ) return false;

      LocationCoordinateTypes rhs = (LocationCoordinateTypes) obj;

      if (ellipsoidPoint == null) {
         if (rhs.ellipsoidPoint != null) return false;
      }
      else {
         if (!ellipsoidPoint.equals(rhs.ellipsoidPoint)) {
            return false;
         }
      }

      if (ellipsoidPointWithUncertaintyCircle == null) {
         if (rhs.ellipsoidPointWithUncertaintyCircle != null) return false;
      }
      else {
         if (!ellipsoidPointWithUncertaintyCircle.equals(rhs.ellipsoidPointWithUncertaintyCircle)) {
            return false;
         }
      }

      if (ellipsoidPointWithUncertaintyEllipse == null) {
         if (rhs.ellipsoidPointWithUncertaintyEllipse != null) return false;
      }
      else {
         if (!ellipsoidPointWithUncertaintyEllipse.equals(rhs.ellipsoidPointWithUncertaintyEllipse)) {
            return false;
         }
      }

      if (polygon == null) {
         if (rhs.polygon != null) return false;
      }
      else {
         if (!polygon.equals(rhs.polygon)) {
            return false;
         }
      }

      if (ellipsoidPointWithAltitude == null) {
         if (rhs.ellipsoidPointWithAltitude != null) return false;
      }
      else {
         if (!ellipsoidPointWithAltitude.equals(rhs.ellipsoidPointWithAltitude)) {
            return false;
         }
      }

      if (ellipsoidPointWithAltitudeAndUncertaintyEllipsoid == null) {
         if (rhs.ellipsoidPointWithAltitudeAndUncertaintyEllipsoid != null) return false;
      }
      else {
         if (!ellipsoidPointWithAltitudeAndUncertaintyEllipsoid.equals(rhs.ellipsoidPointWithAltitudeAndUncertaintyEllipsoid)) {
            return false;
         }
      }

      if (ellipsoidArc == null) {
         if (rhs.ellipsoidArc != null) return false;
      }
      else {
         if (!ellipsoidArc.equals(rhs.ellipsoidArc)) {
            return false;
         }
      }

      if (highAccuracyEllipsoidPointWithUncertaintyEllipse_r15 == null) {
         if (rhs.highAccuracyEllipsoidPointWithUncertaintyEllipse_r15 != null) return false;
      }
      else {
         if (!highAccuracyEllipsoidPointWithUncertaintyEllipse_r15.equals(rhs.highAccuracyEllipsoidPointWithUncertaintyEllipse_r15)) {
            return false;
         }
      }

      if (highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15 == null) {
         if (rhs.highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15 != null) return false;
      }
      else {
         if (!highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15.equals(rhs.highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (ellipsoidPoint != null) __code = 31*__code + ellipsoidPoint.hashCode();
      if (ellipsoidPointWithUncertaintyCircle != null) __code = 31*__code + ellipsoidPointWithUncertaintyCircle.hashCode();
      if (ellipsoidPointWithUncertaintyEllipse != null) __code = 31*__code + ellipsoidPointWithUncertaintyEllipse.hashCode();
      if (polygon != null) __code = 31*__code + polygon.hashCode();
      if (ellipsoidPointWithAltitude != null) __code = 31*__code + ellipsoidPointWithAltitude.hashCode();
      if (ellipsoidPointWithAltitudeAndUncertaintyEllipsoid != null) __code = 31*__code + ellipsoidPointWithAltitudeAndUncertaintyEllipsoid.hashCode();
      if (ellipsoidArc != null) __code = 31*__code + ellipsoidArc.hashCode();
      if (highAccuracyEllipsoidPointWithUncertaintyEllipse_r15 != null) __code = 31*__code + highAccuracyEllipsoidPointWithUncertaintyEllipse_r15.hashCode();
      if (highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15 != null) __code = 31*__code + highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for EllipsoidPoint
    */
   public Asn1Boolean getEllipsoidPoint () {
      return ellipsoidPoint;
   }

   public void setEllipsoidPoint (Asn1Boolean value) {
      this.ellipsoidPoint = value;
   }

   public void setEllipsoidPoint (boolean value) {
      setEllipsoidPoint (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for EllipsoidPointWithUncertaintyCircle
    */
   public Asn1Boolean getEllipsoidPointWithUncertaintyCircle () {
      return ellipsoidPointWithUncertaintyCircle;
   }

   public void setEllipsoidPointWithUncertaintyCircle (Asn1Boolean value) {
      this.ellipsoidPointWithUncertaintyCircle = value;
   }

   public void setEllipsoidPointWithUncertaintyCircle (boolean value) {
      setEllipsoidPointWithUncertaintyCircle (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for EllipsoidPointWithUncertaintyEllipse
    */
   public Asn1Boolean getEllipsoidPointWithUncertaintyEllipse () {
      return ellipsoidPointWithUncertaintyEllipse;
   }

   public void setEllipsoidPointWithUncertaintyEllipse (Asn1Boolean value) {
      this.ellipsoidPointWithUncertaintyEllipse = value;
   }

   public void setEllipsoidPointWithUncertaintyEllipse (boolean value) {
      setEllipsoidPointWithUncertaintyEllipse (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Polygon
    */
   public Asn1Boolean getPolygon () {
      return polygon;
   }

   public void setPolygon (Asn1Boolean value) {
      this.polygon = value;
   }

   public void setPolygon (boolean value) {
      setPolygon (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for EllipsoidPointWithAltitude
    */
   public Asn1Boolean getEllipsoidPointWithAltitude () {
      return ellipsoidPointWithAltitude;
   }

   public void setEllipsoidPointWithAltitude (Asn1Boolean value) {
      this.ellipsoidPointWithAltitude = value;
   }

   public void setEllipsoidPointWithAltitude (boolean value) {
      setEllipsoidPointWithAltitude (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for EllipsoidPointWithAltitudeAndUncertaintyEllipsoid
    */
   public Asn1Boolean getEllipsoidPointWithAltitudeAndUncertaintyEllipsoid () {
      return ellipsoidPointWithAltitudeAndUncertaintyEllipsoid;
   }

   public void setEllipsoidPointWithAltitudeAndUncertaintyEllipsoid (Asn1Boolean value) {
      this.ellipsoidPointWithAltitudeAndUncertaintyEllipsoid = value;
   }

   public void setEllipsoidPointWithAltitudeAndUncertaintyEllipsoid (boolean value) {
      setEllipsoidPointWithAltitudeAndUncertaintyEllipsoid (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for EllipsoidArc
    */
   public Asn1Boolean getEllipsoidArc () {
      return ellipsoidArc;
   }

   public void setEllipsoidArc (Asn1Boolean value) {
      this.ellipsoidArc = value;
   }

   public void setEllipsoidArc (boolean value) {
      setEllipsoidArc (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for HighAccuracyEllipsoidPointWithUncertaintyEllipse_r15
    */
   public Asn1Boolean getHighAccuracyEllipsoidPointWithUncertaintyEllipse_r15 () {
      return highAccuracyEllipsoidPointWithUncertaintyEllipse_r15;
   }

   public void setHighAccuracyEllipsoidPointWithUncertaintyEllipse_r15 (Asn1Boolean value) {
      this.highAccuracyEllipsoidPointWithUncertaintyEllipse_r15 = value;
   }

   public void setHighAccuracyEllipsoidPointWithUncertaintyEllipse_r15 (boolean value) {
      setHighAccuracyEllipsoidPointWithUncertaintyEllipse_r15 (new Asn1Boolean(value));
   }
   public boolean hasHighAccuracyEllipsoidPointWithUncertaintyEllipse_r15 () {
      return (highAccuracyEllipsoidPointWithUncertaintyEllipse_r15 != null);
   }

   /**
    * Accessor/mutator methods for HighAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15
    */
   public Asn1Boolean getHighAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15 () {
      return highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15;
   }

   public void setHighAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15 (Asn1Boolean value) {
      this.highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15 = value;
   }

   public void setHighAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15 (boolean value) {
      setHighAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15 (new Asn1Boolean(value));
   }
   public boolean hasHighAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15 () {
      return (highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ellipsoidPoint;
         case 1: return ellipsoidPointWithUncertaintyCircle;
         case 2: return ellipsoidPointWithUncertaintyEllipse;
         case 3: return polygon;
         case 4: return ellipsoidPointWithAltitude;
         case 5: return ellipsoidPointWithAltitudeAndUncertaintyEllipsoid;
         case 6: return ellipsoidArc;
         case 7: return highAccuracyEllipsoidPointWithUncertaintyEllipse_r15;
         case 8: return highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15;
         case 9: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ellipsoidPoint";
         case 1: return "ellipsoidPointWithUncertaintyCircle";
         case 2: return "ellipsoidPointWithUncertaintyEllipse";
         case 3: return "polygon";
         case 4: return "ellipsoidPointWithAltitude";
         case 5: return "ellipsoidPointWithAltitudeAndUncertaintyEllipsoid";
         case 6: return "ellipsoidArc";
         case 7: return "highAccuracyEllipsoidPointWithUncertaintyEllipse-r15";
         case 8: return "highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid-r15";
         case 9: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode ellipsoidPoint

      buffer.getContext().eventDispatcher.startElement("ellipsoidPoint", -1);

      ellipsoidPoint = new Asn1Boolean();
      ellipsoidPoint.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ellipsoidPoint", -1);

      // decode ellipsoidPointWithUncertaintyCircle

      buffer.getContext().eventDispatcher.startElement("ellipsoidPointWithUncertaintyCircle", -1);

      ellipsoidPointWithUncertaintyCircle = new Asn1Boolean();
      ellipsoidPointWithUncertaintyCircle.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ellipsoidPointWithUncertaintyCircle", -1);

      // decode ellipsoidPointWithUncertaintyEllipse

      buffer.getContext().eventDispatcher.startElement("ellipsoidPointWithUncertaintyEllipse", -1);

      ellipsoidPointWithUncertaintyEllipse = new Asn1Boolean();
      ellipsoidPointWithUncertaintyEllipse.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ellipsoidPointWithUncertaintyEllipse", -1);

      // decode polygon

      buffer.getContext().eventDispatcher.startElement("polygon", -1);

      polygon = new Asn1Boolean();
      polygon.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("polygon", -1);

      // decode ellipsoidPointWithAltitude

      buffer.getContext().eventDispatcher.startElement("ellipsoidPointWithAltitude", -1);

      ellipsoidPointWithAltitude = new Asn1Boolean();
      ellipsoidPointWithAltitude.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ellipsoidPointWithAltitude", -1);

      // decode ellipsoidPointWithAltitudeAndUncertaintyEllipsoid

      buffer.getContext().eventDispatcher.startElement("ellipsoidPointWithAltitudeAndUncertaintyEllipsoid", -1);

      ellipsoidPointWithAltitudeAndUncertaintyEllipsoid = new Asn1Boolean();
      ellipsoidPointWithAltitudeAndUncertaintyEllipsoid.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ellipsoidPointWithAltitudeAndUncertaintyEllipsoid", -1);

      // decode ellipsoidArc

      buffer.getContext().eventDispatcher.startElement("ellipsoidArc", -1);

      ellipsoidArc = new Asn1Boolean();
      ellipsoidArc.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ellipsoidArc", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("highAccuracyEllipsoidPointWithUncertaintyEllipse_r15Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode highAccuracyEllipsoidPointWithUncertaintyEllipse_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("highAccuracyEllipsoidPointWithUncertaintyEllipse_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            highAccuracyEllipsoidPointWithUncertaintyEllipse_r15 = new Asn1Boolean();
            highAccuracyEllipsoidPointWithUncertaintyEllipse_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("highAccuracyEllipsoidPointWithUncertaintyEllipse_r15", -1);

         }
         else {
            highAccuracyEllipsoidPointWithUncertaintyEllipse_r15 = null;
         }

         // decode highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15 = new Asn1Boolean();
            highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15", -1);

         }
         else {
            highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((highAccuracyEllipsoidPointWithUncertaintyEllipse_r15 != null) ||
      (highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode ellipsoidPoint

      if (ellipsoidPoint != null) {
         buffer.getContext().eventDispatcher.startElement("ellipsoidPoint", -1);

         ellipsoidPoint.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ellipsoidPoint", -1);
      }
      else throw new Asn1MissingRequiredException ("ellipsoidPoint");

      // encode ellipsoidPointWithUncertaintyCircle

      if (ellipsoidPointWithUncertaintyCircle != null) {
         buffer.getContext().eventDispatcher.startElement("ellipsoidPointWithUncertaintyCircle", -1);

         ellipsoidPointWithUncertaintyCircle.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ellipsoidPointWithUncertaintyCircle", -1);
      }
      else throw new Asn1MissingRequiredException ("ellipsoidPointWithUncertaintyCircle");

      // encode ellipsoidPointWithUncertaintyEllipse

      if (ellipsoidPointWithUncertaintyEllipse != null) {
         buffer.getContext().eventDispatcher.startElement("ellipsoidPointWithUncertaintyEllipse", -1);

         ellipsoidPointWithUncertaintyEllipse.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ellipsoidPointWithUncertaintyEllipse", -1);
      }
      else throw new Asn1MissingRequiredException ("ellipsoidPointWithUncertaintyEllipse");

      // encode polygon

      if (polygon != null) {
         buffer.getContext().eventDispatcher.startElement("polygon", -1);

         polygon.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("polygon", -1);
      }
      else throw new Asn1MissingRequiredException ("polygon");

      // encode ellipsoidPointWithAltitude

      if (ellipsoidPointWithAltitude != null) {
         buffer.getContext().eventDispatcher.startElement("ellipsoidPointWithAltitude", -1);

         ellipsoidPointWithAltitude.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ellipsoidPointWithAltitude", -1);
      }
      else throw new Asn1MissingRequiredException ("ellipsoidPointWithAltitude");

      // encode ellipsoidPointWithAltitudeAndUncertaintyEllipsoid

      if (ellipsoidPointWithAltitudeAndUncertaintyEllipsoid != null) {
         buffer.getContext().eventDispatcher.startElement("ellipsoidPointWithAltitudeAndUncertaintyEllipsoid", -1);

         ellipsoidPointWithAltitudeAndUncertaintyEllipsoid.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ellipsoidPointWithAltitudeAndUncertaintyEllipsoid", -1);
      }
      else throw new Asn1MissingRequiredException ("ellipsoidPointWithAltitudeAndUncertaintyEllipsoid");

      // encode ellipsoidArc

      if (ellipsoidArc != null) {
         buffer.getContext().eventDispatcher.startElement("ellipsoidArc", -1);

         ellipsoidArc.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ellipsoidArc", -1);
      }
      else throw new Asn1MissingRequiredException ("ellipsoidArc");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 2;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((highAccuracyEllipsoidPointWithUncertaintyEllipse_r15 != null), null);
         buffer.encodeBit ((highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // highAccuracyEllipsoidPointWithUncertaintyEllipse_r15

         if (highAccuracyEllipsoidPointWithUncertaintyEllipse_r15 != null) {
            buffer.reset();
            highAccuracyEllipsoidPointWithUncertaintyEllipse_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("highAccuracyEllipsoidPointWithUncertaintyEllipse_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("highAccuracyEllipsoidPointWithUncertaintyEllipse_r15", -1);
         }

         // highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15

         if (highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15 != null) {
            buffer.reset();
            highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("highAccuracyEllipsoidPointWithAltitudeAndUncertaintyEllipsoid_r15", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
