/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_NavModelSatelliteElement extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-NavModelSatelliteElement";
   }

   protected SV_ID svID;
   protected Asn1BitString svHealth;
   protected Asn1BitString iod;
   protected GNSS_ClockModel gnss_ClockModel;
   protected GNSS_OrbitModel gnss_OrbitModel;
   protected Asn1BitString svHealthExt_v1240;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_NavModelSatelliteElement () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_NavModelSatelliteElement (
      SV_ID svID_,
      Asn1BitString svHealth_,
      Asn1BitString iod_,
      GNSS_ClockModel gnss_ClockModel_,
      GNSS_OrbitModel gnss_OrbitModel_,
      Asn1BitString svHealthExt_v1240_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setSvHealth (svHealth_);
      setIod (iod_);
      setGnss_ClockModel (gnss_ClockModel_);
      setGnss_OrbitModel (gnss_OrbitModel_);
      setSvHealthExt_v1240 (svHealthExt_v1240_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GNSS_NavModelSatelliteElement (
      SV_ID svID_,
      Asn1BitString svHealth_,
      Asn1BitString iod_,
      GNSS_ClockModel gnss_ClockModel_,
      GNSS_OrbitModel gnss_OrbitModel_
   ) throws Asn1Exception {
      super();
      setSvID (svID_);
      setSvHealth (svHealth_);
      setIod (iod_);
      setGnss_ClockModel (gnss_ClockModel_);
      setGnss_OrbitModel (gnss_OrbitModel_);
   }

   public void init () {
      svID = null;
      svHealth = null;
      iod = null;
      gnss_ClockModel = null;
      gnss_OrbitModel = null;
      svHealthExt_v1240 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_NavModelSatelliteElement) ) return false;

      GNSS_NavModelSatelliteElement rhs = (GNSS_NavModelSatelliteElement) obj;

      if (svID == null) {
         if (rhs.svID != null) return false;
      }
      else {
         if (!svID.equals(rhs.svID)) {
            return false;
         }
      }

      if (svHealth == null) {
         if (rhs.svHealth != null) return false;
      }
      else {
         if (!svHealth.equals(rhs.svHealth)) {
            return false;
         }
      }

      if (iod == null) {
         if (rhs.iod != null) return false;
      }
      else {
         if (!iod.equals(rhs.iod)) {
            return false;
         }
      }

      if (gnss_ClockModel == null) {
         if (rhs.gnss_ClockModel != null) return false;
      }
      else {
         if (!gnss_ClockModel.equals(rhs.gnss_ClockModel)) {
            return false;
         }
      }

      if (gnss_OrbitModel == null) {
         if (rhs.gnss_OrbitModel != null) return false;
      }
      else {
         if (!gnss_OrbitModel.equals(rhs.gnss_OrbitModel)) {
            return false;
         }
      }

      if (svHealthExt_v1240 == null) {
         if (rhs.svHealthExt_v1240 != null) return false;
      }
      else {
         if (!svHealthExt_v1240.equals(rhs.svHealthExt_v1240)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (svID != null) __code = 31*__code + svID.hashCode();
      if (svHealth != null) __code = 31*__code + svHealth.hashCode();
      if (iod != null) __code = 31*__code + iod.hashCode();
      if (gnss_ClockModel != null) __code = 31*__code + gnss_ClockModel.hashCode();
      if (gnss_OrbitModel != null) __code = 31*__code + gnss_OrbitModel.hashCode();
      if (svHealthExt_v1240 != null) __code = 31*__code + svHealthExt_v1240.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SvID
    */
   public SV_ID getSvID () {
      return svID;
   }

   public void setSvID (SV_ID value) {
      this.svID = value;
   }

   /**
    * Accessor/mutator methods for SvHealth
    */
   public Asn1BitString getSvHealth () {
      return svHealth;
   }

   public void setSvHealth (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 8)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.svHealth = value;
   }

   /**
    * Accessor/mutator methods for Iod
    */
   public Asn1BitString getIod () {
      return iod;
   }

   public void setIod (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 11)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.iod = value;
   }

   /**
    * Accessor/mutator methods for Gnss_ClockModel
    */
   public GNSS_ClockModel getGnss_ClockModel () {
      return gnss_ClockModel;
   }

   public void setGnss_ClockModel (GNSS_ClockModel value) {
      this.gnss_ClockModel = value;
   }

   /**
    * Accessor/mutator methods for Gnss_OrbitModel
    */
   public GNSS_OrbitModel getGnss_OrbitModel () {
      return gnss_OrbitModel;
   }

   public void setGnss_OrbitModel (GNSS_OrbitModel value) {
      this.gnss_OrbitModel = value;
   }

   /**
    * Accessor/mutator methods for SvHealthExt_v1240
    */
   public Asn1BitString getSvHealthExt_v1240 () {
      return svHealthExt_v1240;
   }

   public void setSvHealthExt_v1240 (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 4)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.svHealthExt_v1240 = value;
   }

   public boolean hasSvHealthExt_v1240 () {
      return (svHealthExt_v1240 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return svID;
         case 1: return svHealth;
         case 2: return iod;
         case 3: return gnss_ClockModel;
         case 4: return gnss_OrbitModel;
         case 5: return svHealthExt_v1240;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "svID";
         case 1: return "svHealth";
         case 2: return "iod";
         case 3: return "gnss-ClockModel";
         case 4: return "gnss-OrbitModel";
         case 5: return "svHealthExt-v1240";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode svID

      buffer.getContext().eventDispatcher.startElement("svID", -1);

      svID = new SV_ID();
      svID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("svID", -1);

      // decode svHealth

      buffer.getContext().eventDispatcher.startElement("svHealth", -1);

      svHealth = new Asn1BitString();
      svHealth.decode (buffer, 8, 8);
      buffer.getContext().eventDispatcher.endElement("svHealth", -1);

      // decode iod

      buffer.getContext().eventDispatcher.startElement("iod", -1);

      iod = new Asn1BitString();
      iod.decode (buffer, 11, 11);
      buffer.getContext().eventDispatcher.endElement("iod", -1);

      // decode gnss_ClockModel

      buffer.getContext().eventDispatcher.startElement("gnss_ClockModel", -1);

      gnss_ClockModel = new GNSS_ClockModel();
      gnss_ClockModel.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("gnss_ClockModel", -1);

      // decode gnss_OrbitModel

      buffer.getContext().eventDispatcher.startElement("gnss_OrbitModel", -1);

      gnss_OrbitModel = new GNSS_OrbitModel();
      gnss_OrbitModel.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("gnss_OrbitModel", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("svHealthExt_v1240Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode svHealthExt_v1240

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("svHealthExt_v1240", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            svHealthExt_v1240 = new Asn1BitString();
            svHealthExt_v1240.decode (buffer, 4, 4);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("svHealthExt_v1240", -1);

         }
         else {
            svHealthExt_v1240 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((svHealthExt_v1240 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode svID

      if (svID != null) {
         buffer.getContext().eventDispatcher.startElement("svID", -1);

         svID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("svID", -1);
      }
      else throw new Asn1MissingRequiredException ("svID");

      // encode svHealth

      if (svHealth != null) {
         buffer.getContext().eventDispatcher.startElement("svHealth", -1);

         svHealth.encode (buffer, 8, 8);

         buffer.getContext().eventDispatcher.endElement("svHealth", -1);
      }
      else throw new Asn1MissingRequiredException ("svHealth");

      // encode iod

      if (iod != null) {
         buffer.getContext().eventDispatcher.startElement("iod", -1);

         iod.encode (buffer, 11, 11);

         buffer.getContext().eventDispatcher.endElement("iod", -1);
      }
      else throw new Asn1MissingRequiredException ("iod");

      // encode gnss_ClockModel

      if (gnss_ClockModel != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_ClockModel", -1);

         gnss_ClockModel.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_ClockModel", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_ClockModel");

      // encode gnss_OrbitModel

      if (gnss_OrbitModel != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_OrbitModel", -1);

         gnss_OrbitModel.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_OrbitModel", -1);
      }
      else throw new Asn1MissingRequiredException ("gnss_OrbitModel");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((svHealthExt_v1240 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // svHealthExt_v1240

         if (svHealthExt_v1240 != null) {
            buffer.reset();
            svHealthExt_v1240.encode (buffer, 4, 4);
            buffer.getContext().eventDispatcher.startElement("svHealthExt_v1240", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("svHealthExt_v1240", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
