/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Version_2_parameter_extensions;

import com.objsys.asn1j.runtime.*;

public class GanssAdditionalDataChoices extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_Version_2_parameter_extensionsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_Version_2_parameter_extensionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GanssAdditionalDataChoices";
   }

   protected Asn1Integer orbitModelID;  // optional
   protected Asn1Integer clockModelID;  // optional
   protected Asn1Integer utcModelID;  // optional
   protected Asn1Integer almanacModelID;  // optional
   protected Asn1OpenExt extElem1;

   public GanssAdditionalDataChoices () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GanssAdditionalDataChoices (
      Asn1Integer orbitModelID_,
      Asn1Integer clockModelID_,
      Asn1Integer utcModelID_,
      Asn1Integer almanacModelID_
   ) throws Asn1Exception {
      super();
      setOrbitModelID (orbitModelID_);
      setClockModelID (clockModelID_);
      setUtcModelID (utcModelID_);
      setAlmanacModelID (almanacModelID_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GanssAdditionalDataChoices (long orbitModelID_,
      long clockModelID_,
      long utcModelID_,
      long almanacModelID_
   ) throws Asn1Exception {
      super();
      setOrbitModelID (orbitModelID_);
      setClockModelID (clockModelID_);
      setUtcModelID (utcModelID_);
      setAlmanacModelID (almanacModelID_);
   }

   public void init () {
      orbitModelID = null;
      clockModelID = null;
      utcModelID = null;
      almanacModelID = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GanssAdditionalDataChoices) ) return false;

      GanssAdditionalDataChoices rhs = (GanssAdditionalDataChoices) obj;

      if (orbitModelID == null) {
         if (rhs.orbitModelID != null) return false;
      }
      else {
         if (!orbitModelID.equals(rhs.orbitModelID)) {
            return false;
         }
      }

      if (clockModelID == null) {
         if (rhs.clockModelID != null) return false;
      }
      else {
         if (!clockModelID.equals(rhs.clockModelID)) {
            return false;
         }
      }

      if (utcModelID == null) {
         if (rhs.utcModelID != null) return false;
      }
      else {
         if (!utcModelID.equals(rhs.utcModelID)) {
            return false;
         }
      }

      if (almanacModelID == null) {
         if (rhs.almanacModelID != null) return false;
      }
      else {
         if (!almanacModelID.equals(rhs.almanacModelID)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (orbitModelID != null) __code = 31*__code + orbitModelID.hashCode();
      if (clockModelID != null) __code = 31*__code + clockModelID.hashCode();
      if (utcModelID != null) __code = 31*__code + utcModelID.hashCode();
      if (almanacModelID != null) __code = 31*__code + almanacModelID.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for OrbitModelID
    */
   public Asn1Integer getOrbitModelID () {
      return orbitModelID;
   }

   public void setOrbitModelID (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 7))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.orbitModelID = value;
   }

   public void setOrbitModelID (long value) 
      throws Asn1Exception
   {
      setOrbitModelID (new Asn1Integer(value));
   }
   public boolean hasOrbitModelID () {
      return (orbitModelID != null);
   }

   /**
    * Accessor/mutator methods for ClockModelID
    */
   public Asn1Integer getClockModelID () {
      return clockModelID;
   }

   public void setClockModelID (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 7))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.clockModelID = value;
   }

   public void setClockModelID (long value) 
      throws Asn1Exception
   {
      setClockModelID (new Asn1Integer(value));
   }
   public boolean hasClockModelID () {
      return (clockModelID != null);
   }

   /**
    * Accessor/mutator methods for UtcModelID
    */
   public Asn1Integer getUtcModelID () {
      return utcModelID;
   }

   public void setUtcModelID (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 7))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.utcModelID = value;
   }

   public void setUtcModelID (long value) 
      throws Asn1Exception
   {
      setUtcModelID (new Asn1Integer(value));
   }
   public boolean hasUtcModelID () {
      return (utcModelID != null);
   }

   /**
    * Accessor/mutator methods for AlmanacModelID
    */
   public Asn1Integer getAlmanacModelID () {
      return almanacModelID;
   }

   public void setAlmanacModelID (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 7))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.almanacModelID = value;
   }

   public void setAlmanacModelID (long value) 
      throws Asn1Exception
   {
      setAlmanacModelID (new Asn1Integer(value));
   }
   public boolean hasAlmanacModelID () {
      return (almanacModelID != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return orbitModelID;
         case 1: return clockModelID;
         case 2: return utcModelID;
         case 3: return almanacModelID;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "orbitModelID";
         case 1: return "clockModelID";
         case 2: return "utcModelID";
         case 3: return "almanacModelID";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean orbitModelIDPresent = buffer.decodeBit ("orbitModelIDPresent");
      boolean clockModelIDPresent = buffer.decodeBit ("clockModelIDPresent");
      boolean utcModelIDPresent = buffer.decodeBit ("utcModelIDPresent");
      boolean almanacModelIDPresent = buffer.decodeBit ("almanacModelIDPresent");

      // decode orbitModelID

      if (orbitModelIDPresent) {
         buffer.getContext().eventDispatcher.startElement("orbitModelID", -1);

         orbitModelID = new Asn1Integer();
         orbitModelID.decode (buffer, 0, 7);
         buffer.getContext().eventDispatcher.endElement("orbitModelID", -1);
      }
      else {
         orbitModelID = null;
      }

      // decode clockModelID

      if (clockModelIDPresent) {
         buffer.getContext().eventDispatcher.startElement("clockModelID", -1);

         clockModelID = new Asn1Integer();
         clockModelID.decode (buffer, 0, 7);
         buffer.getContext().eventDispatcher.endElement("clockModelID", -1);
      }
      else {
         clockModelID = null;
      }

      // decode utcModelID

      if (utcModelIDPresent) {
         buffer.getContext().eventDispatcher.startElement("utcModelID", -1);

         utcModelID = new Asn1Integer();
         utcModelID.decode (buffer, 0, 7);
         buffer.getContext().eventDispatcher.endElement("utcModelID", -1);
      }
      else {
         utcModelID = null;
      }

      // decode almanacModelID

      if (almanacModelIDPresent) {
         buffer.getContext().eventDispatcher.startElement("almanacModelID", -1);

         almanacModelID = new Asn1Integer();
         almanacModelID.decode (buffer, 0, 7);
         buffer.getContext().eventDispatcher.endElement("almanacModelID", -1);
      }
      else {
         almanacModelID = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((orbitModelID != null), null);
      buffer.encodeBit ((clockModelID != null), null);
      buffer.encodeBit ((utcModelID != null), null);
      buffer.encodeBit ((almanacModelID != null), null);

      // encode orbitModelID

      if (orbitModelID != null) {
         buffer.getContext().eventDispatcher.startElement("orbitModelID", -1);

         orbitModelID.encode (buffer, 0, 7);

         buffer.getContext().eventDispatcher.endElement("orbitModelID", -1);
      }

      // encode clockModelID

      if (clockModelID != null) {
         buffer.getContext().eventDispatcher.startElement("clockModelID", -1);

         clockModelID.encode (buffer, 0, 7);

         buffer.getContext().eventDispatcher.endElement("clockModelID", -1);
      }

      // encode utcModelID

      if (utcModelID != null) {
         buffer.getContext().eventDispatcher.startElement("utcModelID", -1);

         utcModelID.encode (buffer, 0, 7);

         buffer.getContext().eventDispatcher.endElement("utcModelID", -1);
      }

      // encode almanacModelID

      if (almanacModelID != null) {
         buffer.getContext().eventDispatcher.startElement("almanacModelID", -1);

         almanacModelID.encode (buffer, 0, 7);

         buffer.getContext().eventDispatcher.endElement("almanacModelID", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
