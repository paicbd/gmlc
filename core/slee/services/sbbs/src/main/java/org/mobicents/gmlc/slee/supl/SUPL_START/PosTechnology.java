/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.SUPL_START;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.ULP_Version_2_parameter_extensions.Ver2_PosTechnology_extension;

public class PosTechnology extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_SUPL_STARTRtkey._rtkey);
      Asn1Type._setLicLocation(_SUPL_STARTRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "PosTechnology";
   }

   protected Asn1Boolean agpsSETassisted;
   protected Asn1Boolean agpsSETBased;
   protected Asn1Boolean autonomousGPS;
   protected Asn1Boolean aflt;
   protected Asn1Boolean ecid;
   protected Asn1Boolean eotd;
   protected Asn1Boolean otdoa;
   protected Ver2_PosTechnology_extension ver2_PosTechnology_extension;  // optional
   protected Asn1OpenExt extElem1;

   public PosTechnology () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PosTechnology (
      Asn1Boolean agpsSETassisted_,
      Asn1Boolean agpsSETBased_,
      Asn1Boolean autonomousGPS_,
      Asn1Boolean aflt_,
      Asn1Boolean ecid_,
      Asn1Boolean eotd_,
      Asn1Boolean otdoa_,
      Ver2_PosTechnology_extension ver2_PosTechnology_extension_
   ) {
      super();
      setAgpsSETassisted (agpsSETassisted_);
      setAgpsSETBased (agpsSETBased_);
      setAutonomousGPS (autonomousGPS_);
      setAflt (aflt_);
      setEcid (ecid_);
      setEotd (eotd_);
      setOtdoa (otdoa_);
      setVer2_PosTechnology_extension (ver2_PosTechnology_extension_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PosTechnology (
      Asn1Boolean agpsSETassisted_,
      Asn1Boolean agpsSETBased_,
      Asn1Boolean autonomousGPS_,
      Asn1Boolean aflt_,
      Asn1Boolean ecid_,
      Asn1Boolean eotd_,
      Asn1Boolean otdoa_
   ) {
      super();
      setAgpsSETassisted (agpsSETassisted_);
      setAgpsSETBased (agpsSETBased_);
      setAutonomousGPS (autonomousGPS_);
      setAflt (aflt_);
      setEcid (ecid_);
      setEotd (eotd_);
      setOtdoa (otdoa_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PosTechnology (boolean agpsSETassisted_,
      boolean agpsSETBased_,
      boolean autonomousGPS_,
      boolean aflt_,
      boolean ecid_,
      boolean eotd_,
      boolean otdoa_,
      Ver2_PosTechnology_extension ver2_PosTechnology_extension_
   ) {
      super();
      setAgpsSETassisted (agpsSETassisted_);
      setAgpsSETBased (agpsSETBased_);
      setAutonomousGPS (autonomousGPS_);
      setAflt (aflt_);
      setEcid (ecid_);
      setEotd (eotd_);
      setOtdoa (otdoa_);
      setVer2_PosTechnology_extension (ver2_PosTechnology_extension_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public PosTechnology (
      boolean agpsSETassisted_,
      boolean agpsSETBased_,
      boolean autonomousGPS_,
      boolean aflt_,
      boolean ecid_,
      boolean eotd_,
      boolean otdoa_
   ) {
      super();
      setAgpsSETassisted (agpsSETassisted_);
      setAgpsSETBased (agpsSETBased_);
      setAutonomousGPS (autonomousGPS_);
      setAflt (aflt_);
      setEcid (ecid_);
      setEotd (eotd_);
      setOtdoa (otdoa_);
   }

   public void init () {
      agpsSETassisted = null;
      agpsSETBased = null;
      autonomousGPS = null;
      aflt = null;
      ecid = null;
      eotd = null;
      otdoa = null;
      ver2_PosTechnology_extension = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof PosTechnology) ) return false;

      PosTechnology rhs = (PosTechnology) obj;

      if (agpsSETassisted == null) {
         if (rhs.agpsSETassisted != null) return false;
      }
      else {
         if (!agpsSETassisted.equals(rhs.agpsSETassisted)) {
            return false;
         }
      }

      if (agpsSETBased == null) {
         if (rhs.agpsSETBased != null) return false;
      }
      else {
         if (!agpsSETBased.equals(rhs.agpsSETBased)) {
            return false;
         }
      }

      if (autonomousGPS == null) {
         if (rhs.autonomousGPS != null) return false;
      }
      else {
         if (!autonomousGPS.equals(rhs.autonomousGPS)) {
            return false;
         }
      }

      if (aflt == null) {
         if (rhs.aflt != null) return false;
      }
      else {
         if (!aflt.equals(rhs.aflt)) {
            return false;
         }
      }

      if (ecid == null) {
         if (rhs.ecid != null) return false;
      }
      else {
         if (!ecid.equals(rhs.ecid)) {
            return false;
         }
      }

      if (eotd == null) {
         if (rhs.eotd != null) return false;
      }
      else {
         if (!eotd.equals(rhs.eotd)) {
            return false;
         }
      }

      if (otdoa == null) {
         if (rhs.otdoa != null) return false;
      }
      else {
         if (!otdoa.equals(rhs.otdoa)) {
            return false;
         }
      }

      if (ver2_PosTechnology_extension == null) {
         if (rhs.ver2_PosTechnology_extension != null) return false;
      }
      else {
         if (!ver2_PosTechnology_extension.equals(rhs.ver2_PosTechnology_extension)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (agpsSETassisted != null) __code = 31*__code + agpsSETassisted.hashCode();
      if (agpsSETBased != null) __code = 31*__code + agpsSETBased.hashCode();
      if (autonomousGPS != null) __code = 31*__code + autonomousGPS.hashCode();
      if (aflt != null) __code = 31*__code + aflt.hashCode();
      if (ecid != null) __code = 31*__code + ecid.hashCode();
      if (eotd != null) __code = 31*__code + eotd.hashCode();
      if (otdoa != null) __code = 31*__code + otdoa.hashCode();
      if (ver2_PosTechnology_extension != null) __code = 31*__code + ver2_PosTechnology_extension.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for AgpsSETassisted
    */
   public Asn1Boolean getAgpsSETassisted () {
      return agpsSETassisted;
   }

   public void setAgpsSETassisted (Asn1Boolean value) {
      this.agpsSETassisted = value;
   }

   public void setAgpsSETassisted (boolean value) {
      setAgpsSETassisted (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for AgpsSETBased
    */
   public Asn1Boolean getAgpsSETBased () {
      return agpsSETBased;
   }

   public void setAgpsSETBased (Asn1Boolean value) {
      this.agpsSETBased = value;
   }

   public void setAgpsSETBased (boolean value) {
      setAgpsSETBased (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for AutonomousGPS
    */
   public Asn1Boolean getAutonomousGPS () {
      return autonomousGPS;
   }

   public void setAutonomousGPS (Asn1Boolean value) {
      this.autonomousGPS = value;
   }

   public void setAutonomousGPS (boolean value) {
      setAutonomousGPS (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Aflt
    */
   public Asn1Boolean getAflt () {
      return aflt;
   }

   public void setAflt (Asn1Boolean value) {
      this.aflt = value;
   }

   public void setAflt (boolean value) {
      setAflt (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ecid
    */
   public Asn1Boolean getEcid () {
      return ecid;
   }

   public void setEcid (Asn1Boolean value) {
      this.ecid = value;
   }

   public void setEcid (boolean value) {
      setEcid (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Eotd
    */
   public Asn1Boolean getEotd () {
      return eotd;
   }

   public void setEotd (Asn1Boolean value) {
      this.eotd = value;
   }

   public void setEotd (boolean value) {
      setEotd (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Otdoa
    */
   public Asn1Boolean getOtdoa () {
      return otdoa;
   }

   public void setOtdoa (Asn1Boolean value) {
      this.otdoa = value;
   }

   public void setOtdoa (boolean value) {
      setOtdoa (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for Ver2_PosTechnology_extension
    */
   public Ver2_PosTechnology_extension getVer2_PosTechnology_extension () {
      return ver2_PosTechnology_extension;
   }

   public void setVer2_PosTechnology_extension (Ver2_PosTechnology_extension value) {
      this.ver2_PosTechnology_extension = value;
   }

   public boolean hasVer2_PosTechnology_extension () {
      return (ver2_PosTechnology_extension != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return agpsSETassisted;
         case 1: return agpsSETBased;
         case 2: return autonomousGPS;
         case 3: return aflt;
         case 4: return ecid;
         case 5: return eotd;
         case 6: return otdoa;
         case 7: return ver2_PosTechnology_extension;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "agpsSETassisted";
         case 1: return "agpsSETBased";
         case 2: return "autonomousGPS";
         case 3: return "aflt";
         case 4: return "ecid";
         case 5: return "eotd";
         case 6: return "otdoa";
         case 7: return "ver2-PosTechnology-extension";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode agpsSETassisted

      buffer.getContext().eventDispatcher.startElement("agpsSETassisted", -1);

      agpsSETassisted = new Asn1Boolean();
      agpsSETassisted.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("agpsSETassisted", -1);

      // decode agpsSETBased

      buffer.getContext().eventDispatcher.startElement("agpsSETBased", -1);

      agpsSETBased = new Asn1Boolean();
      agpsSETBased.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("agpsSETBased", -1);

      // decode autonomousGPS

      buffer.getContext().eventDispatcher.startElement("autonomousGPS", -1);

      autonomousGPS = new Asn1Boolean();
      autonomousGPS.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("autonomousGPS", -1);

      // decode aflt

      buffer.getContext().eventDispatcher.startElement("aflt", -1);

      aflt = new Asn1Boolean();
      aflt.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("aflt", -1);

      // decode ecid

      buffer.getContext().eventDispatcher.startElement("ecid", -1);

      ecid = new Asn1Boolean();
      ecid.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ecid", -1);

      // decode eotd

      buffer.getContext().eventDispatcher.startElement("eotd", -1);

      eotd = new Asn1Boolean();
      eotd.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("eotd", -1);

      // decode otdoa

      buffer.getContext().eventDispatcher.startElement("otdoa", -1);

      otdoa = new Asn1Boolean();
      otdoa.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("otdoa", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("ver2_PosTechnology_extensionPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode ver2_PosTechnology_extension

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("ver2_PosTechnology_extension", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            ver2_PosTechnology_extension = new Ver2_PosTechnology_extension();
            ver2_PosTechnology_extension.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("ver2_PosTechnology_extension", -1);

         }
         else {
            ver2_PosTechnology_extension = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((ver2_PosTechnology_extension != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode agpsSETassisted

      if (agpsSETassisted != null) {
         buffer.getContext().eventDispatcher.startElement("agpsSETassisted", -1);

         agpsSETassisted.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("agpsSETassisted", -1);
      }
      else throw new Asn1MissingRequiredException ("agpsSETassisted");

      // encode agpsSETBased

      if (agpsSETBased != null) {
         buffer.getContext().eventDispatcher.startElement("agpsSETBased", -1);

         agpsSETBased.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("agpsSETBased", -1);
      }
      else throw new Asn1MissingRequiredException ("agpsSETBased");

      // encode autonomousGPS

      if (autonomousGPS != null) {
         buffer.getContext().eventDispatcher.startElement("autonomousGPS", -1);

         autonomousGPS.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("autonomousGPS", -1);
      }
      else throw new Asn1MissingRequiredException ("autonomousGPS");

      // encode aflt

      if (aflt != null) {
         buffer.getContext().eventDispatcher.startElement("aflt", -1);

         aflt.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("aflt", -1);
      }
      else throw new Asn1MissingRequiredException ("aflt");

      // encode ecid

      if (ecid != null) {
         buffer.getContext().eventDispatcher.startElement("ecid", -1);

         ecid.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ecid", -1);
      }
      else throw new Asn1MissingRequiredException ("ecid");

      // encode eotd

      if (eotd != null) {
         buffer.getContext().eventDispatcher.startElement("eotd", -1);

         eotd.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("eotd", -1);
      }
      else throw new Asn1MissingRequiredException ("eotd");

      // encode otdoa

      if (otdoa != null) {
         buffer.getContext().eventDispatcher.startElement("otdoa", -1);

         otdoa.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("otdoa", -1);
      }
      else throw new Asn1MissingRequiredException ("otdoa");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((ver2_PosTechnology_extension != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // ver2_PosTechnology_extension

         if (ver2_PosTechnology_extension != null) {
            buffer.reset();
            ver2_PosTechnology_extension.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("ver2_PosTechnology_extension", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("ver2_PosTechnology_extension", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
