/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP;

import com.objsys.asn1j.runtime.*;
import org.mobicents.gmlc.slee.supl.SUPL_INIT.SUPLINIT;
import org.mobicents.gmlc.slee.supl.SUPL_START.SUPLSTART;
import org.mobicents.gmlc.slee.supl.SUPL_RESPONSE.SUPLRESPONSE;
import org.mobicents.gmlc.slee.supl.SUPL_POS_INIT.SUPLPOSINIT;
import org.mobicents.gmlc.slee.supl.SUPL_POS.SUPLPOS;
import org.mobicents.gmlc.slee.supl.SUPL_END.SUPLEND;
import org.mobicents.gmlc.slee.supl.SUPL_AUTH_REQ.SUPLAUTHREQ;
import org.mobicents.gmlc.slee.supl.SUPL_AUTH_RESP.SUPLAUTHRESP;
import org.mobicents.gmlc.slee.supl.SUPL_TRIGGERED_START.Ver2_SUPLTRIGGEREDSTART;
import org.mobicents.gmlc.slee.supl.SUPL_TRIGGERED_RESPONSE.Ver2_SUPLTRIGGEREDRESPONSE;
import org.mobicents.gmlc.slee.supl.SUPL_TRIGGERED_STOP.Ver2_SUPLTRIGGEREDSTOP;
import org.mobicents.gmlc.slee.supl.SUPL_NOTIFY.Ver2_SUPLNOTIFY;
import org.mobicents.gmlc.slee.supl.SUPL_NOTIFY_RESPONSE.Ver2_SUPLNOTIFYRESPONSE;
import org.mobicents.gmlc.slee.supl.SUPL_SET_INIT.Ver2_SUPLSETINIT;
import org.mobicents.gmlc.slee.supl.SUPL_REPORT.Ver2_SUPLREPORT;

public class UlpMessage extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULPRtkey._rtkey);
      Asn1Type._setLicLocation(_ULPRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "UlpMessage";
   }

   // Choice element identifier constants
   public final static byte _MSSUPLINIT = 1;
   public final static byte _MSSUPLSTART = 2;
   public final static byte _MSSUPLRESPONSE = 3;
   public final static byte _MSSUPLPOSINIT = 4;
   public final static byte _MSSUPLPOS = 5;
   public final static byte _MSSUPLEND = 6;
   public final static byte _MSSUPLAUTHREQ = 7;
   public final static byte _MSSUPLAUTHRESP = 8;
   public final static byte _MSSUPLTRIGGEREDSTART = 9;
   public final static byte _MSSUPLTRIGGEREDRESPONSE = 10;
   public final static byte _MSSUPLTRIGGEREDSTOP = 11;
   public final static byte _MSSUPLNOTIFY = 12;
   public final static byte _MSSUPLNOTIFYRESPONSE = 13;
   public final static byte _MSSUPLSETINIT = 14;
   public final static byte _MSSUPLREPORT = 15;
   public final static byte _EXTELEM1 = 16;

   public UlpMessage () {
      super();
   }

   public UlpMessage (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _MSSUPLINIT: return "msSUPLINIT";
      case _MSSUPLSTART: return "msSUPLSTART";
      case _MSSUPLRESPONSE: return "msSUPLRESPONSE";
      case _MSSUPLPOSINIT: return "msSUPLPOSINIT";
      case _MSSUPLPOS: return "msSUPLPOS";
      case _MSSUPLEND: return "msSUPLEND";
      case _MSSUPLAUTHREQ: return "msSUPLAUTHREQ";
      case _MSSUPLAUTHRESP: return "msSUPLAUTHRESP";
      case _MSSUPLTRIGGEREDSTART: return "msSUPLTRIGGEREDSTART";
      case _MSSUPLTRIGGEREDRESPONSE: return "msSUPLTRIGGEREDRESPONSE";
      case _MSSUPLTRIGGEREDSTOP: return "msSUPLTRIGGEREDSTOP";
      case _MSSUPLNOTIFY: return "msSUPLNOTIFY";
      case _MSSUPLNOTIFYRESPONSE: return "msSUPLNOTIFYRESPONSE";
      case _MSSUPLSETINIT: return "msSUPLSETINIT";
      case _MSSUPLREPORT: return "msSUPLREPORT";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for msSUPLINIT
    */
   public SUPLINIT getMsSUPLINIT () {
      return (choiceID == _MSSUPLINIT) ? (SUPLINIT)element : null;
   }
   public void setMsSUPLINIT (SUPLINIT value) {
      setElement (_MSSUPLINIT, value);
   }
   public boolean isMsSUPLINIT () {
      return (choiceID == _MSSUPLINIT);
   }

   /**
    * Accessor/mutator methods for msSUPLSTART
    */
   public SUPLSTART getMsSUPLSTART () {
      return (choiceID == _MSSUPLSTART) ? (SUPLSTART)element : null;
   }
   public void setMsSUPLSTART (SUPLSTART value) {
      setElement (_MSSUPLSTART, value);
   }
   public boolean isMsSUPLSTART () {
      return (choiceID == _MSSUPLSTART);
   }

   /**
    * Accessor/mutator methods for msSUPLRESPONSE
    */
   public SUPLRESPONSE getMsSUPLRESPONSE () {
      return (choiceID == _MSSUPLRESPONSE) ? (SUPLRESPONSE)element : null;
   }
   public void setMsSUPLRESPONSE (SUPLRESPONSE value) {
      setElement (_MSSUPLRESPONSE, value);
   }
   public boolean isMsSUPLRESPONSE () {
      return (choiceID == _MSSUPLRESPONSE);
   }

   /**
    * Accessor/mutator methods for msSUPLPOSINIT
    */
   public SUPLPOSINIT getMsSUPLPOSINIT () {
      return (choiceID == _MSSUPLPOSINIT) ? (SUPLPOSINIT)element : null;
   }
   public void setMsSUPLPOSINIT (SUPLPOSINIT value) {
      setElement (_MSSUPLPOSINIT, value);
   }
   public boolean isMsSUPLPOSINIT () {
      return (choiceID == _MSSUPLPOSINIT);
   }

   /**
    * Accessor/mutator methods for msSUPLPOS
    */
   public SUPLPOS getMsSUPLPOS () {
      return (choiceID == _MSSUPLPOS) ? (SUPLPOS)element : null;
   }
   public void setMsSUPLPOS (SUPLPOS value) {
      setElement (_MSSUPLPOS, value);
   }
   public boolean isMsSUPLPOS () {
      return (choiceID == _MSSUPLPOS);
   }

   /**
    * Accessor/mutator methods for msSUPLEND
    */
   public SUPLEND getMsSUPLEND () {
      return (choiceID == _MSSUPLEND) ? (SUPLEND)element : null;
   }
   public void setMsSUPLEND (SUPLEND value) {
      setElement (_MSSUPLEND, value);
   }
   public boolean isMsSUPLEND () {
      return (choiceID == _MSSUPLEND);
   }

   /**
    * Accessor/mutator methods for msSUPLAUTHREQ
    */
   public SUPLAUTHREQ getMsSUPLAUTHREQ () {
      return (choiceID == _MSSUPLAUTHREQ) ? (SUPLAUTHREQ)element : null;
   }
   public void setMsSUPLAUTHREQ (SUPLAUTHREQ value) {
      setElement (_MSSUPLAUTHREQ, value);
   }
   public boolean isMsSUPLAUTHREQ () {
      return (choiceID == _MSSUPLAUTHREQ);
   }

   /**
    * Accessor/mutator methods for msSUPLAUTHRESP
    */
   public SUPLAUTHRESP getMsSUPLAUTHRESP () {
      return (choiceID == _MSSUPLAUTHRESP) ? (SUPLAUTHRESP)element : null;
   }
   public void setMsSUPLAUTHRESP (SUPLAUTHRESP value) {
      setElement (_MSSUPLAUTHRESP, value);
   }
   public boolean isMsSUPLAUTHRESP () {
      return (choiceID == _MSSUPLAUTHRESP);
   }

   /**
    * Accessor/mutator methods for msSUPLTRIGGEREDSTART
    */
   public Ver2_SUPLTRIGGEREDSTART getMsSUPLTRIGGEREDSTART () {
      return (choiceID == _MSSUPLTRIGGEREDSTART) ? (Ver2_SUPLTRIGGEREDSTART)element : null;
   }
   public void setMsSUPLTRIGGEREDSTART (Ver2_SUPLTRIGGEREDSTART value) {
      setElement (_MSSUPLTRIGGEREDSTART, value);
   }
   public boolean isMsSUPLTRIGGEREDSTART () {
      return (choiceID == _MSSUPLTRIGGEREDSTART);
   }

   /**
    * Accessor/mutator methods for msSUPLTRIGGEREDRESPONSE
    */
   public Ver2_SUPLTRIGGEREDRESPONSE getMsSUPLTRIGGEREDRESPONSE () {
      return (choiceID == _MSSUPLTRIGGEREDRESPONSE) ? (Ver2_SUPLTRIGGEREDRESPONSE)element : null;
   }
   public void setMsSUPLTRIGGEREDRESPONSE (Ver2_SUPLTRIGGEREDRESPONSE value) {
      setElement (_MSSUPLTRIGGEREDRESPONSE, value);
   }
   public boolean isMsSUPLTRIGGEREDRESPONSE () {
      return (choiceID == _MSSUPLTRIGGEREDRESPONSE);
   }

   /**
    * Accessor/mutator methods for msSUPLTRIGGEREDSTOP
    */
   public Ver2_SUPLTRIGGEREDSTOP getMsSUPLTRIGGEREDSTOP () {
      return (choiceID == _MSSUPLTRIGGEREDSTOP) ? (Ver2_SUPLTRIGGEREDSTOP)element : null;
   }
   public void setMsSUPLTRIGGEREDSTOP (Ver2_SUPLTRIGGEREDSTOP value) {
      setElement (_MSSUPLTRIGGEREDSTOP, value);
   }
   public boolean isMsSUPLTRIGGEREDSTOP () {
      return (choiceID == _MSSUPLTRIGGEREDSTOP);
   }

   /**
    * Accessor/mutator methods for msSUPLNOTIFY
    */
   public Ver2_SUPLNOTIFY getMsSUPLNOTIFY () {
      return (choiceID == _MSSUPLNOTIFY) ? (Ver2_SUPLNOTIFY)element : null;
   }
   public void setMsSUPLNOTIFY (Ver2_SUPLNOTIFY value) {
      setElement (_MSSUPLNOTIFY, value);
   }
   public boolean isMsSUPLNOTIFY () {
      return (choiceID == _MSSUPLNOTIFY);
   }

   /**
    * Accessor/mutator methods for msSUPLNOTIFYRESPONSE
    */
   public Ver2_SUPLNOTIFYRESPONSE getMsSUPLNOTIFYRESPONSE () {
      return (choiceID == _MSSUPLNOTIFYRESPONSE) ? (Ver2_SUPLNOTIFYRESPONSE)element : null;
   }
   public void setMsSUPLNOTIFYRESPONSE (Ver2_SUPLNOTIFYRESPONSE value) {
      setElement (_MSSUPLNOTIFYRESPONSE, value);
   }
   public boolean isMsSUPLNOTIFYRESPONSE () {
      return (choiceID == _MSSUPLNOTIFYRESPONSE);
   }

   /**
    * Accessor/mutator methods for msSUPLSETINIT
    */
   public Ver2_SUPLSETINIT getMsSUPLSETINIT () {
      return (choiceID == _MSSUPLSETINIT) ? (Ver2_SUPLSETINIT)element : null;
   }
   public void setMsSUPLSETINIT (Ver2_SUPLSETINIT value) {
      setElement (_MSSUPLSETINIT, value);
   }
   public boolean isMsSUPLSETINIT () {
      return (choiceID == _MSSUPLSETINIT);
   }

   /**
    * Accessor/mutator methods for msSUPLREPORT
    */
   public Ver2_SUPLREPORT getMsSUPLREPORT () {
      return (choiceID == _MSSUPLREPORT) ? (Ver2_SUPLREPORT)element : null;
   }
   public void setMsSUPLREPORT (Ver2_SUPLREPORT value) {
      setElement (_MSSUPLREPORT, value);
   }
   public boolean isMsSUPLREPORT () {
      return (choiceID == _MSSUPLREPORT);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (8, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // msSUPLINIT
            case 0: { 
               SUPLINIT msSUPLINIT;
               element = msSUPLINIT = new SUPLINIT();
               msSUPLINIT.decode (buffer);
               break;
            }

            // msSUPLSTART
            case 1: { 
               SUPLSTART msSUPLSTART;
               element = msSUPLSTART = new SUPLSTART();
               msSUPLSTART.decode (buffer);
               break;
            }

            // msSUPLRESPONSE
            case 2: { 
               SUPLRESPONSE msSUPLRESPONSE;
               element = msSUPLRESPONSE = new SUPLRESPONSE();
               msSUPLRESPONSE.decode (buffer);
               break;
            }

            // msSUPLPOSINIT
            case 3: { 
               SUPLPOSINIT msSUPLPOSINIT;
               element = msSUPLPOSINIT = new SUPLPOSINIT();
               msSUPLPOSINIT.decode (buffer);
               break;
            }

            // msSUPLPOS
            case 4: { 
               SUPLPOS msSUPLPOS;
               element = msSUPLPOS = new SUPLPOS();
               msSUPLPOS.decode (buffer);
               break;
            }

            // msSUPLEND
            case 5: { 
               SUPLEND msSUPLEND;
               element = msSUPLEND = new SUPLEND();
               msSUPLEND.decode (buffer);
               break;
            }

            // msSUPLAUTHREQ
            case 6: { 
               SUPLAUTHREQ msSUPLAUTHREQ;
               element = msSUPLAUTHREQ = new SUPLAUTHREQ();
               msSUPLAUTHREQ.decode (buffer);
               break;
            }

            // msSUPLAUTHRESP
            case 7: { 
               SUPLAUTHRESP msSUPLAUTHRESP;
               element = msSUPLAUTHRESP = new SUPLAUTHRESP();
               msSUPLAUTHRESP.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 9;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // msSUPLTRIGGEREDSTART
            case 0: { 
               Ver2_SUPLTRIGGEREDSTART msSUPLTRIGGEREDSTART;
               element = msSUPLTRIGGEREDSTART = new Ver2_SUPLTRIGGEREDSTART();
               msSUPLTRIGGEREDSTART.decode (buffer);
               break;
            }

            // msSUPLTRIGGEREDRESPONSE
            case 1: { 
               Ver2_SUPLTRIGGEREDRESPONSE msSUPLTRIGGEREDRESPONSE;
               element = msSUPLTRIGGEREDRESPONSE = new Ver2_SUPLTRIGGEREDRESPONSE();
               msSUPLTRIGGEREDRESPONSE.decode (buffer);
               break;
            }

            // msSUPLTRIGGEREDSTOP
            case 2: { 
               Ver2_SUPLTRIGGEREDSTOP msSUPLTRIGGEREDSTOP;
               element = msSUPLTRIGGEREDSTOP = new Ver2_SUPLTRIGGEREDSTOP();
               msSUPLTRIGGEREDSTOP.decode (buffer);
               break;
            }

            // msSUPLNOTIFY
            case 3: { 
               Ver2_SUPLNOTIFY msSUPLNOTIFY;
               element = msSUPLNOTIFY = new Ver2_SUPLNOTIFY();
               msSUPLNOTIFY.decode (buffer);
               break;
            }

            // msSUPLNOTIFYRESPONSE
            case 4: { 
               Ver2_SUPLNOTIFYRESPONSE msSUPLNOTIFYRESPONSE;
               element = msSUPLNOTIFYRESPONSE = new Ver2_SUPLNOTIFYRESPONSE();
               msSUPLNOTIFYRESPONSE.decode (buffer);
               break;
            }

            // msSUPLSETINIT
            case 5: { 
               Ver2_SUPLSETINIT msSUPLSETINIT;
               element = msSUPLSETINIT = new Ver2_SUPLSETINIT();
               msSUPLSETINIT.decode (buffer);
               break;
            }

            // msSUPLREPORT
            case 6: { 
               Ver2_SUPLREPORT msSUPLREPORT;
               element = msSUPLREPORT = new Ver2_SUPLREPORT();
               msSUPLREPORT.decode (buffer);
               break;
            }

            // extElem1
            case 7: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 8);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 8, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // msSUPLINIT
            case _MSSUPLINIT:
               SUPLINIT msSUPLINIT = (SUPLINIT) element;
               msSUPLINIT.encode (buffer);
               break;

            // msSUPLSTART
            case _MSSUPLSTART:
               SUPLSTART msSUPLSTART = (SUPLSTART) element;
               msSUPLSTART.encode (buffer);
               break;

            // msSUPLRESPONSE
            case _MSSUPLRESPONSE:
               SUPLRESPONSE msSUPLRESPONSE = (SUPLRESPONSE) element;
               msSUPLRESPONSE.encode (buffer);
               break;

            // msSUPLPOSINIT
            case _MSSUPLPOSINIT:
               SUPLPOSINIT msSUPLPOSINIT = (SUPLPOSINIT) element;
               msSUPLPOSINIT.encode (buffer);
               break;

            // msSUPLPOS
            case _MSSUPLPOS:
               SUPLPOS msSUPLPOS = (SUPLPOS) element;
               msSUPLPOS.encode (buffer);
               break;

            // msSUPLEND
            case _MSSUPLEND:
               SUPLEND msSUPLEND = (SUPLEND) element;
               msSUPLEND.encode (buffer);
               break;

            // msSUPLAUTHREQ
            case _MSSUPLAUTHREQ:
               SUPLAUTHREQ msSUPLAUTHREQ = (SUPLAUTHREQ) element;
               msSUPLAUTHREQ.encode (buffer);
               break;

            // msSUPLAUTHRESP
            case _MSSUPLAUTHRESP:
               SUPLAUTHRESP msSUPLAUTHRESP = (SUPLAUTHRESP) element;
               msSUPLAUTHRESP.encode (buffer);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 9);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1PerEncodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());
         Asn1OpenType openType;

         switch (choiceID) {
            // msSUPLTRIGGEREDSTART
            case _MSSUPLTRIGGEREDSTART:
               Ver2_SUPLTRIGGEREDSTART msSUPLTRIGGEREDSTART = (Ver2_SUPLTRIGGEREDSTART) element;
               msSUPLTRIGGEREDSTART.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            // msSUPLTRIGGEREDRESPONSE
            case _MSSUPLTRIGGEREDRESPONSE:
               Ver2_SUPLTRIGGEREDRESPONSE msSUPLTRIGGEREDRESPONSE = (Ver2_SUPLTRIGGEREDRESPONSE) element;
               msSUPLTRIGGEREDRESPONSE.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            // msSUPLTRIGGEREDSTOP
            case _MSSUPLTRIGGEREDSTOP:
               Ver2_SUPLTRIGGEREDSTOP msSUPLTRIGGEREDSTOP = (Ver2_SUPLTRIGGEREDSTOP) element;
               msSUPLTRIGGEREDSTOP.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            // msSUPLNOTIFY
            case _MSSUPLNOTIFY:
               Ver2_SUPLNOTIFY msSUPLNOTIFY = (Ver2_SUPLNOTIFY) element;
               msSUPLNOTIFY.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            // msSUPLNOTIFYRESPONSE
            case _MSSUPLNOTIFYRESPONSE:
               Ver2_SUPLNOTIFYRESPONSE msSUPLNOTIFYRESPONSE = (Ver2_SUPLNOTIFYRESPONSE) element;
               msSUPLNOTIFYRESPONSE.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            // msSUPLSETINIT
            case _MSSUPLSETINIT:
               Ver2_SUPLSETINIT msSUPLSETINIT = (Ver2_SUPLSETINIT) element;
               msSUPLSETINIT.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            // msSUPLREPORT
            case _MSSUPLREPORT:
               Ver2_SUPLREPORT msSUPLREPORT = (Ver2_SUPLREPORT) element;
               msSUPLREPORT.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            default:
               openType = (Asn1OpenType)getElement();
         }

         buffer = savedBuffer;
         if (openType != null) {
            buffer.byteAlign();
            openType.encode (buffer);
         }
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
