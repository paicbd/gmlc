/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Components;

import com.objsys.asn1j.runtime.*;

public class SessionID extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SessionID";
   }

   protected SetSessionID setSessionID;  // optional
   protected SlpSessionID slpSessionID;  // optional

   public SessionID () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SessionID (
      SetSessionID setSessionID_,
      SlpSessionID slpSessionID_
   ) {
      super();
      setSetSessionID (setSessionID_);
      setSlpSessionID (slpSessionID_);
   }

   public void init () {
      setSessionID = null;
      slpSessionID = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof SessionID) ) return false;

      SessionID rhs = (SessionID) obj;

      if (setSessionID == null) {
         if (rhs.setSessionID != null) return false;
      }
      else {
         if (!setSessionID.equals(rhs.setSessionID)) {
            return false;
         }
      }

      if (slpSessionID == null) {
         if (rhs.slpSessionID != null) return false;
      }
      else {
         if (!slpSessionID.equals(rhs.slpSessionID)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (setSessionID != null) __code = 31*__code + setSessionID.hashCode();
      if (slpSessionID != null) __code = 31*__code + slpSessionID.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for SetSessionID
    */
   public SetSessionID getSetSessionID () {
      return setSessionID;
   }

   public void setSetSessionID (SetSessionID value) {
      this.setSessionID = value;
   }

   public boolean hasSetSessionID () {
      return (setSessionID != null);
   }

   /**
    * Accessor/mutator methods for SlpSessionID
    */
   public SlpSessionID getSlpSessionID () {
      return slpSessionID;
   }

   public void setSlpSessionID (SlpSessionID value) {
      this.slpSessionID = value;
   }

   public boolean hasSlpSessionID () {
      return (slpSessionID != null);
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return setSessionID;
         case 1: return slpSessionID;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "setSessionID";
         case 1: return "slpSessionID";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean setSessionIDPresent = buffer.decodeBit ("setSessionIDPresent");
      boolean slpSessionIDPresent = buffer.decodeBit ("slpSessionIDPresent");

      // decode setSessionID

      if (setSessionIDPresent) {
         buffer.getContext().eventDispatcher.startElement("setSessionID", -1);

         setSessionID = new SetSessionID();
         setSessionID.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("setSessionID", -1);
      }
      else {
         setSessionID = null;
      }

      // decode slpSessionID

      if (slpSessionIDPresent) {
         buffer.getContext().eventDispatcher.startElement("slpSessionID", -1);

         slpSessionID = new SlpSessionID();
         slpSessionID.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("slpSessionID", -1);
      }
      else {
         slpSessionID = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((setSessionID != null), null);
      buffer.encodeBit ((slpSessionID != null), null);

      // encode setSessionID

      if (setSessionID != null) {
         buffer.getContext().eventDispatcher.startElement("setSessionID", -1);

         setSessionID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("setSessionID", -1);
      }

      // encode slpSessionID

      if (slpSessionID != null) {
         buffer.getContext().eventDispatcher.startElement("slpSessionID", -1);

         slpSessionID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("slpSessionID", -1);
      }

   }

}
