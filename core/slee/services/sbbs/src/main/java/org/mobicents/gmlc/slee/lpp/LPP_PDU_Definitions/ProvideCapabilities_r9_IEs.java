/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class ProvideCapabilities_r9_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ProvideCapabilities-r9-IEs";
   }

   protected CommonIEsProvideCapabilities commonIEsProvideCapabilities;  // optional
   protected A_GNSS_ProvideCapabilities a_gnss_ProvideCapabilities;  // optional
   protected OTDOA_ProvideCapabilities otdoa_ProvideCapabilities;  // optional
   protected ECID_ProvideCapabilities ecid_ProvideCapabilities;  // optional
   protected EPDU_Sequence epdu_ProvideCapabilities;  // optional
   protected Sensor_ProvideCapabilities_r13 sensor_ProvideCapabilities_r13;  // optional
   protected TBS_ProvideCapabilities_r13 tbs_ProvideCapabilities_r13;  // optional
   protected WLAN_ProvideCapabilities_r13 wlan_ProvideCapabilities_r13;  // optional
   protected BT_ProvideCapabilities_r13 bt_ProvideCapabilities_r13;  // optional
   protected NR_ECID_ProvideCapabilities_r16 nr_ECID_ProvideCapabilities_r16;  // optional
   protected NR_Multi_RTT_ProvideCapabilities_r16 nr_Multi_RTT_ProvideCapabilities_r16;  // optional
   protected NR_DL_AoD_ProvideCapabilities_r16 nr_DL_AoD_ProvideCapabilities_r16;  // optional
   protected NR_DL_TDOA_ProvideCapabilities_r16 nr_DL_TDOA_ProvideCapabilities_r16;  // optional
   protected NR_UL_ProvideCapabilities_r16 nr_UL_ProvideCapabilities_r16;  // optional
   protected Asn1OpenExt extElem1;

   public ProvideCapabilities_r9_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ProvideCapabilities_r9_IEs (
      CommonIEsProvideCapabilities commonIEsProvideCapabilities_,
      A_GNSS_ProvideCapabilities a_gnss_ProvideCapabilities_,
      OTDOA_ProvideCapabilities otdoa_ProvideCapabilities_,
      ECID_ProvideCapabilities ecid_ProvideCapabilities_,
      EPDU_Sequence epdu_ProvideCapabilities_,
      Sensor_ProvideCapabilities_r13 sensor_ProvideCapabilities_r13_,
      TBS_ProvideCapabilities_r13 tbs_ProvideCapabilities_r13_,
      WLAN_ProvideCapabilities_r13 wlan_ProvideCapabilities_r13_,
      BT_ProvideCapabilities_r13 bt_ProvideCapabilities_r13_,
      NR_ECID_ProvideCapabilities_r16 nr_ECID_ProvideCapabilities_r16_,
      NR_Multi_RTT_ProvideCapabilities_r16 nr_Multi_RTT_ProvideCapabilities_r16_,
      NR_DL_AoD_ProvideCapabilities_r16 nr_DL_AoD_ProvideCapabilities_r16_,
      NR_DL_TDOA_ProvideCapabilities_r16 nr_DL_TDOA_ProvideCapabilities_r16_,
      NR_UL_ProvideCapabilities_r16 nr_UL_ProvideCapabilities_r16_
   ) throws Asn1Exception {
      super();
      setCommonIEsProvideCapabilities (commonIEsProvideCapabilities_);
      setA_gnss_ProvideCapabilities (a_gnss_ProvideCapabilities_);
      setOtdoa_ProvideCapabilities (otdoa_ProvideCapabilities_);
      setEcid_ProvideCapabilities (ecid_ProvideCapabilities_);
      setEpdu_ProvideCapabilities (epdu_ProvideCapabilities_);
      setSensor_ProvideCapabilities_r13 (sensor_ProvideCapabilities_r13_);
      setTbs_ProvideCapabilities_r13 (tbs_ProvideCapabilities_r13_);
      setWlan_ProvideCapabilities_r13 (wlan_ProvideCapabilities_r13_);
      setBt_ProvideCapabilities_r13 (bt_ProvideCapabilities_r13_);
      setNr_ECID_ProvideCapabilities_r16 (nr_ECID_ProvideCapabilities_r16_);
      setNr_Multi_RTT_ProvideCapabilities_r16 (nr_Multi_RTT_ProvideCapabilities_r16_);
      setNr_DL_AoD_ProvideCapabilities_r16 (nr_DL_AoD_ProvideCapabilities_r16_);
      setNr_DL_TDOA_ProvideCapabilities_r16 (nr_DL_TDOA_ProvideCapabilities_r16_);
      setNr_UL_ProvideCapabilities_r16 (nr_UL_ProvideCapabilities_r16_);
   }

   public void init () {
      commonIEsProvideCapabilities = null;
      a_gnss_ProvideCapabilities = null;
      otdoa_ProvideCapabilities = null;
      ecid_ProvideCapabilities = null;
      epdu_ProvideCapabilities = null;
      sensor_ProvideCapabilities_r13 = null;
      tbs_ProvideCapabilities_r13 = null;
      wlan_ProvideCapabilities_r13 = null;
      bt_ProvideCapabilities_r13 = null;
      nr_ECID_ProvideCapabilities_r16 = null;
      nr_Multi_RTT_ProvideCapabilities_r16 = null;
      nr_DL_AoD_ProvideCapabilities_r16 = null;
      nr_DL_TDOA_ProvideCapabilities_r16 = null;
      nr_UL_ProvideCapabilities_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof ProvideCapabilities_r9_IEs) ) return false;

      ProvideCapabilities_r9_IEs rhs = (ProvideCapabilities_r9_IEs) obj;

      if (commonIEsProvideCapabilities == null) {
         if (rhs.commonIEsProvideCapabilities != null) return false;
      }
      else {
         if (!commonIEsProvideCapabilities.equals(rhs.commonIEsProvideCapabilities)) {
            return false;
         }
      }

      if (a_gnss_ProvideCapabilities == null) {
         if (rhs.a_gnss_ProvideCapabilities != null) return false;
      }
      else {
         if (!a_gnss_ProvideCapabilities.equals(rhs.a_gnss_ProvideCapabilities)) {
            return false;
         }
      }

      if (otdoa_ProvideCapabilities == null) {
         if (rhs.otdoa_ProvideCapabilities != null) return false;
      }
      else {
         if (!otdoa_ProvideCapabilities.equals(rhs.otdoa_ProvideCapabilities)) {
            return false;
         }
      }

      if (ecid_ProvideCapabilities == null) {
         if (rhs.ecid_ProvideCapabilities != null) return false;
      }
      else {
         if (!ecid_ProvideCapabilities.equals(rhs.ecid_ProvideCapabilities)) {
            return false;
         }
      }

      if (epdu_ProvideCapabilities == null) {
         if (rhs.epdu_ProvideCapabilities != null) return false;
      }
      else {
         if (!epdu_ProvideCapabilities.equals(rhs.epdu_ProvideCapabilities)) {
            return false;
         }
      }

      if (sensor_ProvideCapabilities_r13 == null) {
         if (rhs.sensor_ProvideCapabilities_r13 != null) return false;
      }
      else {
         if (!sensor_ProvideCapabilities_r13.equals(rhs.sensor_ProvideCapabilities_r13)) {
            return false;
         }
      }

      if (tbs_ProvideCapabilities_r13 == null) {
         if (rhs.tbs_ProvideCapabilities_r13 != null) return false;
      }
      else {
         if (!tbs_ProvideCapabilities_r13.equals(rhs.tbs_ProvideCapabilities_r13)) {
            return false;
         }
      }

      if (wlan_ProvideCapabilities_r13 == null) {
         if (rhs.wlan_ProvideCapabilities_r13 != null) return false;
      }
      else {
         if (!wlan_ProvideCapabilities_r13.equals(rhs.wlan_ProvideCapabilities_r13)) {
            return false;
         }
      }

      if (bt_ProvideCapabilities_r13 == null) {
         if (rhs.bt_ProvideCapabilities_r13 != null) return false;
      }
      else {
         if (!bt_ProvideCapabilities_r13.equals(rhs.bt_ProvideCapabilities_r13)) {
            return false;
         }
      }

      if (nr_ECID_ProvideCapabilities_r16 == null) {
         if (rhs.nr_ECID_ProvideCapabilities_r16 != null) return false;
      }
      else {
         if (!nr_ECID_ProvideCapabilities_r16.equals(rhs.nr_ECID_ProvideCapabilities_r16)) {
            return false;
         }
      }

      if (nr_Multi_RTT_ProvideCapabilities_r16 == null) {
         if (rhs.nr_Multi_RTT_ProvideCapabilities_r16 != null) return false;
      }
      else {
         if (!nr_Multi_RTT_ProvideCapabilities_r16.equals(rhs.nr_Multi_RTT_ProvideCapabilities_r16)) {
            return false;
         }
      }

      if (nr_DL_AoD_ProvideCapabilities_r16 == null) {
         if (rhs.nr_DL_AoD_ProvideCapabilities_r16 != null) return false;
      }
      else {
         if (!nr_DL_AoD_ProvideCapabilities_r16.equals(rhs.nr_DL_AoD_ProvideCapabilities_r16)) {
            return false;
         }
      }

      if (nr_DL_TDOA_ProvideCapabilities_r16 == null) {
         if (rhs.nr_DL_TDOA_ProvideCapabilities_r16 != null) return false;
      }
      else {
         if (!nr_DL_TDOA_ProvideCapabilities_r16.equals(rhs.nr_DL_TDOA_ProvideCapabilities_r16)) {
            return false;
         }
      }

      if (nr_UL_ProvideCapabilities_r16 == null) {
         if (rhs.nr_UL_ProvideCapabilities_r16 != null) return false;
      }
      else {
         if (!nr_UL_ProvideCapabilities_r16.equals(rhs.nr_UL_ProvideCapabilities_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (commonIEsProvideCapabilities != null) __code = 31*__code + commonIEsProvideCapabilities.hashCode();
      if (a_gnss_ProvideCapabilities != null) __code = 31*__code + a_gnss_ProvideCapabilities.hashCode();
      if (otdoa_ProvideCapabilities != null) __code = 31*__code + otdoa_ProvideCapabilities.hashCode();
      if (ecid_ProvideCapabilities != null) __code = 31*__code + ecid_ProvideCapabilities.hashCode();
      if (epdu_ProvideCapabilities != null) __code = 31*__code + epdu_ProvideCapabilities.hashCode();
      if (sensor_ProvideCapabilities_r13 != null) __code = 31*__code + sensor_ProvideCapabilities_r13.hashCode();
      if (tbs_ProvideCapabilities_r13 != null) __code = 31*__code + tbs_ProvideCapabilities_r13.hashCode();
      if (wlan_ProvideCapabilities_r13 != null) __code = 31*__code + wlan_ProvideCapabilities_r13.hashCode();
      if (bt_ProvideCapabilities_r13 != null) __code = 31*__code + bt_ProvideCapabilities_r13.hashCode();
      if (nr_ECID_ProvideCapabilities_r16 != null) __code = 31*__code + nr_ECID_ProvideCapabilities_r16.hashCode();
      if (nr_Multi_RTT_ProvideCapabilities_r16 != null) __code = 31*__code + nr_Multi_RTT_ProvideCapabilities_r16.hashCode();
      if (nr_DL_AoD_ProvideCapabilities_r16 != null) __code = 31*__code + nr_DL_AoD_ProvideCapabilities_r16.hashCode();
      if (nr_DL_TDOA_ProvideCapabilities_r16 != null) __code = 31*__code + nr_DL_TDOA_ProvideCapabilities_r16.hashCode();
      if (nr_UL_ProvideCapabilities_r16 != null) __code = 31*__code + nr_UL_ProvideCapabilities_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for CommonIEsProvideCapabilities
    */
   public CommonIEsProvideCapabilities getCommonIEsProvideCapabilities () {
      return commonIEsProvideCapabilities;
   }

   public void setCommonIEsProvideCapabilities (CommonIEsProvideCapabilities value) {
      this.commonIEsProvideCapabilities = value;
   }

   public boolean hasCommonIEsProvideCapabilities () {
      return (commonIEsProvideCapabilities != null);
   }

   /**
    * Accessor/mutator methods for A_gnss_ProvideCapabilities
    */
   public A_GNSS_ProvideCapabilities getA_gnss_ProvideCapabilities () {
      return a_gnss_ProvideCapabilities;
   }

   public void setA_gnss_ProvideCapabilities (A_GNSS_ProvideCapabilities value) {
      this.a_gnss_ProvideCapabilities = value;
   }

   public boolean hasA_gnss_ProvideCapabilities () {
      return (a_gnss_ProvideCapabilities != null);
   }

   /**
    * Accessor/mutator methods for Otdoa_ProvideCapabilities
    */
   public OTDOA_ProvideCapabilities getOtdoa_ProvideCapabilities () {
      return otdoa_ProvideCapabilities;
   }

   public void setOtdoa_ProvideCapabilities (OTDOA_ProvideCapabilities value) {
      this.otdoa_ProvideCapabilities = value;
   }

   public boolean hasOtdoa_ProvideCapabilities () {
      return (otdoa_ProvideCapabilities != null);
   }

   /**
    * Accessor/mutator methods for Ecid_ProvideCapabilities
    */
   public ECID_ProvideCapabilities getEcid_ProvideCapabilities () {
      return ecid_ProvideCapabilities;
   }

   public void setEcid_ProvideCapabilities (ECID_ProvideCapabilities value) {
      this.ecid_ProvideCapabilities = value;
   }

   public boolean hasEcid_ProvideCapabilities () {
      return (ecid_ProvideCapabilities != null);
   }

   /**
    * Accessor/mutator methods for Epdu_ProvideCapabilities
    */
   public EPDU_Sequence getEpdu_ProvideCapabilities () {
      return epdu_ProvideCapabilities;
   }

   public void setEpdu_ProvideCapabilities (EPDU_Sequence value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 16))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.epdu_ProvideCapabilities = value;
   }

   public boolean hasEpdu_ProvideCapabilities () {
      return (epdu_ProvideCapabilities != null);
   }

   /**
    * Accessor/mutator methods for Sensor_ProvideCapabilities_r13
    */
   public Sensor_ProvideCapabilities_r13 getSensor_ProvideCapabilities_r13 () {
      return sensor_ProvideCapabilities_r13;
   }

   public void setSensor_ProvideCapabilities_r13 (Sensor_ProvideCapabilities_r13 value) {
      this.sensor_ProvideCapabilities_r13 = value;
   }

   public boolean hasSensor_ProvideCapabilities_r13 () {
      return (sensor_ProvideCapabilities_r13 != null);
   }

   /**
    * Accessor/mutator methods for Tbs_ProvideCapabilities_r13
    */
   public TBS_ProvideCapabilities_r13 getTbs_ProvideCapabilities_r13 () {
      return tbs_ProvideCapabilities_r13;
   }

   public void setTbs_ProvideCapabilities_r13 (TBS_ProvideCapabilities_r13 value) {
      this.tbs_ProvideCapabilities_r13 = value;
   }

   public boolean hasTbs_ProvideCapabilities_r13 () {
      return (tbs_ProvideCapabilities_r13 != null);
   }

   /**
    * Accessor/mutator methods for Wlan_ProvideCapabilities_r13
    */
   public WLAN_ProvideCapabilities_r13 getWlan_ProvideCapabilities_r13 () {
      return wlan_ProvideCapabilities_r13;
   }

   public void setWlan_ProvideCapabilities_r13 (WLAN_ProvideCapabilities_r13 value) {
      this.wlan_ProvideCapabilities_r13 = value;
   }

   public boolean hasWlan_ProvideCapabilities_r13 () {
      return (wlan_ProvideCapabilities_r13 != null);
   }

   /**
    * Accessor/mutator methods for Bt_ProvideCapabilities_r13
    */
   public BT_ProvideCapabilities_r13 getBt_ProvideCapabilities_r13 () {
      return bt_ProvideCapabilities_r13;
   }

   public void setBt_ProvideCapabilities_r13 (BT_ProvideCapabilities_r13 value) {
      this.bt_ProvideCapabilities_r13 = value;
   }

   public boolean hasBt_ProvideCapabilities_r13 () {
      return (bt_ProvideCapabilities_r13 != null);
   }

   /**
    * Accessor/mutator methods for Nr_ECID_ProvideCapabilities_r16
    */
   public NR_ECID_ProvideCapabilities_r16 getNr_ECID_ProvideCapabilities_r16 () {
      return nr_ECID_ProvideCapabilities_r16;
   }

   public void setNr_ECID_ProvideCapabilities_r16 (NR_ECID_ProvideCapabilities_r16 value) {
      this.nr_ECID_ProvideCapabilities_r16 = value;
   }

   public boolean hasNr_ECID_ProvideCapabilities_r16 () {
      return (nr_ECID_ProvideCapabilities_r16 != null);
   }

   /**
    * Accessor/mutator methods for Nr_Multi_RTT_ProvideCapabilities_r16
    */
   public NR_Multi_RTT_ProvideCapabilities_r16 getNr_Multi_RTT_ProvideCapabilities_r16 () {
      return nr_Multi_RTT_ProvideCapabilities_r16;
   }

   public void setNr_Multi_RTT_ProvideCapabilities_r16 (NR_Multi_RTT_ProvideCapabilities_r16 value) {
      this.nr_Multi_RTT_ProvideCapabilities_r16 = value;
   }

   public boolean hasNr_Multi_RTT_ProvideCapabilities_r16 () {
      return (nr_Multi_RTT_ProvideCapabilities_r16 != null);
   }

   /**
    * Accessor/mutator methods for Nr_DL_AoD_ProvideCapabilities_r16
    */
   public NR_DL_AoD_ProvideCapabilities_r16 getNr_DL_AoD_ProvideCapabilities_r16 () {
      return nr_DL_AoD_ProvideCapabilities_r16;
   }

   public void setNr_DL_AoD_ProvideCapabilities_r16 (NR_DL_AoD_ProvideCapabilities_r16 value) {
      this.nr_DL_AoD_ProvideCapabilities_r16 = value;
   }

   public boolean hasNr_DL_AoD_ProvideCapabilities_r16 () {
      return (nr_DL_AoD_ProvideCapabilities_r16 != null);
   }

   /**
    * Accessor/mutator methods for Nr_DL_TDOA_ProvideCapabilities_r16
    */
   public NR_DL_TDOA_ProvideCapabilities_r16 getNr_DL_TDOA_ProvideCapabilities_r16 () {
      return nr_DL_TDOA_ProvideCapabilities_r16;
   }

   public void setNr_DL_TDOA_ProvideCapabilities_r16 (NR_DL_TDOA_ProvideCapabilities_r16 value) {
      this.nr_DL_TDOA_ProvideCapabilities_r16 = value;
   }

   public boolean hasNr_DL_TDOA_ProvideCapabilities_r16 () {
      return (nr_DL_TDOA_ProvideCapabilities_r16 != null);
   }

   /**
    * Accessor/mutator methods for Nr_UL_ProvideCapabilities_r16
    */
   public NR_UL_ProvideCapabilities_r16 getNr_UL_ProvideCapabilities_r16 () {
      return nr_UL_ProvideCapabilities_r16;
   }

   public void setNr_UL_ProvideCapabilities_r16 (NR_UL_ProvideCapabilities_r16 value) {
      this.nr_UL_ProvideCapabilities_r16 = value;
   }

   public boolean hasNr_UL_ProvideCapabilities_r16 () {
      return (nr_UL_ProvideCapabilities_r16 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 15; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return commonIEsProvideCapabilities;
         case 1: return a_gnss_ProvideCapabilities;
         case 2: return otdoa_ProvideCapabilities;
         case 3: return ecid_ProvideCapabilities;
         case 4: return epdu_ProvideCapabilities;
         case 5: return sensor_ProvideCapabilities_r13;
         case 6: return tbs_ProvideCapabilities_r13;
         case 7: return wlan_ProvideCapabilities_r13;
         case 8: return bt_ProvideCapabilities_r13;
         case 9: return nr_ECID_ProvideCapabilities_r16;
         case 10: return nr_Multi_RTT_ProvideCapabilities_r16;
         case 11: return nr_DL_AoD_ProvideCapabilities_r16;
         case 12: return nr_DL_TDOA_ProvideCapabilities_r16;
         case 13: return nr_UL_ProvideCapabilities_r16;
         case 14: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "commonIEsProvideCapabilities";
         case 1: return "a-gnss-ProvideCapabilities";
         case 2: return "otdoa-ProvideCapabilities";
         case 3: return "ecid-ProvideCapabilities";
         case 4: return "epdu-ProvideCapabilities";
         case 5: return "sensor-ProvideCapabilities-r13";
         case 6: return "tbs-ProvideCapabilities-r13";
         case 7: return "wlan-ProvideCapabilities-r13";
         case 8: return "bt-ProvideCapabilities-r13";
         case 9: return "nr-ECID-ProvideCapabilities-r16";
         case 10: return "nr-Multi-RTT-ProvideCapabilities-r16";
         case 11: return "nr-DL-AoD-ProvideCapabilities-r16";
         case 12: return "nr-DL-TDOA-ProvideCapabilities-r16";
         case 13: return "nr-UL-ProvideCapabilities-r16";
         case 14: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean commonIEsProvideCapabilitiesPresent = buffer.decodeBit ("commonIEsProvideCapabilitiesPresent");
      boolean a_gnss_ProvideCapabilitiesPresent = buffer.decodeBit ("a_gnss_ProvideCapabilitiesPresent");
      boolean otdoa_ProvideCapabilitiesPresent = buffer.decodeBit ("otdoa_ProvideCapabilitiesPresent");
      boolean ecid_ProvideCapabilitiesPresent = buffer.decodeBit ("ecid_ProvideCapabilitiesPresent");
      boolean epdu_ProvideCapabilitiesPresent = buffer.decodeBit ("epdu_ProvideCapabilitiesPresent");

      // decode commonIEsProvideCapabilities

      if (commonIEsProvideCapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("commonIEsProvideCapabilities", -1);

         commonIEsProvideCapabilities = new CommonIEsProvideCapabilities();
         commonIEsProvideCapabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("commonIEsProvideCapabilities", -1);
      }
      else {
         commonIEsProvideCapabilities = null;
      }

      // decode a_gnss_ProvideCapabilities

      if (a_gnss_ProvideCapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("a_gnss_ProvideCapabilities", -1);

         a_gnss_ProvideCapabilities = new A_GNSS_ProvideCapabilities();
         a_gnss_ProvideCapabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("a_gnss_ProvideCapabilities", -1);
      }
      else {
         a_gnss_ProvideCapabilities = null;
      }

      // decode otdoa_ProvideCapabilities

      if (otdoa_ProvideCapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("otdoa_ProvideCapabilities", -1);

         otdoa_ProvideCapabilities = new OTDOA_ProvideCapabilities();
         otdoa_ProvideCapabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("otdoa_ProvideCapabilities", -1);
      }
      else {
         otdoa_ProvideCapabilities = null;
      }

      // decode ecid_ProvideCapabilities

      if (ecid_ProvideCapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("ecid_ProvideCapabilities", -1);

         ecid_ProvideCapabilities = new ECID_ProvideCapabilities();
         ecid_ProvideCapabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ecid_ProvideCapabilities", -1);
      }
      else {
         ecid_ProvideCapabilities = null;
      }

      // decode epdu_ProvideCapabilities

      if (epdu_ProvideCapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("epdu_ProvideCapabilities", -1);

         epdu_ProvideCapabilities = new EPDU_Sequence();
         epdu_ProvideCapabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("epdu_ProvideCapabilities", -1);
      }
      else {
         epdu_ProvideCapabilities = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("sensor_ProvideCapabilities_r13Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("tbs_ProvideCapabilities_r13Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("wlan_ProvideCapabilities_r13Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("bt_ProvideCapabilities_r13Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("nr_ECID_ProvideCapabilities_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("nr_Multi_RTT_ProvideCapabilities_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("nr_DL_AoD_ProvideCapabilities_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("nr_DL_TDOA_ProvideCapabilities_r16Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("nr_UL_ProvideCapabilities_r16Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode sensor_ProvideCapabilities_r13

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("sensor_ProvideCapabilities_r13", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            sensor_ProvideCapabilities_r13 = new Sensor_ProvideCapabilities_r13();
            sensor_ProvideCapabilities_r13.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("sensor_ProvideCapabilities_r13", -1);

         }
         else {
            sensor_ProvideCapabilities_r13 = null;
         }

         // decode tbs_ProvideCapabilities_r13

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("tbs_ProvideCapabilities_r13", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            tbs_ProvideCapabilities_r13 = new TBS_ProvideCapabilities_r13();
            tbs_ProvideCapabilities_r13.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("tbs_ProvideCapabilities_r13", -1);

         }
         else {
            tbs_ProvideCapabilities_r13 = null;
         }

         // decode wlan_ProvideCapabilities_r13

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("wlan_ProvideCapabilities_r13", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            wlan_ProvideCapabilities_r13 = new WLAN_ProvideCapabilities_r13();
            wlan_ProvideCapabilities_r13.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("wlan_ProvideCapabilities_r13", -1);

         }
         else {
            wlan_ProvideCapabilities_r13 = null;
         }

         // decode bt_ProvideCapabilities_r13

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("bt_ProvideCapabilities_r13", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            bt_ProvideCapabilities_r13 = new BT_ProvideCapabilities_r13();
            bt_ProvideCapabilities_r13.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("bt_ProvideCapabilities_r13", -1);

         }
         else {
            bt_ProvideCapabilities_r13 = null;
         }

         // decode nr_ECID_ProvideCapabilities_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("nr_ECID_ProvideCapabilities_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            nr_ECID_ProvideCapabilities_r16 = new NR_ECID_ProvideCapabilities_r16();
            nr_ECID_ProvideCapabilities_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("nr_ECID_ProvideCapabilities_r16", -1);

         }
         else {
            nr_ECID_ProvideCapabilities_r16 = null;
         }

         // decode nr_Multi_RTT_ProvideCapabilities_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("nr_Multi_RTT_ProvideCapabilities_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            nr_Multi_RTT_ProvideCapabilities_r16 = new NR_Multi_RTT_ProvideCapabilities_r16();
            nr_Multi_RTT_ProvideCapabilities_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("nr_Multi_RTT_ProvideCapabilities_r16", -1);

         }
         else {
            nr_Multi_RTT_ProvideCapabilities_r16 = null;
         }

         // decode nr_DL_AoD_ProvideCapabilities_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("nr_DL_AoD_ProvideCapabilities_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            nr_DL_AoD_ProvideCapabilities_r16 = new NR_DL_AoD_ProvideCapabilities_r16();
            nr_DL_AoD_ProvideCapabilities_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("nr_DL_AoD_ProvideCapabilities_r16", -1);

         }
         else {
            nr_DL_AoD_ProvideCapabilities_r16 = null;
         }

         // decode nr_DL_TDOA_ProvideCapabilities_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("nr_DL_TDOA_ProvideCapabilities_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            nr_DL_TDOA_ProvideCapabilities_r16 = new NR_DL_TDOA_ProvideCapabilities_r16();
            nr_DL_TDOA_ProvideCapabilities_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("nr_DL_TDOA_ProvideCapabilities_r16", -1);

         }
         else {
            nr_DL_TDOA_ProvideCapabilities_r16 = null;
         }

         // decode nr_UL_ProvideCapabilities_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("nr_UL_ProvideCapabilities_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            nr_UL_ProvideCapabilities_r16 = new NR_UL_ProvideCapabilities_r16();
            nr_UL_ProvideCapabilities_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("nr_UL_ProvideCapabilities_r16", -1);

         }
         else {
            nr_UL_ProvideCapabilities_r16 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((sensor_ProvideCapabilities_r13 != null) ||
      (tbs_ProvideCapabilities_r13 != null) ||
      (wlan_ProvideCapabilities_r13 != null) ||
      (bt_ProvideCapabilities_r13 != null) ||
      (nr_ECID_ProvideCapabilities_r16 != null) ||
      (nr_Multi_RTT_ProvideCapabilities_r16 != null) ||
      (nr_DL_AoD_ProvideCapabilities_r16 != null) ||
      (nr_DL_TDOA_ProvideCapabilities_r16 != null) ||
      (nr_UL_ProvideCapabilities_r16 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((commonIEsProvideCapabilities != null), null);
      buffer.encodeBit ((a_gnss_ProvideCapabilities != null), null);
      buffer.encodeBit ((otdoa_ProvideCapabilities != null), null);
      buffer.encodeBit ((ecid_ProvideCapabilities != null), null);
      buffer.encodeBit ((epdu_ProvideCapabilities != null), null);

      // encode commonIEsProvideCapabilities

      if (commonIEsProvideCapabilities != null) {
         buffer.getContext().eventDispatcher.startElement("commonIEsProvideCapabilities", -1);

         commonIEsProvideCapabilities.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("commonIEsProvideCapabilities", -1);
      }

      // encode a_gnss_ProvideCapabilities

      if (a_gnss_ProvideCapabilities != null) {
         buffer.getContext().eventDispatcher.startElement("a_gnss_ProvideCapabilities", -1);

         a_gnss_ProvideCapabilities.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("a_gnss_ProvideCapabilities", -1);
      }

      // encode otdoa_ProvideCapabilities

      if (otdoa_ProvideCapabilities != null) {
         buffer.getContext().eventDispatcher.startElement("otdoa_ProvideCapabilities", -1);

         otdoa_ProvideCapabilities.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("otdoa_ProvideCapabilities", -1);
      }

      // encode ecid_ProvideCapabilities

      if (ecid_ProvideCapabilities != null) {
         buffer.getContext().eventDispatcher.startElement("ecid_ProvideCapabilities", -1);

         ecid_ProvideCapabilities.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ecid_ProvideCapabilities", -1);
      }

      // encode epdu_ProvideCapabilities

      if (epdu_ProvideCapabilities != null) {
         buffer.getContext().eventDispatcher.startElement("epdu_ProvideCapabilities", -1);

         epdu_ProvideCapabilities.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("epdu_ProvideCapabilities", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 9;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((sensor_ProvideCapabilities_r13 != null), null);
         buffer.encodeBit ((tbs_ProvideCapabilities_r13 != null), null);
         buffer.encodeBit ((wlan_ProvideCapabilities_r13 != null), null);
         buffer.encodeBit ((bt_ProvideCapabilities_r13 != null), null);
         buffer.encodeBit ((nr_ECID_ProvideCapabilities_r16 != null), null);
         buffer.encodeBit ((nr_Multi_RTT_ProvideCapabilities_r16 != null), null);
         buffer.encodeBit ((nr_DL_AoD_ProvideCapabilities_r16 != null), null);
         buffer.encodeBit ((nr_DL_TDOA_ProvideCapabilities_r16 != null), null);
         buffer.encodeBit ((nr_UL_ProvideCapabilities_r16 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // sensor_ProvideCapabilities_r13

         if (sensor_ProvideCapabilities_r13 != null) {
            buffer.reset();
            sensor_ProvideCapabilities_r13.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("sensor_ProvideCapabilities_r13", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("sensor_ProvideCapabilities_r13", -1);
         }

         // tbs_ProvideCapabilities_r13

         if (tbs_ProvideCapabilities_r13 != null) {
            buffer.reset();
            tbs_ProvideCapabilities_r13.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("tbs_ProvideCapabilities_r13", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("tbs_ProvideCapabilities_r13", -1);
         }

         // wlan_ProvideCapabilities_r13

         if (wlan_ProvideCapabilities_r13 != null) {
            buffer.reset();
            wlan_ProvideCapabilities_r13.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("wlan_ProvideCapabilities_r13", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("wlan_ProvideCapabilities_r13", -1);
         }

         // bt_ProvideCapabilities_r13

         if (bt_ProvideCapabilities_r13 != null) {
            buffer.reset();
            bt_ProvideCapabilities_r13.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("bt_ProvideCapabilities_r13", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("bt_ProvideCapabilities_r13", -1);
         }

         // nr_ECID_ProvideCapabilities_r16

         if (nr_ECID_ProvideCapabilities_r16 != null) {
            buffer.reset();
            nr_ECID_ProvideCapabilities_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("nr_ECID_ProvideCapabilities_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("nr_ECID_ProvideCapabilities_r16", -1);
         }

         // nr_Multi_RTT_ProvideCapabilities_r16

         if (nr_Multi_RTT_ProvideCapabilities_r16 != null) {
            buffer.reset();
            nr_Multi_RTT_ProvideCapabilities_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("nr_Multi_RTT_ProvideCapabilities_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("nr_Multi_RTT_ProvideCapabilities_r16", -1);
         }

         // nr_DL_AoD_ProvideCapabilities_r16

         if (nr_DL_AoD_ProvideCapabilities_r16 != null) {
            buffer.reset();
            nr_DL_AoD_ProvideCapabilities_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("nr_DL_AoD_ProvideCapabilities_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("nr_DL_AoD_ProvideCapabilities_r16", -1);
         }

         // nr_DL_TDOA_ProvideCapabilities_r16

         if (nr_DL_TDOA_ProvideCapabilities_r16 != null) {
            buffer.reset();
            nr_DL_TDOA_ProvideCapabilities_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("nr_DL_TDOA_ProvideCapabilities_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("nr_DL_TDOA_ProvideCapabilities_r16", -1);
         }

         // nr_UL_ProvideCapabilities_r16

         if (nr_UL_ProvideCapabilities_r16 != null) {
            buffer.reset();
            nr_UL_ProvideCapabilities_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("nr_UL_ProvideCapabilities_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("nr_UL_ProvideCapabilities_r16", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
