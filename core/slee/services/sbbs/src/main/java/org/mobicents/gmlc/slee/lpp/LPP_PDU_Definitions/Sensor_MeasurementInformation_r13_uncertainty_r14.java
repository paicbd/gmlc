/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class Sensor_MeasurementInformation_r13_uncertainty_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   protected Asn1Integer range_r14;
   protected Asn1Integer confidence_r14;

   public Sensor_MeasurementInformation_r13_uncertainty_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Sensor_MeasurementInformation_r13_uncertainty_r14 (
      Asn1Integer range_r14_,
      Asn1Integer confidence_r14_
   ) throws Asn1Exception {
      super();
      setRange_r14 (range_r14_);
      setConfidence_r14 (confidence_r14_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Sensor_MeasurementInformation_r13_uncertainty_r14 (long range_r14_,
      long confidence_r14_
   ) throws Asn1Exception {
      super();
      setRange_r14 (range_r14_);
      setConfidence_r14 (confidence_r14_);
   }

   public void init () {
      range_r14 = null;
      confidence_r14 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Sensor_MeasurementInformation_r13_uncertainty_r14) ) return false;

      Sensor_MeasurementInformation_r13_uncertainty_r14 rhs = (Sensor_MeasurementInformation_r13_uncertainty_r14) obj;

      if (range_r14 == null) {
         if (rhs.range_r14 != null) return false;
      }
      else {
         if (!range_r14.equals(rhs.range_r14)) {
            return false;
         }
      }

      if (confidence_r14 == null) {
         if (rhs.confidence_r14 != null) return false;
      }
      else {
         if (!confidence_r14.equals(rhs.confidence_r14)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (range_r14 != null) __code = 31*__code + range_r14.hashCode();
      if (confidence_r14 != null) __code = 31*__code + confidence_r14.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Range_r14
    */
   public Asn1Integer getRange_r14 () {
      return range_r14;
   }

   public void setRange_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 1000))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.range_r14 = value;
   }

   public void setRange_r14 (long value) 
      throws Asn1Exception
   {
      setRange_r14 (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for Confidence_r14
    */
   public Asn1Integer getConfidence_r14 () {
      return confidence_r14;
   }

   public void setConfidence_r14 (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 1 && value.value <= 100))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.confidence_r14 = value;
   }

   public void setConfidence_r14 (long value) 
      throws Asn1Exception
   {
      setConfidence_r14 (new Asn1Integer(value));
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return range_r14;
         case 1: return confidence_r14;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "range-r14";
         case 1: return "confidence-r14";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode range_r14

      buffer.getContext().eventDispatcher.startElement("range_r14", -1);

      range_r14 = new Asn1Integer();
      range_r14.decode (buffer, 0, 1000);
      buffer.getContext().eventDispatcher.endElement("range_r14", -1);

      // decode confidence_r14

      buffer.getContext().eventDispatcher.startElement("confidence_r14", -1);

      confidence_r14 = new Asn1Integer();
      confidence_r14.decode (buffer, 1, 100);
      buffer.getContext().eventDispatcher.endElement("confidence_r14", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode range_r14

      if (range_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("range_r14", -1);

         range_r14.encode (buffer, 0, 1000);

         buffer.getContext().eventDispatcher.endElement("range_r14", -1);
      }
      else throw new Asn1MissingRequiredException ("range_r14");

      // encode confidence_r14

      if (confidence_r14 != null) {
         buffer.getContext().eventDispatcher.startElement("confidence_r14", -1);

         confidence_r14.encode (buffer, 1, 100);

         buffer.getContext().eventDispatcher.endElement("confidence_r14", -1);
      }
      else throw new Asn1MissingRequiredException ("confidence_r14");

   }

}
