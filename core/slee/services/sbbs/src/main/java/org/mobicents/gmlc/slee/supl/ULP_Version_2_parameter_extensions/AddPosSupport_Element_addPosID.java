/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Version_2_parameter_extensions;

import com.objsys.asn1j.runtime.*;

public class AddPosSupport_Element_addPosID extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_Version_2_parameter_extensionsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_Version_2_parameter_extensionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _MBS = 0;
   public static final int _NR_DL_TDOA = 1;
   public static final int _NR_DL_AOD = 2;
   public static final int _NR_MULTI_RTT = 3;
   public static final int _NR_DL_E_CID = 4;
   public static final int _NR_UL_TDOA = 5;
   public static final int _NR_UL_AOA = 6;

   // Singleton instances of AddPosSupport_Element_addPosID
   protected static final AddPosSupport_Element_addPosID _mBS = new AddPosSupport_Element_addPosID(0);
   protected static final AddPosSupport_Element_addPosID _nr_DL_TDOA = new AddPosSupport_Element_addPosID(1);
   protected static final AddPosSupport_Element_addPosID _nr_DL_AoD = new AddPosSupport_Element_addPosID(2);
   protected static final AddPosSupport_Element_addPosID _nr_Multi_RTT = new AddPosSupport_Element_addPosID(3);
   protected static final AddPosSupport_Element_addPosID _nr_DL_E_CID = new AddPosSupport_Element_addPosID(4);
   protected static final AddPosSupport_Element_addPosID _nr_UL_TDOA = new AddPosSupport_Element_addPosID(5);
   protected static final AddPosSupport_Element_addPosID _nr_UL_AoA = new AddPosSupport_Element_addPosID(6);
   private static AddPosSupport_Element_addPosID __undefined = new AddPosSupport_Element_addPosID(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    */
   protected AddPosSupport_Element_addPosID (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for mBS.
    */
   public static AddPosSupport_Element_addPosID mBS() {
      return _mBS;
   }

   /**
    * Singleton accessor method for nr_DL_TDOA.
    */
   public static AddPosSupport_Element_addPosID nr_DL_TDOA() {
      return _nr_DL_TDOA;
   }

   /**
    * Singleton accessor method for nr_DL_AoD.
    */
   public static AddPosSupport_Element_addPosID nr_DL_AoD() {
      return _nr_DL_AoD;
   }

   /**
    * Singleton accessor method for nr_Multi_RTT.
    */
   public static AddPosSupport_Element_addPosID nr_Multi_RTT() {
      return _nr_Multi_RTT;
   }

   /**
    * Singleton accessor method for nr_DL_E_CID.
    */
   public static AddPosSupport_Element_addPosID nr_DL_E_CID() {
      return _nr_DL_E_CID;
   }

   /**
    * Singleton accessor method for nr_UL_TDOA.
    */
   public static AddPosSupport_Element_addPosID nr_UL_TDOA() {
      return _nr_UL_TDOA;
   }

   /**
    * Singleton accessor method for nr_UL_AoA.
    */
   public static AddPosSupport_Element_addPosID nr_UL_AoA() {
      return _nr_UL_AoA;
   }

   /** Undefined value. */
   protected static AddPosSupport_Element_addPosID __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return AddPosSupport_Element_addPosID.valueOf( AddPosSupport_Element_addPosID.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static AddPosSupport_Element_addPosID valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return mBS();
         case 1: return nr_DL_TDOA();
         case 2: return nr_DL_AoD();
         case 3: return nr_Multi_RTT();
         case 4: return nr_DL_E_CID();
         case 5: return nr_UL_TDOA();
         case 6: return nr_UL_AoA();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         switch (ui) {
            case 0: ret = 1; break;
            case 1: ret = 2; break;
            case 2: ret = 3; break;
            case 3: ret = 4; break;
            case 4: ret = 5; break;
            case 5: ret = 6; break;
            default: ret = 0x7fffffff; break;
         }
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (1);

         switch (ui) {
            case 0: ret =  0; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      boolean extbit = false;

      switch ((int)value) {
         case 0: ui = 0; /* mBS */break;
         case 1: ui = 0; /* nr_DL_TDOA */extbit = true; break;
         case 2: ui = 1; /* nr_DL_AoD */extbit = true; break;
         case 3: ui = 2; /* nr_Multi_RTT */extbit = true; break;
         case 4: ui = 3; /* nr_DL_E_CID */extbit = true; break;
         case 5: ui = 4; /* nr_UL_TDOA */extbit = true; break;
         case 6: ui = 5; /* nr_UL_AoA */extbit = true; break;
         default:
            ui = (int) value;
            extbit = true;
      }

      buffer.encodeBit (extbit, "extbit");

      if (extbit) {
         buffer.encodeSmallNonNegWholeNumber (ui);
      }
      else {
         buffer.encodeConsWholeNumber (ui, 1);
      }
   }

}
