/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_IonosphericModelReq extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-IonosphericModelReq";
   }

   protected Asn1BitString klobucharModelReq;  // optional
   protected Asn1Null neQuickModelReq;  // optional
   protected Asn1Null klobucharModel2Req_r16;  // optional
   protected Asn1OpenExt extElem1;

   public GNSS_IonosphericModelReq () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GNSS_IonosphericModelReq (
      Asn1BitString klobucharModelReq_,
      Asn1Null neQuickModelReq_,
      Asn1Null klobucharModel2Req_r16_
   ) throws Asn1Exception {
      super();
      setKlobucharModelReq (klobucharModelReq_);
      setNeQuickModelReq (neQuickModelReq_);
      setKlobucharModel2Req_r16 (klobucharModel2Req_r16_);
   }

   public void init () {
      klobucharModelReq = null;
      neQuickModelReq = null;
      klobucharModel2Req_r16 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof GNSS_IonosphericModelReq) ) return false;

      GNSS_IonosphericModelReq rhs = (GNSS_IonosphericModelReq) obj;

      if (klobucharModelReq == null) {
         if (rhs.klobucharModelReq != null) return false;
      }
      else {
         if (!klobucharModelReq.equals(rhs.klobucharModelReq)) {
            return false;
         }
      }

      if (neQuickModelReq == null) {
         if (rhs.neQuickModelReq != null) return false;
      }
      else {
         if (!neQuickModelReq.equals(rhs.neQuickModelReq)) {
            return false;
         }
      }

      if (klobucharModel2Req_r16 == null) {
         if (rhs.klobucharModel2Req_r16 != null) return false;
      }
      else {
         if (!klobucharModel2Req_r16.equals(rhs.klobucharModel2Req_r16)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (klobucharModelReq != null) __code = 31*__code + klobucharModelReq.hashCode();
      if (neQuickModelReq != null) __code = 31*__code + neQuickModelReq.hashCode();
      if (klobucharModel2Req_r16 != null) __code = 31*__code + klobucharModel2Req_r16.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for KlobucharModelReq
    */
   public Asn1BitString getKlobucharModelReq () {
      return klobucharModelReq;
   }

   public void setKlobucharModelReq (Asn1BitString value) 
      throws Asn1Exception
   {
      if (!(value.getLength() == 2)) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.klobucharModelReq = value;
   }

   public boolean hasKlobucharModelReq () {
      return (klobucharModelReq != null);
   }

   /**
    * Accessor/mutator methods for NeQuickModelReq
    */
   public Asn1Null getNeQuickModelReq () {
      return neQuickModelReq;
   }

   public void setNeQuickModelReq (Asn1Null value) {
      this.neQuickModelReq = value;
   }

   public boolean hasNeQuickModelReq () {
      return (neQuickModelReq != null);
   }

   /**
    * Accessor/mutator methods for KlobucharModel2Req_r16
    */
   public Asn1Null getKlobucharModel2Req_r16 () {
      return klobucharModel2Req_r16;
   }

   public void setKlobucharModel2Req_r16 (Asn1Null value) {
      this.klobucharModel2Req_r16 = value;
   }

   public boolean hasKlobucharModel2Req_r16 () {
      return (klobucharModel2Req_r16 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return klobucharModelReq;
         case 1: return neQuickModelReq;
         case 2: return klobucharModel2Req_r16;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "klobucharModelReq";
         case 1: return "neQuickModelReq";
         case 2: return "klobucharModel2Req-r16";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean klobucharModelReqPresent = buffer.decodeBit ("klobucharModelReqPresent");
      boolean neQuickModelReqPresent = buffer.decodeBit ("neQuickModelReqPresent");

      // decode klobucharModelReq

      if (klobucharModelReqPresent) {
         buffer.getContext().eventDispatcher.startElement("klobucharModelReq", -1);

         klobucharModelReq = new Asn1BitString();
         klobucharModelReq.decode (buffer, 2, 2);
         buffer.getContext().eventDispatcher.endElement("klobucharModelReq", -1);
      }
      else {
         klobucharModelReq = null;
      }

      // decode neQuickModelReq

      if (neQuickModelReqPresent) {
         buffer.getContext().eventDispatcher.startElement("neQuickModelReq", -1);

         neQuickModelReq = Asn1Null.NULL_VALUE;
         neQuickModelReq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("neQuickModelReq", -1);
      }
      else {
         neQuickModelReq = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("klobucharModel2Req_r16Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode klobucharModel2Req_r16

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("klobucharModel2Req_r16", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            klobucharModel2Req_r16 = new Asn1Null();
            klobucharModel2Req_r16.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("klobucharModel2Req_r16", -1);

         }
         else {
            klobucharModel2Req_r16 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((klobucharModel2Req_r16 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((klobucharModelReq != null), null);
      buffer.encodeBit ((neQuickModelReq != null), null);

      // encode klobucharModelReq

      if (klobucharModelReq != null) {
         buffer.getContext().eventDispatcher.startElement("klobucharModelReq", -1);

         klobucharModelReq.encode (buffer, 2, 2);

         buffer.getContext().eventDispatcher.endElement("klobucharModelReq", -1);
      }

      // encode neQuickModelReq

      if (neQuickModelReq != null) {
         buffer.getContext().eventDispatcher.startElement("neQuickModelReq", -1);

         neQuickModelReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("neQuickModelReq", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((klobucharModel2Req_r16 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // klobucharModel2Req_r16

         if (klobucharModel2Req_r16 != null) {
            buffer.reset();
            klobucharModel2Req_r16.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("klobucharModel2Req_r16", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("klobucharModel2Req_r16", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
