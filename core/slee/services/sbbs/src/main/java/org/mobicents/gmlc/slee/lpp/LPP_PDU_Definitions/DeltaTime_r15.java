/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class DeltaTime_r15 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "DeltaTime-r15";
   }

   // Choice element identifier constants
   public final static byte _DELTATIMESEC_R15 = 1;
   public final static byte _DELTATIMESFN_R15 = 2;
   public final static byte _EXTELEM1 = 3;

   public DeltaTime_r15 () {
      super();
   }

   public DeltaTime_r15 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _DELTATIMESEC_R15: return "deltaTimeSec_r15";
      case _DELTATIMESFN_R15: return "deltaTimeSFN_r15";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for deltaTimeSec_r15
    */
   public Asn1Integer getDeltaTimeSec_r15 () {
      return (choiceID == _DELTATIMESEC_R15) ? (Asn1Integer)element : null;
   }
   public void setDeltaTimeSec_r15 (Asn1Integer value) {
      setElement (_DELTATIMESEC_R15, value);
   }
   public boolean isDeltaTimeSec_r15 () {
      return (choiceID == _DELTATIMESEC_R15);
   }

   /**
    * Accessor/mutator methods for deltaTimeSFN_r15
    */
   public Asn1Integer getDeltaTimeSFN_r15 () {
      return (choiceID == _DELTATIMESFN_R15) ? (Asn1Integer)element : null;
   }
   public void setDeltaTimeSFN_r15 (Asn1Integer value) {
      setElement (_DELTATIMESFN_R15, value);
   }
   public boolean isDeltaTimeSFN_r15 () {
      return (choiceID == _DELTATIMESFN_R15);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (2, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // deltaTimeSec_r15
            case 0: { 
               Asn1Integer deltaTimeSec_r15;
               element = deltaTimeSec_r15 = new Asn1Integer();
               deltaTimeSec_r15.decode (buffer, 1, 16384);
               break;
            }

            // deltaTimeSFN_r15
            case 1: { 
               Asn1Integer deltaTimeSFN_r15;
               element = deltaTimeSFN_r15 = new Asn1Integer();
               deltaTimeSFN_r15.decode (buffer, 1, 4096);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 3;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         setElement (_EXTELEM1, openType);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 2);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 2, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // deltaTimeSec_r15
            case _DELTATIMESEC_R15:
               Asn1Integer deltaTimeSec_r15 = (Asn1Integer) element;
               deltaTimeSec_r15.encode (buffer, 1, 16384);
               break;

            // deltaTimeSFN_r15
            case _DELTATIMESFN_R15:
               Asn1Integer deltaTimeSFN_r15 = (Asn1Integer) element;
               deltaTimeSFN_r15.encode (buffer, 1, 4096);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 3);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1OpenType openType = (Asn1OpenType) element;
         buffer.byteAlign();
         openType.encode (buffer);
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
