/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class Acknowledgement extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Acknowledgement";
   }

   protected Asn1Boolean ackRequested;
   protected SequenceNumber ackIndicator;  // optional

   public Acknowledgement () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Acknowledgement (
      Asn1Boolean ackRequested_,
      SequenceNumber ackIndicator_
   ) throws Asn1Exception {
      super();
      setAckRequested (ackRequested_);
      setAckIndicator (ackIndicator_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public Acknowledgement (
      Asn1Boolean ackRequested_
   ) throws Asn1Exception {
      super();
      setAckRequested (ackRequested_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Acknowledgement (boolean ackRequested_,
      long ackIndicator_
   ) throws Asn1Exception {
      super();
      setAckRequested (ackRequested_);
      setAckIndicator (ackIndicator_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public Acknowledgement (
      boolean ackRequested_
   ) throws Asn1Exception {
      super();
      setAckRequested (ackRequested_);
   }

   public void init () {
      ackRequested = null;
      ackIndicator = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Acknowledgement) ) return false;

      Acknowledgement rhs = (Acknowledgement) obj;

      if (ackRequested == null) {
         if (rhs.ackRequested != null) return false;
      }
      else {
         if (!ackRequested.equals(rhs.ackRequested)) {
            return false;
         }
      }

      if (ackIndicator == null) {
         if (rhs.ackIndicator != null) return false;
      }
      else {
         if (!ackIndicator.equals(rhs.ackIndicator)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (ackRequested != null) __code = 31*__code + ackRequested.hashCode();
      if (ackIndicator != null) __code = 31*__code + ackIndicator.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for AckRequested
    */
   public Asn1Boolean getAckRequested () {
      return ackRequested;
   }

   public void setAckRequested (Asn1Boolean value) {
      this.ackRequested = value;
   }

   public void setAckRequested (boolean value) {
      setAckRequested (new Asn1Boolean(value));
   }

   /**
    * Accessor/mutator methods for AckIndicator
    */
   public SequenceNumber getAckIndicator () {
      return ackIndicator;
   }

   public void setAckIndicator (SequenceNumber value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.ackIndicator = value;
   }

   public void setAckIndicator (long value) 
      throws Asn1Exception
   {
      setAckIndicator (new SequenceNumber(value));
   }
   public boolean hasAckIndicator () {
      return (ackIndicator != null);
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ackRequested;
         case 1: return ackIndicator;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ackRequested";
         case 1: return "ackIndicator";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean ackIndicatorPresent = buffer.decodeBit ("ackIndicatorPresent");

      // decode ackRequested

      buffer.getContext().eventDispatcher.startElement("ackRequested", -1);

      ackRequested = new Asn1Boolean();
      ackRequested.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ackRequested", -1);

      // decode ackIndicator

      if (ackIndicatorPresent) {
         buffer.getContext().eventDispatcher.startElement("ackIndicator", -1);

         ackIndicator = new SequenceNumber();
         ackIndicator.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ackIndicator", -1);
      }
      else {
         ackIndicator = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((ackIndicator != null), null);

      // encode ackRequested

      if (ackRequested != null) {
         buffer.getContext().eventDispatcher.startElement("ackRequested", -1);

         ackRequested.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ackRequested", -1);
      }
      else throw new Asn1MissingRequiredException ("ackRequested");

      // encode ackIndicator

      if (ackIndicator != null) {
         buffer.getContext().eventDispatcher.startElement("ackIndicator", -1);

         ackIndicator.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ackIndicator", -1);
      }

   }

}
