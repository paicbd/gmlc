/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.ULP_Components;

import com.objsys.asn1j.runtime.*;

public class Velocity extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Velocity";
   }

   // Choice element identifier constants
   public final static byte _HORVEL = 1;
   public final static byte _HORANDVERVEL = 2;
   public final static byte _HORVELUNCERT = 3;
   public final static byte _HORANDVERUNCERT = 4;
   public final static byte _EXTELEM1 = 5;

   public Velocity () {
      super();
   }

   public Velocity (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _HORVEL: return "horvel";
      case _HORANDVERVEL: return "horandvervel";
      case _HORVELUNCERT: return "horveluncert";
      case _HORANDVERUNCERT: return "horandveruncert";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for horvel
    */
   public Horvel getHorvel () {
      return (choiceID == _HORVEL) ? (Horvel)element : null;
   }
   public void setHorvel (Horvel value) {
      setElement (_HORVEL, value);
   }
   public boolean isHorvel () {
      return (choiceID == _HORVEL);
   }

   /**
    * Accessor/mutator methods for horandvervel
    */
   public Horandvervel getHorandvervel () {
      return (choiceID == _HORANDVERVEL) ? (Horandvervel)element : null;
   }
   public void setHorandvervel (Horandvervel value) {
      setElement (_HORANDVERVEL, value);
   }
   public boolean isHorandvervel () {
      return (choiceID == _HORANDVERVEL);
   }

   /**
    * Accessor/mutator methods for horveluncert
    */
   public Horveluncert getHorveluncert () {
      return (choiceID == _HORVELUNCERT) ? (Horveluncert)element : null;
   }
   public void setHorveluncert (Horveluncert value) {
      setElement (_HORVELUNCERT, value);
   }
   public boolean isHorveluncert () {
      return (choiceID == _HORVELUNCERT);
   }

   /**
    * Accessor/mutator methods for horandveruncert
    */
   public Horandveruncert getHorandveruncert () {
      return (choiceID == _HORANDVERUNCERT) ? (Horandveruncert)element : null;
   }
   public void setHorandveruncert (Horandveruncert value) {
      setElement (_HORANDVERUNCERT, value);
   }
   public boolean isHorandveruncert () {
      return (choiceID == _HORANDVERUNCERT);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (4, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // horvel
            case 0: { 
               Horvel horvel;
               element = horvel = new Horvel();
               horvel.decode (buffer);
               break;
            }

            // horandvervel
            case 1: { 
               Horandvervel horandvervel;
               element = horandvervel = new Horandvervel();
               horandvervel.decode (buffer);
               break;
            }

            // horveluncert
            case 2: { 
               Horveluncert horveluncert;
               element = horveluncert = new Horveluncert();
               horveluncert.decode (buffer);
               break;
            }

            // horandveruncert
            case 3: { 
               Horandveruncert horandveruncert;
               element = horandveruncert = new Horandveruncert();
               horandveruncert.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 5;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         setElement (_EXTELEM1, openType);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 4);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 4, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // horvel
            case _HORVEL:
               Horvel horvel = (Horvel) element;
               horvel.encode (buffer);
               break;

            // horandvervel
            case _HORANDVERVEL:
               Horandvervel horandvervel = (Horandvervel) element;
               horandvervel.encode (buffer);
               break;

            // horveluncert
            case _HORVELUNCERT:
               Horveluncert horveluncert = (Horveluncert) element;
               horveluncert.encode (buffer);
               break;

            // horandveruncert
            case _HORANDVERUNCERT:
               Horandveruncert horandveruncert = (Horandveruncert) element;
               horandveruncert.encode (buffer);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 5);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1OpenType openType = (Asn1OpenType) element;
         buffer.byteAlign();
         openType.encode (buffer);
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
