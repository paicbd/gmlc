/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class A_GNSS_ProvideCapabilities extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "A-GNSS-ProvideCapabilities";
   }

   protected GNSS_SupportList gnss_SupportList;  // optional
   protected AssistanceDataSupportList assistanceDataSupportList;  // optional
   protected LocationCoordinateTypes locationCoordinateTypes;  // optional
   protected VelocityTypes velocityTypes;  // optional
   protected PositioningModes periodicalReportingNotSupported_r14;  // optional
   protected A_GNSS_ProvideCapabilities_idleStateForMeasurements_r14 idleStateForMeasurements_r14 = null;  // optional
   protected A_GNSS_ProvideCapabilities_periodicAssistanceData_r15 periodicAssistanceData_r15;  // optional
   protected Asn1OpenExt extElem1;

   public A_GNSS_ProvideCapabilities () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public A_GNSS_ProvideCapabilities (
      GNSS_SupportList gnss_SupportList_,
      AssistanceDataSupportList assistanceDataSupportList_,
      LocationCoordinateTypes locationCoordinateTypes_,
      VelocityTypes velocityTypes_,
      PositioningModes periodicalReportingNotSupported_r14_,
      A_GNSS_ProvideCapabilities_idleStateForMeasurements_r14 idleStateForMeasurements_r14_,
      A_GNSS_ProvideCapabilities_periodicAssistanceData_r15 periodicAssistanceData_r15_
   ) throws Asn1Exception {
      super();
      setGnss_SupportList (gnss_SupportList_);
      setAssistanceDataSupportList (assistanceDataSupportList_);
      setLocationCoordinateTypes (locationCoordinateTypes_);
      setVelocityTypes (velocityTypes_);
      setPeriodicalReportingNotSupported_r14 (periodicalReportingNotSupported_r14_);
      setIdleStateForMeasurements_r14 (idleStateForMeasurements_r14_);
      setPeriodicAssistanceData_r15 (periodicAssistanceData_r15_);
   }

   public void init () {
      gnss_SupportList = null;
      assistanceDataSupportList = null;
      locationCoordinateTypes = null;
      velocityTypes = null;
      periodicalReportingNotSupported_r14 = null;
      idleStateForMeasurements_r14 = null;
      periodicAssistanceData_r15 = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof A_GNSS_ProvideCapabilities) ) return false;

      A_GNSS_ProvideCapabilities rhs = (A_GNSS_ProvideCapabilities) obj;

      if (gnss_SupportList == null) {
         if (rhs.gnss_SupportList != null) return false;
      }
      else {
         if (!gnss_SupportList.equals(rhs.gnss_SupportList)) {
            return false;
         }
      }

      if (assistanceDataSupportList == null) {
         if (rhs.assistanceDataSupportList != null) return false;
      }
      else {
         if (!assistanceDataSupportList.equals(rhs.assistanceDataSupportList)) {
            return false;
         }
      }

      if (locationCoordinateTypes == null) {
         if (rhs.locationCoordinateTypes != null) return false;
      }
      else {
         if (!locationCoordinateTypes.equals(rhs.locationCoordinateTypes)) {
            return false;
         }
      }

      if (velocityTypes == null) {
         if (rhs.velocityTypes != null) return false;
      }
      else {
         if (!velocityTypes.equals(rhs.velocityTypes)) {
            return false;
         }
      }

      if (periodicalReportingNotSupported_r14 == null) {
         if (rhs.periodicalReportingNotSupported_r14 != null) return false;
      }
      else {
         if (!periodicalReportingNotSupported_r14.equals(rhs.periodicalReportingNotSupported_r14)) {
            return false;
         }
      }

      if (idleStateForMeasurements_r14 == null) {
         if (rhs.idleStateForMeasurements_r14 != null) return false;
      }
      else {
         if (!idleStateForMeasurements_r14.equals(rhs.idleStateForMeasurements_r14)) {
            return false;
         }
      }

      if (periodicAssistanceData_r15 == null) {
         if (rhs.periodicAssistanceData_r15 != null) return false;
      }
      else {
         if (!periodicAssistanceData_r15.equals(rhs.periodicAssistanceData_r15)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (gnss_SupportList != null) __code = 31*__code + gnss_SupportList.hashCode();
      if (assistanceDataSupportList != null) __code = 31*__code + assistanceDataSupportList.hashCode();
      if (locationCoordinateTypes != null) __code = 31*__code + locationCoordinateTypes.hashCode();
      if (velocityTypes != null) __code = 31*__code + velocityTypes.hashCode();
      if (periodicalReportingNotSupported_r14 != null) __code = 31*__code + periodicalReportingNotSupported_r14.hashCode();
      if (idleStateForMeasurements_r14 != null) __code = 31*__code + idleStateForMeasurements_r14.hashCode();
      if (periodicAssistanceData_r15 != null) __code = 31*__code + periodicAssistanceData_r15.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for Gnss_SupportList
    */
   public GNSS_SupportList getGnss_SupportList () {
      return gnss_SupportList;
   }

   public void setGnss_SupportList (GNSS_SupportList value) 
      throws Asn1Exception
   {
      if (!((value.getElements().length >= 1 && value.getElements().length <= 16))) {
         throw new Asn1ConsVioException ("value.getElements().length", value.getElements().length);
      }

      this.gnss_SupportList = value;
   }

   public boolean hasGnss_SupportList () {
      return (gnss_SupportList != null);
   }

   /**
    * Accessor/mutator methods for AssistanceDataSupportList
    */
   public AssistanceDataSupportList getAssistanceDataSupportList () {
      return assistanceDataSupportList;
   }

   public void setAssistanceDataSupportList (AssistanceDataSupportList value) {
      this.assistanceDataSupportList = value;
   }

   public boolean hasAssistanceDataSupportList () {
      return (assistanceDataSupportList != null);
   }

   /**
    * Accessor/mutator methods for LocationCoordinateTypes
    */
   public LocationCoordinateTypes getLocationCoordinateTypes () {
      return locationCoordinateTypes;
   }

   public void setLocationCoordinateTypes (LocationCoordinateTypes value) {
      this.locationCoordinateTypes = value;
   }

   public boolean hasLocationCoordinateTypes () {
      return (locationCoordinateTypes != null);
   }

   /**
    * Accessor/mutator methods for VelocityTypes
    */
   public VelocityTypes getVelocityTypes () {
      return velocityTypes;
   }

   public void setVelocityTypes (VelocityTypes value) {
      this.velocityTypes = value;
   }

   public boolean hasVelocityTypes () {
      return (velocityTypes != null);
   }

   /**
    * Accessor/mutator methods for PeriodicalReportingNotSupported_r14
    */
   public PositioningModes getPeriodicalReportingNotSupported_r14 () {
      return periodicalReportingNotSupported_r14;
   }

   public void setPeriodicalReportingNotSupported_r14 (PositioningModes value) {
      this.periodicalReportingNotSupported_r14 = value;
   }

   public boolean hasPeriodicalReportingNotSupported_r14 () {
      return (periodicalReportingNotSupported_r14 != null);
   }

   /**
    * Accessor/mutator methods for IdleStateForMeasurements_r14
    */
   public A_GNSS_ProvideCapabilities_idleStateForMeasurements_r14 getIdleStateForMeasurements_r14 () {
      return idleStateForMeasurements_r14;
   }

   public void setIdleStateForMeasurements_r14 (A_GNSS_ProvideCapabilities_idleStateForMeasurements_r14 value) {
      this.idleStateForMeasurements_r14 = value;
   }

   public boolean hasIdleStateForMeasurements_r14 () {
      return (idleStateForMeasurements_r14 != null);
   }

   /**
    * Accessor/mutator methods for PeriodicAssistanceData_r15
    */
   public A_GNSS_ProvideCapabilities_periodicAssistanceData_r15 getPeriodicAssistanceData_r15 () {
      return periodicAssistanceData_r15;
   }

   public void setPeriodicAssistanceData_r15 (A_GNSS_ProvideCapabilities_periodicAssistanceData_r15 value) 
      throws Asn1Exception
   {
      if (!((value.getLength() >= 1 && value.getLength() <= 8))) {
         throw new Asn1ConsVioException ("value.getLength()", value.getLength());
      }

      this.periodicAssistanceData_r15 = value;
   }

   public boolean hasPeriodicAssistanceData_r15 () {
      return (periodicAssistanceData_r15 != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gnss_SupportList;
         case 1: return assistanceDataSupportList;
         case 2: return locationCoordinateTypes;
         case 3: return velocityTypes;
         case 4: return periodicalReportingNotSupported_r14;
         case 5: return idleStateForMeasurements_r14;
         case 6: return periodicAssistanceData_r15;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gnss-SupportList";
         case 1: return "assistanceDataSupportList";
         case 2: return "locationCoordinateTypes";
         case 3: return "velocityTypes";
         case 4: return "periodicalReportingNotSupported-r14";
         case 5: return "idleStateForMeasurements-r14";
         case 6: return "periodicAssistanceData-r15";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean gnss_SupportListPresent = buffer.decodeBit ("gnss_SupportListPresent");
      boolean assistanceDataSupportListPresent = buffer.decodeBit ("assistanceDataSupportListPresent");
      boolean locationCoordinateTypesPresent = buffer.decodeBit ("locationCoordinateTypesPresent");
      boolean velocityTypesPresent = buffer.decodeBit ("velocityTypesPresent");

      // decode gnss_SupportList

      if (gnss_SupportListPresent) {
         buffer.getContext().eventDispatcher.startElement("gnss_SupportList", -1);

         gnss_SupportList = new GNSS_SupportList();
         gnss_SupportList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("gnss_SupportList", -1);
      }
      else {
         gnss_SupportList = null;
      }

      // decode assistanceDataSupportList

      if (assistanceDataSupportListPresent) {
         buffer.getContext().eventDispatcher.startElement("assistanceDataSupportList", -1);

         assistanceDataSupportList = new AssistanceDataSupportList();
         assistanceDataSupportList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("assistanceDataSupportList", -1);
      }
      else {
         assistanceDataSupportList = null;
      }

      // decode locationCoordinateTypes

      if (locationCoordinateTypesPresent) {
         buffer.getContext().eventDispatcher.startElement("locationCoordinateTypes", -1);

         locationCoordinateTypes = new LocationCoordinateTypes();
         locationCoordinateTypes.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("locationCoordinateTypes", -1);
      }
      else {
         locationCoordinateTypes = null;
      }

      // decode velocityTypes

      if (velocityTypesPresent) {
         buffer.getContext().eventDispatcher.startElement("velocityTypes", -1);

         velocityTypes = new VelocityTypes();
         velocityTypes.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("velocityTypes", -1);
      }
      else {
         velocityTypes = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("periodicalReportingNotSupported_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("idleStateForMeasurements_r14Present");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("periodicAssistanceData_r15Present");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode periodicalReportingNotSupported_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("periodicalReportingNotSupported_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            periodicalReportingNotSupported_r14 = new PositioningModes();
            periodicalReportingNotSupported_r14.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("periodicalReportingNotSupported_r14", -1);

         }
         else {
            periodicalReportingNotSupported_r14 = null;
         }

         // decode idleStateForMeasurements_r14

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("idleStateForMeasurements_r14", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = A_GNSS_ProvideCapabilities_idleStateForMeasurements_r14.decodeEnumValue (buffer);
               idleStateForMeasurements_r14 = A_GNSS_ProvideCapabilities_idleStateForMeasurements_r14.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("idleStateForMeasurements_r14", -1);

         }
         else {
            idleStateForMeasurements_r14 = null;
         }

         // decode periodicAssistanceData_r15

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("periodicAssistanceData_r15", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            periodicAssistanceData_r15 = new A_GNSS_ProvideCapabilities_periodicAssistanceData_r15();
            periodicAssistanceData_r15.decode (buffer);

            buffer.moveBitCursor (bitidx);
            buffer.getContext().eventDispatcher.endElement("periodicAssistanceData_r15", -1);

         }
         else {
            periodicAssistanceData_r15 = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = ((periodicalReportingNotSupported_r14 != null) ||
      (idleStateForMeasurements_r14 != null) ||
      (periodicAssistanceData_r15 != null) ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((gnss_SupportList != null), null);
      buffer.encodeBit ((assistanceDataSupportList != null), null);
      buffer.encodeBit ((locationCoordinateTypes != null), null);
      buffer.encodeBit ((velocityTypes != null), null);

      // encode gnss_SupportList

      if (gnss_SupportList != null) {
         buffer.getContext().eventDispatcher.startElement("gnss_SupportList", -1);

         gnss_SupportList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gnss_SupportList", -1);
      }

      // encode assistanceDataSupportList

      if (assistanceDataSupportList != null) {
         buffer.getContext().eventDispatcher.startElement("assistanceDataSupportList", -1);

         assistanceDataSupportList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("assistanceDataSupportList", -1);
      }

      // encode locationCoordinateTypes

      if (locationCoordinateTypes != null) {
         buffer.getContext().eventDispatcher.startElement("locationCoordinateTypes", -1);

         locationCoordinateTypes.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("locationCoordinateTypes", -1);
      }

      // encode velocityTypes

      if (velocityTypes != null) {
         buffer.getContext().eventDispatcher.startElement("velocityTypes", -1);

         velocityTypes.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("velocityTypes", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 3;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit ((periodicalReportingNotSupported_r14 != null), null);
         buffer.encodeBit ((idleStateForMeasurements_r14 != null), null);
         buffer.encodeBit ((periodicAssistanceData_r15 != null), null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         // periodicalReportingNotSupported_r14

         if (periodicalReportingNotSupported_r14 != null) {
            buffer.reset();
            periodicalReportingNotSupported_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("periodicalReportingNotSupported_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("periodicalReportingNotSupported_r14", -1);
         }

         // idleStateForMeasurements_r14

         if (idleStateForMeasurements_r14 != null) {
            buffer.reset();
            idleStateForMeasurements_r14.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("idleStateForMeasurements_r14", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("idleStateForMeasurements_r14", -1);
         }

         // periodicAssistanceData_r15

         if (periodicAssistanceData_r15 != null) {
            buffer.reset();
            periodicAssistanceData_r15.encode (buffer);
            buffer.getContext().eventDispatcher.startElement("periodicAssistanceData_r15", -1);

            mainBuffer.encodeOpenType (buffer, null);

            buffer.getContext().eventDispatcher.endElement("periodicAssistanceData_r15", -1);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
