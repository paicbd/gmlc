/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.lpp.LPP_PDU_Definitions;

import com.objsys.asn1j.runtime.*;

public class GNSS_ClockModel extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPP_PDU_DefinitionsRtkey._rtkey);
      Asn1Type._setLicLocation(_LPP_PDU_DefinitionsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "GNSS-ClockModel";
   }

   // Choice element identifier constants
   public final static byte _STANDARDCLOCKMODELLIST = 1;
   public final static byte _NAV_CLOCKMODEL = 2;
   public final static byte _CNAV_CLOCKMODEL = 3;
   public final static byte _GLONASS_CLOCKMODEL = 4;
   public final static byte _SBAS_CLOCKMODEL = 5;
   public final static byte _BDS_CLOCKMODEL_R12 = 6;
   public final static byte _BDS_CLOCKMODEL2_R16 = 7;
   public final static byte _NAVIC_CLOCKMODEL_R16 = 8;
   public final static byte _EXTELEM1 = 9;

   public GNSS_ClockModel () {
      super();
   }

   public GNSS_ClockModel (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _STANDARDCLOCKMODELLIST: return "standardClockModelList";
      case _NAV_CLOCKMODEL: return "nav_ClockModel";
      case _CNAV_CLOCKMODEL: return "cnav_ClockModel";
      case _GLONASS_CLOCKMODEL: return "glonass_ClockModel";
      case _SBAS_CLOCKMODEL: return "sbas_ClockModel";
      case _BDS_CLOCKMODEL_R12: return "bds_ClockModel_r12";
      case _BDS_CLOCKMODEL2_R16: return "bds_ClockModel2_r16";
      case _NAVIC_CLOCKMODEL_R16: return "navic_ClockModel_r16";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   /**
    * Accessor/mutator methods for standardClockModelList
    */
   public StandardClockModelList getStandardClockModelList () {
      return (choiceID == _STANDARDCLOCKMODELLIST) ? (StandardClockModelList)element : null;
   }
   public void setStandardClockModelList (StandardClockModelList value) {
      setElement (_STANDARDCLOCKMODELLIST, value);
   }
   public boolean isStandardClockModelList () {
      return (choiceID == _STANDARDCLOCKMODELLIST);
   }

   /**
    * Accessor/mutator methods for nav_ClockModel
    */
   public NAV_ClockModel getNav_ClockModel () {
      return (choiceID == _NAV_CLOCKMODEL) ? (NAV_ClockModel)element : null;
   }
   public void setNav_ClockModel (NAV_ClockModel value) {
      setElement (_NAV_CLOCKMODEL, value);
   }
   public boolean isNav_ClockModel () {
      return (choiceID == _NAV_CLOCKMODEL);
   }

   /**
    * Accessor/mutator methods for cnav_ClockModel
    */
   public CNAV_ClockModel getCnav_ClockModel () {
      return (choiceID == _CNAV_CLOCKMODEL) ? (CNAV_ClockModel)element : null;
   }
   public void setCnav_ClockModel (CNAV_ClockModel value) {
      setElement (_CNAV_CLOCKMODEL, value);
   }
   public boolean isCnav_ClockModel () {
      return (choiceID == _CNAV_CLOCKMODEL);
   }

   /**
    * Accessor/mutator methods for glonass_ClockModel
    */
   public GLONASS_ClockModel getGlonass_ClockModel () {
      return (choiceID == _GLONASS_CLOCKMODEL) ? (GLONASS_ClockModel)element : null;
   }
   public void setGlonass_ClockModel (GLONASS_ClockModel value) {
      setElement (_GLONASS_CLOCKMODEL, value);
   }
   public boolean isGlonass_ClockModel () {
      return (choiceID == _GLONASS_CLOCKMODEL);
   }

   /**
    * Accessor/mutator methods for sbas_ClockModel
    */
   public SBAS_ClockModel getSbas_ClockModel () {
      return (choiceID == _SBAS_CLOCKMODEL) ? (SBAS_ClockModel)element : null;
   }
   public void setSbas_ClockModel (SBAS_ClockModel value) {
      setElement (_SBAS_CLOCKMODEL, value);
   }
   public boolean isSbas_ClockModel () {
      return (choiceID == _SBAS_CLOCKMODEL);
   }

   /**
    * Accessor/mutator methods for bds_ClockModel_r12
    */
   public BDS_ClockModel_r12 getBds_ClockModel_r12 () {
      return (choiceID == _BDS_CLOCKMODEL_R12) ? (BDS_ClockModel_r12)element : null;
   }
   public void setBds_ClockModel_r12 (BDS_ClockModel_r12 value) {
      setElement (_BDS_CLOCKMODEL_R12, value);
   }
   public boolean isBds_ClockModel_r12 () {
      return (choiceID == _BDS_CLOCKMODEL_R12);
   }

   /**
    * Accessor/mutator methods for bds_ClockModel2_r16
    */
   public BDS_ClockModel2_r16 getBds_ClockModel2_r16 () {
      return (choiceID == _BDS_CLOCKMODEL2_R16) ? (BDS_ClockModel2_r16)element : null;
   }
   public void setBds_ClockModel2_r16 (BDS_ClockModel2_r16 value) {
      setElement (_BDS_CLOCKMODEL2_R16, value);
   }
   public boolean isBds_ClockModel2_r16 () {
      return (choiceID == _BDS_CLOCKMODEL2_R16);
   }

   /**
    * Accessor/mutator methods for navic_ClockModel_r16
    */
   public NavIC_ClockModel_r16 getNavic_ClockModel_r16 () {
      return (choiceID == _NAVIC_CLOCKMODEL_R16) ? (NavIC_ClockModel_r16)element : null;
   }
   public void setNavic_ClockModel_r16 (NavIC_ClockModel_r16 value) {
      setElement (_NAVIC_CLOCKMODEL_R16, value);
   }
   public boolean isNavic_ClockModel_r16 () {
      return (choiceID == _NAVIC_CLOCKMODEL_R16);
   }

   /**
    * Accessor/mutator methods for extElem1
    */
   public Asn1OpenType getExtElem1 () {
      return (choiceID == _EXTELEM1) ? (Asn1OpenType)element : null;
   }
   public void setExtElem1 (Asn1OpenType value) {
      setElement (_EXTELEM1, value);
   }
   public boolean isExtElem1 () {
      return (choiceID == _EXTELEM1);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (5, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // standardClockModelList
            case 0: { 
               StandardClockModelList standardClockModelList;
               element = standardClockModelList = new StandardClockModelList();
               standardClockModelList.decode (buffer);
               break;
            }

            // nav_ClockModel
            case 1: { 
               NAV_ClockModel nav_ClockModel;
               element = nav_ClockModel = new NAV_ClockModel();
               nav_ClockModel.decode (buffer);
               break;
            }

            // cnav_ClockModel
            case 2: { 
               CNAV_ClockModel cnav_ClockModel;
               element = cnav_ClockModel = new CNAV_ClockModel();
               cnav_ClockModel.decode (buffer);
               break;
            }

            // glonass_ClockModel
            case 3: { 
               GLONASS_ClockModel glonass_ClockModel;
               element = glonass_ClockModel = new GLONASS_ClockModel();
               glonass_ClockModel.decode (buffer);
               break;
            }

            // sbas_ClockModel
            case 4: { 
               SBAS_ClockModel sbas_ClockModel;
               element = sbas_ClockModel = new SBAS_ClockModel();
               sbas_ClockModel.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 6;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // bds_ClockModel_r12
            case 0: { 
               BDS_ClockModel_r12 bds_ClockModel_r12;
               element = bds_ClockModel_r12 = new BDS_ClockModel_r12();
               bds_ClockModel_r12.decode (buffer);
               break;
            }

            // bds_ClockModel2_r16
            case 1: { 
               BDS_ClockModel2_r16 bds_ClockModel2_r16;
               element = bds_ClockModel2_r16 = new BDS_ClockModel2_r16();
               bds_ClockModel2_r16.decode (buffer);
               break;
            }

            // navic_ClockModel_r16
            case 2: { 
               NavIC_ClockModel_r16 navic_ClockModel_r16;
               element = navic_ClockModel_r16 = new NavIC_ClockModel_r16();
               navic_ClockModel_r16.decode (buffer);
               break;
            }

            // extElem1
            case 3: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (choiceID > 5);
      buffer.encodeBit (extbit, "extbit");

      if (!extbit) {

         // Encode choice index value

         buffer.encodeConsWholeNumber (choiceID - 1, 5, "index");

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         switch (choiceID) {
            // standardClockModelList
            case _STANDARDCLOCKMODELLIST:
               StandardClockModelList standardClockModelList = (StandardClockModelList) element;
               standardClockModelList.encode (buffer);
               break;

            // nav_ClockModel
            case _NAV_CLOCKMODEL:
               NAV_ClockModel nav_ClockModel = (NAV_ClockModel) element;
               nav_ClockModel.encode (buffer);
               break;

            // cnav_ClockModel
            case _CNAV_CLOCKMODEL:
               CNAV_ClockModel cnav_ClockModel = (CNAV_ClockModel) element;
               cnav_ClockModel.encode (buffer);
               break;

            // glonass_ClockModel
            case _GLONASS_CLOCKMODEL:
               GLONASS_ClockModel glonass_ClockModel = (GLONASS_ClockModel) element;
               glonass_ClockModel.encode (buffer);
               break;

            // sbas_ClockModel
            case _SBAS_CLOCKMODEL:
               SBAS_ClockModel sbas_ClockModel = (SBAS_ClockModel) element;
               sbas_ClockModel.encode (buffer);
               break;

            default:
            throw new Asn1InvalidChoiceOptionException();
         }
      }
      else {
         // Encode extension choice index value

         buffer.encodeSmallNonNegWholeNumber (choiceID - 6);

         // Encode extension element data value

         buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

         Asn1PerEncodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());
         Asn1OpenType openType;

         switch (choiceID) {
            // bds_ClockModel_r12
            case _BDS_CLOCKMODEL_R12:
               BDS_ClockModel_r12 bds_ClockModel_r12 = (BDS_ClockModel_r12) element;
               bds_ClockModel_r12.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            // bds_ClockModel2_r16
            case _BDS_CLOCKMODEL2_R16:
               BDS_ClockModel2_r16 bds_ClockModel2_r16 = (BDS_ClockModel2_r16) element;
               bds_ClockModel2_r16.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            // navic_ClockModel_r16
            case _NAVIC_CLOCKMODEL_R16:
               NavIC_ClockModel_r16 navic_ClockModel_r16 = (NavIC_ClockModel_r16) element;
               navic_ClockModel_r16.encode (buffer);
               openType = new Asn1OpenType 
                  (buffer.getBuffer(), 0, buffer.getMsgByteCnt());
               break;

            default:
               openType = (Asn1OpenType)getElement();
         }

         buffer = savedBuffer;
         if (openType != null) {
            buffer.byteAlign();
            openType.encode (buffer);
         }
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

}
