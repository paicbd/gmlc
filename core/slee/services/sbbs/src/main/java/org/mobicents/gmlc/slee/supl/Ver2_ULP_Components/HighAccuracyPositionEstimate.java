/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.0, Date: 07-May-2021.
 */
package org.mobicents.gmlc.slee.supl.Ver2_ULP_Components;

import com.objsys.asn1j.runtime.*;

public class HighAccuracyPositionEstimate extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_Ver2_ULP_ComponentsRtkey._rtkey);
      Asn1Type._setLicLocation(_Ver2_ULP_ComponentsRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "HighAccuracyPositionEstimate";
   }

   protected Asn1Integer degreesLatitude;
   protected Asn1Integer degreesLongitude;
   protected Asn1Integer uncertaintySemiMajor;
   protected Asn1Integer uncertaintySemiMinor;
   protected Asn1Integer orientationMajorAxis;
   protected Asn1Integer horizontalConfidence;
   protected HighAccuracyAltitudeInfo highAccuracyAltitudeInfo;  // optional
   protected Asn1OpenExt extElem1;

   public HighAccuracyPositionEstimate () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public HighAccuracyPositionEstimate (
      Asn1Integer degreesLatitude_,
      Asn1Integer degreesLongitude_,
      Asn1Integer uncertaintySemiMajor_,
      Asn1Integer uncertaintySemiMinor_,
      Asn1Integer orientationMajorAxis_,
      Asn1Integer horizontalConfidence_,
      HighAccuracyAltitudeInfo highAccuracyAltitudeInfo_
   ) throws Asn1Exception {
      super();
      setDegreesLatitude (degreesLatitude_);
      setDegreesLongitude (degreesLongitude_);
      setUncertaintySemiMajor (uncertaintySemiMajor_);
      setUncertaintySemiMinor (uncertaintySemiMinor_);
      setOrientationMajorAxis (orientationMajorAxis_);
      setHorizontalConfidence (horizontalConfidence_);
      setHighAccuracyAltitudeInfo (highAccuracyAltitudeInfo_);
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public HighAccuracyPositionEstimate (
      Asn1Integer degreesLatitude_,
      Asn1Integer degreesLongitude_,
      Asn1Integer uncertaintySemiMajor_,
      Asn1Integer uncertaintySemiMinor_,
      Asn1Integer orientationMajorAxis_,
      Asn1Integer horizontalConfidence_
   ) throws Asn1Exception {
      super();
      setDegreesLatitude (degreesLatitude_);
      setDegreesLongitude (degreesLongitude_);
      setUncertaintySemiMajor (uncertaintySemiMajor_);
      setUncertaintySemiMinor (uncertaintySemiMinor_);
      setOrientationMajorAxis (orientationMajorAxis_);
      setHorizontalConfidence (horizontalConfidence_);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public HighAccuracyPositionEstimate (long degreesLatitude_,
      long degreesLongitude_,
      long uncertaintySemiMajor_,
      long uncertaintySemiMinor_,
      long orientationMajorAxis_,
      long horizontalConfidence_,
      HighAccuracyAltitudeInfo highAccuracyAltitudeInfo_
   ) throws Asn1Exception {
      super();
      setDegreesLatitude (degreesLatitude_);
      setDegreesLongitude (degreesLongitude_);
      setUncertaintySemiMajor (uncertaintySemiMajor_);
      setUncertaintySemiMinor (uncertaintySemiMinor_);
      setOrientationMajorAxis (orientationMajorAxis_);
      setHorizontalConfidence (horizontalConfidence_);
      setHighAccuracyAltitudeInfo (highAccuracyAltitudeInfo_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public HighAccuracyPositionEstimate (
      long degreesLatitude_,
      long degreesLongitude_,
      long uncertaintySemiMajor_,
      long uncertaintySemiMinor_,
      long orientationMajorAxis_,
      long horizontalConfidence_
   ) throws Asn1Exception {
      super();
      setDegreesLatitude (degreesLatitude_);
      setDegreesLongitude (degreesLongitude_);
      setUncertaintySemiMajor (uncertaintySemiMajor_);
      setUncertaintySemiMinor (uncertaintySemiMinor_);
      setOrientationMajorAxis (orientationMajorAxis_);
      setHorizontalConfidence (horizontalConfidence_);
   }

   public void init () {
      degreesLatitude = null;
      degreesLongitude = null;
      uncertaintySemiMajor = null;
      uncertaintySemiMinor = null;
      orientationMajorAxis = null;
      horizontalConfidence = null;
      highAccuracyAltitudeInfo = null;
      extElem1 = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof HighAccuracyPositionEstimate) ) return false;

      HighAccuracyPositionEstimate rhs = (HighAccuracyPositionEstimate) obj;

      if (degreesLatitude == null) {
         if (rhs.degreesLatitude != null) return false;
      }
      else {
         if (!degreesLatitude.equals(rhs.degreesLatitude)) {
            return false;
         }
      }

      if (degreesLongitude == null) {
         if (rhs.degreesLongitude != null) return false;
      }
      else {
         if (!degreesLongitude.equals(rhs.degreesLongitude)) {
            return false;
         }
      }

      if (uncertaintySemiMajor == null) {
         if (rhs.uncertaintySemiMajor != null) return false;
      }
      else {
         if (!uncertaintySemiMajor.equals(rhs.uncertaintySemiMajor)) {
            return false;
         }
      }

      if (uncertaintySemiMinor == null) {
         if (rhs.uncertaintySemiMinor != null) return false;
      }
      else {
         if (!uncertaintySemiMinor.equals(rhs.uncertaintySemiMinor)) {
            return false;
         }
      }

      if (orientationMajorAxis == null) {
         if (rhs.orientationMajorAxis != null) return false;
      }
      else {
         if (!orientationMajorAxis.equals(rhs.orientationMajorAxis)) {
            return false;
         }
      }

      if (horizontalConfidence == null) {
         if (rhs.horizontalConfidence != null) return false;
      }
      else {
         if (!horizontalConfidence.equals(rhs.horizontalConfidence)) {
            return false;
         }
      }

      if (highAccuracyAltitudeInfo == null) {
         if (rhs.highAccuracyAltitudeInfo != null) return false;
      }
      else {
         if (!highAccuracyAltitudeInfo.equals(rhs.highAccuracyAltitudeInfo)) {
            return false;
         }
      }

      if (extElem1 == null) {
         if (rhs.extElem1 != null) return false;
      }
      else {
         if (!extElem1.equals(rhs.extElem1)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (degreesLatitude != null) __code = 31*__code + degreesLatitude.hashCode();
      if (degreesLongitude != null) __code = 31*__code + degreesLongitude.hashCode();
      if (uncertaintySemiMajor != null) __code = 31*__code + uncertaintySemiMajor.hashCode();
      if (uncertaintySemiMinor != null) __code = 31*__code + uncertaintySemiMinor.hashCode();
      if (orientationMajorAxis != null) __code = 31*__code + orientationMajorAxis.hashCode();
      if (horizontalConfidence != null) __code = 31*__code + horizontalConfidence.hashCode();
      if (highAccuracyAltitudeInfo != null) __code = 31*__code + highAccuracyAltitudeInfo.hashCode();
      if (extElem1 != null) __code = 31*__code + extElem1.hashCode();

      return __code;
   }

   /**
    * Accessor/mutator methods for DegreesLatitude
    */
   public Asn1Integer getDegreesLatitude () {
      return degreesLatitude;
   }

   public void setDegreesLatitude (Asn1Integer value) 
      throws Asn1Exception
   {
      this.degreesLatitude = value;
   }

   public void setDegreesLatitude (long value) 
      throws Asn1Exception
   {
      setDegreesLatitude (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for DegreesLongitude
    */
   public Asn1Integer getDegreesLongitude () {
      return degreesLongitude;
   }

   public void setDegreesLongitude (Asn1Integer value) 
      throws Asn1Exception
   {
      this.degreesLongitude = value;
   }

   public void setDegreesLongitude (long value) 
      throws Asn1Exception
   {
      setDegreesLongitude (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for UncertaintySemiMajor
    */
   public Asn1Integer getUncertaintySemiMajor () {
      return uncertaintySemiMajor;
   }

   public void setUncertaintySemiMajor (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.uncertaintySemiMajor = value;
   }

   public void setUncertaintySemiMajor (long value) 
      throws Asn1Exception
   {
      setUncertaintySemiMajor (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for UncertaintySemiMinor
    */
   public Asn1Integer getUncertaintySemiMinor () {
      return uncertaintySemiMinor;
   }

   public void setUncertaintySemiMinor (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 255))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.uncertaintySemiMinor = value;
   }

   public void setUncertaintySemiMinor (long value) 
      throws Asn1Exception
   {
      setUncertaintySemiMinor (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for OrientationMajorAxis
    */
   public Asn1Integer getOrientationMajorAxis () {
      return orientationMajorAxis;
   }

   public void setOrientationMajorAxis (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 179))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.orientationMajorAxis = value;
   }

   public void setOrientationMajorAxis (long value) 
      throws Asn1Exception
   {
      setOrientationMajorAxis (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for HorizontalConfidence
    */
   public Asn1Integer getHorizontalConfidence () {
      return horizontalConfidence;
   }

   public void setHorizontalConfidence (Asn1Integer value) 
      throws Asn1Exception
   {
      if (!((value.value >= 0 && value.value <= 100))) {
         throw new Asn1ConsVioException ("value.value", value.value);
      }

      this.horizontalConfidence = value;
   }

   public void setHorizontalConfidence (long value) 
      throws Asn1Exception
   {
      setHorizontalConfidence (new Asn1Integer(value));
   }

   /**
    * Accessor/mutator methods for HighAccuracyAltitudeInfo
    */
   public HighAccuracyAltitudeInfo getHighAccuracyAltitudeInfo () {
      return highAccuracyAltitudeInfo;
   }

   public void setHighAccuracyAltitudeInfo (HighAccuracyAltitudeInfo value) {
      this.highAccuracyAltitudeInfo = value;
   }

   public boolean hasHighAccuracyAltitudeInfo () {
      return (highAccuracyAltitudeInfo != null);
   }

   /**
    * Accessor/mutator methods for ExtElem1
    */
   public Asn1OpenExt getExtElem1 () {
      return extElem1;
   }

   public void setExtElem1 (Asn1OpenExt value) {
      this.extElem1 = value;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return degreesLatitude;
         case 1: return degreesLongitude;
         case 2: return uncertaintySemiMajor;
         case 3: return uncertaintySemiMinor;
         case 4: return orientationMajorAxis;
         case 5: return horizontalConfidence;
         case 6: return highAccuracyAltitudeInfo;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "degreesLatitude";
         case 1: return "degreesLongitude";
         case 2: return "uncertaintySemiMajor";
         case 3: return "uncertaintySemiMinor";
         case 4: return "orientationMajorAxis";
         case 5: return "horizontalConfidence";
         case 6: return "highAccuracyAltitudeInfo";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean highAccuracyAltitudeInfoPresent = buffer.decodeBit ("highAccuracyAltitudeInfoPresent");

      // decode degreesLatitude

      buffer.getContext().eventDispatcher.startElement("degreesLatitude", -1);

      degreesLatitude = new Asn1Integer();
      degreesLatitude.decode (buffer, -2147483648, 2147483647);
      buffer.getContext().eventDispatcher.endElement("degreesLatitude", -1);

      // decode degreesLongitude

      buffer.getContext().eventDispatcher.startElement("degreesLongitude", -1);

      degreesLongitude = new Asn1Integer();
      degreesLongitude.decode (buffer, -2147483648, 2147483647);
      buffer.getContext().eventDispatcher.endElement("degreesLongitude", -1);

      // decode uncertaintySemiMajor

      buffer.getContext().eventDispatcher.startElement("uncertaintySemiMajor", -1);

      uncertaintySemiMajor = new Asn1Integer();
      uncertaintySemiMajor.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("uncertaintySemiMajor", -1);

      // decode uncertaintySemiMinor

      buffer.getContext().eventDispatcher.startElement("uncertaintySemiMinor", -1);

      uncertaintySemiMinor = new Asn1Integer();
      uncertaintySemiMinor.decode (buffer, 0, 255);
      buffer.getContext().eventDispatcher.endElement("uncertaintySemiMinor", -1);

      // decode orientationMajorAxis

      buffer.getContext().eventDispatcher.startElement("orientationMajorAxis", -1);

      orientationMajorAxis = new Asn1Integer();
      orientationMajorAxis.decode (buffer, 0, 179);
      buffer.getContext().eventDispatcher.endElement("orientationMajorAxis", -1);

      // decode horizontalConfidence

      buffer.getContext().eventDispatcher.startElement("horizontalConfidence", -1);

      horizontalConfidence = new Asn1Integer();
      horizontalConfidence.decode (buffer, 0, 100);
      buffer.getContext().eventDispatcher.endElement("horizontalConfidence", -1);

      // decode highAccuracyAltitudeInfo

      if (highAccuracyAltitudeInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("highAccuracyAltitudeInfo", -1);

         highAccuracyAltitudeInfo = new HighAccuracyAltitudeInfo();
         highAccuracyAltitudeInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("highAccuracyAltitudeInfo", -1);
      }
      else {
         highAccuracyAltitudeInfo = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((highAccuracyAltitudeInfo != null), null);

      // encode degreesLatitude

      if (degreesLatitude != null) {
         buffer.getContext().eventDispatcher.startElement("degreesLatitude", -1);

         degreesLatitude.encode (buffer, -2147483648, 2147483647);

         buffer.getContext().eventDispatcher.endElement("degreesLatitude", -1);
      }
      else throw new Asn1MissingRequiredException ("degreesLatitude");

      // encode degreesLongitude

      if (degreesLongitude != null) {
         buffer.getContext().eventDispatcher.startElement("degreesLongitude", -1);

         degreesLongitude.encode (buffer, -2147483648, 2147483647);

         buffer.getContext().eventDispatcher.endElement("degreesLongitude", -1);
      }
      else throw new Asn1MissingRequiredException ("degreesLongitude");

      // encode uncertaintySemiMajor

      if (uncertaintySemiMajor != null) {
         buffer.getContext().eventDispatcher.startElement("uncertaintySemiMajor", -1);

         uncertaintySemiMajor.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("uncertaintySemiMajor", -1);
      }
      else throw new Asn1MissingRequiredException ("uncertaintySemiMajor");

      // encode uncertaintySemiMinor

      if (uncertaintySemiMinor != null) {
         buffer.getContext().eventDispatcher.startElement("uncertaintySemiMinor", -1);

         uncertaintySemiMinor.encode (buffer, 0, 255);

         buffer.getContext().eventDispatcher.endElement("uncertaintySemiMinor", -1);
      }
      else throw new Asn1MissingRequiredException ("uncertaintySemiMinor");

      // encode orientationMajorAxis

      if (orientationMajorAxis != null) {
         buffer.getContext().eventDispatcher.startElement("orientationMajorAxis", -1);

         orientationMajorAxis.encode (buffer, 0, 179);

         buffer.getContext().eventDispatcher.endElement("orientationMajorAxis", -1);
      }
      else throw new Asn1MissingRequiredException ("orientationMajorAxis");

      // encode horizontalConfidence

      if (horizontalConfidence != null) {
         buffer.getContext().eventDispatcher.startElement("horizontalConfidence", -1);

         horizontalConfidence.encode (buffer, 0, 100);

         buffer.getContext().eventDispatcher.endElement("horizontalConfidence", -1);
      }
      else throw new Asn1MissingRequiredException ("horizontalConfidence");

      // encode highAccuracyAltitudeInfo

      if (highAccuracyAltitudeInfo != null) {
         buffer.getContext().eventDispatcher.startElement("highAccuracyAltitudeInfo", -1);

         highAccuracyAltitudeInfo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("highAccuracyAltitudeInfo", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

}
